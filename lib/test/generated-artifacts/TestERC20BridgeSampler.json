{
    "schemaVersion": "2.0.0",
    "contractName": "TestERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [],
                "name": "BANCOR_ETH_ADDRESS",
                "outputs": [
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "FAILURE_ADDRESS",
                "outputs": [
                    {
                        "internalType": "address payable",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "tokenAddresses",
                        "type": "address[]"
                    }
                ],
                "name": "createTokenExchanges",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "enableFailTrigger",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "eth2Dai",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerEth2Dai",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "addr",
                        "type": "address"
                    }
                ],
                "name": "getCode",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "code",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "kyber",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerKyberNetwork",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBalancerV2Vault",
                                "name": "vault",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct MixinBalancerV2.BalancerV2BridgeData",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "curveAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "exchangeFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "int128",
                                "name": "fromCoinIdx",
                                "type": "int128"
                            },
                            {
                                "internalType": "int128",
                                "name": "toCoinIdx",
                                "type": "int128"
                            }
                        ],
                        "internalType": "struct MixinCurve.CurveBridgeData",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBalancerV2Vault",
                                "name": "vault",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct MixinBalancerV2.BalancerV2BridgeData",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "curveAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "exchangeFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "int128",
                                "name": "fromCoinIdx",
                                "type": "int128"
                            },
                            {
                                "internalType": "int128",
                                "name": "toCoinIdx",
                                "type": "int128"
                            }
                        ],
                        "internalType": "struct MixinCurve.CurveBridgeData",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromBancor",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromDodo",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromDodoV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMooniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromOasis",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromShell",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "intermediateAssetAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "uniswapV2Router",
                "outputs": [
                    {
                        "internalType": "contract TestERC20BridgeSamplerUniswapV2Router01",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((address,bytes32),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "gasUsed": "gas consumed in each sample sell",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,int128,int128),address,address,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "makerToken": "The maker token to buy.",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "The taker token to sell."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed for each sample.",
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "gasUsed": "gas consumed for each sample amount",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((address,bytes32),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,int128,int128),address,address,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "makerToken": "The maker token to buy.",
                        "takerToken": "The taker token to sell.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "Gas consumed per sample.",
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed for each sample amount",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0xC0 DUP2 SWAP1 MSTORE PUSH2 0x140 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xE0 DUP2 SWAP1 MSTORE PUSH2 0x100 DUP2 SWAP1 MSTORE PUSH2 0x120 MSTORE PUSH1 0x40 MLOAD PUSH3 0x66 SWAP1 PUSH3 0x142 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xB2 SWAP1 PUSH3 0x150 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0xCF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0xFE SWAP1 PUSH3 0x15E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x11B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 0x16C JUMP JUMPDEST PUSH2 0x73E DUP1 PUSH3 0xA2BB DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x47A DUP1 PUSH3 0xA9F9 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0xA86 DUP1 PUSH3 0xAE73 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH1 0x60 SHR PUSH2 0x100 MLOAD PUSH1 0x60 SHR PUSH2 0x120 MLOAD PUSH1 0x60 SHR PUSH2 0x140 MLOAD PUSH1 0x60 SHR PUSH2 0xA0FA PUSH3 0x1C1 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x22BA MSTORE DUP1 PUSH2 0x30A2 MSTORE DUP1 PUSH2 0x38F0 MSTORE POP POP POP POP POP POP POP PUSH2 0xA0FA PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8EFFA9EA GT PUSH2 0x21E JUMPI DUP1 PUSH4 0xC7DD6C4F GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xF573C161 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF573C161 EQ PUSH2 0xD0E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xD2E JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0xD4E JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xD6E JUMPI DUP1 PUSH4 0xFEA12A03 EQ PUSH2 0xD9D JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xC8E JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xCAE JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xCCE JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xCEE JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xCC1621C9 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xBF9 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0xC19 JUMPI DUP1 PUSH4 0xCD85E7B5 EQ PUSH2 0xC2E JUMPI DUP1 PUSH4 0xD31B0A8A EQ PUSH2 0xC4E JUMPI DUP1 PUSH4 0xD3CDC04D EQ PUSH2 0xC6E JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xB79 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xBB9 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0xBD9 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x175 JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xAD9 JUMPI DUP1 PUSH4 0xBC4F55BA EQ PUSH2 0xAF9 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xB19 JUMPI DUP1 PUSH4 0xBF60384B EQ PUSH2 0xB39 JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0xB59 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 EQ PUSH2 0xA4A JUMPI DUP1 PUSH4 0xAB3E6210 EQ PUSH2 0xA6A JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0xA8A JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xAB9 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x9A5 JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x9D5 JUMPI DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x9F5 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0xA0A JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0xA2A JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x8EFFA9EA EQ PUSH2 0x925 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x945 JUMPI DUP1 PUSH4 0x9AD732EF EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x985 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x5C71CBE7 GT PUSH2 0x324 JUMPI DUP1 PUSH4 0x78FEE41C GT PUSH2 0x2AC JUMPI DUP1 PUSH4 0x7FEA2AE1 GT PUSH2 0x27B JUMPI DUP1 PUSH4 0x7FEA2AE1 EQ PUSH2 0x880 JUMPI DUP1 PUSH4 0x8D201C22 EQ PUSH2 0x8A0 JUMPI DUP1 PUSH4 0x8D8ABDF0 EQ PUSH2 0x8C0 JUMPI DUP1 PUSH4 0x8DC669FA EQ PUSH2 0x8E0 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x8F5 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x800 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0x7E105CE2 EQ PUSH2 0x840 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x860 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0x771 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0x7280BFFF EQ PUSH2 0x7C0 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7E0 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x5C71CBE7 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x6F1 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x711 JUMPI DUP1 PUSH4 0x686B7EE8 EQ PUSH2 0x731 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x3A7 JUMPI DUP1 PUSH4 0x31268657 GT PUSH2 0x376 JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x624 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x644 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x691 JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x6B1 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x5E4 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x604 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x15DE17DE GT PUSH2 0x3EE JUMPI DUP1 PUSH4 0x15DE17DE EQ PUSH2 0x4CA JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x566 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0x490 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x49A JUMPI PUSH2 0x426 JUMP JUMPDEST CALLDATASIZE PUSH2 0x426 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44B PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x938A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x951F JUMP JUMPDEST PUSH2 0x498 PUSH2 0xFEB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BA PUSH2 0x4B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8991 JUMP JUMPDEST PUSH2 0x102E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9200 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x10D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x517 PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FD5 JUMP JUMPDEST PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x9557 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x110F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x8630 JUMP JUMPDEST PUSH2 0x111E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP3 SWAP2 SWAP1 PUSH2 0x9532 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x146A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0x5CF CALLDATASIZE PUSH1 0x4 PUSH2 0x8B8B JUMP JUMPDEST PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9562 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x16C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x61F CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x1733 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x63F CALLDATASIZE PUSH1 0x4 PUSH2 0x823D JUMP JUMPDEST PUSH2 0x17D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44B PUSH2 0x65F CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x17DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x684 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x8D06 JUMP JUMPDEST PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x964C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x6AC CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x1BF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x6CC CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1C87 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x6EC CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1C94 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x70C CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x1CA2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x72C CALLDATASIZE PUSH1 0x4 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x764 PUSH2 0x75F CALLDATASIZE PUSH1 0x4 PUSH2 0x823D JUMP JUMPDEST PUSH2 0x1DF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x94AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x791 PUSH2 0x78C CALLDATASIZE PUSH1 0x4 PUSH2 0x885E JUMP JUMPDEST PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83D5 JUMP JUMPDEST PUSH2 0x2267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x7DB CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BA PUSH2 0x7FB CALLDATASIZE PUSH1 0x4 PUSH2 0x8991 JUMP JUMPDEST PUSH2 0x2367 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x81B CALLDATASIZE PUSH1 0x4 PUSH2 0x86BB JUMP JUMPDEST PUSH2 0x2377 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x83B CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2537 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x684 PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x7FD5 JUMP JUMPDEST PUSH2 0x2544 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x87B CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x256B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x89B CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE1 JUMP JUMPDEST PUSH2 0x2642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x271B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x8DB CALLDATASIZE PUSH1 0x4 PUSH2 0x8912 JUMP JUMPDEST PUSH2 0x273E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x27CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x915 PUSH2 0x910 CALLDATASIZE PUSH1 0x4 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9C75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x940 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x29FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x960 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2A0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x980 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2A75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x9A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D6F JUMP JUMPDEST PUSH2 0x2A83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C5 PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C96 JUMP JUMPDEST PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9597 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x9F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2C0B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x2C84 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xA25 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2C93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xA45 CALLDATASIZE PUSH1 0x4 PUSH2 0x81C1 JUMP JUMPDEST PUSH2 0x2D02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xA65 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2DA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xA85 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2E12 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAAA PUSH2 0xAA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2E34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x924A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xAD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2F31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xAF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2F54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB14 CALLDATASIZE PUSH1 0x4 PUSH2 0x8912 JUMP JUMPDEST PUSH2 0x2FE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0xB34 CALLDATASIZE PUSH1 0x4 PUSH2 0x8407 JUMP JUMPDEST PUSH2 0x304F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB54 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE1 JUMP JUMPDEST PUSH2 0x314B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB74 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x31B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xB94 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x324C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x325A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x32C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x341D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C5 PUSH2 0xC14 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C96 JUMP JUMPDEST PUSH2 0x34AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x35BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC49 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC69 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC89 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xCA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x81C1 JUMP JUMPDEST PUSH2 0x3600 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xCC9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B8B JUMP JUMPDEST PUSH2 0x36BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0xCE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8456 JUMP JUMPDEST PUSH2 0x389D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xD09 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x3992 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xD29 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x39FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAAA PUSH2 0xD49 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x3A0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x791 PUSH2 0xD69 CALLDATASIZE PUSH1 0x4 PUSH2 0x885E JUMP JUMPDEST PUSH2 0x3B1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD8E PUSH2 0xD89 CALLDATASIZE PUSH1 0x4 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x3E8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9C3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x40AC JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xDC1 DUP7 DUP7 PUSH2 0x40BB JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDD2 JUMPI PUSH2 0xE6F JUMP JUMPDEST PUSH2 0xE69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xE13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE3E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEBB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xFE3 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9CFA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xF6C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF69 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFC0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF9A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF9F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xFDB JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xEC1 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x102B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 DUP8 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1048 JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x1054 DUP9 DUP9 DUP9 DUP9 PUSH2 0x438A JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x109B SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xAB3E6210 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x45BC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST DUP1 MLOAD DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAB86E0A6 ADDRESS DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116F SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x119A JUMPI POP PUSH1 0x1 JUMPDEST POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x11E8 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x122C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1272 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x13B6 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP14 DUP14 DUP14 DUP14 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x12A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x95FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12F8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x138D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x132B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x1335 DUP2 PUSH2 0x47B2 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1341 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1354 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1371 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1387 JUMPI POP PUSH2 0x13B6 JUMP JUMPDEST POP PUSH2 0x13AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9A41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1278 JUMP JUMPDEST POP PUSH2 0x13C1 DUP3 DUP3 PUSH2 0x47E7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1432 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14D8 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153B SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1567 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x15A9 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1647 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x15DA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x162A SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1640 JUMPI POP PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x16B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x168C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1708 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x17CB PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1751 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1777 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17A0 SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x17EA DUP7 DUP7 PUSH2 0x40BB JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17FB JUMPI PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x183E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x1893 JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x185F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1844 JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x18A0 DUP9 DUP4 PUSH2 0x40BB JUMP JUMPDEST SWAP1 POP PUSH2 0x1962 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x18E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x190E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1937 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19A9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A3A SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x92BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A88 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A85 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AC2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1AB6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1ABB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1ACD JUMP JUMPDEST SWAP4 POP PUSH2 0x10FD SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BEC JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B28 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A3A SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x92BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1B68 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9302 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1BB6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1BB3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AC2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BE4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BE9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C37 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C5C SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x4C82 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x4D56 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE2 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D07 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D3F DUP5 DUP5 DUP5 PUSH2 0xE78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xFE3 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D59 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1DDF JUMPI PUSH2 0x1DC6 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x4DB6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D44 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x4DE0 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E47 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1E34 PUSH2 0x78C2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1E2C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1F4F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1E80 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1E92 SWAP2 SWAP1 PUSH2 0x9F8B JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1E9F JUMPI PUSH2 0x1F47 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1EAC JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1EBE SWAP2 SWAP1 PUSH2 0x9F8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ECC SWAP3 SWAP2 SWAP1 PUSH2 0x907A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F09 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F0E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F32 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1E4D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x1FD8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FD0 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x4E44 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x201B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x205F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2079 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20AD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2098 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x225B JUMPI PUSH1 0x60 PUSH2 0x20DB DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x52DA JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x2175 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2121 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x214A SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x42B9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x224C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2191 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x21A6 JUMPI PUSH2 0x224C JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x21B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2244 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x21DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x220B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x221F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2238 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x217C JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x20B3 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22AA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2353 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x232E JUMPI PUSH2 0x2329 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5435 JUMP JUMPDEST PUSH2 0x2331 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2340 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x22B0 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x54E1 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 PUSH1 0x60 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x23CC JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x23F8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9145 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2436 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2473 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x24FD JUMPI PUSH2 0x2502 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x2510 JUMPI PUSH2 0x2510 DUP2 PUSH2 0x55A1 JUMP JUMPDEST PUSH2 0x252D DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2527 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST DUP5 PUSH2 0x55A9 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP5 DUP4 DUP6 PUSH2 0x55BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3F DUP4 EXTCODESIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP1 DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP6 EXTCODECOPY POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x2576 PUSH2 0x78DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25E4 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2609 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2682 SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26F0 SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x5753 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x277E SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x27A3 SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH2 0x27EE PUSH2 0x78F1 JUMP JUMPDEST PUSH2 0x27F6 PUSH2 0x78F1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x28FB JUMPI PUSH2 0x2842 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2814 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A5F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x285C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2871 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x28AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x28F1 JUMPI PUSH1 0x0 PUSH2 0x28D7 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x28EF JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x27FB JUMP JUMPDEST POP DUP2 PUSH2 0x2906 JUMPI PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x29F2 JUMPI PUSH2 0x2939 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2922 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2953 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2968 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29A5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x29E8 JUMPI PUSH1 0x0 PUSH2 0x29CE PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x29E6 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2909 JUMP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP5 DUP4 DUP6 PUSH2 0x5A7B JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A4A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x5BCC JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2AA9 SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP2 PUSH2 0x2AC9 JUMPI INVALID JUMPDEST MOD SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2AE6 DUP9 DUP9 DUP9 PUSH2 0x5D20 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2AF2 JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x2B1B SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9CC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BBB SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BE0 SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C15 PUSH2 0x790B JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2C29 SWAP2 SWAP1 PUSH2 0x8BE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C7A PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C66 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x5E90 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CD7 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2D14 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6092 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D2B JUMPI PUSH2 0x2D9B JUMP JUMPDEST PUSH2 0x2D95 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D6A SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DE7 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP6 DUP5 DUP7 PUSH2 0x61E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP8 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E67 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EB7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F21 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EF6 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP4 SWAP9 SWAP1 SWAP8 POP SWAP3 SWAP6 POP SWAP2 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x64D0 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F94 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2FB9 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3024 SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3068 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3092 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1F4F JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3120 JUMPI PUSH2 0x311B DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x30FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6752 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x312C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3138 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3098 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x318B SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31FA SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3221 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6825 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x329A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x330B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3360 JUMPI DUP6 PUSH1 0x1 DUP3 DUP9 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x332C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3340 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3311 JUMP JUMPDEST POP PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x337C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x33A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33CB SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33F2 SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x345D SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3482 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x34BF DUP9 DUP9 DUP9 PUSH2 0x5D20 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x34CB JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x34F4 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9CC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x350C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3520 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3548 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3594 SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x6BA9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6D97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6E5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3612 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6092 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3629 JUMPI PUSH2 0x2D9B JUMP JUMPDEST PUSH2 0x2D95 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3668 SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3690 SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36F3 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x370B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x371F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3743 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x3761 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x37FF JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x3792 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37E2 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x37F8 JUMPI POP PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x16B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3844 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3872 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x38B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x38E0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xFE3 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3924 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3970 JUMPI PUSH2 0x396B DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x394B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6EBD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3973 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x397F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x38E6 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x39D2 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x6F89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP8 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A3D SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A8D SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F21 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3ACC SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AF1 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3B5E DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3B6B DUP8 PUSH2 0x706F JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BAE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3BC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BF2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3C0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C40 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3C2B JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x3E7F JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x60 DUP1 PUSH2 0x3D77 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP14 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C79 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 DUP16 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3C9F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH2 0x3CC6 DUP16 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CD7 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH2 0x3D11 DUP10 PUSH2 0x3D0C DUP13 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3CFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7107 JUMP JUMPDEST PUSH2 0x52DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D22 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59AB9A6C PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP PUSH2 0x3D72 DUP13 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3D65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x719F JUMP JUMPDEST PUSH2 0x4815 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3D87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3DC4 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x3E4B JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DEA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3E03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E17 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3E33 DUP12 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3C52 JUMP JUMPDEST POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E77 JUMPI PUSH2 0x3E7F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3C46 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E94 PUSH2 0x78F1 JUMP JUMPDEST PUSH2 0x3E9C PUSH2 0x78F1 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3F98 JUMPI PUSH2 0x3ED3 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3F02 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F3F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F44 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3F8E JUMPI PUSH1 0x0 PUSH2 0x3F68 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3F79 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x3F8C JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3EA3 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3FA9 JUMPI POP PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x40A1 JUMPI PUSH2 0x3FDC PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3FC5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3FF6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x400B SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4048 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x404D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x4097 JUMPI PUSH1 0x0 PUSH2 0x4071 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4082 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x4095 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3FAC JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x40D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4101 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x413F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4153 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4177 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x42B0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x41A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x41BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9182 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x422C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4229 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x427A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x425A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x425F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x42B3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4287 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x417C JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x4305 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x95B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x431F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4330 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x138D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x435E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4363 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4378 SWAP2 SWAP1 PUSH2 0x85B8 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x4383 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4416 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4432 SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x444A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x445E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4482 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4497 JUMPI PUSH2 0x45B3 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x45B0 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x44CE JUMPI PUSH2 0x45A8 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x44F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x4509 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452E SWAP3 SWAP2 SWAP1 PUSH2 0x93C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4577 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4574 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4580 JUMPI PUSH2 0x45A8 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x45A6 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x459B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x449B JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x45D3 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4657 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x461D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x464B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 SWAP1 POP PUSH2 0x466B JUMP JUMPDEST PUSH2 0x466B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x71E0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD5BCB9B5 DUP3 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x469A JUMPI DUP10 PUSH2 0x469D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x46BC JUMPI DUP10 PUSH2 0x46BF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46E4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96C2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4711 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4736 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x47A7 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x478D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x47C9 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x47E2 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x47DD SWAP2 SWAP1 PUSH2 0x8EA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x47FC SWAP3 SWAP2 SWAP1 PUSH2 0x9532 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x482F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4859 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x489D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x48AF JUMPI PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4907 PUSH2 0x7955 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4965 PUSH2 0x7955 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x49D0 DUP2 DUP5 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x49FB JUMPI POP POP POP PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A07 DUP4 DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4A33 JUMPI POP POP POP POP PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4C76 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x4BEF JUMPI PUSH2 0x4A93 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7273 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4ACE JUMPI PUSH2 0x4BEF JUMP JUMPDEST PUSH2 0x4AE7 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B22 JUMPI PUSH2 0x4BEF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B2E DUP8 DUP10 PUSH2 0x42B9 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4B40 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B56 JUMPI POP PUSH2 0x4BEF JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x4BE6 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4BAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x4BD2 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x4BE4 JUMPI POP POP PUSH2 0x4BEF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4A44 JUMP JUMPDEST POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4C56 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4C41 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4A36 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C9B SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4CB4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0x4D04 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9BE7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D32 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C7A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4D6D SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D83 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x310DA7B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x9775 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FD DUP4 PUSH2 0x4DDA PUSH2 0x4DCA DUP3 PUSH1 0x1 PUSH2 0x72CB JUMP JUMPDEST PUSH2 0x4DD4 DUP9 DUP8 PUSH2 0x72EF JUMP JUMPDEST SWAP1 PUSH2 0x7320 JUMP JUMPDEST SWAP1 PUSH2 0x733C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4DF7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4E0D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x164B079 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x96F2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x4E6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9846 JUMP JUMPDEST PUSH2 0x4E72 PUSH2 0x797D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4EC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4EE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4FD6 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x4F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x969A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F89 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4F94 DUP2 PUSH2 0x7366 JUMP JUMPDEST ISZERO PUSH2 0x4FCD JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x4FAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4EEE JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x4FE6 JUMPI POP POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x50DC JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5008 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x503C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5027 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50D3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5074 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x508B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x509F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x50B3 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5042 JUMP JUMPDEST POP POP POP POP PUSH2 0x2ACD JUMP JUMPDEST PUSH1 0x60 PUSH2 0x50EC DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x4E44 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5101 JUMPI POP POP POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x511A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x514E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5139 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x52CE JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x52C5 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x517C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x519D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5213 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5242 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x52BB JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x525E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x5271 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x529B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5236 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x515F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5154 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x52F2 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x530E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x996A JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x532E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5359 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x42B0 JUMPI DUP1 ISZERO PUSH2 0x5408 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x5383 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53FB SWAP2 SWAP1 PUSH2 0x8E83 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5416 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5363 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5473 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x54AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x54C7 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x54DA JUMPI PUSH2 0x54D7 DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x54F8 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x550E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8201AA3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0x5545 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x979F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x555E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5596 SWAP2 SWAP1 PUSH2 0x8EA6 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x55D4 SWAP2 SWAP1 PUSH2 0x800D JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x55FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9AD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x5622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x99FE JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x563C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x566A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x990D JUMP JUMPDEST PUSH2 0x569C DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x567C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71E0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x56D6 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9E9E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x572C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8586 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x573E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x575D PUSH2 0x799B JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5771 SWAP2 SWAP1 PUSH2 0x8A79 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x57F5 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x57BE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x57EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x580C JUMP JUMPDEST DUP2 MLOAD PUSH2 0x580C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x583B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5867 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x588B SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP13 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x58C5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9802 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5903 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5940 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5958 JUMPI PUSH2 0x5958 DUP2 PUSH2 0x55A1 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x59CA JUMPI SELFBALANCE SWAP6 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH2 0x5A50 DUP4 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59FA SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A4A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP1 PUSH2 0x72CB JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5A6A DUP4 DUP4 DUP4 PUSH2 0x7572 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ACD DUP4 DUP4 PUSH2 0x7599 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5A95 SWAP2 SWAP1 PUSH2 0x8767 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x5ABE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x99AF JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5AD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5B06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH2 0x5B18 DUP3 DUP7 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x567C JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x5B50 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9EEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5BA6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8586 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BD6 PUSH2 0x78DA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5BEA SWAP2 SWAP1 PUSH2 0x88D7 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x5C04 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH2 0x5C0C PUSH2 0x79C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 MSTORE DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH2 0x5C69 PUSH2 0x799B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD SWAP2 MLOAD PUSH4 0x52BBBE29 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x52BBBE29 SWAP1 PUSH2 0x5CC2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5CF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D14 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D5E JUMPI DUP7 PUSH2 0x5D74 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D97 JUMPI DUP7 PUSH2 0x5DAD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x5DE1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9111 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E35 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x82A2 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x5E51 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2ACD SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x5E61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x5E87 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2ACD SWAP1 POP JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5EA9 SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5EE1 JUMPI PUSH2 0x5EDC PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH2 0x5F43 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x5F10 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F72 JUMPI DUP11 PUSH2 0x5F74 JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F94 JUMPI DUP12 PUSH2 0x5F96 JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FC2 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9723 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6014 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6085 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x606B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x607F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C5 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x60F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6119 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8270 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x61B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x6157 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x616F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x61AB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8270 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x61C7 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x45B3 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x61D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6201 SWAP2 SWAP1 PUSH2 0x8767 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x622A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x98C1 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6244 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x62B9 JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x628A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x62B9 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x62D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9A76 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6302 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x637F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6345 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x635F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x639E JUMP JUMPDEST PUSH2 0x639E DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x638F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB77D239B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB77D239B SWAP1 DUP4 SWAP1 PUSH2 0x63D8 SWAP1 DUP7 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9464 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x642A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x645A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1BEC JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x64C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x64E7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x64F7 DUP9 DUP4 DUP10 DUP10 PUSH2 0x75C3 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x65FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x653F SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x656D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0x65A4 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x9827 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x65F6 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP PUSH2 0x47A7 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6709 JUMPI PUSH2 0x662B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0x665C SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9F75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x668A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66AE SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x47A7 JUMP JUMPDEST PUSH2 0x671D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x5CC2 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F49 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x677A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x67B8 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x67F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x67F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x680C JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x42B0 JUMPI PUSH2 0x681C DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x682F PUSH2 0x78DA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6843 SWAP2 SWAP1 PUSH2 0x8DAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6873 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x688B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x689F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68C3 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x69CB JUMPI PUSH2 0x6966 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x691D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6931 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6955 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0x6994 SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x69C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x6B79 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6B79 JUMPI PUSH1 0x0 PUSH2 0x6A6E DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6A5F SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7320 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6ABF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AE3 SWAP2 SWAP1 PUSH2 0x8EC9 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x6AFB DUP4 PUSH2 0x4DDA DUP12 DUP6 PUSH2 0x72EF JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x6B15 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x6B43 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x5D14 DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59FA SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BC3 SWAP2 SWAP1 PUSH2 0x87AB JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x6BDE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP9 PUSH2 0x71E0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C7B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x8DAE7333 PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8DAE7333 SWAP1 PUSH2 0x6C22 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9F2A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C74 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP PUSH2 0x6D8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH2 0x6CA9 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6CC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6CD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CF9 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x733E7383 PUSH1 0xE1 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE67CE706 SWAP1 PUSH2 0x6D39 SWAP1 DUP8 SWAP1 DUP11 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9F2A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D67 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D8B SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6DB0 SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6DC9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x7703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x19740AC1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x65D02B04 SWAP1 PUSH2 0x6DFE SWAP1 DUP11 SWAP1 DUP11 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x965F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6E2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E50 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E72 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x6E88 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD5BCB9B5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD5BCB9B5 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x96C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6EE7 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F25 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F60 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F65 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6F79 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5E87 JUMPI PUSH2 0x2C7A DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FA2 SWAP2 SWAP1 PUSH2 0x87EC JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6FBB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x7703 JUMP JUMPDEST DUP1 PUSH2 0x7043 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6EC9FACD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDD93F59A SWAP1 PUSH2 0x6FEC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x701A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x703E SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x2C7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2F58056D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xBD6015B4 SWAP1 PUSH2 0x4D04 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70B2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2353 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x70D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70E7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x70B8 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x714A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2353 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x716B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x717F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7150 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x71CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7210 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x723C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7260 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST LT ISZERO PUSH2 0x5A6A JUMPI PUSH2 0x5A6A DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x7764 JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7280 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7289 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7296 JUMPI POP PUSH1 0x0 PUSH2 0x2ACD JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x72A3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x72B3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x72C1 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x72E9 JUMPI PUSH2 0x72E9 PUSH2 0x72E4 PUSH1 0x2 DUP6 DUP6 PUSH2 0x7781 JUMP JUMPDEST PUSH2 0x55A1 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x72FE JUMPI POP PUSH1 0x0 PUSH2 0x42B3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x730B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2ACD JUMPI PUSH2 0x2ACD PUSH2 0x72E4 PUSH1 0x1 DUP7 DUP7 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2ACD JUMPI PUSH2 0x2ACD PUSH2 0x72E4 PUSH1 0x0 DUP7 DUP7 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7352 JUMPI PUSH2 0x7352 PUSH2 0x72E4 PUSH1 0x3 DUP6 DUP6 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x735D JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7379 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x110A JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73EB SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7416 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x742E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7442 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7466 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x7472 JUMPI POP PUSH1 0x0 PUSH2 0x110A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74E3 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x750E SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x755E SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x756A JUMPI POP PUSH1 0x0 PUSH2 0x110A JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7591 JUMPI PUSH2 0x7591 PUSH2 0x72E4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77DB JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x75BA JUMPI PUSH2 0x75BA PUSH2 0x72E4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77DB JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x765F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x760A SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7636 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x765A SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH2 0x76DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x768B SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76DB SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x988A JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7720 SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x775E DUP5 DUP3 PUSH2 0x77FA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7720 SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97D3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x7816 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7853 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7858 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x786E JUMPI POP PUSH2 0x786E DUP2 PUSH2 0x7883 JUMP JUMPDEST ISZERO PUSH2 0x787A JUMPI POP POP PUSH2 0x17D7 JUMP JUMPDEST PUSH2 0x775E DUP2 PUSH2 0x55A1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7897 JUMPI POP PUSH1 0x1 PUSH2 0x110A JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x110A JUMPI PUSH1 0x0 PUSH2 0x78AD DUP4 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2353 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x110A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x42B3 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7A27 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A3D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7A67 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7A7A PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST PUSH2 0x9FCF JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD PUSH2 0x7AB1 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7A9E JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ADE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7AEC PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7B0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 MLOAD PUSH2 0x7B23 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B10 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B45 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B53 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI PUSH2 0x7B7B DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7D24 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B64 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B9D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BAB PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7BCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD PUSH2 0x7BE2 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BCF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C04 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C12 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7C35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7C5C JUMPI PUSH2 0x7C4A DUP10 DUP5 PUSH2 0x7F4A JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7C38 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C86 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7CA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CAA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CD6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7CE4 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D08 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D42 PUSH2 0x7A75 DUP3 PUSH2 0xA014 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D82 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7D90 PUSH2 0x7A75 DUP3 PUSH2 0xA014 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F4F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA037 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x42B3 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7DE3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7DED PUSH1 0xA0 PUSH2 0x9FCF JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7E01 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7E14 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x7E27 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7E45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E51 DUP5 DUP3 DUP6 ADD PUSH2 0x7D24 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7E70 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7E79 DUP2 PUSH2 0x9FCF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7E86 DUP4 DUP4 PUSH2 0x7A0B JUMP JUMPDEST DUP2 MSTORE PUSH2 0x7E95 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7EA7 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7EB9 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x7ECB DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x7EDD DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x7EEF DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x7F01 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x7F15 DUP5 DUP3 DUP6 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x7F33 DUP5 DUP3 DUP6 ADD PUSH2 0x7FBE JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F5B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F65 PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x7F76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7F86 DUP2 PUSH2 0xA0B5 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7FE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2ACD DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8002 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2ACD DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8021 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x802C DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8048 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8054 DUP8 DUP4 DUP9 ADD PUSH2 0x7ACE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8069 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8076 DUP7 DUP3 DUP8 ADD PUSH2 0x7ACE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8095 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x80A0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x80B0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x80C0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x80E6 DUP8 DUP3 DUP9 ADD PUSH2 0x7C68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8112 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8122 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x813C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8148 DUP8 DUP3 DUP9 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x816D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8178 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8193 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x819F DUP8 DUP4 DUP9 ADD PUSH2 0x7A57 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x81B4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8076 DUP7 DUP3 DUP8 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x81D8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x81E3 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x81FA DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x820A DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8230 DUP9 DUP3 DUP10 ADD PUSH2 0x7C68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x824F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8264 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x17CB DUP6 DUP3 DUP7 ADD PUSH2 0x7A16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8281 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8296 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7ACE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x82B6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x82CC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x82DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x82ED PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x830D JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x832F JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x8311 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8346 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8353 DUP7 DUP3 DUP8 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8363 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7DB8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8380 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8396 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x83A2 DUP8 DUP4 DUP9 ADD PUSH2 0x7B35 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x83B7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x83C4 DUP7 DUP3 DUP8 ADD PUSH2 0x7B35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x83E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x83FB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7B8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8419 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x842E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x843A DUP6 DUP3 DUP7 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x844B DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x846A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x847F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x848B DUP7 DUP3 DUP8 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x849C DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x84AC DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x84E1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x84F4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8502 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x8525 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x8551 JUMPI PUSH2 0x853B DUP14 DUP4 PUSH2 0x7E5D JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8529 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8569 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8576 DUP7 DUP3 DUP8 ADD PUSH2 0x7BF4 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8363 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8597 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x85AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7CC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x85CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x85E0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x85EC DUP7 DUP4 DUP8 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8601 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8629 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8647 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8652 DUP2 PUSH2 0xA090 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8662 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8672 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x868D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8699 DUP10 DUP4 DUP11 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x86AE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8230 DUP9 DUP3 DUP10 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x86D2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x86DD DUP2 PUSH2 0xA090 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x86ED DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x86FD DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8717 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8723 DUP9 DUP3 DUP10 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8746 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x875B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8779 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8784 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x879F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7ACE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x87BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x87CA DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x87DB DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x84AC DUP2 PUSH2 0xA082 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87FE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8809 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x844B DUP2 PUSH2 0xA082 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x882C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8837 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8852 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8873 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x887E DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x888E DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x88A9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x88B5 DUP9 DUP4 DUP10 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x88CA JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80E6 DUP8 DUP3 DUP9 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88E8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x88F2 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x88FD DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8928 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8935 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8940 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x894B DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8967 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8977 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x89A6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x89BC JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x89CF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x89D9 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0x89E4 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x89F8 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP10 PUSH1 0x1F DUP6 ADD SLT PUSH2 0x8A0C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8A1A PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP3 DUP2 ADD SWAP1 DUP7 DUP5 ADD DUP10 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8A4F JUMPI PUSH2 0x8A3D DUP16 DUP8 DUP5 CALLDATALOAD DUP13 ADD ADD PUSH2 0x7A57 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A26 JUMP JUMPDEST POP POP DUP1 DUP5 DUP7 ADD MSTORE POP POP POP DUP2 SWAP8 POP PUSH2 0x8A68 DUP11 DUP3 DUP12 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP7 POP POP POP PUSH2 0x88B5 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A8A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A94 PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8A9F DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AAF DUP2 PUSH2 0xA090 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8AC2 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8AD5 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x8AF7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x8B04 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B0F PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B1A DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B2A DUP2 PUSH2 0xA090 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8B3C DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0x7DC7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8B4E DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0x7DC7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x8B62 DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP3 POP PUSH2 0x8B71 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8BA1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8BAE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BB9 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8BC4 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BD4 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8967 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BFA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C10 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x8C23 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8C2D PUSH1 0xA0 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8C3F DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8C52 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8C65 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C7B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8C87 DUP8 DUP3 DUP7 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CAB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8CC1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8CCD DUP9 DUP4 DUP10 ADD PUSH2 0x7DD2 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8CDF DUP3 PUSH2 0xA06D JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8CF1 DUP3 PUSH2 0xA06D JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x88CA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D1B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D30 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8D3C DUP8 DUP3 DUP9 ADD PUSH2 0x7DD2 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8D54 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8D64 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8D84 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8D8E DUP6 DUP6 PUSH2 0x7E5D JUMP JUMPDEST SWAP3 POP PUSH2 0x8D9E DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x7F4A JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x84AC DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DC0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DCA PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8DD5 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8DE5 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8E07 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8E14 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E1F PUSH1 0x60 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8E2A DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8E44 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8E59 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8E69 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2ACD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8EB8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EDA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2ACD DUP2 PUSH2 0xA0B5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F2A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F05 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F2A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F48 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x8F7C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA037 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x10FD PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x10FD PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x903C DUP2 PUSH2 0xA063 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x909C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA037 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2C7A SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9171 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10FD SWAP1 DUP4 ADD DUP5 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x91EE SWAP1 DUP4 ADD DUP6 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9224 SWAP1 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x9236 DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x926E SWAP1 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10FD SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x92D6 DUP6 PUSH2 0xA063 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x92F0 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x931F DUP12 PUSH2 0xA063 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9337 DUP3 DUP6 ADD DUP12 PUSH2 0x8F35 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x934B DUP3 DUP11 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x935E DUP7 PUSH2 0xA063 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x9376 DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x5A50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x939D PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x93AF DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x93D6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8EF2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x943A JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9428 DUP4 DUP4 MLOAD PUSH2 0x8F64 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x940C JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x944D DUP2 DUP10 PUSH2 0x8F35 JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 MSTORE PUSH2 0x9477 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9511 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x94F2 DUP9 DUP7 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x94CE JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9545 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x681C DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x92F0 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9224 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x95EC SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5D14 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x963A SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6E50 SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5A50 DUP4 DUP3 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x97E0 DUP6 PUSH2 0xA063 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x97E0 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F504154485F4C454E4754485F4D5553545F42455F PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x41545F4C454153545F54574F PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F504154485F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F54574F PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F4C4153545F454C454D454E545F4F465F50415448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F4C4153545F454C454D454E545F4F465F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4154485F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP1 SIGNEXTEND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C03 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9C52 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8FC5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C64 DUP2 DUP7 PUSH2 0x8FC5 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9C88 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x8FC5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C9A DUP2 DUP8 PUSH2 0x8FC5 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9CD4 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x8FE4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0x9D0E DUP3 DUP7 MLOAD PUSH2 0x8EE5 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x9D20 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x9D33 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x9D46 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x9D59 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x9D6C PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x9D7F PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x9D92 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0x9DA6 DUP3 DUP6 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP7 ADD MLOAD PUSH2 0x9DC6 DUP3 DUP6 ADD DUP3 PUSH2 0x906D JUMP JUMPDEST POP POP PUSH2 0x160 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x9DE1 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9031 JUMP JUMPDEST PUSH2 0x10FD PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0x8EE5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x9E2E JUMPI INVALID JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD AND PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 PUSH2 0x180 DUP5 ADD MSTORE PUSH2 0x9E7C PUSH2 0x1A0 DUP5 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9E8C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x8F90 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9EBD PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9ECF DUP2 DUP8 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9F0D PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x10FA PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9FA1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9FBA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9FED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA00A JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA029 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA052 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA03A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x775E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x102B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xAB265F3E36090689DAF80E6B72129F5A94DFAE782B4EE64691581DF6 SWAP7 SWAP2 MOD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x71E DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11F2928B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x1F00CA74 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xD06CA61F EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0xC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x654 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99 PUSH2 0x259 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x640 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0xC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x57F JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x135 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x6C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x13D PUSH2 0x3AD JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x1 DUP6 DUP6 SWAP1 POP SUB DUP2 MLOAD DUP2 LT PUSH2 0x194 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP1 ISZERO PUSH2 0x251 JUMPI PUSH2 0x22E PUSH32 0xADC7FCB33C735913B8635927E66896B356A53A912AB2CEFF929E60A04B53B3C1 DUP6 DUP6 PUSH1 0x0 NOT DUP6 ADD DUP2 DUP2 LT PUSH2 0x1DF JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1F4 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP7 DUP7 DUP6 DUP2 DUP2 LT PUSH2 0x200 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x215 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x221 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3E2 JUMP JUMPDEST DUP3 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x23D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 NOT ADD PUSH2 0x1A5 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 LT ISZERO PUSH2 0x294 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x6C0 JUMP JUMPDEST PUSH2 0x29C PUSH2 0x3AD JUMP JUMPDEST DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2DD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST PUSH1 0x0 NOT DUP4 ADD DUP2 LT ISZERO PUSH2 0x251 JUMPI PUSH2 0x38B PUSH32 0xADC7FCB33C735913B8635927E66896B356A53A912AB2CEFF929E60A04B53B3C1 DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x339 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x34E SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP7 DUP7 DUP6 PUSH1 0x1 ADD DUP2 DUP2 LT PUSH2 0x35D JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x372 SWAP2 SWAP1 PUSH2 0x551 JUMP JUMPDEST DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x37E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x443 JUMP JUMPDEST DUP3 DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x39A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2FD JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12C SWAP1 PUSH2 0x698 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x3EE DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x401 DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x416 DUP9 DUP9 DUP9 PUSH2 0x4F8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x42E JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x436 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x44F DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x462 DUP6 PUSH2 0x48F JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x477 DUP9 DUP9 DUP9 PUSH2 0x4F8 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x42E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x4BE JUMPI POP PUSH1 0x12 PUSH2 0x4F3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4D1 SWAP2 SWAP1 PUSH2 0x5F8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x510 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x615 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x53A JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x562 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x578 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x593 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x5B1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x5C4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x5D2 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP8 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x5E5 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP5 POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x68C JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x670 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1410551217D513D3D7D4D213D495 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 0xD 0xBC MSTORE 0xC9 DIFFICULTY CALL ISZERO PUSH32 0x852C5CC150D3376DD1C9C484B2C0D641D542F0B80F47DC64736F6C634300060C STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x11F2928B EQ PUSH2 0x44 JUMPI DUP1 PUSH4 0x144A2752 EQ PUSH2 0x4E JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x84 JUMPI DUP1 PUSH4 0xFF1FD974 EQ PUSH2 0xA6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4C PUSH2 0xC6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0x69 CALLDATASIZE PUSH1 0x4 PUSH2 0x342 JUMP JUMPDEST PUSH2 0x109 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x406 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x99 PUSH2 0x147 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x7B SWAP2 SWAP1 PUSH2 0x3CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6E PUSH2 0xC1 CALLDATASIZE PUSH1 0x4 PUSH2 0x342 JUMP JUMPDEST PUSH2 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x106 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x113 PUSH2 0x195 JUMP JUMPDEST PUSH2 0x13F PUSH32 0xB713B61BB9BB2958A0F5D1534B21E94FC68C4C0C034B0902ED844F2F6CD1B4F7 DUP5 DUP7 DUP6 PUSH2 0x1D3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x169 PUSH2 0x195 JUMP JUMPDEST PUSH2 0x13F PUSH32 0xB713B61BB9BB2958A0F5D1534B21E94FC68C4C0C034B0902ED844F2F6CD1B4F7 DUP6 DUP6 DUP6 PUSH2 0x234 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x1D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C8 SWAP1 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1DF DUP6 PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x1F2 DUP6 PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x207 DUP9 DUP9 DUP9 PUSH2 0x2E9 JUMP JUMPDEST SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP4 DUP4 DUP4 DUP9 MUL MUL DUP2 PUSH2 0x21F JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x227 JUMPI INVALID JUMPDEST DIV SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x240 DUP6 PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x253 DUP6 PUSH2 0x280 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x268 DUP9 DUP9 DUP9 PUSH2 0x2E9 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP5 PUSH8 0xDE0B6B3A7640000 DUP9 MUL MUL DUP2 PUSH2 0x21F JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 EQ ISZERO PUSH2 0x2AF JUMPI POP PUSH1 0x12 PUSH2 0x2E4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x382 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0xF AND PUSH1 0x4 ADD SWAP2 POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x301 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x39F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x32B JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x356 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x361 DUP2 PUSH2 0x40F JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x371 DUP2 PUSH2 0x40F JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x14 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x106 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 0x1F SWAP4 0xFC PUSH24 0xC66F925DF7BC66A23DB30BFA833A24975D3FB9D56CE63EC7 0xD3 0x29 0x2C PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA66 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x809A9E55 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x809A9E55 EQ PUSH2 0x118 JUMPI DUP1 PUSH4 0x81EFCBDD EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x910FFC71 EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0xA734F06E EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0x197 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0x5734D9A EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0xC1 JUMPI DUP1 PUSH4 0x418436BC EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x61E597F9 EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0xA6 CALLDATASIZE PUSH1 0x4 PUSH2 0x771 JUMP JUMPDEST PUSH2 0x1AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x989 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC9 PUSH2 0x1E0 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEB PUSH2 0xE6 CALLDATASIZE PUSH1 0x4 PUSH2 0x674 JUMP JUMPDEST PUSH2 0x223 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0xA04 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x104 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAB PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EE JUMP JUMPDEST PUSH2 0x2CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x124 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x138 PUSH2 0x133 CALLDATASIZE PUSH1 0x4 PUSH2 0x634 JUMP JUMPDEST PUSH2 0x2F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP3 SWAP2 SWAP1 PUSH2 0xA0D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x152 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x5B6 JUMP JUMPDEST PUSH2 0x3A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x422 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x8D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18A PUSH2 0x43A JUMP JUMPDEST PUSH1 0x60 DUP13 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1BF SWAP2 SWAP1 PUSH2 0x8D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x220 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22D PUSH2 0x452 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x257 JUMPI DUP7 PUSH2 0x25F JUMP JUMPDEST PUSH2 0x25F PUSH2 0x490 JUMP JUMPDEST SWAP7 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x28B JUMPI DUP6 PUSH2 0x293 JUMP JUMPDEST PUSH2 0x293 PUSH2 0x490 JUMP JUMPDEST SWAP6 POP PUSH2 0x2C0 PUSH32 0xFF3CA9D46195C39F9A12AFB74207B4970349FB3CFB1E459BBF170298D326BC7 DUP9 DUP9 PUSH2 0x4A8 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DE SWAP2 SWAP1 PUSH2 0x8D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x304 PUSH2 0x452 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x32E JUMPI DUP5 PUSH2 0x336 JUMP JUMPDEST PUSH2 0x336 PUSH2 0x490 JUMP JUMPDEST SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0x362 JUMPI DUP4 PUSH2 0x36A JUMP JUMPDEST PUSH2 0x36A PUSH2 0x490 JUMP JUMPDEST SWAP4 POP PUSH2 0x397 PUSH32 0xFF3CA9D46195C39F9A12AFB74207B4970349FB3CFB1E459BBF170298D326BC7 DUP7 DUP7 PUSH2 0x4A8 JUMP JUMPDEST SWAP2 POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP3 POP PUSH1 0x1 PUSH1 0x0 SHL DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x410 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 SWAP1 POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C BALANCE ISZERO PUSH2 0x48E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x485 SWAP1 PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x64 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x4EA JUMPI INVALID JUMPDEST DIV PUSH9 0x56BA3D73AF34F0000 DUP3 MOD ADD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x52F JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x546 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x578 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x58F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x560 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x5CD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x5D8 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x5E8 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x5FC JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x617 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x623 DUP9 DUP3 DUP10 ADD PUSH2 0x567 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x648 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x653 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x663 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x68C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x697 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x6A7 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6D0 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6DC DUP10 DUP3 DUP11 ADD PUSH2 0x567 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x706 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x711 DUP2 PUSH2 0xA1B JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x724 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x740 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x74C DUP11 DUP4 DUP12 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x764 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x6DC DUP10 DUP3 DUP11 ADD PUSH2 0x51E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP14 DUP16 SUB SLT ISZERO PUSH2 0x793 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x79D DUP15 DUP15 PUSH2 0x501 JUMP JUMPDEST SWAP12 POP PUSH2 0x7AC DUP15 PUSH1 0x20 DUP16 ADD PUSH2 0x5A7 JUMP JUMPDEST SWAP11 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x40 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x7C6 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x7D6 DUP15 PUSH1 0x40 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x60 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x7F3 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x803 DUP15 PUSH1 0x60 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH2 0x815 DUP15 PUSH1 0x80 DUP16 ADD PUSH2 0x501 JUMP JUMPDEST SWAP6 POP PUSH2 0x824 DUP15 PUSH1 0xA0 DUP16 ADD PUSH2 0x5A7 JUMP JUMPDEST SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xC0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x83E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x84E DUP15 PUSH1 0xC0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0xE0 DUP15 ADD CALLDATALOAD GT ISZERO PUSH2 0x86B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x87B DUP15 PUSH1 0xE0 DUP16 ADD CALLDATALOAD DUP16 ADD PUSH2 0x51E JUMP JUMPDEST DUP2 SWAP4 POP DUP1 SWAP3 POP POP POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 POP SWAP3 SWAP6 SWAP9 SWAP12 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x8A5 JUMPI INVALID JUMPDEST SWAP1 MSTORE JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF NOT PUSH1 0x60 SWAP3 DUP4 SHL DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE SWAP2 SHL AND PUSH1 0x34 DUP3 ADD MSTORE PUSH1 0x48 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD PUSH2 0x8FF DUP2 DUP5 PUSH2 0xA04 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP3 POP DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x92B JUMPI PUSH2 0x91D DUP5 DUP4 MLOAD PUSH2 0x893 JUMP JUMPDEST SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x90A JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP1 DUP7 MLOAD PUSH2 0x942 DUP2 DUP5 PUSH2 0xA04 JUMP JUMPDEST SWAP2 POP DUP4 DUP9 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x96C JUMPI PUSH2 0x95E DUP4 DUP6 MLOAD PUSH2 0x893 JUMP JUMPDEST SWAP4 DUP6 ADD SWAP4 SWAP3 POP PUSH1 0x1 ADD PUSH2 0x94B JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP PUSH2 0x981 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x89B JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9B5 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x999 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9C6 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xE SWAP1 DUP3 ADD MSTORE PUSH14 0x1190525317D5149251D1D1549151 PUSH1 0x92 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 SWAP6 0x2A PUSH10 0x1437B2E0931305A4BD7C MULMOD MOD PUSH28 0xD501E2ACC8237345B9186F976E8D6364736F6C634300060C00330000 ",
                "sourceMap": "12164:1143:27:-:0;;;2400:119:45;;;;;826:113:23;;12508:261:27;;;;;;;;;-1:-1:-1;12571:1:27;1914:11:41;;;;1333::42;;;;2682::45;;;;1535::49;;;;3912::52;;12604:45:27::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12586:15:27::1;:63:::0;;-1:-1:-1;;;;;;12586:63:27::1;-1:-1:-1::0;;;;;12586:63:27;;;::::1;::::0;;;::::1;::::0;;12669:35:::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12659:7:27::1;:45:::0;;-1:-1:-1;;;;;;12659:45:27::1;-1:-1:-1::0;;;;;12659:45:27;;;::::1;::::0;;;::::1;::::0;;12722:40:::1;::::0;::::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;12714:5:27::1;:48:::0;;-1:-1:-1;;;;;;12714:48:27::1;-1:-1:-1::0;;;;;12714:48:27;;;::::1;::::0;;;::::1;::::0;;12164:1143;;;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "5782": [
                        {
                            "length": 32,
                            "start": 8890
                        },
                        {
                            "length": 32,
                            "start": 12450
                        },
                        {
                            "length": 32,
                            "start": 14576
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x60806040526004361061041f5760003560e01c80638effa9ea1161021e578063c7dd6c4f11610123578063d9bca372116100ab578063f573c1611161007a578063f573c16114610d0e578063f5a4994d14610d2e578063fa5def9f14610d4e578063fc9fe41b14610d6e578063fea12a0314610d9d57610426565b8063d9bca37214610c8e578063ddd5aa2814610cae578063e78ac04514610cce578063e8e4af0914610cee57610426565b8063cc1621c9116100f2578063cc1621c914610bf9578063cd72d78914610c19578063cd85e7b514610c2e578063d31b0a8a14610c4e578063d3cdc04d14610c6e57610426565b8063c7dd6c4f14610b79578063c831908414610b99578063c8c74a3714610bb9578063c94706d814610bd957610426565b8063ab000276116101a6578063b90cd2fb11610175578063b90cd2fb14610ad9578063bc4f55ba14610af9578063bd71ecf614610b19578063bf60384b14610b39578063c25c413814610b5957610426565b8063ab00027614610a4a578063ab3e621014610a6a578063adc636bf14610a8a578063b770f84914610ab957610426565b80639e3f05c3116101ed5780639e3f05c3146109a5578063a095a036146109d5578063a2d10ba5146109f5578063a469841714610a0a578063a75e744b14610a2a57610426565b80638effa9ea1461092557806398777748146109455780639ad732ef146109655780639bf3ee351461098557610426565b80635c71cbe71161032457806378fee41c116102ac5780637fea2ae11161027b5780637fea2ae1146108805780638d201c22146108a05780638d8abdf0146108c05780638dc669fa146108e05780638e5a0e07146108f557610426565b806378fee41c146108005780637a82dcb9146108205780637e105ce2146108405780637f7f4f131461086057610426565b806368be3cf2116102f357806368be3cf2146107515780636a33bc7e14610771578063706e2f9b146107a05780637280bfff146107c057806374c9d255146107e057610426565b80635c71cbe7146106d15780635d5b674f146106f157806366a1ac6b14610711578063686b7ee81461073157610426565b8063281e3432116103a757806331268657116103765780633126865714610624578063494569db146106445780634edfb5b21461066457806357494b1d1461069157806359ab9a6c146106b157610426565b8063281e3432146105945780632aa64319146105b457806330d6570d146105e45780633105fec11461060457610426565b806315de17de116103ee57806315de17de146104ca57806316279055146104f75780631694505e146105245780631f4ff03e14610546578063252322b31461056657610426565b80630496d5dc1461042b5780631022742b1461046357806311f2928b14610490578063149dab0e1461049a57610426565b3661042657005b600080fd5b34801561043757600080fd5b5061044b610446366004618159565b610db2565b60405161045a9392919061938a565b60405180910390f35b34801561046f57600080fd5b5061048361047e3660046184b7565b610e78565b60405161045a919061951f565b610498610feb565b005b3480156104a657600080fd5b506104ba6104b5366004618991565b61102e565b60405161045a9493929190619200565b3480156104d657600080fd5b506104ea6104e53660046180f2565b6110d7565b60405161045a919061958e565b34801561050357600080fd5b50610517610512366004617fd5565b611105565b60405161045a9190619557565b34801561053057600080fd5b5061053961110f565b60405161045a91906190a6565b34801561055257600080fd5b50610498610561366004618630565b61111e565b34801561057257600080fd5b50610586610581366004618080565b6113cd565b60405161045a929190619532565b3480156105a057600080fd5b506105866105af366004618df1565b61146a565b3480156105c057600080fd5b506105d46105cf366004618b8b565b611503565b60405161045a9493929190619562565b3480156105f057600080fd5b506105866105ff366004618080565b6116c8565b34801561061057600080fd5b5061058661061f366004618159565b611733565b34801561063057600080fd5b5061049861063f36600461823d565b6117d7565b34801561065057600080fd5b5061044b61065f366004618159565b6117db565b34801561067057600080fd5b5061068461067f366004618d06565b611972565b60405161045a919061964c565b34801561069d57600080fd5b506105866106ac366004618080565b611bf7565b3480156106bd57600080fd5b506104ea6106cc3660046180f2565b611c87565b3480156106dd57600080fd5b506104ea6106ec3660046180f2565b611c94565b3480156106fd57600080fd5b5061058661070c366004618080565b611ca2565b34801561071d57600080fd5b5061048361072c3660046184b7565b611d32565b34801561073d57600080fd5b506104ea61074c3660046180f2565b611de7565b61076461075f36600461823d565b611df5565b60405161045a91906194aa565b34801561077d57600080fd5b5061079161078c36600461885e565b611f56565b60405161045a939291906193e5565b3480156107ac57600080fd5b506104836107bb3660046183d5565b612267565b3480156107cc57600080fd5b506104ea6107db3660046180f2565b612359565b3480156107ec57600080fd5b506104ba6107fb366004618991565b612367565b34801561080c57600080fd5b5061049861081b3660046186bb565b612377565b34801561082c57600080fd5b506104ea61083b3660046180f2565b612537565b34801561084c57600080fd5b5061068461085b366004617fd5565b612544565b34801561086c57600080fd5b5061058661087b366004618df1565b61256b565b34801561088c57600080fd5b5061058661089b366004618ae1565b612642565b3480156108ac57600080fd5b506104ea6108bb3660046180f2565b61271b565b3480156108cc57600080fd5b506105866108db366004618912565b61273e565b3480156108ec57600080fd5b506105396127ce565b34801561090157600080fd5b5061091561091036600461836c565b6127e6565b60405161045a9493929190619c75565b34801561093157600080fd5b506104ea6109403660046180f2565b6129fd565b34801561095157600080fd5b50610586610960366004618080565b612a0a565b34801561097157600080fd5b506104ea6109803660046180f2565b612a75565b34801561099157600080fd5b506104ea6109a0366004618d6f565b612a83565b3480156109b157600080fd5b506109c56109c0366004618c96565b612ad4565b60405161045a9493929190619597565b3480156109e157600080fd5b506104ea6109f03660046180f2565b612c0b565b348015610a0157600080fd5b50610539612c84565b348015610a1657600080fd5b50610586610a25366004618080565b612c93565b348015610a3657600080fd5b506105d4610a453660046181c1565b612d02565b348015610a5657600080fd5b50610586610a65366004618080565b612da7565b348015610a7657600080fd5b506104ea610a853660046180f2565b612e12565b348015610a9657600080fd5b50610aaa610aa5366004618080565b612e34565b60405161045a9392919061924a565b348015610ac557600080fd5b506104ea610ad43660046180f2565b612f31565b348015610ae557600080fd5b50610586610af4366004618080565b612f54565b348015610b0557600080fd5b50610586610b14366004618912565b612fe4565b348015610b2557600080fd5b50610483610b34366004618407565b61304f565b348015610b4557600080fd5b50610586610b54366004618ae1565b61314b565b348015610b6557600080fd5b50610586610b74366004618080565b6131b6565b348015610b8557600080fd5b506104ea610b943660046180f2565b61324c565b348015610ba557600080fd5b50610586610bb4366004618080565b61325a565b348015610bc557600080fd5b50610586610bd4366004618159565b6132c5565b348015610be557600080fd5b50610586610bf4366004618080565b61341d565b348015610c0557600080fd5b506109c5610c14366004618c96565b6134ad565b348015610c2557600080fd5b506105396135bf565b348015610c3a57600080fd5b506104ea610c493660046180f2565b6135d7565b348015610c5a57600080fd5b506104ea610c693660046180f2565b6135e4565b348015610c7a57600080fd5b506104ea610c893660046180f2565b6135f2565b348015610c9a57600080fd5b506105d4610ca93660046181c1565b613600565b348015610cba57600080fd5b506105d4610cc9366004618b8b565b6136bb565b348015610cda57600080fd5b50610483610ce9366004618456565b61389d565b348015610cfa57600080fd5b50610586610d09366004618080565b613992565b348015610d1a57600080fd5b506104ea610d293660046180f2565b6139fd565b348015610d3a57600080fd5b50610aaa610d49366004618080565b613a0a565b348015610d5a57600080fd5b50610791610d6936600461885e565b613b1c565b348015610d7a57600080fd5b50610d8e610d8936600461836c565b613e8c565b60405161045a93929190619c3f565b348015610da957600080fd5b506105396140ac565b6060806060610dc186866140bb565b9250825160001415610dd257610e6f565b610e69604051806080016040528087600081518110610ded57fe5b60200260200101516001600160a01b0316815260200187600189510381518110610e1357fe5b60200260200101516001600160a01b03168152602001888689604051602001610e3e939291906191ca565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b910152856142b9565b90925090505b93509350939050565b606083516001600160401b0381118015610e9157600080fd5b50604051908082528060200260200182016040528015610ebb578160200160208202803683370190505b50905060005b84518114610fe357306001600160a01b0316639bf3ee3562030d40878481518110610ee857fe5b6020026020010151878581518110610efc57fe5b6020026020010151876040518563ffffffff1660e01b8152600401610f2393929190619cfa565b60206040518083038187803b158015610f3b57600080fd5b5086fa93505050508015610f6c575060408051601f3d908101601f19168201909252610f6991810190618618565b60015b610fc0573d808015610f9a576040519150601f19603f3d011682016040523d82523d6000602084013e610f9f565b606091505b506000838381518110610fae57fe5b60200260200101818152505050610fdb565b80838381518110610fcd57fe5b602002602001018181525050505b600101610ec1565b509392505050565b60405173e9db8717bc5dfb20aaf538b4a5a02b7791ff430c903480156108fc02916000818181858888f1935050505015801561102b573d6000803e3d6000fd5b50565b6000606080606087602001515160001415611048576110cc565b6110548888888861438a565b80945081955050506110c66040518060800160405280896001600160a01b03168152602001886001600160a01b03168152602001868660405160200161109b9291906191a6565b60408051601f1981840301815291815290825230602090811b63ab3e62101790911b910152866142b9565b90925090505b945094509450949050565b60006110fa73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876145bc565b90505b949350505050565b803b15155b919050565b6000546001600160a01b031681565b8051849084906000908490600019810190811061113757fe5b60200260200101519050826001600160a01b031663ab86e0a630836040518363ffffffff1660e01b815260040161116f9291906190ba565b600060405180830381600087803b15801561118957600080fd5b505af192505050801561119a575060015b50866001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156111d657600080fd5b505af1935050505080156111e8575060015b50606084516001600160401b038111801561120257600080fd5b5060405190808252806020026020018201604052801561122c578160200160208202803683370190505b509050606085516001600160401b038111801561124857600080fd5b50604051908082528060200260200182016040528015611272578160200160208202803683370190505b50905060005b86518110156113b657306001600160a01b03166378fee41c621e84808d8d8d8d8d88815181106112a457fe5b60200260200101516040518763ffffffff1660e01b81526004016112cc9594939291906195fe565b600060405180830381600088803b1580156112e657600080fd5b5087f1935050505080156112f8575060015b61138d573d808015611326576040519150601f19603f3d011682016040523d82523d6000602084013e61132b565b606091505b50611335816147b2565b85848151811061134157fe5b6020026020010185858151811061135457fe5b602002602001018281525082815250505083828151811061137157fe5b60200260200101516000141561138757506113b6565b506113ae565b60405162461bcd60e51b81526004016113a590619a41565b60405180910390fd5b600101611278565b506113c182826147e7565b50505050505050505050565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161140d91906190a6565b60405160208183030381529060405281526020018860405160200161143291906190a6565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b91015284614815565b9097909650945050505050565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200160405180604001604052808a600001516001600160a01b031681526020018a604001516001600160a01b03168152506040516020016114d89190619def565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b910152846142b9565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b815260040161153b9291906190d3565b60206040518083038186803b15801561155357600080fd5b505afa158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b9190617ff1565b925060006001600160a01b038416156115a957506001935086611647565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c6906115da908a908c906004016190d3565b60206040518083038186803b1580156115f257600080fd5b505afa158015611606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162a9190617ff1565b93506001600160a01b03841661164057506110cc565b5060009350855b6116b760405180608001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b60200151878960405160200161168c939291906190ed565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b910152876142b9565b909350915050945094509450949050565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161170891906190a6565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b910152846142b9565b6060806117cb60405180608001604052808660008151811061175157fe5b60200260200101516001600160a01b031681526020018660018851038151811061177757fe5b60200260200101516001600160a01b0316815260200187876040516020016117a09291906191a6565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b910152846142b9565b90969095509350505050565b5050565b60608060606117ea86866140bb565b92508251600014156117fb57610e6f565b606085516001600160401b038111801561181457600080fd5b5060405190808252806020026020018201604052801561183e578160200160208202803683370190505b50905060005b86518110156118935786600182895103038151811061185f57fe5b602002602001015182828151811061187357fe5b6001600160a01b0390921660209283029190910190910152600101611844565b5060606118a088836140bb565b90506119626040518060a00160405280896000815181106118bd57fe5b60200260200101516001600160a01b031681526020018960018b5103815181106118e357fe5b60200260200101516001600160a01b031681526020018a888b60405160200161190e939291906191ca565b60405160208183030381529060405281526020018a8486604051602001611937939291906191ca565b60408051601f1981840301815291815290825230602090811b637a82dcb91790911b91015287614815565b9094509250505093509350939050565b602084810151604080516001808252818301909252606093849290828101908036833701905050905085816000815181106119a957fe5b6020908102919091010152606060006040519080825280602002602001820160405280156119e1578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611ad2576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611a3a908990600190889088906004016192bf565b60006040518083038187803b158015611a5257600080fd5b5086fa93505050508015611a8857506040513d6000823e601f3d908101601f19168201604052611a859190810190618735565b60015b611ac2573d808015611ab6576040519150601f19603f3d011682016040523d82523d6000602084013e611abb565b606091505b5050611acd565b93506110fd92505050565b611bec565b87606001516001600160a01b0316856001600160a01b03161415611b28576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611a3a908a90600190889088906004016192bf565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611b68908a90600190889088908d90849084908490600401619302565b60006040518083038187803b158015611b8057600080fd5b5086fa93505050508015611bb657506040513d6000823e601f3d908101601f19168201604052611bb39190810190618735565b60015b611ac2573d808015611be4576040519150601f19603f3d011682016040523d82523d6000602084013e611be9565b606091505b50505b505050949350505050565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611c3791906190a6565b604051602081830303815290604052815260200188604051602001611c5c91906190a6565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b91015284614815565b60006110fa858385614c82565b60006110fa85858486614d56565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001611ce291906190a6565b604051602081830303815290604052815260200188604051602001611d0791906190a6565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b91015284614815565b6060611d3f848484610e78565b905060005b8451811015610fe357818181518110611d5957fe5b6020026020010151600014611ddf57611dc6828281518110611d7757fe5b6020026020010151868381518110611d8b57fe5b6020026020010151606001516001600160801b0316878481518110611dac57fe5b6020026020010151604001516001600160801b0316614db6565b828281518110611dd257fe5b6020026020010181815250505b600101611d44565b60006110fa85858486614de0565b6060816001600160401b0381118015611e0d57600080fd5b50604051908082528060200260200182016040528015611e4757816020015b611e346178c2565b815260200190600190039081611e2c5790505b50905060005b808314611f4f576001828281518110611e6257fe5b602090810291909101810151911515910152838382818110611e8057fe5b9050602002810190611e929190619f8b565b15159050611e9f57611f47565b30848483818110611eac57fe5b9050602002810190611ebe9190619f8b565b604051611ecc92919061907a565b6000604051808303816000865af19150503d8060008114611f09576040519150601f19603f3d011682016040523d82523d6000602084013e611f0e565b606091505b50838381518110611f1b57fe5b6020026020010151602001848481518110611f3257fe5b60209081029190910101519190915290151590525b600101611e4d565b5092915050565b606080606080611fd8886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9857600080fd5b505afa158015611fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd09190617ff1565b876000614e44565b905084516001600160401b0381118015611ff157600080fd5b5060405190808252806020026020018201604052801561201b578160200160208202803683370190505b50915084516001600160401b038111801561203557600080fd5b5060405190808252806020026020018201604052801561205f578160200160208202803683370190505b50925084516001600160401b038111801561207957600080fd5b506040519080825280602002602001820160405280156120ad57816020015b60608152602001906001900390816120985790505b50935060005b815181101561225b5760606120db888484815181106120ce57fe5b60200260200101516152da565b905060608061217560405180608001604052808c6000815181106120fb57fe5b60200260200101516001600160a01b031681526020018c60018e51038151811061212157fe5b60200260200101516001600160a01b031681526020018d8660405160200161214a92919061929b565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a6142b9565b9150915060005b815181101561224c5781818151811061219157fe5b6020026020010151600014156121a65761224c565b8181815181106121b257fe5b60200260200101518782815181106121c657fe5b602002602001015111612244578181815181106121df57fe5b60200260200101518782815181106121f357fe5b60200260200101818152505082818151811061220b57fe5b602002602001015188828151811061221f57fe5b6020026020010181815250508389828151811061223857fe5b60200260200101819052505b60010161217c565b505050508060010190506120b3565b50509450945094915050565b606081516001600160401b038111801561228057600080fd5b506040519080825280602002602001820160405280156122aa578160200160208202803683370190505b50905060005b82518114612353577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168382815181106122ee57fe5b60200260200101516001600160a01b03161461232e5761232983828151811061231357fe5b60200260200101516001600160a01b0316615435565b612331565b60125b60ff1682828151811061234057fe5b60209081029190910101526001016122b0565b50919050565b60006110fa858584866154e1565b5060009360609350839250829150565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156123bb57600080fd5b505af19250505080156123cc575060015b5060005a905060006060306001600160a01b031688888888886040516024016123f89493929190619145565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612436919061908a565b6000604051808303816000865af19150503d8060008114612473576040519150601f19603f3d011682016040523d82523d6000602084013e612478565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b1580156124c457600080fd5b505afa9250505080156124f4575060408051601f3d908101601f191682019092526124f191810190618618565b60015b6124fd57612502565b909203915b8161251057612510816155a1565b61252d818060200190518101906125279190618618565b846155a9565b5050505050505050565b60006110fa8483856155ba565b60408051603f833b908101601f191682019092528181529080600060208401853c50919050565b6060806125766178da565b604051806040016040528088600001516001600160a01b0316815260200188604001516001600160a01b031681525090506126346040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001836040516020016125e49190619def565b6040516020818303038152906040528152602001836040516020016126099190619def565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b91015285614815565b909890975095505050505050565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016126829190619b9f565b604051602081830303815290604052815260200160405180608001604052808a600001516001600160a01b031681526020018a602001516001600160e01b03191681526020018a60600151600f0b81526020018a60400151600f0b8152506040516020016126f09190619b9f565b60408051601f1981840301815291815290825230602090811b638d201c221790911b91015284614815565b60006110fa73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc286868587615753565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161277e9190619b7f565b6040516020818303038152906040528152602001886040516020016127a39190619b7f565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b91015284614815565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6127ee6178f1565b6127f66178f1565b600080805b875181146128fb57612842602089838151811061281457fe5b60200260200101515103878a848151811061282b57fe5b6020026020010151615a5f9092919063ffffffff16565b60006060306001600160a01b03168a848151811061285c57fe5b6020026020010151604051612871919061908a565b6000604051808303816000865af19150503d80600081146128ae576040519150601f19603f3d011682016040523d82523d6000602084013e6128b3565b606091505b509150915081156128f15760006128d7602083510383615a6f90919063ffffffff16565b9050858111156128ef57838852602088018290529450845b505b50506001016127fb565b5081612906576129f4565b60005b865181146129f257612939602088838151811061292257fe5b602002602001015151038489848151811061282b57fe5b60006060306001600160a01b031689848151811061295357fe5b6020026020010151604051612968919061908a565b6000604051808303816000865af19150503d80600081146129a5576040519150601f19603f3d011682016040523d82523d6000602084013e6129aa565b606091505b509150915081156129e85760006129ce602083510383615a6f90919063ffffffff16565b9050848111156129e657838752602087018290529350835b505b5050600101612909565b505b93509350935093565b60006110fa848385615a7b565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612a4a91906190a6565b60408051601f1981840301815291815290825230602090811b637280bfff1790911b910152846142b9565b60006110fa85858486615bcc565b600083606001516001600160801b0316846101600151604051602001612aa9919061958e565b6040516020818303038152906040528051906020012060001c81612ac957fe5b0690505b9392505050565b60006060806060612ae6888888615d20565b935083612af2576110cc565b60405163276fdad960e11b81523090634edfb5b290612b1b908b9088908c908c90600401619cc1565b60006040518083038186803b158015612b3357600080fd5b505afa158015612b47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b6f9190810190618735565b8860800181905250876080015192506110c66040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018a604051602001612bbb9190619cae565b60405160208183030381529060405281526020018a604051602001612be09190619cae565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b91015286614815565b6000612c1561790b565b83806020019051810190612c299190618be9565b9050612c7a73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826060015188888786604001518760800151604051602001612c6692919061929b565b604051602081830303815290604052615e90565b9695505050505050565b6002546001600160a01b031681565b60608060606126346040518060800160405280886001600160a01b03168152602001876001600160a01b031681526020018984604051602001612cd792919061929b565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b910152856142b9565b600080606080612d1489898989616092565b945092506001600160a01b038316612d2b57612d9b565b612d956040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018587604051602001612d6a929190619280565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b910152866142b9565b90925090505b95509550955095915050565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612de791906190a6565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b910152846142b9565b60006110fa73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28584866161e7565b6000606080866001600160a01b031663901754d787876040518363ffffffff1660e01b8152600401612e679291906190d3565b60206040518083038186803b158015612e7f57600080fd5b505afa158015612e93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb79190617ff1565b9250612f216040518060800160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001612ef691906190a6565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b910152856142b9565b9398909750929550919350505050565b60006110fa73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2868685876164d0565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b0316815260200188604051602001612f9491906190a6565b604051602081830303815290604052815260200188604051602001612fb991906190a6565b60408051601f1981840301815291815290825230602090811b63d3cdc04d1790911b91015284614815565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016130249190619b7f565b60408051601f1981840301815291815290825230602090811b639ad732ef1790911b910152846142b9565b606082516001600160401b038111801561306857600080fd5b50604051908082528060200260200182016040528015613092578160200160208202803683370190505b50905060005b83518114611f4f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168482815181106130d657fe5b60200260200101516001600160a01b0316146131205761311b838583815181106130fc57fe5b60200260200101516001600160a01b031661675290919063ffffffff16565b61312c565b826001600160a01b0316315b82828151811061313857fe5b6020908102919091010152600101613098565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161318b9190619b9f565b60408051601f1981840301815291815290825230602090811b638d201c221790911b910152846142b9565b60608060606126346040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200189846040516020016131fa92919061929b565b6040516020818303038152906040528152602001898460405160200161322192919061929b565b60408051601f1981840301815291815290825230602090811b63d31b0a8a1790911b91015285614815565b60006110fa85858486616825565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161329a91906190a6565b60408051601f1981840301815291815290825230602090811b63b770f8491790911b910152846142b9565b606080606084516001600160401b03811180156132e157600080fd5b5060405190808252806020026020018201604052801561330b578160200160208202803683370190505b50905060005b85518110156133605785600182885103038151811061332c57fe5b602002602001015182828151811061334057fe5b6001600160a01b0390921660209283029190910190910152600101613311565b5061145d6040518060a001604052808760008151811061337c57fe5b60200260200101516001600160a01b03168152602001876001895103815181106133a257fe5b60200260200101516001600160a01b0316815260200188886040516020016133cb9291906191a6565b604051602081830303815290604052815260200188846040516020016133f29291906191a6565b60408051601f1981840301815291815290825230602090811b638effa9ea1790911b91015285614815565b60608061145d6040518060a00160405280876001600160a01b03168152602001866001600160a01b031681526020018860405160200161345d91906190a6565b60405160208183030381529060405281526020018860405160200161348291906190a6565b60408051601f1981840301815291815290825230602090811b635c71cbe71790911b91015284614815565b600060608060606134bf888888615d20565b9350836134cb576110cc565b60405163276fdad960e11b81523090634edfb5b2906134f4908b9088908c908c90600401619cc1565b60006040518083038186803b15801561350c57600080fd5b505afa158015613520573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135489190810190618735565b8860800181905250876080015192506110c66040518060800160405280896001600160a01b03168152602001886001600160a01b031681526020018a6040516020016135949190619cae565b60408051601f1981840301815291815290825230602090811b63a095a0361790911b910152866142b9565b73e9db8717bc5dfb20aaf538b4a5a02b7791ff430c81565b60006110fa858385616ba9565b60006110fa85858486616d97565b60006110fa85858486616e5b565b60008060608061361289898989616092565b945092506001600160a01b03831661362957612d9b565b612d956040518060a00160405280896001600160a01b03168152602001886001600160a01b031681526020018587604051602001613668929190619280565b6040516020818303038152906040528152602001858715604051602001613690929190619280565b60408051601f1981840301815291815290825230602090811b63f573c1611790911b91015286614815565b60008060608087600001516001600160a01b0316631273b0c688886040518363ffffffff1660e01b81526004016136f39291906190d3565b60206040518083038186803b15801561370b57600080fd5b505afa15801561371f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137439190617ff1565b925060006001600160a01b03841615613761575060019350866137ff565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690613792908a908c906004016190d3565b60206040518083038186803b1580156137aa57600080fd5b505afa1580156137be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137e29190617ff1565b93506001600160a01b0384166137f857506110cc565b5060009350855b6116b76040518060a001604052808a6001600160a01b03168152602001896001600160a01b031681526020018b602001518789604051602001613844939291906190ed565b60405160208183030381529060405281526020018b60200151878915604051602001613872939291906190ed565b60408051601f1981840301815291815290825230602090811b63cd85e7b51790911b91015287614815565b606083516001600160401b03811180156138b657600080fd5b506040519080825280602002602001820160405280156138e0578160200160208202803683370190505b50905060005b84518114610fe3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685828151811061392457fe5b60200260200101516001600160a01b0316146139705761396b848487848151811061394b57fe5b60200260200101516001600160a01b0316616ebd9092919063ffffffff16565b613973565b60005b82828151811061397f57fe5b60209081029190910101526001016138e6565b60608061145d6040518060800160405280876001600160a01b03168152602001866001600160a01b03168152602001886040516020016139d291906190a6565b60408051601f1981840301815291815290825230602090811b63686b7ee81790911b910152846142b9565b60006110fa858385616f89565b6000606080866001600160a01b031663901754d787876040518363ffffffff1660e01b8152600401613a3d9291906190d3565b60206040518083038186803b158015613a5557600080fd5b505afa158015613a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a8d9190617ff1565b9250612f216040518060a00160405280886001600160a01b03168152602001876001600160a01b0316815260200185604051602001613acc91906190a6565b604051602081830303815290604052815260200185604051602001613af191906190a6565b60408051601f1981840301815291815290825230602090811b6315de17de1790911b91015285614815565b606080606080613b5e886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611f9857600080fd5b90506060613b6b8761706f565b905085516001600160401b0381118015613b8457600080fd5b50604051908082528060200260200182016040528015613bae578160200160208202803683370190505b50925085516001600160401b0381118015613bc857600080fd5b50604051908082528060200260200182016040528015613bf2578160200160208202803683370190505b50935085516001600160401b0381118015613c0c57600080fd5b50604051908082528060200260200182016040528015613c4057816020015b6060815260200190600190039081613c2b5790505b50945060005b8651811015613e7f5760005b8351811015613e5557606080613d776040518060a001604052808d600081518110613c7957fe5b60200260200101516001600160a01b031681526020018d60018f510381518110613c9f57fe5b60200260200101516001600160a01b031681526020018e613cc68f8b89815181106120ce57fe5b604051602001613cd792919061929b565b60405160208183030381529060405281526020018e613d1189613d0c8c8a81518110613cff57fe5b6020026020010151617107565b6152da565b604051602001613d2292919061929b565b6040516020818303038152906040528152602001306001600160a01b03166359ab9a6c63ffffffff169060201b1760401b815250613d728c8781518110613d6557fe5b602002602001015161719f565b614815565b91509150868481518110613d8757fe5b602002602001015160001480613dc4575080600081518110613da557fe5b6020026020010151878581518110613db957fe5b602002602001015110155b15613e4b5780600081518110613dd657fe5b6020026020010151878581518110613dea57fe5b60200260200101818152505081600081518110613e0357fe5b6020026020010151888581518110613e1757fe5b602002602001018181525050613e338b8785815181106120ce57fe5b898581518110613e3f57fe5b60200260200101819052505b5050600101613c52565b50838181518110613e6257fe5b602002602001015160001415613e7757613e7f565b600101613c46565b5050509450945094915050565b613e946178f1565b613e9c6178f1565b6000198060005b86518114613f9857613ed36020888381518110613ebc57fe5b602002602001015151038789848151811061282b57fe5b60006060306001600160a01b0316898481518110613eed57fe5b6020026020010151604051613f02919061908a565b6000604051808303816000865af19150503d8060008114613f3f576040519150601f19603f3d011682016040523d82523d6000602084013e613f44565b606091505b50915091508115613f8e576000613f68602083510383615a6f90919063ffffffff16565b9050600081118015613f7957508481105b15613f8c57838752602087018290529350835b505b5050600101613ea3565b50600019811415613fa95750610e6f565b60005b875181146140a157613fdc6020898381518110613fc557fe5b60200260200101515103838a848151811061282b57fe5b60006060306001600160a01b03168a8481518110613ff657fe5b602002602001015160405161400b919061908a565b6000604051808303816000865af19150503d8060008114614048576040519150601f19603f3d011682016040523d82523d6000602084013e61404d565b606091505b50915091508115614097576000614071602083510383615a6f90919063ffffffff16565b905060008111801561408257508581105b1561409557838852602088018290529450845b505b5050600101613fac565b505093509350939050565b6001546001600160a01b031681565b606060018251036001600160401b03811180156140d757600080fd5b50604051908082528060200260200182016040528015614101578160200160208202803683370190505b5090506000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561413f57600080fd5b505afa158015614153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141779190617ff1565b905060005b82518110156142b057816001600160a01b03166365da9289620249f08684815181106141a457fe5b60200260200101518785600101815181106141bb57fe5b602002602001015160006040518563ffffffff1660e01b81526004016141e393929190619182565b60206040518083038187803b1580156141fb57600080fd5b5086fa9350505050801561422c575060408051601f3d908101601f1916820190925261422991810190617ff1565b60015b61427a573d80801561425a576040519150601f19603f3d011682016040523d82523d6000602084013e61425f565b606091505b505060408051600081526020810190915292506142b3915050565b8084838151811061428757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505060010161417c565b50505b92915050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946143059460a09390931b6001600160e01b03191693919290918a906004016195b0565b600060405180830381600087803b15801561431f57600080fd5b505af1925050508015614330575060015b61138d573d80801561435e576040519150601f19603f3d011682016040523d82523d6000602084013e614363565b606091505b508080602001905181019061437891906185b8565b935091506143839050565b9250929050565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156143de57600080fd5b505afa1580156143f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144169190618618565b6040518263ffffffff1660e01b8152600401614432919061958e565b60206040518083038186803b15801561444a57600080fd5b505afa15801561445e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144829190617ff1565b915085602001515160001415614497576145b3565b6000805b8760200151518110156145b0576002886020015182815181106144ba57fe5b60200260200101515110156144ce576145a8565b836001600160a01b0316637f9c0ecd620493e08a6020015184815181106144f157fe5b60200260200101518860018a51038151811061450957fe5b60200260200101516040518463ffffffff1660e01b815260040161452e9291906193c3565b60206040518083038187803b15801561454657600080fd5b5086fa93505050508015614577575060408051601f3d908101601f1916820190925261457491810190618618565b60015b614580576145a8565b828111156145a6578092508860200151828151811061459b57fe5b602002602001015193505b505b60010161449b565b50505b94509492505050565b600080828060200190518101906145d39190617ff1565b90506000876001600160a01b0316876001600160a01b0316141561465757604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d9061461d90889060040161958e565b600060405180830381600087803b15801561463757600080fd5b505af115801561464b573d6000803e3d6000fd5b5050505084905061466b565b61466b6001600160a01b03881683876171e0565b816001600160a01b031663d5bcb9b5828a6001600160a01b03168a6001600160a01b03161461469a578961469d565b60005b8b6001600160a01b03168a6001600160a01b0316146146bc57896146bf565b60005b89600160006040518763ffffffff1660e01b81526004016146e49594939291906196c2565b6020604051808303818588803b1580156146fd57600080fd5b505af1158015614711573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906147369190618618565b9250876001600160a01b0316866001600160a01b031614156147a757876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b15801561478d57600080fd5b505af11580156147a1573d6000803e3d6000fd5b50505050505b505095945050505050565b60008082516040146147c9575060009050806147e2565b828060200190518101906147dd9190618ea6565b915091505b915091565b606082826040516020016147fc929190619532565b6040516020818303038152906040529050805160208201fd5b60608082516001600160401b038111801561482f57600080fd5b50604051908082528060200260200182016040528015614859578160200160208202803683370190505b50905082516001600160401b038111801561487357600080fd5b5060405190808252806020026020018201604052801561489d578160200160208202803683370190505b5091508251600014156148af57614383565b60408051600180825281830190925260609160208083019080368337019050509050836000815181106148de57fe5b6020026020010151816000815181106148f357fe5b602002602001018181525050614907617955565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152614965617955565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b81525090506149d081846142b9565b905080935050826000815181106149e357fe5b6020026020010151600014156149fb57505050614383565b6060614a0783856142b9565b90508091505080600081518110614a1a57fe5b602002602001015160001415614a335750505050614383565b60005b8751811015614c7657606060005b6005811015614bef57614a938a8481518110614a5c57fe5b602002602001015185600081518110614a7157fe5b602002602001015189600081518110614a8657fe5b6020026020010151617273565b87600081518110614aa057fe5b60200260200101818152505086600081518110614ab957fe5b602002602001015160001415614ace57614bef565b614ae760056127100161271089600081518110614a8657fe5b87600081518110614af457fe5b60200260200101818152505086600081518110614b0d57fe5b602002602001015160001415614b2257614bef565b6060614b2e87896142b9565b805191945091508190600090614b4057fe5b602002602001015160001415614b565750614bef565b8094508a8481518110614b6557fe5b602002602001015185600081518110614b7a57fe5b602002602001015110614be65760008b8581518110614b9557fe5b60200260200101516127108d8781518110614bac57fe5b602002602001015188600081518110614bc157fe5b6020026020010151030281614bd257fe5b04905060058111614be4575050614bef565b505b50600101614a44565b5080600081518110614bfd57fe5b6020026020010151888381518110614c1157fe5b602002602001018181525050614c56898381518110614c2c57fe5b602002602001015184600081518110614c4157fe5b602002602001015188600081518110614a8657fe5b878381518110614c6257fe5b602090810291909101015250600101614a36565b50505050509250929050565b600080606083806020019051810190614c9b919061881a565b9092509050614cb46001600160a01b03871683876171e0565b6040805160a08101825282815230602082015242818301526060810187905260016080820152905163c04b8d5960e01b81526001600160a01b0384169163c04b8d5991614d049190600401619be7565b602060405180830381600087803b158015614d1e57600080fd5b505af1158015614d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7a9190618618565b60008082806020019051810190614d6d9190617ff1565b9050614d836001600160a01b03871682866171e0565b604051630310da7b60e11b81526001600160a01b03821690630621b4f690614d0490899088908a90600190600401619775565b60006110fd83614dda614dca8260016172cb565b614dd488876172ef565b90617320565b9061733c565b60008082806020019051810190614df79190617ff1565b9050614e0d6001600160a01b03871682866171e0565b604051630164b07960e31b81526001600160a01b03821690630b2583c890614d0490899089908990600190428201906004016196f2565b60606002828451031015614e6a5760405162461bcd60e51b81526004016113a590619846565b614e7261797d565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110614ec657fe5b602002602001015190506000878760010181518110614ee157fe5b6020026020010151905060005b6003811015614fd65760008a6001600160a01b0316631698ee8285858a8660038110614f1657fe5b60200201516040518463ffffffff1660e01b8152600401614f399392919061969a565b60206040518083038186803b158015614f5157600080fd5b505afa158015614f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f899190617ff1565b9050614f9481617366565b15614fcd5780868680600101975081518110614fac57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101614eee565b50505080614fe657505050612acd565b85518560020114156150dc57806001600160401b038111801561500857600080fd5b5060405190808252806020026020018201604052801561503c57816020015b60608152602001906001900390816150275790505b50935060005b818110156150d35760408051600180825281830190925290602080830190803683370190505085828151811061507457fe5b602002602001018190525082818151811061508b57fe5b602002602001015185828151811061509f57fe5b60200260200101516000815181106150b357fe5b6001600160a01b0390921660209283029190910190910152600101615042565b50505050612acd565b60606150ec888888600101614e44565b90508051600014156151015750505050612acd565b805182026001600160401b038111801561511a57600080fd5b5060405190808252806020026020018201604052801561514e57816020015b60608152602001906001900390816151395790505b50945060005b828110156152ce5760005b82518110156152c557825182810282019084908390811061517c57fe5b6020026020010151516001016001600160401b038111801561519d57600080fd5b506040519080825280602002602001820160405280156151c7578160200160208202803683370190505b508882815181106151d457fe5b60200260200101819052508583815181106151eb57fe5b60200260200101518882815181106151ff57fe5b602002602001015160008151811061521357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061524257fe5b6020026020010151518110156152bb5784838151811061525e57fe5b6020026020010151818151811061527157fe5b602002602001015189838151811061528557fe5b6020026020010151826001018151811061529b57fe5b6001600160a01b0390921660209283029190910190910152600101615236565b505060010161515f565b50600101615154565b50505050509392505050565b606060028351101580156152f2575081516001018351145b61530e5760405162461bcd60e51b81526004016113a59061996a565b81516003028351601402016001600160401b038111801561532e57600080fd5b506040519080825280601f01601f191660200182016040528015615359576020820181803683370190505b5090506020810160005b84518110156142b057801561540857600084600183038151811061538357fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b1580156153c357600080fd5b505afa1580156153d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153fb9190618e83565b60e81b8352506003909101905b600085828151811061541657fe5b602090810291909101015160601b835250601490910190600101615363565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051615473919061908a565b600060405180830381855afa9150503d80600081146154ae576040519150601f19603f3d011682016040523d82523d6000602084013e6154b3565b606091505b50915091508180156154c757506020815110155b156154da576154d7816000615a6f565b92505b5050919050565b600080828060200190518101906154f89190617ff1565b905061550e6001600160a01b03871682866171e0565b604051638201aa3f60e01b81526001600160a01b03821690638201aa3f9061554590899088908a906001906000199060040161979f565b6040805180830381600087803b15801561555e57600080fd5b505af1158015615572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155969190618ea6565b509695505050505050565b805160208201fd5b604051828152816020820152604081fd5b600080606080848060200190518101906155d4919061800d565b81519295509093509150600111156155fe5760405162461bcd60e51b81526004016113a590619ad3565b81516001018151146156225760405162461bcd60e51b81526004016113a5906199fe565b866001600160a01b03168160018351038151811061563c57fe5b60200260200101516001600160a01b03161461566a5760405162461bcd60e51b81526004016113a59061990d565b61569c83878360008151811061567c57fe5b60200260200101516001600160a01b03166171e09092919063ffffffff16565b60405163ceb757d560e01b81526060906001600160a01b0385169063ceb757d5906156d6908a906001908890889030904290600401619e9e565b600060405180830381600087803b1580156156f057600080fd5b505af1158015615704573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261572c9190810190618586565b90508060018251038151811061573e57fe5b60200260200101519450505050509392505050565b600061575d61799b565b828060200190518101906157719190618a79565b90506000876001600160a01b0316876001600160a01b031614156157f55750604051632e1a7d4d60e01b815284906001600160a01b03891690632e1a7d4d906157be90849060040161958e565b600060405180830381600087803b1580156157d857600080fd5b505af11580156157ec573d6000803e3d6000fd5b5050505061580c565b815161580c906001600160a01b03891690876171e0565b6040516370a0823160e01b81526000906001600160a01b038816906370a082319061583b9030906004016190a6565b60206040518083038186803b15801561585357600080fd5b505afa158015615867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061588b9190618618565b90506000606084600001516001600160a01b0316848660200151876040015188606001518c60016040516024016158c59493929190619802565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051615903919061908a565b60006040518083038185875af1925050503d8060008114615940576040519150601f19603f3d011682016040523d82523d6000602084013e615945565b606091505b50915091508161595857615958816155a1565b8a6001600160a01b0316896001600160a01b031614156159ca574795508a6001600160a01b031663d0e30db0876040518263ffffffff1660e01b81526004016000604051808303818588803b1580156159b057600080fd5b505af11580156159c4573d6000803e3d6000fd5b50505050505b615a50838a6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016159fa91906190a6565b60206040518083038186803b158015615a1257600080fd5b505afa158015615a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615a4a9190618618565b906172cb565b9b9a5050505050505050505050565b615a6a838383617572565b505050565b6000612acd8383617599565b60008060608084806020019051810190615a959190618767565b80519194509250600211159050615abe5760405162461bcd60e51b81526004016113a5906199af565b856001600160a01b031681600183510381518110615ad857fe5b60200260200101516001600160a01b031614615b065760405162461bcd60e51b81526004016113a590619b22565b615b1882868360008151811061567c57fe5b6040516338ed173960e01b81526060906001600160a01b038416906338ed173990615b50908990600190879030904290600401619eee565b600060405180830381600087803b158015615b6a57600080fd5b505af1158015615b7e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615ba69190810190618586565b905080600182510381518110615bb857fe5b602002602001015193505050509392505050565b6000615bd66178da565b82806020019051810190615bea91906188d7565b8051909150615c04906001600160a01b03881690866171e0565b615c0c6179c2565b6040805160c081019091526020808401518252810160008152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001604051806020016040528060008152508152509050615c6961799b565b506040805160808101825230808252600060208301819052828401919091526060820152835191516352bbbe2960e01b815290916001600160a01b0316906352bbbe2990615cc290859085906001904290600401619e12565b602060405180830381600087803b158015615cdc57600080fd5b505af1158015615cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d149190618618565b98975050505050505050565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b031614615d5e5786615d74565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614615d975786615dad565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b16909152615de192919060019060248101619111565b60006040518083038186803b158015615df957600080fd5b505afa158015615e0d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615e3591908101906182a2565b505090508051866000015110615e51575060009150612acd9050565b80866000015181518110615e6157fe5b6020026020010151925060f883901c60001c60bb1415615e87575060009150612acd9050565b50509392505050565b600080606083806020019051810190615ea9919061881a565b915091506000886001600160a01b0316886001600160a01b031614615ee157615edc6001600160a01b03891684886171e0565b615f43565b50604051632e1a7d4d60e01b815285906001600160a01b038a1690632e1a7d4d90615f1090849060040161958e565b600060405180830381600087803b158015615f2a57600080fd5b505af1158015615f3e573d6000803e3d6000fd5b505050505b826001600160a01b03166329589f61828b6001600160a01b03168b6001600160a01b031614615f72578a615f74565b8c5b898d6001600160a01b03168c6001600160a01b031614615f94578b615f96565b8e5b30600019600160008b6040518a63ffffffff1660e01b8152600401615fc2989796959493929190619723565b6020604051808303818588803b158015615fdb57600080fd5b505af1158015615fef573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906160149190618618565b9350886001600160a01b0316876001600160a01b0316141561608557886001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561606b57600080fd5b505af115801561607f573d6000803e3d6000fd5b50505050505b5050509695505050505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b81526004016160c59291906190d3565b60006040518083038186803b1580156160dd57600080fd5b505afa1580156160f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526161199190810190618270565b9050600191508051600014156161b2576040516315e8a07760e21b81526001600160a01b038816906357a281dc9061615790879089906004016190d3565b60006040518083038186803b15801561616f57600080fd5b505afa158015616183573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526161ab9190810190618270565b9050600091505b805186106161c75760008092509250506145b3565b8086815181106161d357fe5b602002602001015192505094509492505050565b600080606080848060200190518101906162019190618767565b8051919450925060021115905061622a5760405162461bcd60e51b81526004016113a5906198c1565b856001600160a01b03168160018351038151811061624457fe5b60200260200101516001600160a01b031614806162b9575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168160018351038151811061628a57fe5b60200260200101516001600160a01b03161480156162b95750866001600160a01b0316866001600160a01b0316145b6162d55760405162461bcd60e51b81526004016113a590619a76565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168260008151811061630257fe5b60200260200101516001600160a01b0316141561637f57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d9061634590899060040161958e565b600060405180830381600087803b15801561635f57600080fd5b505af1158015616373573d6000803e3d6000fd5b5050505085905061639e565b61639e8260008151811061638f57fe5b602002602001015184886171e0565b60405163b77d239b60e01b81526001600160a01b0384169063b77d239b9083906163d89086908b9060019030906000908190600401619464565b6020604051808303818588803b1580156163f157600080fd5b505af1158015616405573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061642a9190618618565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03168260018451038151811061645a57fe5b60200260200101516001600160a01b03161415611bec57876001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156164ac57600080fd5b505af11580156164c0573d6000803e3d6000fd5b5050505050505050949350505050565b600080828060200190518101906164e79190617ff1565b905060006164f7888389896175c3565b9050876001600160a01b0316876001600160a01b031614156165fd57604051632e1a7d4d60e01b81526001600160a01b03891690632e1a7d4d9061653f90889060040161958e565b600060405180830381600087803b15801561655957600080fd5b505af115801561656d573d6000803e3d6000fd5b505060405163ad65d76d60e01b81526001600160a01b038416925063ad65d76d915087906165a49060019042903090600401619827565b6020604051808303818588803b1580156165bd57600080fd5b505af11580156165d1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906165f69190618618565b92506147a7565b876001600160a01b0316866001600160a01b031614156167095761662b6001600160a01b03881682876171e0565b6040516395e3c50b60e01b81526001600160a01b038216906395e3c50b9061665c9088906001904290600401619f75565b602060405180830381600087803b15801561667657600080fd5b505af115801561668a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906166ae9190618618565b9250876001600160a01b031663d0e30db0846040518263ffffffff1660e01b81526004016000604051808303818588803b1580156166eb57600080fd5b505af11580156166ff573d6000803e3d6000fd5b50505050506147a7565b61671d6001600160a01b03881682876171e0565b60405163ddf7e1a760e01b81526001600160a01b0382169063ddf7e1a790615cc2908890600190819042908d90600401619f49565b6000806060846001600160a01b03166370a0823160e01b8560405160240161677a91906190a6565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516167b8919061908a565b600060405180830381855afa9150503d80600081146167f3576040519150601f19603f3d011682016040523d82523d6000602084013e6167f8565b606091505b509150915081801561680c57506020815110155b156142b05761681c816000615a6f565b95945050505050565b600061682f6178da565b828060200190518101906168439190618daf565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161687391906190a6565b60206040518083038186803b15801561688b57600080fd5b505afa15801561689f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906168c39190618618565b82516020840151919250906001600160a01b03898116911614156169cb57616966816001600160a01b03166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b15801561691d57600080fd5b505afa158015616931573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906169559190617ff1565b6001600160a01b038a1690886171e0565b604051634acc893b60e11b81526001600160a01b038216906395991276906169949030908a906004016190ba565b600060405180830381600087803b1580156169ae57600080fd5b505af11580156169c2573d6000803e3d6000fd5b50505050616b79565b82602001516001600160a01b0316876001600160a01b03161415616b79576000616a6e826001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015616a2757600080fd5b505afa158015616a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616a5f9190618618565b670de0b6b3a764000090617320565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015616aab57600080fd5b505afa158015616abf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616ae39190618ec9565b60ff16600a0a90506000616afb83614dda8b856172ef565b8651909150616b15906001600160a01b038d16908b6171e0565b604051638d7ef9bb60e01b81526001600160a01b03851690638d7ef9bb90616b4390309085906004016190ba565b600060405180830381600087803b158015616b5d57600080fd5b505af1158015616b71573d6000803e3d6000fd5b505050505050505b615d1482886001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016159fa91906190a6565b60008060008084806020019051810190616bc391906187ab565b91945092509050616bde6001600160a01b03881683886171e0565b8015616c7b5760408051600081526020810191829052638dae733360e01b9091526001600160a01b03831690638dae733390616c2290899060019060248101619f2a565b602060405180830381600087803b158015616c3c57600080fd5b505af1158015616c50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616c749190618618565b9350616d8d565b60405163ca19ebd960e01b81526001600160a01b0384169063ca19ebd990616ca99085908a906004016190ba565b60206040518083038186803b158015616cc157600080fd5b505afa158015616cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616cf99190618618565b6040805160008152602081019182905263733e738360e11b9091529094506001600160a01b0383169063e67ce70690616d399087908a9060248101619f2a565b602060405180830381600087803b158015616d5357600080fd5b505af1158015616d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616d8b9190618618565b505b5050509392505050565b600080606083806020019051810190616db0919061881a565b9092509050616dc96001600160a01b0388168387617703565b6040516319740ac160e21b81526001600160a01b038316906365d02b0490616dfe908a908a903090600190889060040161965f565b602060405180830381600087803b158015616e1857600080fd5b505af1158015616e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190616e509190618618565b979650505050505050565b60008082806020019051810190616e729190617ff1565b9050616e886001600160a01b03871682866171e0565b60405163d5bcb9b560e01b81526001600160a01b0382169063d5bcb9b590614d049089908990899060019030906004016196c2565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401616ee79291906190d3565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616f25919061908a565b600060405180830381855afa9150503d8060008114616f60576040519150601f19603f3d011682016040523d82523d6000602084013e616f65565b606091505b5091509150818015616f7957506020815110155b15615e8757612c7a816000615a6f565b600080600083806020019051810190616fa291906187ec565b9092509050616fbb6001600160a01b0387168387617703565b8061704357604051636ec9facd60e11b81526001600160a01b0383169063dd93f59a90616fec9030906004016190a6565b602060405180830381600087803b15801561700657600080fd5b505af115801561701a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061703e9190618618565b612c7a565b604051632f58056d60e21b81526001600160a01b0383169063bd6015b490614d049030906004016190a6565b606081516001600160401b038111801561708857600080fd5b506040519080825280602002602001820160405280156170b2578160200160208202803683370190505b50905060005b8251811015612353578260018285510303815181106170d357fe5b60200260200101518282815181106170e757fe5b6001600160a01b03909216602092830291909101909101526001016170b8565b606081516001600160401b038111801561712057600080fd5b5060405190808252806020026020018201604052801561714a578160200160208202803683370190505b50905060005b82518110156123535782600182855103038151811061716b57fe5b602002602001015182828151811061717f57fe5b6001600160a01b0390921660209283029190910190910152600101617150565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106171cf57fe5b602002602001018181525050919050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e9061721090309087906004016190d3565b60206040518083038186803b15801561722857600080fd5b505afa15801561723c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906172609190618618565b1015615a6a57615a6a8383600019617764565b6000831580617280575081155b80617289575082155b1561729657506000612acd565b838202828582816172a357fe5b04146172b3576000915050612acd565b83600185038201816172c157fe5b0495945050505050565b6000828211156172e9576172e96172e460028585617781565b6155a1565b50900390565b6000826172fe575060006142b3565b8282028284828161730b57fe5b0414612acd57612acd6172e460018686617781565b600082820183811015612acd57612acd6172e460008686617781565b600081617352576173526172e460038585617781565b600082848161735d57fe5b04949350505050565b6000813b8061737957600091505061110a565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156173b357600080fd5b505afa1580156173c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173eb9190617ff1565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161741691906190a6565b60206040518083038186803b15801561742e57600080fd5b505afa158015617442573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174669190618618565b6174725750600061110a565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156174ab57600080fd5b505afa1580156174bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906174e39190617ff1565b6001600160a01b03166370a08231836040518263ffffffff1660e01b815260040161750e91906190a6565b60206040518083038186803b15801561752657600080fd5b505afa15801561753a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061755e9190618618565b61756a5750600061110a565b506001919050565b8160200183511015617591576175916172e460058551856020016177db565b910160200152565b600081602001835110156175ba576175ba6172e460058551856020016177db565b50016020015190565b6000846001600160a01b0316836001600160a01b03161461765f576040516303795fb160e11b81526001600160a01b038516906306f2bf629061760a9086906004016190a6565b60206040518083038186803b15801561762257600080fd5b505afa158015617636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061765a9190617ff1565b6176db565b6040516303795fb160e11b81526001600160a01b038516906306f2bf629061768b9085906004016190a6565b60206040518083038186803b1580156176a357600080fd5b505afa1580156176b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906176db9190617ff1565b90506001600160a01b0381166110fd5760405162461bcd60e51b81526004016113a59061988a565b606063a9059cbb60e01b83836040516024016177209291906190ba565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061775e84826177fa565b50505050565b606063095ea7b360e01b83836040516024016177209291906190ba565b606063e946c1bb60e01b8484846040516024016177a0939291906197d3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b6060632800659560e01b8484846040516024016177a0939291906197f4565b60006060836001600160a01b031683604051617816919061908a565b6000604051808303816000865af19150503d8060008114617853576040519150601f19603f3d011682016040523d82523d6000602084013e617858565b606091505b509150915081801561786e575061786e81617883565b1561787a5750506117d7565b61775e816155a1565b60008151600014156178975750600161110a565b602082511061110a5760006178ad836000615a6f565b9050806001141561235357600191505061110a565b60408051808201909152606081526000602082015290565b604080518082019091526000808252602082015290565b604051806040016040528060008152602001606081525090565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b60405180606001604052806003906020820280368337509192915050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b80356142b38161a06d565b60008083601f840112617a27578182fd5b5081356001600160401b03811115617a3d578182fd5b602083019150836020808302850101111561438357600080fd5b600082601f830112617a67578081fd5b8135617a7a617a7582619ff5565b619fcf565b818152915060208083019084810181840286018201871015617a9b57600080fd5b60005b84811015617ac3578135617ab18161a06d565b84529282019290820190600101617a9e565b505050505092915050565b600082601f830112617ade578081fd5b8151617aec617a7582619ff5565b818152915060208083019084810181840286018201871015617b0d57600080fd5b60005b84811015617ac3578151617b238161a06d565b84529282019290820190600101617b10565b600082601f830112617b45578081fd5b8135617b53617a7582619ff5565b818152915060208083019084810160005b84811015617ac357617b7b888484358a0101617d24565b84529282019290820190600101617b64565b600082601f830112617b9d578081fd5b8135617bab617a7582619ff5565b818152915060208083019084810181840286018201871015617bcc57600080fd5b60005b84811015617ac3578135617be28161a06d565b84529282019290820190600101617bcf565b600082601f830112617c04578081fd5b8135617c12617a7582619ff5565b8181529150602080830190848101608080850287018301881015617c3557600080fd5b60005b85811015617c5c57617c4a8984617f4a565b85529383019391810191600101617c38565b50505050505092915050565b600082601f830112617c78578081fd5b8135617c86617a7582619ff5565b818152915060208083019084810181840286018201871015617ca757600080fd5b60005b84811015617ac357813584529282019290820190600101617caa565b600082601f830112617cd6578081fd5b8151617ce4617a7582619ff5565b818152915060208083019084810181840286018201871015617d0557600080fd5b60005b84811015617ac357815184529282019290820190600101617d08565b600082601f830112617d34578081fd5b8135617d42617a758261a014565b9150808252836020828501011115617d5957600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112617d82578081fd5b8151617d90617a758261a014565b9150808252836020828501011115617da757600080fd5b611f4f81602084016020860161a037565b8051600281106142b357600080fd5b80356142b38161a0a6565b600060a08284031215617de3578081fd5b617ded60a0619fcf565b9050813581526020820135617e018161a06d565b60208201526040820135617e148161a06d565b60408201526060820135617e278161a06d565b606082015260808201356001600160401b03811115617e4557600080fd5b617e5184828501617d24565b60808301525092915050565b6000610180808385031215617e70578182fd5b617e7981619fcf565b915050617e868383617a0b565b8152617e958360208401617a0b565b6020820152617ea78360408401617fa7565b6040820152617eb98360608401617fa7565b6060820152617ecb8360808401617fa7565b6080820152617edd8360a08401617a0b565b60a0820152617eef8360c08401617a0b565b60c0820152617f018360e08401617a0b565b60e0820152610100617f1584828501617a0b565b908201526101208281013590820152610140617f3384828501617fbe565b818301525061016080830135818301525092915050565b600060808284031215617f5b578081fd5b617f656080619fcf565b9050813560048110617f7657600080fd5b81526020820135617f868161a0b5565b80602083015250604082013560408201526060820135606082015292915050565b80356001600160801b03811681146142b357600080fd5b80356001600160401b03811681146142b357600080fd5b600060208284031215617fe6578081fd5b8135612acd8161a06d565b600060208284031215618002578081fd5b8151612acd8161a06d565b600080600060608486031215618021578182fd5b835161802c8161a06d565b60208501519093506001600160401b0380821115618048578384fd5b61805487838801617ace565b93506040860151915080821115618069578283fd5b5061807686828701617ace565b9150509250925092565b60008060008060808587031215618095578182fd5b84356180a08161a06d565b935060208501356180b08161a06d565b925060408501356180c08161a06d565b915060608501356001600160401b038111156180da578182fd5b6180e687828801617c68565b91505092959194509250565b60008060008060808587031215618107578182fd5b84356181128161a06d565b935060208501356181228161a06d565b925060408501356001600160401b0381111561813c578283fd5b61814887828801617d24565b949793965093946060013593505050565b60008060006060848603121561816d578081fd5b83356181788161a06d565b925060208401356001600160401b0380821115618193578283fd5b61819f87838801617a57565b935060408601359150808211156181b4578283fd5b5061807686828701617c68565b600080600080600060a086880312156181d8578283fd5b85356181e38161a06d565b94506020860135935060408601356181fa8161a06d565b9250606086013561820a8161a06d565b915060808601356001600160401b03811115618224578182fd5b61823088828901617c68565b9150509295509295909350565b6000806020838503121561824f578182fd5b82356001600160401b03811115618264578283fd5b6117cb85828601617a16565b600060208284031215618281578081fd5b81516001600160401b03811115618296578182fd5b6110fd84828501617ace565b6000806000606084860312156182b6578081fd5b83516001600160401b03808211156182cc578283fd5b818601915086601f8301126182df578283fd5b81516182ed617a7582619ff5565b80828252602080830192508086018b82838702890101111561830d578788fd5b8796505b8487101561832f578051845260019690960195928101928101618311565b508901519097509350505080821115618346578283fd5b5061835386828701617cc6565b9250506183638560408601617db8565b90509250925092565b600080600060608486031215618380578081fd5b83356001600160401b0380821115618396578283fd5b6183a287838801617b35565b945060208601359150808211156183b7578283fd5b506183c486828701617b35565b925050604084013590509250925092565b6000602082840312156183e6578081fd5b81356001600160401b038111156183fb578182fd5b6110fd84828501617b8d565b60008060408385031215618419578182fd5b82356001600160401b0381111561842e578283fd5b61843a85828601617b8d565b925050602083013561844b8161a06d565b809150509250929050565b60008060006060848603121561846a578081fd5b83356001600160401b0381111561847f578182fd5b61848b86828701617b8d565b935050602084013561849c8161a06d565b915060408401356184ac8161a06d565b809150509250925092565b6000806000606084860312156184cb578081fd5b83356001600160401b03808211156184e1578283fd5b818601915086601f8301126184f4578283fd5b8135618502617a7582619ff5565b80828252602080830192508086016101808c838288028a01011115618525578889fd5b8897505b858810156185515761853b8d83617e5d565b8552600197909701969382019390810190618529565b50919850890135945050505080821115618569578283fd5b5061857686828701617bf4565b9250506183638560408601617a0b565b600060208284031215618597578081fd5b81516001600160401b038111156185ac578182fd5b6110fd84828501617cc6565b600080604083850312156185ca578182fd5b82516001600160401b03808211156185e0578384fd5b6185ec86838701617cc6565b93506020850151915080821115618601578283fd5b5061860e85828601617cc6565b9150509250929050565b600060208284031215618629578081fd5b5051919050565b600080600080600060a08688031215618647578283fd5b85356186528161a090565b945060208601356186628161a06d565b935060408601356186728161a06d565b925060608601356001600160401b038082111561868d578283fd5b61869989838a01617d24565b935060808801359150808211156186ae578283fd5b5061823088828901617c68565b600080600080600060a086880312156186d2578283fd5b85356186dd8161a090565b945060208601356186ed8161a06d565b935060408601356186fd8161a06d565b925060608601356001600160401b03811115618717578182fd5b61872388828901617d24565b95989497509295608001359392505050565b600060208284031215618746578081fd5b81516001600160401b0381111561875b578182fd5b6110fd84828501617d72565b60008060408385031215618779578182fd5b82516187848161a06d565b60208401519092506001600160401b0381111561879f578182fd5b61860e85828601617ace565b6000806000606084860312156187bf578081fd5b83516187ca8161a06d565b60208501519093506187db8161a06d565b60408501519092506184ac8161a082565b600080604083850312156187fe578182fd5b82516188098161a06d565b602084015190925061844b8161a082565b6000806040838503121561882c578182fd5b82516188378161a06d565b60208401519092506001600160401b03811115618852578182fd5b61860e85828601617d72565b60008060008060808587031215618873578182fd5b843561887e8161a06d565b9350602085013561888e8161a06d565b925060408501356001600160401b03808211156188a9578384fd5b6188b588838901617b8d565b935060608701359150808211156188ca578283fd5b506180e687828801617c68565b6000604082840312156188e8578081fd5b6188f26040619fcf565b82516188fd8161a06d565b81526020928301519281019290925250919050565b60008060008084860360a0811215618928578283fd5b6040811215618935578283fd5b506189406040619fcf565b853561894b8161a06d565b815260208681013590820152935060408501356189678161a06d565b925060608501356189778161a06d565b915060808501356001600160401b038111156180da578182fd5b600080600080608085870312156189a6578182fd5b84356001600160401b03808211156189bc578384fd5b90860190604082890312156189cf578384fd5b6189d96040619fcf565b82356189e48161a06d565b8152602083810135838111156189f8578687fd5b80850194505089601f850112618a0c578586fd5b8335618a1a617a7582619ff5565b81815282810190868401895b84811015618a4f57618a3d8f8784358c0101617a57565b84529285019290850190600101618a26565b50508084860152505050819750618a688a828b01617a0b565b965050506188b58860408901617a0b565b600060808284031215618a8a578081fd5b618a946080619fcf565b8251618a9f8161a06d565b81526020830151618aaf8161a090565b60208201526040830151618ac28161a0a6565b60408201526060830151618ad58161a0a6565b60608201529392505050565b60008060008084860360e0811215618af7578283fd5b6080811215618b04578283fd5b50618b0f6080619fcf565b8535618b1a8161a06d565b81526020860135618b2a8161a090565b6020820152618b3c8760408801617dc7565b6040820152618b4e8760608801617dc7565b60608201529350618b628660808701617a0b565b9250618b718660a08701617a0b565b915060c08501356001600160401b038111156180da578182fd5b60008060008084860360a0811215618ba1578283fd5b6040811215618bae578283fd5b50618bb96040619fcf565b8535618bc48161a06d565b81526020860135618bd48161a06d565b6020820152935060408501356189678161a06d565b600060208284031215618bfa578081fd5b81516001600160401b0380821115618c10578283fd5b9083019060a08286031215618c23578283fd5b618c2d60a0619fcf565b825181526020830151618c3f8161a06d565b60208201526040830151618c528161a06d565b60408201526060830151618c658161a06d565b6060820152608083015182811115618c7b578485fd5b618c8787828601617d72565b60808301525095945050505050565b60008060008060808587031215618cab578182fd5b84356001600160401b0380821115618cc1578384fd5b618ccd88838901617dd2565b955060208701359150618cdf8261a06d565b909350604086013590618cf18261a06d565b909250606086013590808211156188ca578283fd5b60008060008060808587031215618d1b578182fd5b84356001600160401b03811115618d30578283fd5b618d3c87828801617dd2565b945050602085013592506040850135618d548161a06d565b91506060850135618d648161a06d565b939692955090935050565b60008060006102208486031215618d84578081fd5b618d8e8585617e5d565b9250618d9e856101808601617f4a565b91506102008401356184ac8161a06d565b600060408284031215618dc0578081fd5b618dca6040619fcf565b8251618dd58161a06d565b81526020830151618de58161a06d565b60208201529392505050565b60008060008084860360c0811215618e07578283fd5b6060811215618e14578283fd5b50618e1f6060619fcf565b8535618e2a8161a06d565b8152602086810135908201526040860135618e448161a06d565b604082015293506060850135618e598161a06d565b92506080850135618e698161a06d565b915060a08501356001600160401b038111156180da578182fd5b600060208284031215618e94578081fd5b815162ffffff81168114612acd578182fd5b60008060408385031215618eb8578182fd5b505080516020909101519092909150565b600060208284031215618eda578081fd5b8151612acd8161a0b5565b6001600160a01b03169052565b6000815180845260208085019450808401835b83811015618f2a5781516001600160a01b031687529582019590820190600101618f05565b509495945050505050565b6000815180845260208085019450808401835b83811015618f2a57815187529582019590820190600101618f48565b60008151808452618f7c81602086016020860161a037565b601f01601f19169290920160200192915050565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b6000815183526020820151604060208501526110fd6040850182618f64565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a060808501526110fd60a0850182618f64565b805161903c8161a063565b825260208181015160ff169083015260408082015190830152606090810151910152565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b6000825161909c81846020870161a037565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090612c7a90830184618f64565b6001600160a01b0385811682528416602082015260806040820181905260009061917190830185618f64565b905082606083015295945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03831681526040602082018190526000906110fd90830184618ef2565b6001600160a01b03841681526060602082018190526000906191ee90830185618ef2565b8281036040840152612c7a8185618ef2565b6001600160a01b038516815260806020820181905260009061922490830186618ef2565b82810360408401526192368186618f35565b90508281036060840152616e508185618f35565b6001600160a01b038416815260606020820181905260009061926e90830185618f35565b8281036040840152612c7a8185618f35565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03831681526040602082018190526000906110fd90830184618f64565b6001600160a01b038516815260006192d68561a063565b846020830152608060408301526192f06080830185618f35565b8281036060840152616e508185618f35565b6001600160a01b0389811682526000906101009061931f8b61a063565b8a60208501528160408501526193378285018b618f35565b9150838203606085015261934b828a618f35565b9088166080850152905061935e8661a063565b8560a084015282810360c08401526193768186618f35565b905082810360e0840152615a508185618f35565b60006060825261939d6060830186618ef2565b82810360208401526193af8186618f35565b90508281036040840152612c7a8185618f35565b6000604082526193d66040830185618ef2565b90508260208301529392505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b8381101561943a57607f19888403018552619428838351618f64565b9486019492509085019060010161940c565b50508581038487015261944d8189618f35565b93505050508281036040840152612c7a8185618f35565b600060c0825261947760c0830189618ef2565b60208301979097525060408101949094526001600160a01b0392831660608501529116608083015260a090910152919050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561951157888303603f19018552815180518785526194f288860182618f64565b91890151151594890194909452948701949250908601906001016194ce565b509098975050505050505050565b600060208252612acd6020830184618f35565b6000604082526195456040830185618f35565b828103602084015261681c8185618f35565b901515815260200190565b84151581526001600160a01b03841660208201526080604082018190526000906192f090830185618f35565b90815260200190565b6000858252608060208301526192246080830186618f64565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a0606082018190526000906195ec90830185618f64565b8281036080840152615d148185618f35565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061963a90830185618f64565b90508260808301529695505050505050565b600060208252612acd6020830184618f64565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a060808201819052600090616e5090830184618f64565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b03898116825260208201899052878116604083015286811660608301526080820186905260a08201859052831660c082015261010060e08201819052600090615a5083820185618f64565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b6001600160a01b03958616815260208101949094529190931660408301526060820192909252608081019190915260a00190565b606081016197e08561a063565b938152602081019290925260409091015290565b60608101600885106197e057fe5b600f94850b81529290930b6020830152604082015260ff909116606082015260800190565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526018908201527f4d6978696e556e69737761702f4e4f5f45584348414e47450000000000000000604082015260600190565b6020808252602c908201527f4d6978696e42616e636f722f504154485f4c454e4754485f4d5553545f42455f60408201526b41545f4c454153545f54574f60a01b606082015260800190565b6020808252603a908201527f4d6978696e4b79626572446d6d2f4c4153545f454c454d454e545f4f465f504160408201527f54485f4d5553545f4d415443485f4f55545055545f544f4b454e000000000000606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252602f908201527f4d6978696e556e697377617056322f504154485f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f54574f60881b606082015260800190565b60208082526023908201527f4d6978696e4b79626572446d6d2f41525241595f4c454e4754485f4d49534d416040820152620a886960eb1b606082015260800190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b60208082526038908201527f4d6978696e42616e636f722f4c4153545f454c454d454e545f4f465f5041544860408201527f5f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000000000606082015260800190565b6020808252602f908201527f4d6978696e4b79626572446d6d2f504f4f4c535f4c454e4754485f4d5553545f60408201526e42455f41545f4c454153545f4f4e4560881b606082015260800190565b6020808252603b908201527f4d6978696e556e697377617056322f4c4153545f454c454d454e545f4f465f5060408201527f4154485f4d5553545f4d415443485f4f55545055545f544f4b454e0000000000606082015260800190565b81516001600160a01b031681526020918201519181019190915260400190565b81516001600160a01b031681526020808301516001600160e01b03191690820152604080830151600f90810b91830191909152606092830151900b9181019190915260800190565b600060208252825160a06020840152619c0360c0840182618f64565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b600060608252619c526060830186618fc5565b8281036020840152619c648186618fc5565b915050826040830152949350505050565b600060808252619c886080830187618fc5565b8281036020840152619c9a8187618fc5565b604084019590955250506060015292915050565b600060208252612acd6020830184618fe4565b600060808252619cd46080830187618fe4565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b600061022082019050619d0e828651618ee5565b6020850151619d206020840182618ee5565b506040850151619d336040840182619060565b506060850151619d466060840182619060565b506080850151619d596080840182619060565b5060a0850151619d6c60a0840182618ee5565b5060c0850151619d7f60c0840182618ee5565b5060e0850151619d9260e0840182618ee5565b5061010080860151619da682850182618ee5565b5050610120858101519083015261014080860151619dc68285018261906d565b50506101608581015190830152619de1610180830185619031565b6110fd610200830184618ee5565b81516001600160a01b039081168252602092830151169181019190915260400190565b600060e08252855160e0830152602086015160028110619e2e57fe5b61010083015260408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152619e7c6101a0840182618f64565b915050619e8c6020830186618f90565b60a082019390935260c0015292915050565b600087825286602083015260c06040830152619ebd60c0830187618ef2565b8281036060840152619ecf8187618ef2565b6001600160a01b03959095166080840152505060a00152949350505050565b600086825285602083015260a06040830152619f0d60a0830186618ef2565b6001600160a01b0394909416606083015250608001529392505050565b6000848252836020830152606060408301526110fa6060830184618f64565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b9283526020830191909152604082015260600190565b6000808335601e19843603018112619fa1578283fd5b8301803591506001600160401b03821115619fba578283fd5b60200191503681900382131561438357600080fd5b6040518181016001600160401b0381118282101715619fed57600080fd5b604052919050565b60006001600160401b0382111561a00a578081fd5b5060209081020190565b60006001600160401b0382111561a029578081fd5b50601f01601f191660200190565b60005b8381101561a05257818101518382015260200161a03a565b8381111561775e5750506000910152565b6004811061102b57fe5b6001600160a01b038116811461102b57600080fd5b801515811461102b57600080fd5b6001600160e01b03198116811461102b57600080fd5b80600f0b811461102b57600080fd5b60ff8116811461102b57600080fdfea26469706673582212207bab265f3e36090689daf80e6b72129f5a94dfae782b4ee64691581df696910664736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41F JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8EFFA9EA GT PUSH2 0x21E JUMPI DUP1 PUSH4 0xC7DD6C4F GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xF573C161 GT PUSH2 0x7A JUMPI DUP1 PUSH4 0xF573C161 EQ PUSH2 0xD0E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0xD2E JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0xD4E JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0xD6E JUMPI DUP1 PUSH4 0xFEA12A03 EQ PUSH2 0xD9D JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0xC8E JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0xCAE JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0xCCE JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0xCEE JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xCC1621C9 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0xBF9 JUMPI DUP1 PUSH4 0xCD72D789 EQ PUSH2 0xC19 JUMPI DUP1 PUSH4 0xCD85E7B5 EQ PUSH2 0xC2E JUMPI DUP1 PUSH4 0xD31B0A8A EQ PUSH2 0xC4E JUMPI DUP1 PUSH4 0xD3CDC04D EQ PUSH2 0xC6E JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xB79 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0xBB9 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0xBD9 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0xB90CD2FB GT PUSH2 0x175 JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0xAD9 JUMPI DUP1 PUSH4 0xBC4F55BA EQ PUSH2 0xAF9 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0xB19 JUMPI DUP1 PUSH4 0xBF60384B EQ PUSH2 0xB39 JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0xB59 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0xAB000276 EQ PUSH2 0xA4A JUMPI DUP1 PUSH4 0xAB3E6210 EQ PUSH2 0xA6A JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0xA8A JUMPI DUP1 PUSH4 0xB770F849 EQ PUSH2 0xAB9 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x9E3F05C3 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x9A5 JUMPI DUP1 PUSH4 0xA095A036 EQ PUSH2 0x9D5 JUMPI DUP1 PUSH4 0xA2D10BA5 EQ PUSH2 0x9F5 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0xA0A JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0xA2A JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x8EFFA9EA EQ PUSH2 0x925 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x945 JUMPI DUP1 PUSH4 0x9AD732EF EQ PUSH2 0x965 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x985 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x5C71CBE7 GT PUSH2 0x324 JUMPI DUP1 PUSH4 0x78FEE41C GT PUSH2 0x2AC JUMPI DUP1 PUSH4 0x7FEA2AE1 GT PUSH2 0x27B JUMPI DUP1 PUSH4 0x7FEA2AE1 EQ PUSH2 0x880 JUMPI DUP1 PUSH4 0x8D201C22 EQ PUSH2 0x8A0 JUMPI DUP1 PUSH4 0x8D8ABDF0 EQ PUSH2 0x8C0 JUMPI DUP1 PUSH4 0x8DC669FA EQ PUSH2 0x8E0 JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x8F5 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x78FEE41C EQ PUSH2 0x800 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0x7E105CE2 EQ PUSH2 0x840 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x860 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x751 JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0x771 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0x7280BFFF EQ PUSH2 0x7C0 JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x7E0 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x5C71CBE7 EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x6F1 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x711 JUMPI DUP1 PUSH4 0x686B7EE8 EQ PUSH2 0x731 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x3A7 JUMPI DUP1 PUSH4 0x31268657 GT PUSH2 0x376 JUMPI DUP1 PUSH4 0x31268657 EQ PUSH2 0x624 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x644 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x691 JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x6B1 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 EQ PUSH2 0x594 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x5B4 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x5E4 JUMPI DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x604 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x15DE17DE GT PUSH2 0x3EE JUMPI DUP1 PUSH4 0x15DE17DE EQ PUSH2 0x4CA JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x4F7 JUMPI DUP1 PUSH4 0x1694505E EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x566 JUMPI PUSH2 0x426 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x11F2928B EQ PUSH2 0x490 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x49A JUMPI PUSH2 0x426 JUMP JUMPDEST CALLDATASIZE PUSH2 0x426 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x437 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44B PUSH2 0x446 CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0xDB2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x938A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x46F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0xE78 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x951F JUMP JUMPDEST PUSH2 0x498 PUSH2 0xFEB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BA PUSH2 0x4B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8991 JUMP JUMPDEST PUSH2 0x102E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9200 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x4E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x10D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x503 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x517 PUSH2 0x512 CALLDATASIZE PUSH1 0x4 PUSH2 0x7FD5 JUMP JUMPDEST PUSH2 0x1105 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x9557 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x110F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x8630 JUMP JUMPDEST PUSH2 0x111E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP3 SWAP2 SWAP1 PUSH2 0x9532 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x5AF CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x146A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0x5CF CALLDATASIZE PUSH1 0x4 PUSH2 0x8B8B JUMP JUMPDEST PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9562 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x5FF CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x16C8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x610 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x61F CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x1733 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x630 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x63F CALLDATASIZE PUSH1 0x4 PUSH2 0x823D JUMP JUMPDEST PUSH2 0x17D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x650 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x44B PUSH2 0x65F CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x17DB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x670 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x684 PUSH2 0x67F CALLDATASIZE PUSH1 0x4 PUSH2 0x8D06 JUMP JUMPDEST PUSH2 0x1972 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x964C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x6AC CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x1BF7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x6CC CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1C87 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x6EC CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1C94 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x70C CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x1CA2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x71D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x72C CALLDATASIZE PUSH1 0x4 PUSH2 0x84B7 JUMP JUMPDEST PUSH2 0x1D32 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x74C CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x1DE7 JUMP JUMPDEST PUSH2 0x764 PUSH2 0x75F CALLDATASIZE PUSH1 0x4 PUSH2 0x823D JUMP JUMPDEST PUSH2 0x1DF5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP2 SWAP1 PUSH2 0x94AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x77D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x791 PUSH2 0x78C CALLDATASIZE PUSH1 0x4 PUSH2 0x885E JUMP JUMPDEST PUSH2 0x1F56 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x93E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0x7BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83D5 JUMP JUMPDEST PUSH2 0x2267 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x7DB CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2359 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4BA PUSH2 0x7FB CALLDATASIZE PUSH1 0x4 PUSH2 0x8991 JUMP JUMPDEST PUSH2 0x2367 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x498 PUSH2 0x81B CALLDATASIZE PUSH1 0x4 PUSH2 0x86BB JUMP JUMPDEST PUSH2 0x2377 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x83B CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2537 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x84C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x684 PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x7FD5 JUMP JUMPDEST PUSH2 0x2544 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x87B CALLDATASIZE PUSH1 0x4 PUSH2 0x8DF1 JUMP JUMPDEST PUSH2 0x256B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x89B CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE1 JUMP JUMPDEST PUSH2 0x2642 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x8BB CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x271B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x8DB CALLDATASIZE PUSH1 0x4 PUSH2 0x8912 JUMP JUMPDEST PUSH2 0x273E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x27CE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x901 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x915 PUSH2 0x910 CALLDATASIZE PUSH1 0x4 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x27E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9C75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x931 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x940 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x29FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0x960 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2A0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x971 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x980 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2A75 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x9A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8D6F JUMP JUMPDEST PUSH2 0x2A83 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C5 PUSH2 0x9C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C96 JUMP JUMPDEST PUSH2 0x2AD4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9597 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0x9F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2C0B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x2C84 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xA25 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2C93 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xA45 CALLDATASIZE PUSH1 0x4 PUSH2 0x81C1 JUMP JUMPDEST PUSH2 0x2D02 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xA65 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2DA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xA85 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2E12 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAAA PUSH2 0xAA5 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2E34 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x924A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xAD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x2F31 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xAF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x2F54 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB14 CALLDATASIZE PUSH1 0x4 PUSH2 0x8912 JUMP JUMPDEST PUSH2 0x2FE4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0xB34 CALLDATASIZE PUSH1 0x4 PUSH2 0x8407 JUMP JUMPDEST PUSH2 0x304F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB54 CALLDATASIZE PUSH1 0x4 PUSH2 0x8AE1 JUMP JUMPDEST PUSH2 0x314B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xB74 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x31B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xB94 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x324C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBB4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x325A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8159 JUMP JUMPDEST PUSH2 0x32C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xBF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x341D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C5 PUSH2 0xC14 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C96 JUMP JUMPDEST PUSH2 0x34AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x35BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC49 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC69 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35E4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xC89 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x35F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xCA9 CALLDATASIZE PUSH1 0x4 PUSH2 0x81C1 JUMP JUMPDEST PUSH2 0x3600 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCBA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D4 PUSH2 0xCC9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8B8B JUMP JUMPDEST PUSH2 0x36BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x483 PUSH2 0xCE9 CALLDATASIZE PUSH1 0x4 PUSH2 0x8456 JUMP JUMPDEST PUSH2 0x389D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 PUSH2 0xD09 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x3992 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4EA PUSH2 0xD29 CALLDATASIZE PUSH1 0x4 PUSH2 0x80F2 JUMP JUMPDEST PUSH2 0x39FD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAAA PUSH2 0xD49 CALLDATASIZE PUSH1 0x4 PUSH2 0x8080 JUMP JUMPDEST PUSH2 0x3A0A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x791 PUSH2 0xD69 CALLDATASIZE PUSH1 0x4 PUSH2 0x885E JUMP JUMPDEST PUSH2 0x3B1C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD8E PUSH2 0xD89 CALLDATASIZE PUSH1 0x4 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x3E8C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x45A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9C3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x539 PUSH2 0x40AC JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0xDC1 DUP7 DUP7 PUSH2 0x40BB JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDD2 JUMPI PUSH2 0xE6F JUMP JUMPDEST PUSH2 0xE69 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xE13 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE3E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xE91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xEBB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xFE3 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF23 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9CFA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xF6C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xF69 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xFC0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF9A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF9F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFAE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xFDB JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFCD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xEC1 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x102B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 DUP8 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1048 JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH2 0x1054 DUP9 DUP9 DUP9 DUP9 PUSH2 0x438A JUMP JUMPDEST DUP1 SWAP5 POP DUP2 SWAP6 POP POP POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x109B SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xAB3E6210 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x45BC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST DUP1 MLOAD DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0x0 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 0x1137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xAB86E0A6 ADDRESS DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x116F SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x119A JUMPI POP PUSH1 0x1 JUMPDEST POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x11E8 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x122C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1272 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x13B6 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP14 DUP14 DUP14 DUP14 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x12A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12CC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x95FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12F8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x138D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1326 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x132B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x1335 DUP2 PUSH2 0x47B2 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1341 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1354 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1371 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1387 JUMPI POP PUSH2 0x13B6 JUMP JUMPDEST POP PUSH2 0x13AE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9A41 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x1278 JUMP JUMPDEST POP PUSH2 0x13C1 DUP3 DUP3 PUSH2 0x47E7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x140D SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1432 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14D8 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x153B SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1567 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x15A9 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x1647 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x15DA SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1606 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x162A SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x1640 JUMPI POP PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x16B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x168C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1708 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x17CB PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1751 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1777 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17A0 SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x17EA DUP7 DUP7 PUSH2 0x40BB JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17FB JUMPI PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x183E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x1893 JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x185F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1873 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1844 JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x18A0 DUP9 DUP4 PUSH2 0x40BB JUMP JUMPDEST SWAP1 POP PUSH2 0x1962 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x18E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x190E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1937 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x91CA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19A9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19E1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1AD2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A3A SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x92BF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A88 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1A85 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AC2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1AB6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1ABB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1ACD JUMP JUMPDEST SWAP4 POP PUSH2 0x10FD SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1BEC JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1B28 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1A3A SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x92BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1B68 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x9302 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1BB6 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1BB3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1AC2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1BE4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1BE9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C37 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1C5C SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x4C82 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x4D56 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE2 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1D07 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D3F DUP5 DUP5 DUP5 PUSH2 0xE78 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xFE3 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1D59 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1DDF JUMPI PUSH2 0x1DC6 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1D77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1DAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x4DB6 JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1D44 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x4DE0 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E47 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1E34 PUSH2 0x78C2 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1E2C JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1F4F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1E80 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1E92 SWAP2 SWAP1 PUSH2 0x9F8B JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1E9F JUMPI PUSH2 0x1F47 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1EAC JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1EBE SWAP2 SWAP1 PUSH2 0x9F8B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1ECC SWAP3 SWAP2 SWAP1 PUSH2 0x907A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F09 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F0E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1F1B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1F32 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1E4D JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x1FD8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FAC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1FD0 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x4E44 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x201B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x205F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2079 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x20AD JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2098 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x225B JUMPI PUSH1 0x60 PUSH2 0x20DB DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x52DA JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x2175 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x20FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2121 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x214A SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x42B9 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x224C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x2191 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x21A6 JUMPI PUSH2 0x224C JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x21B2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x2244 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x21DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x21F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x220B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x221F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2238 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x217C JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x20B3 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22AA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x2353 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x22EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x232E JUMPI PUSH2 0x2329 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5435 JUMP JUMPDEST PUSH2 0x2331 JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2340 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x22B0 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x54E1 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 PUSH1 0x60 SWAP4 POP DUP4 SWAP3 POP DUP3 SWAP2 POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x23CC JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x23F8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9145 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2436 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2473 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2478 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x24C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x24F4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x24F1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x24FD JUMPI PUSH2 0x2502 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x2510 JUMPI PUSH2 0x2510 DUP2 PUSH2 0x55A1 JUMP JUMPDEST PUSH2 0x252D DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2527 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST DUP5 PUSH2 0x55A9 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP5 DUP4 DUP6 PUSH2 0x55BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3F DUP4 EXTCODESIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP1 DUP1 PUSH1 0x0 PUSH1 0x20 DUP5 ADD DUP6 EXTCODECOPY POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x2576 PUSH2 0x78DA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x25E4 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2609 SWAP2 SWAP1 PUSH2 0x9DEF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2682 SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x60 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0xF SIGNEXTEND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x26F0 SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x5753 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x277E SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x27A3 SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH2 0x27EE PUSH2 0x78F1 JUMP JUMPDEST PUSH2 0x27F6 PUSH2 0x78F1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x28FB JUMPI PUSH2 0x2842 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2814 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A5F SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x285C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2871 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x28AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x28B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x28F1 JUMPI PUSH1 0x0 PUSH2 0x28D7 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x28EF JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x27FB JUMP JUMPDEST POP DUP2 PUSH2 0x2906 JUMPI PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x29F2 JUMPI PUSH2 0x2939 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2922 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP5 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2953 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2968 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x29A5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x29AA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x29E8 JUMPI PUSH1 0x0 PUSH2 0x29CE PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x29E6 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2909 JUMP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP5 DUP4 DUP6 PUSH2 0x5A7B JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A4A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7280BFFF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x5BCC JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2AA9 SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 SHR DUP2 PUSH2 0x2AC9 JUMPI INVALID JUMPDEST MOD SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2AE6 DUP9 DUP9 DUP9 PUSH2 0x5D20 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x2AF2 JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x2B1B SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9CC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2B47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B6F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BBB SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BE0 SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C15 PUSH2 0x790B JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2C29 SWAP2 SWAP1 PUSH2 0x8BE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x2C7A PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP3 PUSH1 0x60 ADD MLOAD DUP9 DUP9 DUP8 DUP7 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2C66 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x5E90 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CD7 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x2D14 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6092 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D2B JUMPI PUSH2 0x2D9B JUMP JUMPDEST PUSH2 0x2D95 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D6A SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2DE7 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP6 DUP5 DUP7 PUSH2 0x61E7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP8 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2E67 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E93 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2EB7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F21 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2EF6 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP4 SWAP9 SWAP1 SWAP8 POP SWAP3 SWAP6 POP SWAP2 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 DUP7 DUP7 DUP6 DUP8 PUSH2 0x64D0 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F94 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2FB9 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD3CDC04D OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3024 SWAP2 SWAP1 PUSH2 0x9B7F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x9AD732EF OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3068 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3092 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1F4F JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x30D6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3120 JUMPI PUSH2 0x311B DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x30FC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6752 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x312C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3138 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3098 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x318B SWAP2 SWAP1 PUSH2 0x9B9F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8D201C22 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x2634 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x31FA SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3221 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xD31B0A8A OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6825 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x329A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xB770F849 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x32E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x330B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x3360 JUMPI DUP6 PUSH1 0x1 DUP3 DUP9 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x332C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3340 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3311 JUMP JUMPDEST POP PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x337C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x33A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33CB SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x33F2 SWAP3 SWAP2 SWAP1 PUSH2 0x91A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x8EFFA9EA OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x345D SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3482 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x5C71CBE7 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x34BF DUP9 DUP9 DUP9 PUSH2 0x5D20 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x34CB JUMPI PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x34F4 SWAP1 DUP12 SWAP1 DUP9 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x9CC1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x350C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3520 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3548 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8735 JUMP JUMPDEST DUP9 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP8 PUSH1 0x80 ADD MLOAD SWAP3 POP PUSH2 0x10C6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3594 SWAP2 SWAP1 PUSH2 0x9CAE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xA095A036 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x42B9 JUMP JUMPDEST PUSH20 0xE9DB8717BC5DFB20AAF538B4A5A02B7791FF430C DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x6BA9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6D97 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP6 DUP5 DUP7 PUSH2 0x6E5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3612 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6092 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3629 JUMPI PUSH2 0x2D9B JUMP JUMPDEST PUSH2 0x2D95 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3668 SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 DUP8 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3690 SWAP3 SWAP2 SWAP1 PUSH2 0x9280 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xF573C161 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP7 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x36F3 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x370B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x371F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3743 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x3761 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x37FF JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x3792 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x37E2 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x37F8 JUMPI POP PUSH2 0x10CC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST PUSH2 0x16B7 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3844 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 PUSH1 0x20 ADD MLOAD DUP8 DUP10 ISZERO PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3872 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x90ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xCD85E7B5 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x38B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x38E0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xFE3 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3924 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3970 JUMPI PUSH2 0x396B DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x394B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6EBD SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3973 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x397F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x38E6 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x145D PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x39D2 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x686B7EE8 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x42B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FA DUP6 DUP4 DUP6 PUSH2 0x6F89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP8 DUP8 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3A3D SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3A69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A8D SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP3 POP PUSH2 0x2F21 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3ACC SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AF1 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x15DE17DE OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x4815 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3B5E DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F98 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3B6B DUP8 PUSH2 0x706F JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BAE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3BC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BF2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3C0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3C40 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x3C2B JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x3E7F JUMPI PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x3E55 JUMPI PUSH1 0x60 DUP1 PUSH2 0x3D77 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP14 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3C79 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH1 0x1 DUP16 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x3C9F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH2 0x3CC6 DUP16 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CD7 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP15 PUSH2 0x3D11 DUP10 PUSH2 0x3D0C DUP13 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0x3CFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7107 JUMP JUMPDEST PUSH2 0x52DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3D22 SWAP3 SWAP2 SWAP1 PUSH2 0x929B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x59AB9A6C PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP PUSH2 0x3D72 DUP13 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x3D65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x719F JUMP JUMPDEST PUSH2 0x4815 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3D87 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3DC4 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DA5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x3E4B JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3DD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DEA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3E03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E17 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x3E33 DUP12 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x20CE JUMPI INVALID JUMPDEST DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3C52 JUMP JUMPDEST POP DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x3E62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E77 JUMPI PUSH2 0x3E7F JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x3C46 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x3E94 PUSH2 0x78F1 JUMP JUMPDEST PUSH2 0x3E9C PUSH2 0x78F1 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x3F98 JUMPI PUSH2 0x3ED3 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3EED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3F02 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3F3F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3F44 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3F8E JUMPI PUSH1 0x0 PUSH2 0x3F68 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3F79 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x3F8C JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3EA3 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3FA9 JUMPI POP PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x40A1 JUMPI PUSH2 0x3FDC PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3FC5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x282B JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3FF6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x400B SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x4048 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x404D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x4097 JUMPI PUSH1 0x0 PUSH2 0x4071 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5A6F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4082 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x4095 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3FAC JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x40D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4101 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x413F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4153 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4177 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x42B0 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x41A4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x41BB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x41E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9182 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x422C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4229 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x427A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x425A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x425F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x42B3 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4287 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x417C JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x4305 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x95B0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x431F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4330 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x138D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x435E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4363 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4378 SWAP2 SWAP1 PUSH2 0x85B8 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x4383 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43F2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4416 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4432 SWAP2 SWAP1 PUSH2 0x958E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x444A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x445E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4482 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4497 JUMPI PUSH2 0x45B3 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x45B0 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x44BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x44CE JUMPI PUSH2 0x45A8 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x44F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x4509 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x452E SWAP3 SWAP2 SWAP1 PUSH2 0x93C3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4546 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4577 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4574 SWAP2 DUP2 ADD SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4580 JUMPI PUSH2 0x45A8 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x45A6 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x459B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x449B JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x45D3 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4657 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x461D SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4637 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x464B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 SWAP1 POP PUSH2 0x466B JUMP JUMPDEST PUSH2 0x466B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x71E0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD5BCB9B5 DUP3 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x469A JUMPI DUP10 PUSH2 0x469D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x46BC JUMPI DUP10 PUSH2 0x46BF JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 PUSH1 0x1 PUSH1 0x0 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46E4 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x96C2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4711 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4736 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x47A7 JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x478D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x47A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x47C9 JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x47E2 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x47DD SWAP2 SWAP1 PUSH2 0x8EA6 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x47FC SWAP3 SWAP2 SWAP1 PUSH2 0x9532 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x482F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4859 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4873 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x489D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x48AF JUMPI PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4907 PUSH2 0x7955 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x4965 PUSH2 0x7955 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x49D0 DUP2 DUP5 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x49E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x49FB JUMPI POP POP POP PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A07 DUP4 DUP6 PUSH2 0x42B9 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A1A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4A33 JUMPI POP POP POP POP PUSH2 0x4383 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x4C76 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x4BEF JUMPI PUSH2 0x4A93 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4A5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7273 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AB9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4ACE JUMPI PUSH2 0x4BEF JUMP JUMPDEST PUSH2 0x4AE7 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4AF4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B22 JUMPI PUSH2 0x4BEF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4B2E DUP8 DUP10 PUSH2 0x42B9 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x4B40 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4B56 JUMPI POP PUSH2 0x4BEF JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4B7A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x4BE6 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4B95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x4BAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x4BD2 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x4BE4 JUMPI POP POP PUSH2 0x4BEF JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4A44 JUMP JUMPDEST POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4BFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x4C56 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4C41 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4A86 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C62 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x4A36 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4C9B SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x4CB4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0x4D04 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9BE7 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4D32 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C7A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4D6D SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4D83 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x310DA7B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x621B4F6 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x4 ADD PUSH2 0x9775 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10FD DUP4 PUSH2 0x4DDA PUSH2 0x4DCA DUP3 PUSH1 0x1 PUSH2 0x72CB JUMP JUMPDEST PUSH2 0x4DD4 DUP9 DUP8 PUSH2 0x72EF JUMP JUMPDEST SWAP1 PUSH2 0x7320 JUMP JUMPDEST SWAP1 PUSH2 0x733C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x4DF7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4E0D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x164B079 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xB2583C8 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP DUP3 ADD SWAP1 PUSH1 0x4 ADD PUSH2 0x96F2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x4E6A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9846 JUMP JUMPDEST PUSH2 0x4E72 PUSH2 0x797D JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4EC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4EE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x4FD6 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0x4F16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4F39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x969A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4F51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F89 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x4F94 DUP2 PUSH2 0x7366 JUMP JUMPDEST ISZERO PUSH2 0x4FCD JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x4FAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4EEE JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x4FE6 JUMPI POP POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x50DC JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5008 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x503C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5027 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x50D3 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5074 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x508B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x509F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x50B3 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5042 JUMP JUMPDEST POP POP POP POP PUSH2 0x2ACD JUMP JUMPDEST PUSH1 0x60 PUSH2 0x50EC DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x4E44 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5101 JUMPI POP POP POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x511A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x514E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5139 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x52CE JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x52C5 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x517C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x519D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x51FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5213 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5242 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x52BB JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x525E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x5271 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5285 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x529B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5236 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x515F JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5154 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x52F2 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x530E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x996A JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x532E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5359 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x42B0 JUMPI DUP1 ISZERO PUSH2 0x5408 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x5383 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53FB SWAP2 SWAP1 PUSH2 0x8E83 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5416 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x5363 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5473 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x54AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x54B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x54C7 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x54DA JUMPI PUSH2 0x54D7 DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x54F8 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x550E PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8201AA3F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x8201AA3F SWAP1 PUSH2 0x5545 SWAP1 DUP10 SWAP1 DUP9 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x0 NOT SWAP1 PUSH1 0x4 ADD PUSH2 0x979F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x555E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5572 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5596 SWAP2 SWAP1 PUSH2 0x8EA6 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x55D4 SWAP2 SWAP1 PUSH2 0x800D JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x55FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9AD3 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x5622 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x99FE JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x563C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x566A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x990D JUMP JUMPDEST PUSH2 0x569C DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x567C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x71E0 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x56D6 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9E9E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5704 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x572C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8586 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x573E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x575D PUSH2 0x799B JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5771 SWAP2 SWAP1 PUSH2 0x8A79 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x57F5 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x57BE SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x57EC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x580C JUMP JUMPDEST DUP2 MLOAD PUSH2 0x580C SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x583B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5853 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5867 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x588B SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD DUP9 PUSH1 0x60 ADD MLOAD DUP13 PUSH1 0x1 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x58C5 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9802 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5903 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5940 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5958 JUMPI PUSH2 0x5958 DUP2 PUSH2 0x55A1 JUMP JUMPDEST DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x59CA JUMPI SELFBALANCE SWAP6 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x59C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST PUSH2 0x5A50 DUP4 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59FA SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A26 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5A4A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP1 PUSH2 0x72CB JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5A6A DUP4 DUP4 DUP4 PUSH2 0x7572 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2ACD DUP4 DUP4 PUSH2 0x7599 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5A95 SWAP2 SWAP1 PUSH2 0x8767 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x5ABE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x99AF JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5AD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5B06 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9B22 JUMP JUMPDEST PUSH2 0x5B18 DUP3 DUP7 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x567C JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x38ED1739 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x38ED1739 SWAP1 PUSH2 0x5B50 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP8 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9EEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5B7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5BA6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8586 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5BD6 PUSH2 0x78DA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5BEA SWAP2 SWAP1 PUSH2 0x88D7 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP PUSH2 0x5C04 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH2 0x5C0C PUSH2 0x79C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD DUP3 MSTORE DUP2 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP SWAP1 POP PUSH2 0x5C69 PUSH2 0x799B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE DUP3 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE DUP4 MLOAD SWAP2 MLOAD PUSH4 0x52BBBE29 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x52BBBE29 SWAP1 PUSH2 0x5CC2 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9E12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5CDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5CF0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D14 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D5E JUMPI DUP7 PUSH2 0x5D74 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5D97 JUMPI DUP7 PUSH2 0x5DAD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x5DE1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9111 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5DF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E0D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E35 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x82A2 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x5E51 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2ACD SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x5E61 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x5E87 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2ACD SWAP1 POP JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5EA9 SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5EE1 JUMPI PUSH2 0x5EDC PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND DUP5 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH2 0x5F43 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x5F10 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F2A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5F3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x29589F61 DUP3 DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F72 JUMPI DUP11 PUSH2 0x5F74 JUMP JUMPDEST DUP13 JUMPDEST DUP10 DUP14 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x5F94 JUMPI DUP12 PUSH2 0x5F96 JUMP JUMPDEST DUP15 JUMPDEST ADDRESS PUSH1 0x0 NOT PUSH1 0x1 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP11 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5FC2 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x9723 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6014 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6085 JUMPI DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x606B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x607F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMPDEST POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x60C5 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x60F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6119 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8270 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x61B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x6157 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x616F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x61AB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8270 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x61C7 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x45B3 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x61D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6201 SWAP2 SWAP1 PUSH2 0x8767 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x2 GT ISZERO SWAP1 POP PUSH2 0x622A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x98C1 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6244 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0x62B9 JUMPI POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x628A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x62B9 JUMPI POP DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x62D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x9A76 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6302 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x637F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x6345 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x635F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP6 SWAP1 POP PUSH2 0x639E JUMP JUMPDEST PUSH2 0x639E DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x638F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB77D239B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xB77D239B SWAP1 DUP4 SWAP1 PUSH2 0x63D8 SWAP1 DUP7 SWAP1 DUP12 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x9464 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6405 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x642A SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x645A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1BEC JUMPI DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x64C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x64E7 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x64F7 DUP9 DUP4 DUP10 DUP10 PUSH2 0x75C3 JUMP JUMPDEST SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x65FD JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x653F SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x958E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6559 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x656D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH4 0xAD65D76D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP3 POP PUSH4 0xAD65D76D SWAP2 POP DUP8 SWAP1 PUSH2 0x65A4 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x9827 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x65D1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x65F6 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP PUSH2 0x47A7 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6709 JUMPI PUSH2 0x662B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x95E3C50B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95E3C50B SWAP1 PUSH2 0x665C SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x9F75 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6676 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x668A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66AE SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP3 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x66EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x66FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH2 0x47A7 JUMP JUMPDEST PUSH2 0x671D PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP3 DUP8 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDDF7E1A7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xDDF7E1A7 SWAP1 PUSH2 0x5CC2 SWAP1 DUP9 SWAP1 PUSH1 0x1 SWAP1 DUP2 SWAP1 TIMESTAMP SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x9F49 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x677A SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x67B8 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x67F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x67F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x680C JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x42B0 JUMPI PUSH2 0x681C DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x682F PUSH2 0x78DA JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6843 SWAP2 SWAP1 PUSH2 0x8DAF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6873 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x688B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x689F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x68C3 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x69CB JUMPI PUSH2 0x6966 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x691D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6931 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6955 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0x6994 SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x69C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x6B79 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6B79 JUMPI PUSH1 0x0 PUSH2 0x6A6E DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6A27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6A3B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6A5F SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x7320 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6ABF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6AE3 SWAP2 SWAP1 PUSH2 0x8EC9 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x6AFB DUP4 PUSH2 0x4DDA DUP12 DUP6 PUSH2 0x72EF JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x6B15 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x6B43 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6B71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x5D14 DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59FA SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6BC3 SWAP2 SWAP1 PUSH2 0x87AB JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH2 0x6BDE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP9 PUSH2 0x71E0 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6C7B JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x8DAE7333 PUSH1 0xE0 SHL SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x8DAE7333 SWAP1 PUSH2 0x6C22 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9F2A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C50 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6C74 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP4 POP PUSH2 0x6D8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH2 0x6CA9 SWAP1 DUP6 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6CC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6CD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6CF9 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH4 0x733E7383 PUSH1 0xE1 SHL SWAP1 SWAP2 MSTORE SWAP1 SWAP5 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xE67CE706 SWAP1 PUSH2 0x6D39 SWAP1 DUP8 SWAP1 DUP11 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x9F2A JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D53 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6D67 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6D8B SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6DB0 SWAP2 SWAP1 PUSH2 0x881A JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6DC9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND DUP4 DUP8 PUSH2 0x7703 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x19740AC1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x65D02B04 SWAP1 PUSH2 0x6DFE SWAP1 DUP11 SWAP1 DUP11 SWAP1 ADDRESS SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x965F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6E18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6E2C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E50 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6E72 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x6E88 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP3 DUP7 PUSH2 0x71E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD5BCB9B5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xD5BCB9B5 SWAP1 PUSH2 0x4D04 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x96C2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6EE7 SWAP3 SWAP2 SWAP1 PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6F25 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F60 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F65 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6F79 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5E87 JUMPI PUSH2 0x2C7A DUP2 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6FA2 SWAP2 SWAP1 PUSH2 0x87EC JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x6FBB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x7703 JUMP JUMPDEST DUP1 PUSH2 0x7043 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6EC9FACD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xDD93F59A SWAP1 PUSH2 0x6FEC SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x701A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x703E SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x2C7A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2F58056D PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xBD6015B4 SWAP1 PUSH2 0x4D04 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7088 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x70B2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2353 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x70D3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x70E7 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x70B8 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x714A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x2353 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x716B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x717F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7150 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x71CF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x7210 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x90D3 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7228 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x723C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7260 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST LT ISZERO PUSH2 0x5A6A JUMPI PUSH2 0x5A6A DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x7764 JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x7280 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x7289 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x7296 JUMPI POP PUSH1 0x0 PUSH2 0x2ACD JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x72A3 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x72B3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2ACD JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x72C1 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x72E9 JUMPI PUSH2 0x72E9 PUSH2 0x72E4 PUSH1 0x2 DUP6 DUP6 PUSH2 0x7781 JUMP JUMPDEST PUSH2 0x55A1 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x72FE JUMPI POP PUSH1 0x0 PUSH2 0x42B3 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x730B JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x2ACD JUMPI PUSH2 0x2ACD PUSH2 0x72E4 PUSH1 0x1 DUP7 DUP7 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x2ACD JUMPI PUSH2 0x2ACD PUSH2 0x72E4 PUSH1 0x0 DUP7 DUP7 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x7352 JUMPI PUSH2 0x7352 PUSH2 0x72E4 PUSH1 0x3 DUP6 DUP6 PUSH2 0x7781 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x735D JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x7379 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x110A JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73EB SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7416 SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x742E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7442 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7466 SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x7472 JUMPI POP PUSH1 0x0 PUSH2 0x110A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x74AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x74BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x74E3 SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x750E SWAP2 SWAP1 PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x753A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x755E SWAP2 SWAP1 PUSH2 0x8618 JUMP JUMPDEST PUSH2 0x756A JUMPI POP PUSH1 0x0 PUSH2 0x110A JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x7591 JUMPI PUSH2 0x7591 PUSH2 0x72E4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77DB JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x75BA JUMPI PUSH2 0x75BA PUSH2 0x72E4 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x77DB JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x765F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x760A SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7636 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x765A SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST PUSH2 0x76DB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x768B SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x90A6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x76A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x76B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76DB SWAP2 SWAP1 PUSH2 0x7FF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x13A5 SWAP1 PUSH2 0x988A JUMP JUMPDEST PUSH1 0x60 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7720 SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x775E DUP5 DUP3 PUSH2 0x77FA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7720 SWAP3 SWAP2 SWAP1 PUSH2 0x90BA JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97D3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x77A0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x97F4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x7816 SWAP2 SWAP1 PUSH2 0x908A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x7853 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7858 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x786E JUMPI POP PUSH2 0x786E DUP2 PUSH2 0x7883 JUMP JUMPDEST ISZERO PUSH2 0x787A JUMPI POP POP PUSH2 0x17D7 JUMP JUMPDEST PUSH2 0x775E DUP2 PUSH2 0x55A1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7897 JUMPI POP PUSH1 0x1 PUSH2 0x110A JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x110A JUMPI PUSH1 0x0 PUSH2 0x78AD DUP4 PUSH1 0x0 PUSH2 0x5A6F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x2353 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x110A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xC0 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x42B3 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x7A27 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A3D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7A67 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7A7A PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST PUSH2 0x9FCF JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7A9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD PUSH2 0x7AB1 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7A9E JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7ADE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7AEC PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7B0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 MLOAD PUSH2 0x7B23 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B10 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B45 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7B53 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI PUSH2 0x7B7B DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x7D24 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7B64 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7B9D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7BAB PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7BCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD PUSH2 0x7BE2 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BCF JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C04 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C12 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x7C35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7C5C JUMPI PUSH2 0x7C4A DUP10 DUP5 PUSH2 0x7F4A JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x7C38 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7C78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7C86 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7CA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7CAA JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7CD6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7CE4 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x7D05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x7AC3 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7D08 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D34 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x7D42 PUSH2 0x7A75 DUP3 PUSH2 0xA014 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7D59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7D82 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x7D90 PUSH2 0x7A75 DUP3 PUSH2 0xA014 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x7DA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F4F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA037 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0x42B3 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7DE3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7DED PUSH1 0xA0 PUSH2 0x9FCF JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7E01 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x7E14 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x7E27 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7E45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7E51 DUP5 DUP3 DUP6 ADD PUSH2 0x7D24 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7E70 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7E79 DUP2 PUSH2 0x9FCF JUMP JUMPDEST SWAP2 POP POP PUSH2 0x7E86 DUP4 DUP4 PUSH2 0x7A0B JUMP JUMPDEST DUP2 MSTORE PUSH2 0x7E95 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7EA7 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7EB9 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x7ECB DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x7FA7 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x7EDD DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x7EEF DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x7F01 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x7F15 DUP5 DUP3 DUP6 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x7F33 DUP5 DUP3 DUP6 ADD PUSH2 0x7FBE JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7F5B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7F65 PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x7F76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x7F86 DUP2 PUSH2 0xA0B5 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x42B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7FE6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2ACD DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8002 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2ACD DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8021 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x802C DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8048 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8054 DUP8 DUP4 DUP9 ADD PUSH2 0x7ACE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8069 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8076 DUP7 DUP3 DUP8 ADD PUSH2 0x7ACE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8095 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x80A0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x80B0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x80C0 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x80E6 DUP8 DUP3 DUP9 ADD PUSH2 0x7C68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8107 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x8112 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x8122 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x813C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8148 DUP8 DUP3 DUP9 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x816D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8178 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8193 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x819F DUP8 DUP4 DUP9 ADD PUSH2 0x7A57 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x81B4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8076 DUP7 DUP3 DUP8 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x81D8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x81E3 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x81FA DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x820A DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8230 DUP9 DUP3 DUP10 ADD PUSH2 0x7C68 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x824F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8264 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x17CB DUP6 DUP3 DUP7 ADD PUSH2 0x7A16 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8281 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8296 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7ACE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x82B6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x82CC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x82DF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x82ED PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x830D JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x832F JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x8311 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8346 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8353 DUP7 DUP3 DUP8 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8363 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7DB8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8380 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8396 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x83A2 DUP8 DUP4 DUP9 ADD PUSH2 0x7B35 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x83B7 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x83C4 DUP7 DUP3 DUP8 ADD PUSH2 0x7B35 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x83E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x83FB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7B8D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8419 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x842E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x843A DUP6 DUP3 DUP7 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x844B DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x846A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x847F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x848B DUP7 DUP3 DUP8 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x849C DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x84AC DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x84CB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x84E1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x84F4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8502 PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x8525 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x8551 JUMPI PUSH2 0x853B DUP14 DUP4 PUSH2 0x7E5D JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x8529 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x8569 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8576 DUP7 DUP3 DUP8 ADD PUSH2 0x7BF4 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x8363 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8597 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x85AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7CC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x85CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x85E0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x85EC DUP7 DUP4 DUP8 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x8601 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7CC6 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8629 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x8647 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8652 DUP2 PUSH2 0xA090 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8662 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8672 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x868D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8699 DUP10 DUP4 DUP11 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x86AE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8230 DUP9 DUP3 DUP10 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x86D2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x86DD DUP2 PUSH2 0xA090 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x86ED DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x86FD DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8717 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x8723 DUP9 DUP3 DUP10 ADD PUSH2 0x7D24 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8746 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x875B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x10FD DUP5 DUP3 DUP6 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8779 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8784 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x879F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7ACE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x87BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x87CA DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x87DB DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x84AC DUP2 PUSH2 0xA082 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x87FE JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8809 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x844B DUP2 PUSH2 0xA082 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x882C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x8837 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8852 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x860E DUP6 DUP3 DUP7 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8873 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x887E DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x888E DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x88A9 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x88B5 DUP9 DUP4 DUP10 ADD PUSH2 0x7B8D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x88CA JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x80E6 DUP8 DUP3 DUP9 ADD PUSH2 0x7C68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88E8 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x88F2 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x88FD DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8928 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8935 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8940 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x894B DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8967 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8977 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x89A6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x89BC JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x89CF JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x89D9 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0x89E4 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0x89F8 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP10 PUSH1 0x1F DUP6 ADD SLT PUSH2 0x8A0C JUMPI DUP6 DUP7 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x8A1A PUSH2 0x7A75 DUP3 PUSH2 0x9FF5 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP3 DUP2 ADD SWAP1 DUP7 DUP5 ADD DUP10 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x8A4F JUMPI PUSH2 0x8A3D DUP16 DUP8 DUP5 CALLDATALOAD DUP13 ADD ADD PUSH2 0x7A57 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP6 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8A26 JUMP JUMPDEST POP POP DUP1 DUP5 DUP7 ADD MSTORE POP POP POP DUP2 SWAP8 POP PUSH2 0x8A68 DUP11 DUP3 DUP12 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP7 POP POP POP PUSH2 0x88B5 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x7A0B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8A8A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8A94 PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8A9F DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8AAF DUP2 PUSH2 0xA090 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8AC2 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8AD5 DUP2 PUSH2 0xA0A6 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xE0 DUP2 SLT ISZERO PUSH2 0x8AF7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x8B04 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8B0F PUSH1 0x80 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8B1A DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8B2A DUP2 PUSH2 0xA090 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x8B3C DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0x7DC7 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x8B4E DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0x7DC7 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE SWAP4 POP PUSH2 0x8B62 DUP7 PUSH1 0x80 DUP8 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP3 POP PUSH2 0x8B71 DUP7 PUSH1 0xA0 DUP8 ADD PUSH2 0x7A0B JUMP JUMPDEST SWAP2 POP PUSH1 0xC0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x8BA1 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x8BAE JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8BB9 PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8BC4 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x8BD4 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8967 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8BFA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8C10 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP4 ADD SWAP1 PUSH1 0xA0 DUP3 DUP7 SUB SLT ISZERO PUSH2 0x8C23 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8C2D PUSH1 0xA0 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8C3F DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x8C52 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x8C65 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x8C7B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x8C87 DUP8 DUP3 DUP7 ADD PUSH2 0x7D72 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8CAB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x8CC1 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x8CCD DUP9 DUP4 DUP10 ADD PUSH2 0x7DD2 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x8CDF DUP3 PUSH2 0xA06D JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x8CF1 DUP3 PUSH2 0xA06D JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x88CA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x8D1B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x8D30 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x8D3C DUP8 DUP3 DUP9 ADD PUSH2 0x7DD2 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x8D54 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8D64 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8D84 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8D8E DUP6 DUP6 PUSH2 0x7E5D JUMP JUMPDEST SWAP3 POP PUSH2 0x8D9E DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x7F4A JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x84AC DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8DC0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8DCA PUSH1 0x40 PUSH2 0x9FCF JUMP JUMPDEST DUP3 MLOAD PUSH2 0x8DD5 DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x8DE5 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x8E07 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x8E14 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x8E1F PUSH1 0x60 PUSH2 0x9FCF JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x8E2A DUP2 PUSH2 0xA06D JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x8E44 DUP2 PUSH2 0xA06D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x8E59 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x8E69 DUP2 PUSH2 0xA06D JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x80DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8E94 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2ACD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8EB8 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x8EDA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x2ACD DUP2 PUSH2 0xA0B5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F2A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F05 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8F2A JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8F48 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x8F7C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xA037 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x10FD PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x10FD PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x903C DUP2 PUSH2 0xA063 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD PUSH1 0xFF AND SWAP1 DUP4 ADD MSTORE PUSH1 0x40 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x909C DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xA037 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2C7A SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9171 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10FD SWAP1 DUP4 ADD DUP5 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x91EE SWAP1 DUP4 ADD DUP6 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x80 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x9224 SWAP1 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x9236 DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x926E SWAP1 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10FD SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x92D6 DUP6 PUSH2 0xA063 JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x92F0 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x6E50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x931F DUP12 PUSH2 0xA063 JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x9337 DUP3 DUP6 ADD DUP12 PUSH2 0x8F35 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x934B DUP3 DUP11 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x935E DUP7 PUSH2 0xA063 JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x9376 DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x5A50 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x939D PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x93AF DUP2 DUP7 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x93D6 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8EF2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x943A JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x9428 DUP4 DUP4 MLOAD PUSH2 0x8F64 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x940C JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x944D DUP2 DUP10 PUSH2 0x8F35 JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x2C7A DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 MSTORE PUSH2 0x9477 PUSH1 0xC0 DUP4 ADD DUP10 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE POP PUSH1 0x40 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x60 DUP6 ADD MSTORE SWAP2 AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x9511 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x94F2 DUP9 DUP7 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x94CE JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x9545 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x681C DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x92F0 SWAP1 DUP4 ADD DUP6 PUSH2 0x8F35 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x9224 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x95EC SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x5D14 DUP2 DUP6 PUSH2 0x8F35 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x963A SWAP1 DUP4 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6E50 SWAP1 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 DUP6 AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP8 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP7 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 PUSH1 0xE0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5A50 DUP4 DUP3 ADD DUP6 PUSH2 0x8F64 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 SWAP1 SWAP4 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x97E0 DUP6 PUSH2 0xA063 JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x97E0 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP5 DUP6 SIGNEXTEND DUP2 MSTORE SWAP3 SWAP1 SWAP4 SIGNEXTEND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E69737761702F4E4F5F45584348414E47450000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F504154485F4C454E4754485F4D5553545F42455F PUSH1 0x40 DUP3 ADD MSTORE PUSH12 0x41545F4C454153545F54574F PUSH1 0xA0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F504154485F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F54574F PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x38 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E42616E636F722F4C4153545F454C454D454E545F4F465F50415448 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3B SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E556E697377617056322F4C4153545F454C454D454E545F4F465F50 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x4154485F4D5553545F4D415443485F4F55545055545F544F4B454E0000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD PUSH1 0xF SWAP1 DUP2 SIGNEXTEND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP3 DUP4 ADD MLOAD SWAP1 SIGNEXTEND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C03 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x9C52 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x8FC5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C64 DUP2 DUP7 PUSH2 0x8FC5 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9C88 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x8FC5 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x9C9A DUP2 DUP8 PUSH2 0x8FC5 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2ACD PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x8FE4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x9CD4 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x8FE4 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0x9D0E DUP3 DUP7 MLOAD PUSH2 0x8EE5 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x9D20 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x9D33 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0x60 DUP6 ADD MLOAD PUSH2 0x9D46 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0x80 DUP6 ADD MLOAD PUSH2 0x9D59 PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x9060 JUMP JUMPDEST POP PUSH1 0xA0 DUP6 ADD MLOAD PUSH2 0x9D6C PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0xC0 DUP6 ADD MLOAD PUSH2 0x9D7F PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH1 0xE0 DUP6 ADD MLOAD PUSH2 0x9D92 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP7 ADD MLOAD PUSH2 0x9DA6 DUP3 DUP6 ADD DUP3 PUSH2 0x8EE5 JUMP JUMPDEST POP POP PUSH2 0x120 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP7 ADD MLOAD PUSH2 0x9DC6 DUP3 DUP6 ADD DUP3 PUSH2 0x906D JUMP JUMPDEST POP POP PUSH2 0x160 DUP6 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x9DE1 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x9031 JUMP JUMPDEST PUSH2 0x10FD PUSH2 0x200 DUP4 ADD DUP5 PUSH2 0x8EE5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 MSTORE DUP6 MLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x9E2E JUMPI INVALID JUMPDEST PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH2 0x120 DUP5 ADD MSTORE PUSH1 0x60 DUP8 ADD MLOAD AND PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0x80 DUP7 ADD MLOAD PUSH2 0x160 DUP4 ADD MSTORE PUSH1 0xA0 DUP7 ADD MLOAD PUSH1 0xC0 PUSH2 0x180 DUP5 ADD MSTORE PUSH2 0x9E7C PUSH2 0x1A0 DUP5 ADD DUP3 PUSH2 0x8F64 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9E8C PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x8F90 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0xC0 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9EBD PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x8EF2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x9ECF DUP2 DUP8 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP3 MSTORE DUP6 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x9F0D PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x8EF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x10FA PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x8F64 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x9FA1 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x9FBA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x4383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x9FED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA00A JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xA029 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA052 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xA03A JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x775E JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x102B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x102B JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0xAB265F3E36090689DAF80E6B72129F5A94DFAE782B4EE64691581DF6 SWAP7 SWAP2 MOD PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMapi;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;4230:977:15;;;;;;;;;;-1:-1:-1;4230:977:15;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3763:98:27:-;;;:::i;:::-;;2255:1032:2;;;;;;;;;;-1:-1:-1;2255:1032:2;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1089:466:14:-;;;;;;;;;;-1:-1:-1;1089:466:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2195:196:23:-;;;;;;;;;;-1:-1:-1;2195:196:23;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;12245:62:27:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;3674:2320:18:-;;;;;;;;;;-1:-1:-1;3674:2320:18;;;;;:::i;:::-;;:::i;2932:677:20:-;;;;;;;;;;-1:-1:-1;2932:677:20;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1496:829:13:-;;;;;;;;;;-1:-1:-1;1496:829:13;;;;;:::i;:::-;;:::i;2012:1338:4:-;;;;;;;;;;-1:-1:-1;2012:1338:4;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1744:619:12:-;;;;;;;;;;-1:-1:-1;1744:619:12;;;;;:::i;:::-;;:::i;1690:612:21:-;;;;;;;;;;-1:-1:-1;1690:612:21;;;;;:::i;:::-;;:::i;12829:93:27:-;;;;;;;;;;-1:-1:-1;12829:93:27;;;;;:::i;:::-;;:::i;3298:1192:9:-;;;;;;;;;;-1:-1:-1;3298:1192:9;;;;;:::i;:::-;;:::i;5338:2595:10:-;;;;;;;;;;-1:-1:-1;5338:2595:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2862:695:0:-;;;;;;;;;;-1:-1:-1;2862:695:0;;;;;:::i;:::-;;:::i;1618:348:22:-;;;;;;;;;;-1:-1:-1;1618:348:22;;;;;:::i;:::-;;:::i;873:378:7:-;;;;;;;;;;-1:-1:-1;873:378:7;;;;;:::i;:::-;;:::i;2888:667:17:-;;;;;;;;;;-1:-1:-1;2888:667:17;;;;;:::i;:::-;;:::i;5648:955:15:-;;;;;;;;;;-1:-1:-1;5648:955:15;;;;;:::i;:::-;;:::i;929:378:17:-;;;;;;;;;;-1:-1:-1;929:378:17;;;;;:::i;:::-;;:::i;2332:490:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2487:1876:22:-;;;;;;;;;;-1:-1:-1;2487:1876:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;946:381:23:-;;;;;;;;;;-1:-1:-1;946:381:23;;;;;:::i;:::-;;:::i;879:384:0:-;;;;;;;;;;-1:-1:-1;879:384:0;;;;;:::i;:::-;;:::i;3919:339:2:-;;;;;;;;;;-1:-1:-1;3919:339:2;;;;;:::i;:::-;;:::i;2434:1014:18:-;;;;;;;;;;-1:-1:-1;2434:1014:18;;;;;:::i;:::-;;:::i;1152:345:9:-;;;;;;;;;;-1:-1:-1;1152:345:9;;;;;:::i;:::-;;:::i;2397:727:23:-;;;;;;;;;;-1:-1:-1;2397:727:23;;;;;:::i;:::-;;:::i;2331:858:13:-;;;;;;;;;;-1:-1:-1;2331:858:13;;;;;:::i;:::-;;:::i;3152:1029:3:-;;;;;;;;;;-1:-1:-1;3152:1029:3;;;;;:::i;:::-;;:::i;1156:458::-;;;;;;;;;;-1:-1:-1;1156:458:3;;;;;:::i;:::-;;:::i;2872:709:1:-;;;;;;;;;;-1:-1:-1;2872:709:1;;;;;:::i;:::-;;:::i;1684:118:41:-;;;;;;;;;;;;;:::i;888:1711:19:-;;;;;;;;;;-1:-1:-1;888:1711:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;929:347:21:-;;;;;;;;;;-1:-1:-1;929:347:21;;;;;:::i;:::-;;:::i;1749:631:0:-;;;;;;;;;;-1:-1:-1;1749:631:0;;;;;:::i;:::-;;:::i;885:388:1:-;;;;;;;;;;-1:-1:-1;885:388:1;;;;;:::i;:::-;;:::i;12978:327:27:-;;;;;;;;;;-1:-1:-1;12978:327:27;;;;;:::i;:::-;;:::i;4259:1073:10:-;;;;;;;;;;-1:-1:-1;4259:1073:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;1400:697::-;;;;;;;;;;-1:-1:-1;1400:697:10;;;;;:::i;:::-;;:::i;12363:47:27:-;;;;;;;;;;;;;:::i;1812:694:11:-;;;;;;;;;;-1:-1:-1;1812:694:11;;;;;:::i;:::-;;:::i;2151:937:5:-;;;;;;;;;;-1:-1:-1;2151:937:5;;;;;:::i;:::-;;:::i;1736:617:7:-;;;;;;;;;;-1:-1:-1;1736:617:7;;;;;:::i;:::-;;:::i;1212:421:2:-;;;;;;;;;;-1:-1:-1;1212:421:2;;;;;:::i;:::-;;:::i;2090:749:14:-;;;;;;;;;;-1:-1:-1;2090:749:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;964:462:20:-;;;;;;;;;;-1:-1:-1;964:462:20;;;;;:::i;:::-;;:::i;2840:677:12:-;;;;;;;;;;-1:-1:-1;2840:677:12;;;;;:::i;:::-;;:::i;1750:649:1:-;;;;;;;;;;-1:-1:-1;1750:649:1;;;;;:::i;:::-;;:::i;1333:415:23:-;;;;;;;;;;-1:-1:-1;1333:415:23;;;;;:::i;:::-;;:::i;2067:636:3:-;;;;;;;;;;-1:-1:-1;2067:636:3;;;;;:::i;:::-;;:::i;3020:769:11:-;;;;;;;;;;-1:-1:-1;3020:769:11;;;;;:::i;:::-;;:::i;1059:384:13:-;;;;;;;;;;-1:-1:-1;1059:384:13;;;;;:::i;:::-;;:::i;1897:619:20:-;;;;;;;;;;-1:-1:-1;1897:619:20;;;;;:::i;:::-;;:::i;2713:872:21:-;;;;;;;;;;-1:-1:-1;2713:872:21;;;;;:::i;:::-;;:::i;2835:675:7:-;;;;;;;;;;-1:-1:-1;2835:675:7;;;;;:::i;:::-;;:::i;2669:1017:10:-;;;;;;;;;;-1:-1:-1;2669:1017:10;;;;;:::i;:::-;;:::i;3632:92:27:-;;;;;;;;;;;;;:::i;1071:338:4:-;;;;;;;;;;-1:-1:-1;1071:338:4;;;;;:::i;:::-;;:::i;897:397:11:-;;;;;;;;;;-1:-1:-1;897:397:11;;;;;:::i;:::-;;:::i;877:382:12:-;;;;;;;;;;-1:-1:-1;877:382:12;;;;;:::i;:::-;;:::i;3742:1004:5:-;;;;;;;;;;-1:-1:-1;3742:1004:5;;;;;:::i;:::-;;:::i;3950:1574:4:-;;;;;;;;;;-1:-1:-1;3950:1574:4;;;;;:::i;:::-;;:::i;1754:435:23:-;;;;;;;;;;-1:-1:-1;1754:435:23;;;;;:::i;:::-;;:::i;1796:611:17:-;;;;;;;;;;-1:-1:-1;1796:611:17;;;;;:::i;:::-;;:::i;1149:342:5:-;;;;;;;;;;-1:-1:-1;1149:342:5;;;;;:::i;:::-;;:::i;3371:769:14:-;;;;;;;;;;-1:-1:-1;3371:769:14;;;;;:::i;:::-;;:::i;4881:2414:22:-;;;;;;;;;;-1:-1:-1;4881:2414:22;;;;;:::i;:::-;;:::i;2605:1848:19:-;;;;;;;;;;-1:-1:-1;2605:1848:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;12313:44:27:-;;;;;;;;;;;;;:::i;1981:836:9:-;2164:22;2200:24;2238:34;2305:31;2323:6;2331:4;2305:17;:31::i;:::-;2297:39;;2350:5;:12;2366:1;2350:17;2346:90;;;2383:42;;2346:90;2477:333;2514:255;;;;;;;;2570:4;2575:1;2570:7;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:9;;;;;2605:4;2624:1;2610:4;:11;:15;2605:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:9;;;;;2667:6;2675:5;2682:4;2656:31;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2656:31:9;;;;;;;;;2514:255;;;2727:4;2656:31;2514:255;;;2727:27;2514:255;;;;;;;2783:17;2477:23;:333::i;:::-;2446:364;;-1:-1:-1;2446:364:9;-1:-1:-1;1981:836:9;;;;;;;;:::o;4230:977:15:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:15;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:15;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:15;;;;;;;;-1:-1:-1;;4670:234:15;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;3763:98:27:-;3819:35;;3682:42;;3844:9;3819:35;;;;;;;;;3844:9;3682:42;3819:35;;;;;;;;;;;;;;;;;;;;;3763:98::o;2255:1032:2:-;2476:21;2511;2546:24;2584:34;2647:4;:10;;;:17;2668:1;2647:22;2643:109;;;2685:56;;2643:109;2786:62;2800:4;2806:10;2818;2830:17;2786:13;:62::i;:::-;2762:86;;;;;;;;2890:323;2927:245;;;;;;;;2983:10;-1:-1:-1;;;;;2927:245:2;;;;;3021:10;-1:-1:-1;;;;;2927:245:2;;;;;3072:13;3087:4;3061:31;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3061:31:2;;;;;;;;;2927:245;;;3132:4;3061:31;2927:245;;;3132:25;2927:245;;;;;;;3186:17;2890:23;:323::i;:::-;2859:354;;-1:-1:-1;2859:354:2;-1:-1:-1;2255:1032:2;;;;;;;;;;:::o;1089:466:14:-;1282:7;1312:236;1364:42;1436:9;1475:8;1498:16;1528:10;1312:23;:236::i;:::-;1305:243;;1089:466;;;;;;;:::o;2195:196:23:-;2338:20;;2376:8;;2195:196;;;;:::o;12245:62:27:-;;;-1:-1:-1;;;;;12245:62:27;;:::o;3674:2320:18:-;4180:16;;3935:9;;4007:8;;3883:28;;4170:9;;-1:-1:-1;;4180:20:18;;;4170:31;;;;;;;;;;;;4151:50;;4259:15;-1:-1:-1;;;;;4259:27:18;;4295:4;4302:8;4259:52;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4243:90;4382:9;-1:-1:-1;;;;;4359:42:18;;4410:8;4359:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4343:101;4971:27;5015:9;:16;-1:-1:-1;;;;;5001:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5001:31:18;;4971:61;;5042:24;5083:9;:16;-1:-1:-1;;;;;5069:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5069:31:18;;5042:58;;5116:9;5111:791;5135:9;:16;5131:1;:20;5111:791;;;5192:4;-1:-1:-1;;;;;5192:16:18;;5214:3;5240:8;5270:9;5301:8;5331:10;5363:9;5373:1;5363:12;;;;;;;;;;;;;;5192:201;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5172:720;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5616:38;5647:6;5616:30;:38::i;:::-;5587:10;5598:1;5587:13;;;;;;;;;;;;;5602:7;5610:1;5602:10;;;;;;;;;;;;;5586:68;;;;;;;;;;5812:10;5823:1;5812:13;;;;;;;;;;;;;;5829:1;5812:18;5808:70;;;5854:5;;;5808:70;5490:402;5172:720;;;5424:50;;-1:-1:-1;;;5424:50:18;;;;;;;:::i;:::-;;;;;;;;;5153:3;;5111:791;;;;5949:38;5967:10;5979:7;5949:17;:38::i;:::-;3674:2320;;;;;;;;;;:::o;2932:677:20:-;3125:24;3151:34;3232:370;3272:289;;;;;;;;3331:10;-1:-1:-1;;;;;3272:289:20;;;;;3369:10;-1:-1:-1;;;;;3272:289:20;;;;;3423:6;3412:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3272:289;;;;3473:6;3462:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3462:18:20;;;;;;;;;3272:289;;;3520:4;3462:18;3272:289;;;3520:26;3272:289;;;;;;;3575:17;3232:26;:370::i;:::-;3201:401;;;;-1:-1:-1;2932:677:20;-1:-1:-1;;;;;2932:677:20:o;1496:829:13:-;1704:24;1730:34;1811:507;1848:429;;;;;;;;1904:10;-1:-1:-1;;;;;1848:429:13;;;;;1942:10;-1:-1:-1;;;;;1848:429:13;;;;;2014:163;;;;;;;;2071:7;:18;;;-1:-1:-1;;;;;2014:163:13;;;;;2131:7;:23;;;-1:-1:-1;;;;;2014:163:13;;;;1982:213;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1982:213:13;;;;;;;;;1848:429;;;2235:4;1982:213;1848:429;;;2235:27;1848:429;;;;;;;2291:17;1811:23;:507::i;2012:1338:4:-;2229:13;2256:12;2282:24;2320:34;2395:4;:13;;;-1:-1:-1;;;;;2386:31:4;;2418:10;2430;2386:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2379:62;-1:-1:-1;2451:17:4;-1:-1:-1;;;;;2548:18:4;;;2544:429;;-1:-1:-1;2629:4:4;;-1:-1:-1;2594:10:4;2544:429;;;2680:13;;2671:55;;-1:-1:-1;;;2671:55:4;;-1:-1:-1;;;;;2671:31:4;;;;;;:55;;2703:10;;2715;;2671:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2664:62;-1:-1:-1;;;;;;2784:27:4;;2780:117;;2831:51;;;2780:117;-1:-1:-1;2957:5:4;;-1:-1:-1;2922:10:4;2544:429;3014:329;3051:251;;;;;;;;3107:10;-1:-1:-1;;;;;3051:251:4;;;;;3145:10;-1:-1:-1;;;;;3051:251:4;;;;;3196:4;:11;;;3209:4;3215:8;3185:39;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3185:39:4;;;;;;;;;3051:251;;;3264:4;3185:39;3051:251;;;3264:23;3051:251;;;;;;;3316:17;3014:23;:329::i;:::-;2983:360;;-1:-1:-1;2983:360:4;-1:-1:-1;;2012:1338:4;;;;;;;;;:::o;1744:619:12:-;1938:24;1964:34;2045:311;2082:233;;;;;;;;2138:10;-1:-1:-1;;;;;2082:233:12;;;;;2176:10;-1:-1:-1;;;;;2082:233:12;;;;;2227:6;2216:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2216:18:12;;;;;;;;;2082:233;;;2274:4;2216:18;2082:233;;;2274:26;2082:233;;;;;;;2329:17;2045:23;:311::i;1690:612:21:-;1861:24;1887:34;1968:327;2005:249;;;;;;;;2061:4;2066:1;2061:7;;;;;;;;;;;;;;-1:-1:-1;;;;;2005:249:21;;;;;2096:4;2115:1;2101:4;:11;:15;2096:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2005:249:21;;;;;2158:6;2166:4;2147:24;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2147:24:21;;;;;;;;;2005:249;;;2211:4;2147:24;2005:249;;;2211:28;2005:249;;;;;;;2268:17;1968:23;:327::i;:::-;1937:358;;;;-1:-1:-1;1690:612:21;-1:-1:-1;;;;1690:612:21:o;12829:93:27:-;;;:::o;3298:1192:9:-;3480:22;3516:24;3554:34;3621:31;3639:6;3647:4;3621:17;:31::i;:::-;3613:39;;3666:5;:12;3682:1;3666:17;3662:90;;;3699:42;;3662:90;3762:29;3808:4;:11;-1:-1:-1;;;;;3794:26:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3794:26:9;;3762:58;;3835:9;3830:110;3854:4;:11;3850:1;:15;3830:110;;;3904:4;3927:1;3923;3909:4;:11;:15;:19;3904:25;;;;;;;;;;;;;;3886:12;3899:1;3886:15;;;;;;;;-1:-1:-1;;;;;3886:43:9;;;:15;;;;;;;;;;;:43;3867:3;;3830:110;;;;3949:30;3982:39;4000:6;4008:12;3982:17;:39::i;:::-;3949:72;;4062:421;4102:340;;;;;;;;4161:4;4166:1;4161:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:9;;;;;4196:4;4215:1;4201:4;:11;:15;4196:21;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:9;;;;;4261:6;4269:5;4276:4;4250:31;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4102:340;;;;4324:6;4332:13;4347:12;4313:47;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4313:47:9;;;;;;;;;4102:340;;;4400:4;4313:47;4102:340;;;4400:27;4102:340;;;;;;;4456:17;4062:26;:421::i;:::-;4031:452;;-1:-1:-1;4031:452:9;-1:-1:-1;;;3298:1192:9;;;;;;;:::o;5338:2595:10:-;5669:16;;;;;5796;;;5810:1;5796:16;;;;;;;;;5535:17;;;;5810:1;5796:16;;;;5669;5796;;;;;-1:-1:-1;5796:16:10;5760:52;;5844:9;5822:16;5839:1;5822:19;;;;;;;;;;;;;;;;;:31;5863:28;5908:1;5894:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5894:16:10;;5863:47;;5939:4;:9;;;-1:-1:-1;;;;;5925:23:10;:10;-1:-1:-1;;;;;5925:23:10;;5921:2006;;;6012:289;;-1:-1:-1;;;6012:289:10;;-1:-1:-1;;;;;6012:29:10;;;;;993:5;;6012:289;;6130:10;;6166:34;;6226:16;;6268:11;;6012:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6012:289:10;;;;;;;;;;;;:::i;:::-;;;5992:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6407:102;5992:517;;;6385:6;-1:-1:-1;6378:13:10;;-1:-1:-1;;;6378:13:10;5992:517;5921:2006;;;6543:4;:9;;;-1:-1:-1;;;;;6529:23:10;:10;-1:-1:-1;;;;;6529:23:10;;6525:1402;;;6616:289;;-1:-1:-1;;;6616:289:10;;-1:-1:-1;;;;;6616:29:10;;;;;993:5;;6616:289;;6734:10;;6770:34;;6830:16;;6872:11;;6616:289;;;:::i;6525:1402::-;7243:466;;-1:-1:-1;;;7243:466:10;;-1:-1:-1;;;;;7243:31:10;;;;;993:5;;7243:466;;7363:10;;7399:34;;7459:16;;7501:11;;7538:10;;7399:34;;7459:16;;7501:11;;7243:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7243:466:10;;;;;;;;;;;;:::i;:::-;;;7223:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7815:102;7223:694;5338:2595;;;;;;;;;:::o;2862:695:0:-;3061:24;3087:34;3168:381;3208:300;;;;;;;;3267:10;-1:-1:-1;;;;;3208:300:0;;;;;3305:10;-1:-1:-1;;;;;3208:300:0;;;;;3359:11;3348:23;;;;;;;;:::i;:::-;;;;;;;;;;;;;3208:300;;;;3414:11;3403:23;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3403:23:0;;;;;;;;;3208:300;;;3466:4;3403:23;3208:300;;;3466:27;3208:300;;;;;;;3522:17;3168:26;:381::i;1618:348:22:-;1811:7;1841:118;1885:9;1909:16;1939:10;1841:15;:118::i;873:378:7:-;1062:7;1092:152;1132:9;1171:8;1194:16;1224:10;1092:11;:152::i;2888:667:17:-;3077:24;3103:34;3184:364;3224:283;;;;;;;;3283:10;-1:-1:-1;;;;;3224:283:17;;;;;3321:10;-1:-1:-1;;;;;3224:283:17;;;;;3375:4;3364:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;3224:283;;;;3423:4;3412:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3412:16:17;;;;;;;;;3224:283;;;3468:4;3412:16;3224:283;;;3468:24;3224:283;;;;;;;3521:17;3184:26;:364::i;5648:955:15:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:15;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:15;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;929:378:17;1118:7;1148:152;1188:9;1227:8;1250:16;1280:10;1148:11;:152::i;2332:490:6:-;2429:32;2509:9;-1:-1:-1;;;;;2491:35:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2477:49;;2541:9;2536:280;2556:21;;;2536:280;;2623:4;2598:11;2610:1;2598:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2645:9;;2655:1;2645:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2641:71;;-1:-1:-1;2641:71:6;;2689:8;;2641:71;2781:4;2792:9;;2802:1;2792:12;;;;;;;;;;;;;;;;;;:::i;:::-;2773:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2726:11;2738:1;2726:14;;;;;;;;;;;;;;:22;;2750:11;2762:1;2750:14;;;;;;;;;;;;;;;;;;2725:80;;;;;;;;;2536:280;2579:3;;2536:280;;;;2332:490;;;;:::o;2487:1876:22:-;2711:27;2752:24;2790:34;2849:35;2899:45;2918:6;-1:-1:-1;;;;;2918:14:22;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2936:4;2942:1;2899:18;:45::i;:::-;2849:95;;2989:17;:24;-1:-1:-1;;;;;2975:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2975:39:22;;2955:59;;3048:17;:24;-1:-1:-1;;;;;3034:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3034:39:22;;3024:49;;3110:17;:24;-1:-1:-1;;;;;3098:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3083:52;;3151:9;3146:1211;3170:9;:16;3166:1;:20;3146:1211;;;3207:25;3235:34;3250:4;3256:9;3266:1;3256:12;;;;;;;;;;;;;;3235:14;:34::i;:::-;3207:62;;3301:25;3344:35;3396:385;3437:295;;;;;;;;3505:4;3510:1;3505:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3437:295:22;;;;;3553:4;3572:1;3558:4;:11;:15;3553:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3437:295:22;;;;;3620:6;3628:12;3609:32;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3609:32:22;;;;;;;;;3437:295;;;3685:4;3609:32;3437:295;;;3685:28;3437:295;;;;;;;3750:17;3396:23;:385::i;:::-;3283:498;;;;3800:9;3795:552;3819:18;:25;3815:1;:29;3795:552;;;3936:18;3955:1;3936:21;;;;;;;;;;;;;;3961:1;3936:26;3932:78;;;3986:5;;3932:78;4127:18;4146:1;4127:21;;;;;;;;;;;;;;4103:17;4121:1;4103:20;;;;;;;;;;;;;;:45;4099:234;;4195:18;4214:1;4195:21;;;;;;;;;;;;;;4172:17;4190:1;4172:20;;;;;;;;;;;;;:44;;;;;4251:8;4260:1;4251:11;;;;;;;;;;;;;;4238:7;4246:1;4238:10;;;;;;;;;;;;;:24;;;;;4302:12;4284;4297:1;4284:15;;;;;;;;;;;;;:30;;;;4099:234;3846:3;;3795:552;;;;3146:1211;;;3188:3;;;;;3146:1211;;;;2487:1876;;;;;;;;;:::o;946:381:23:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:23;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:23;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:23;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:23;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;879:384:0:-;1071:7;1101:155;1144:9;1183:8;1206:16;1236:10;1101:14;:155::i;3919:339:2:-;-1:-1:-1;4139:21:2;;4162;;-1:-1:-1;4162:21:2;;-1:-1:-1;4162:21:2;;-1:-1:-1;3919:339:2:o;2434:1014:18:-;-1:-1:-1;;;;;;;;;;2686:39:18;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2670:79;2785:15;2803:9;2785:27;;2851:12;2865:17;2894:4;-1:-1:-1;;;;;2886:18:18;2941:8;2951:9;2962:8;2972:10;2984:8;2918:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2918:75:18;;;;;;;;;;;;;;-1:-1:-1;;;;;2918:75:18;-1:-1:-1;;;;;;2918:75:18;;;;;;;;;;2886:117;;;;2918:75;2886:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2850:153;;;;3033:9;3023:7;:19;3013:29;;-1:-1:-1;;;;;;;;;;3114:34:18;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3114:36:18;;;;;;;;-1:-1:-1;;3114:36:18;;;;;;;;;;;;:::i;:::-;;;3098:169;;;;;3225:21;;;;3098:169;3282:7;3277:53;;3305:14;:4;:12;:14::i;:::-;3380:61;3415:4;3404:27;;;;;;;;;;;;:::i;:::-;3433:7;3380:23;:61::i;:::-;2434:1014;;;;;;;;:::o;1152:345:9:-;1344:7;1374:116;1417:8;1440:16;1470:10;1374:14;:116::i;2397:727:23:-;2785:4;2779:11;;2880:26;2607:17;;2880:26;;;-1:-1:-1;;2876:42:23;2866:53;;2853:67;;;2971:18;;;2779:11;2607:17;-1:-1:-1;2894:4:23;3083:15;;2619:4;3065:43;;2515:603;;;:::o;2331:858:13:-;2538:24;2564:34;2614:30;;:::i;:::-;2647:127;;;;;;;;2692:7;:18;;;-1:-1:-1;;;;;2647:127:13;;;;;2740:7;:23;;;-1:-1:-1;;;;;2647:127:13;;;;2614:160;;2815:367;2855:286;;;;;;;;2914:10;-1:-1:-1;;;;;2855:286:13;;;;;2952:10;-1:-1:-1;;;;;2855:286:13;;;;;3006:4;2995:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;2855:286;;;;3054:4;3043:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3043:16:13;;;;;;;;;2855:286;;;3099:4;3043:16;2855:286;;;3099:27;2855:286;;;;;;;3155:17;2815:26;:367::i;:::-;2784:398;;;;-1:-1:-1;2331:858:13;-1:-1:-1;;;;;;2331:858:13:o;3152:1029:3:-;3361:24;3387:34;3468:706;3508:625;;;;;;;;3567:10;-1:-1:-1;;;;;3508:625:3;;;;;3605:10;-1:-1:-1;;;;;3508:625:3;;;;;3659:9;3648:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;3508:625;;;;3733:303;;;;;;;;3789:9;:22;;;-1:-1:-1;;;;;3733:303:3;;;;;3863:9;:34;;;-1:-1:-1;;;;;3733:303:3;;;;;;3936:9;:19;;;3733:303;;;;;;3992:9;:21;;;3733:303;;;;;3701:353;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3701:353:3;;;;;;;;;3508:625;;;4094:4;3701:353;3508:625;;;4094:24;3508:625;;;;;;;4147:17;3468:26;:706::i;1156:458::-;1345:7;1375:232;1423:42;1495:9;1534:8;1557:16;1587:10;1375:19;:232::i;2872:709:1:-;3090:24;3116:34;3197:377;3237:296;;;;;;;;3296:10;-1:-1:-1;;;;;3237:296:1;;;;;3334:10;-1:-1:-1;;;;;3237:296:1;;;;;3388:8;3377:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;3237:296;;;;3440:8;3429:20;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3429:20:1;;;;;;;;;3237:296;;;3489:4;3429:20;3237:296;;;3489:29;3237:296;;;;;;;3547:17;3197:26;:377::i;1684:118:41:-;1759:42;1684:118;:::o;888:1711:19:-;1070:23;;:::i;:::-;1107:24;;:::i;:::-;1145:31;;;1269:596;1294:13;:20;1289:1;:25;1269:596;;1335:71;1391:2;1365:13;1379:1;1365:16;;;;;;;;;;;;;;:23;:28;1395:10;1335:13;1349:1;1335:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1421:15;1438:23;1473:4;-1:-1:-1;;;;;1465:18:19;1484:13;1498:1;1484:16;;;;;;;;;;;;;;1465:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1420:81;;;;1519:10;1515:340;;;1549:14;1566:46;1609:2;1589:10;:17;:22;1566:10;:22;;:46;;;;:::i;:::-;1549:63;;1643:23;1634:6;:32;1630:211;;;1744:24;;;1790:19;;;:32;;;1716:6;-1:-1:-1;1716:6:19;1630:211;1515:340;;-1:-1:-1;;1316:3:19;;1269:596;;;-1:-1:-1;1878:28:19;1874:123;;1922:64;;1874:123;2011:9;2006:587;2031:14;:21;2026:1;:26;2006:587;;2073:86;2131:2;2104:14;2119:1;2104:17;;;;;;;;;;;;;;:24;:29;2135:23;2073:14;2088:1;2073:17;;;;;;;:86;2174:15;2191:23;2226:4;-1:-1:-1;;;;;2218:18:19;2237:14;2252:1;2237:17;;;;;;;;;;;;;;2218:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2173:82;;;;2273:10;2269:314;;;2303:14;2320:46;2363:2;2343:10;:17;:22;2320:10;:22;;:46;;;;:::i;:::-;2303:63;;2397:9;2388:6;:18;2384:185;;;2470:25;;;2517:20;;;:33;;;2442:6;-1:-1:-1;2442:6:19;2384:185;2269:314;;-1:-1:-1;;2054:3:19;;2006:587;;;;888:1711;;;;;;;;:::o;929:347:21:-;1122:7;1152:117;1196:8;1219:16;1249:10;1152:15;:117::i;1749:631:0:-;1949:24;1975:34;2056:317;2093:239;;;;;;;;2149:10;-1:-1:-1;;;;;2093:239:0;;;;;2187:10;-1:-1:-1;;;;;2093:239:0;;;;;2238:11;2227:23;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2227:23:0;;;;;;;;;2093:239;;;2290:4;2227:23;2093:239;;;2290:27;2093:239;;;;;;;2346:17;2056:23;:317::i;885:388:1:-;1079:7;1109:157;1154:9;1193:8;1216:16;1246:10;1109:16;:157::i;12978:327:27:-;13186:27;13281:5;:17;;;-1:-1:-1;;;;;13236:62:27;13265:5;:10;;;13254:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;13244:33;;;;;;13236:42;;:62;;;;;;13229:69;;12978:327;;;;;;:::o;4259:1073:10:-;4484:17;4515;4546:24;4584:34;4655:47;4673:4;4679:10;4691;4655:17;:47::i;:::-;4643:59;-1:-1:-1;4716:16:10;4712:99;;4748:52;;4712:99;4832:61;;-1:-1:-1;;;4832:61:10;;:4;;:20;;:61;;4853:4;;4859:9;;4870:10;;4882;;4832:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4832:61:10;;;;;;;;;;;;:::i;:::-;4820:4;:9;;:73;;;;4910:4;:9;;;4903:16;;4961:364;5001:283;;;;;;;;5060:10;-1:-1:-1;;;;;5001:283:10;;;;;5098:10;-1:-1:-1;;;;;5001:283:10;;;;;5152:4;5141:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;5001:283;;;;5200:4;5189:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5189:16:10;;;;;;;;;5001:283;;;5245:4;5189:16;5001:283;;;5245:24;5001:283;;;;;;;5298:17;4961:26;:364::i;1400:697::-;1589:7;1612:28;;:::i;:::-;1654:10;1643:42;;;;;;;;;;;;:::i;:::-;1612:73;;1702:388;1097:42;1909:4;:9;;;1948;1987:8;2010:16;2051:4;:17;;;2070:4;:9;;;2040:40;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1702:19;:388::i;:::-;1695:395;1400:697;-1:-1:-1;;;;;;1400:697:10:o;12363:47:27:-;;;-1:-1:-1;;;;;12363:47:27;;:::o;1812:694:11:-;2025:24;2051:34;2101:19;2161:338;2198:260;;;;;;;;2254:10;-1:-1:-1;;;;;2198:260:11;;;;;2292:10;-1:-1:-1;;;;;2198:260:11;;;;;2343:15;2360:6;2332:35;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2332:35:11;;;;;;;;;2198:260;;;2407:4;2332:35;2198:260;;;2407:36;2198:260;;;;;;;2472:17;2161:23;:338::i;2151:937:5:-;2383:13;2410:12;2436:24;2474:34;2552:60;2571:8;2581:6;2589:10;2601;2552:18;:60::i;:::-;2533:79;-1:-1:-1;2533:79:5;-1:-1:-1;;;;;;2626:18:5;;2622:100;;2660:51;;2622:100;2763:318;2800:240;;;;;;;;2856:10;-1:-1:-1;;;;;2800:240:5;;;;;2894:10;-1:-1:-1;;;;;2800:240:5;;;;;2945:4;2951:8;2934:26;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2934:26:5;;;;;;;;;2800:240;;;3000:4;2934:26;2800:240;;;3000:25;2800:240;;;;;;;3054:17;2763:23;:318::i;:::-;2732:349;;-1:-1:-1;2732:349:5;-1:-1:-1;2151:937:5;;;;;;;;;;;:::o;1736:617:7:-;1930:24;1956:34;2037:309;2074:231;;;;;;;;2130:10;-1:-1:-1;;;;;2074:231:7;;;;;2168:10;-1:-1:-1;;;;;2074:231:7;;;;;2219:6;2208:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2208:18:7;;;;;;;;;2074:231;;;2266:4;2208:18;2074:231;;;2266:24;2074:231;;;;;;;2319:17;2037:23;:309::i;1212:421:2:-;1402:7;1432:194;1481:42;1553:8;1576:16;1606:10;1432:20;:194::i;2090:749:14:-;2288:12;2302:24;2328:34;2441:8;-1:-1:-1;;;;;2422:34:14;;2457:10;2469;2422:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2415:65;;2521:311;2558:233;;;;;;;;2614:10;-1:-1:-1;;;;;2558:233:14;;;;;2652:10;-1:-1:-1;;;;;2558:233:14;;;;;2703:4;2692:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2692:16:14;;;;;;;;;2558:233;;;2748:4;2692:16;2558:233;;;2748:28;2558:233;;;;;;;2805:17;2521:23;:311::i;:::-;2090:749;;2490:342;;-1:-1:-1;2490:342:14;;-1:-1:-1;2090:749:14;;-1:-1:-1;;;;2090:749:14:o;964:462:20:-;1155:7;1185:234;1235:42;1307:9;1346:8;1369:16;1399:10;1185:21;:234::i;2840:677:12:-;3033:24;3059:34;3140:370;3180:289;;;;;;;;3239:10;-1:-1:-1;;;;;3180:289:12;;;;;3277:10;-1:-1:-1;;;;;3180:289:12;;;;;3331:6;3320:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3180:289;;;;3381:6;3370:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3370:18:12;;;;;;;;;3180:289;;;3428:4;3370:18;3180:289;;;3428:26;3180:289;;;;;;;3483:17;3140:26;:370::i;1750:649:1:-;1969:24;1995:34;2076:316;2113:238;;;;;;;;2169:10;-1:-1:-1;;;;;2113:238:1;;;;;2207:10;-1:-1:-1;;;;;2113:238:1;;;;;2258:8;2247:20;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2247:20:1;;;;;;;;;2113:238;;;2307:4;2247:20;2113:238;;;2307:29;2113:238;;;;;;;2365:17;2076:23;:316::i;1333:415:23:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:23;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:23;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:23;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:23;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:23;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;2067:636:3;2277:24;2303:34;2384:312;2421:234;;;;;;;;2477:10;-1:-1:-1;;;;;2421:234:3;;;;;2515:10;-1:-1:-1;;;;;2421:234:3;;;;;2566:9;2555:21;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2555:21:3;;;;;;;;;2421:234;;;2616:4;2555:21;2421:234;;;2616:24;2421:234;;;;;;;2669:17;2384:23;:312::i;3020:769:11:-;3232:24;3258:34;3308:19;3368:414;3408:333;;;;;;;;3467:10;-1:-1:-1;;;;;3408:333:11;;;;;3505:10;-1:-1:-1;;;;;3408:333:11;;;;;3559:15;3576:6;3548:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3408:333;;;;3626:15;3643:6;3615:35;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3615:35:11;;;;;;;;;3408:333;;;3690:4;3615:35;3408:333;;;3690:36;3408:333;;;;;;;3755:17;3368:26;:414::i;1059:384:13:-;1251:7;1281:155;1324:9;1363:8;1386:16;1416:10;1281:14;:155::i;1897:619:20:-;2091:24;2117:34;2198:311;2235:233;;;;;;;;2291:10;-1:-1:-1;;;;;2235:233:20;;;;;2329:10;-1:-1:-1;;;;;2235:233:20;;;;;2380:6;2369:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2369:18:20;;;;;;;;;2235:233;;;2427:4;2369:18;2235:233;;;2427:26;2235:233;;;;;;;2482:17;2198:23;:311::i;2713:872:21:-;2883:24;2909:34;2959:29;3005:4;:11;-1:-1:-1;;;;;2991:26:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2991:26:21;;2959:58;;3032:9;3027:110;3051:4;:11;3047:1;:15;3027:110;;;3101:4;3124:1;3120;3106:4;:11;:15;:19;3101:25;;;;;;;;;;;;;;3083:12;3096:1;3083:15;;;;;;;;-1:-1:-1;;;;;3083:43:21;;;:15;;;;;;;;;;;:43;3064:3;;3027:110;;;;3178:400;3218:319;;;;;;;;3277:4;3282:1;3277:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3218:319:21;;;;;3312:4;3331:1;3317:4;:11;:15;3312:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3218:319:21;;;;;3377:6;3385:4;3366:24;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3218:319;;;;3433:6;3441:12;3422:32;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3422:32:21;;;;;;;;;3218:319;;;3494:4;3422:32;3218:319;;;3494:28;3218:319;;;;;;;3551:17;3178:26;:400::i;2835:675:7:-;3028:24;3054:34;3135:368;3175:287;;;;;;;;3234:10;-1:-1:-1;;;;;3175:287:7;;;;;3272:10;-1:-1:-1;;;;;3175:287:7;;;;;3326:6;3315:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;3175:287;;;;3376:6;3365:18;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3365:18:7;;;;;;;;;3175:287;;;3423:4;3365:18;3175:287;;;3423:24;3175:287;;;;;;;3476:17;3135:26;:368::i;2669:1017:10:-;2895:17;2926;2957:24;2995:34;3066:47;3084:4;3090:10;3102;3066:17;:47::i;:::-;3054:59;-1:-1:-1;3127:16:10;3123:99;;3159:52;;3123:99;3243:61;;-1:-1:-1;;;3243:61:10;;:4;;:20;;:61;;3264:4;;3270:9;;3281:10;;3293;;3243:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3243:61:10;;;;;;;;;;;;:::i;:::-;3231:4;:9;;:73;;;;3321:4;:9;;;3314:16;;3372:307;3409:229;;;;;;;;3465:10;-1:-1:-1;;;;;3409:229:10;;;;;3503:10;-1:-1:-1;;;;;3409:229:10;;;;;3554:4;3543:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3543:16:10;;;;;;;;;3409:229;;;3599:4;3543:16;3409:229;;;3599:24;3409:229;;;;;;;3652:17;3372:23;:307::i;3632:92:27:-;3682:42;3632:92;:::o;1071:338:4:-;1259:7;1289:113;1328:9;1352:16;1382:10;1289;:113::i;897:397:11:-;1098:7;1128:159;1175:9;1214:8;1237:16;1267:10;1128:18;:159::i;877:382:12:-;1068:7;1098:154;1140:9;1179:8;1202:16;1232:10;1098:13;:154::i;3742:1004:5:-;3973:13;4000:12;4026:24;4064:34;4142:60;4161:8;4171:6;4179:10;4191;4142:18;:60::i;:::-;4123:79;-1:-1:-1;4123:79:5;-1:-1:-1;;;;;;4216:18:5;;4212:100;;4250:51;;4212:100;4353:386;4393:305;;;;;;;;4452:10;-1:-1:-1;;;;;4393:305:5;;;;;4490:10;-1:-1:-1;;;;;4393:305:5;;;;;4544:4;4550:8;4533:26;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4393:305;;;;4602:4;4609:8;4608:9;4591:27;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4591:27:5;;;;;;;;;4393:305;;;4658:4;4591:27;4393:305;;;4658:25;4393:305;;;;;;;4712:17;4353:26;:386::i;3950:1574:4:-;4166:13;4193:12;4219:24;4257:34;4423:4;:13;;;-1:-1:-1;;;;;4414:31:4;;4446:10;4458;4414:55;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4407:62;-1:-1:-1;4479:17:4;-1:-1:-1;;;;;4576:18:4;;;4572:494;;-1:-1:-1;4657:4:4;;-1:-1:-1;4622:10:4;4572:494;;;4773:13;;4764:55;;-1:-1:-1;;;4764:55:4;;-1:-1:-1;;;;;4764:31:4;;;;;;:55;;4796:10;;4808;;4764:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4757:62;-1:-1:-1;;;;;;4877:27:4;;4873:117;;4924:51;;;4873:117;-1:-1:-1;5050:5:4;;-1:-1:-1;5015:10:4;4572:494;5107:410;5147:329;;;;;;;;5206:10;-1:-1:-1;;;;;5147:329:4;;;;;5244:10;-1:-1:-1;;;;;5147:329:4;;;;;5298:4;:11;;;5311:4;5317:8;5287:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5147:329;;;;5369:4;:11;;;5382:4;5389:8;5388:9;5358:40;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5358:40:4;;;;;;;;;5147:329;;;5438:4;5358:40;5147:329;;;5438:23;5147:329;;;;;;;5490:17;5107:26;:410::i;1754:435:23:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:23;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:23;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:23;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:23;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;1796:611:17;1986:24;2012:34;2093:307;2130:229;;;;;;;;2186:10;-1:-1:-1;;;;;2130:229:17;;;;;2224:10;-1:-1:-1;;;;;2130:229:17;;;;;2275:4;2264:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2264:16:17;;;;;;;;;2130:229;;;2320:4;2264:16;2130:229;;;2320:24;2130:229;;;;;;;2373:17;2093:23;:307::i;1149:342:5:-;1339:7;1369:115;1410:9;1434:16;1464:10;1369:12;:115::i;3371:769:14:-;3568:12;3582:24;3608:34;3684:8;-1:-1:-1;;;;;3665:34:14;;3700:10;3712;3665:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3658:65;;3764:368;3804:287;;;;;;;;3863:10;-1:-1:-1;;;;;3804:287:14;;;;;3901:10;-1:-1:-1;;;;;3804:287:14;;;;;3955:4;3944:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;3804:287;;;;4003:4;3992:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3992:16:14;;;;;;;;;3804:287;;;4048:4;3992:16;3804:287;;;4048:28;3804:287;;;;;;;4105:17;3764:26;:368::i;4881:2414:22:-;5104:27;5145:24;5183:34;5242:35;5292:45;5311:6;-1:-1:-1;;;;;5311:14:22;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5292:45;5242:95;;5347:36;5386:23;5404:4;5386:17;:23::i;:::-;5347:62;;5454:17;:24;-1:-1:-1;;;;;5440:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5440:39:22;;5420:59;;5513:17;:24;-1:-1:-1;;;;;5499:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5499:39:22;;5489:49;;5575:17;:24;-1:-1:-1;;;;;5563:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5548:52;;5670:9;5665:1624;5689:17;:24;5685:1;:28;5665:1624;;;5739:9;5734:1405;5758:9;:16;5754:1;:20;5734:1405;;;5821:25;5868:35;5924:768;5972:639;;;;;;;;6047:4;6052:1;6047:7;;;;;;;;;;;;;;-1:-1:-1;;;;;5972:639:22;;;;;6099:4;6118:1;6104:4;:11;:15;6099:21;;;;;;;;;;;;;;-1:-1:-1;;;;;5972:639:22;;;;;6173:6;6181:34;6196:4;6202:9;6212:1;6202:12;;;;;;;6181:34;6162:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5972:639;;;;6296:6;6332:154;6380:12;6426:30;6443:9;6453:1;6443:12;;;;;;;;;;;;;;6426:16;:30::i;:::-;6332:14;:154::i;:::-;6256:256;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5972:639;;;;6560:4;-1:-1:-1;;;;;6560:28:22;;5972:639;;;;;;;;;;;6633:41;6653:17;6671:1;6653:20;;;;;;;;;;;;;;6633:19;:41::i;:::-;5924:26;:768::i;:::-;5799:893;;;;6766:17;6784:1;6766:20;;;;;;;;;;;;;;6790:1;6766:25;:74;;;;6819:18;6838:1;6819:21;;;;;;;;;;;;;;6795:17;6813:1;6795:20;;;;;;;;;;;;;;:45;;6766:74;6762:363;;;6887:18;6906:1;6887:21;;;;;;;;;;;;;;6864:17;6882:1;6864:20;;;;;;;;;;;;;:44;;;;;6943:8;6952:1;6943:11;;;;;;;;;;;;;;6930:7;6938:1;6930:10;;;;;;;;;;;;;:24;;;;;7072:34;7087:4;7093:9;7103:1;7093:12;;;;;;;7072:34;7054:12;7067:1;7054:15;;;;;;;;;;;;;:52;;;;6762:363;-1:-1:-1;;5776:3:22;;5734:1405;;;;7214:17;7232:1;7214:20;;;;;;;;;;;;;;7238:1;7214:25;7210:69;;;7259:5;;7210:69;5715:3;;5665:1624;;;;4881:2414;;;;;;;;;;:::o;2605:1848:19:-;2785:23;;:::i;:::-;2822:24;;:::i;:::-;-1:-1:-1;;2924:2:19;2860:18;2992:673;3017:14;:21;3012:1;:26;2992:673;;3059:72;3117:2;3090:14;3105:1;3090:17;;;;;;;;;;;;;;:24;:29;3121:9;3059:14;3074:1;3059:17;;;;;;;:72;3146:15;3163:23;3198:4;-1:-1:-1;;;;;3190:18:19;3209:14;3224:1;3209:17;;;;;;;;;;;;;;3190:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3145:82;;;;3245:10;3241:414;;;3275:14;3292:46;3335:2;3315:10;:17;:22;3292:10;:22;;:46;;;;:::i;:::-;3275:63;;3390:1;3381:6;:10;:66;;;;;3424:23;3415:6;:32;3381:66;3356:285;;;3542:25;;;3589:20;;;:33;;;3514:6;-1:-1:-1;3514:6:19;3356:285;3241:414;;-1:-1:-1;;3040:3:19;;2992:673;;;;-1:-1:-1;;3678:23:19;:38;3674:109;;;3732:40;;;3674:109;3797:9;3792:655;3817:13;:20;3812:1;:25;3792:655;;3858:84;3914:2;3888:13;3902:1;3888:16;;;;;;;;;;;;;;:23;:28;3918:23;3858:13;3872:1;3858:16;;;;;;;:84;3957:15;3974:23;4009:4;-1:-1:-1;;;;;4001:18:19;4020:13;4034:1;4020:16;;;;;;;;;;;;;;4001:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3956:81;;;;4055:10;4051:386;;;4085:14;4102:46;4145:2;4125:10;:17;:22;4102:10;:22;;:46;;;;:::i;:::-;4085:63;;4200:1;4191:6;:10;:53;;;;;4234:10;4225:6;:19;4191:53;4166:257;;;4326:24;;;4372:19;;;:32;;;4298:6;-1:-1:-1;4298:6:19;4166:257;4051:386;;-1:-1:-1;;3839:3:19;;3792:655;;;;2605:1848;;;;;;;;:::o;12313:44:27:-;;;-1:-1:-1;;;;;12313:44:27;;:::o;4496:768:9:-;4630:22;4704:1;4690:4;:11;:15;-1:-1:-1;;;;;4676:30:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4676:30:9;;4668:38;;4716:24;4776:6;-1:-1:-1;;;;;4760:31:9;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4716:78;;4809:9;4804:454;4828:5;:12;4824:1;:16;4804:454;;;4956:7;-1:-1:-1;;;;;4956:22:9;;1132:5;5046:4;5051:1;5046:7;;;;;;;;;;;;;;5055:4;5060:1;5064;5060:5;5055:11;;;;;;;;;;;;;;5068:1;4956:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4956:114:9;;;;;;;;-1:-1:-1;;4956:114:9;;;;;;;;;;;;:::i;:::-;;;4936:312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5217:16:9;;;5231:1;5217:16;;;;;;;;;-1:-1:-1;5210:23:9;;-1:-1:-1;;5210:23:9;4936:312;5151:4;5140:5;5146:1;5140:8;;;;;;;;;;;;;:15;-1:-1:-1;;;;;5140:15:9;;;-1:-1:-1;;;;;5140:15:9;;;;;5087:83;4842:3;;4804:454;;;;4496:768;;;;;;:::o;6000:708:18:-;6157:24;6280:25;;;;6332:14;;6364:13;;;;6280:25;6395:15;;;;6242:209;;-1:-1:-1;;;6242:209:18;;6157:24;;6242:4;;:20;;:209;;6280:34;;;;;-1:-1:-1;;;;;;6280:34:18;;6332:14;;6364:13;;6428:9;;6242:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6226:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6660:6;6649:42;;;;;;;;;;;;:::i;:::-;6625:66;-1:-1:-1;6625:66:18;-1:-1:-1;6226:476:18;;-1:-1:-1;6226:476:18;6474:50;6000:708;;;;;:::o;4264:1265:2:-;4479:21;4502;4555:4;:13;;;-1:-1:-1;;;;;4555:24:2;;4580:4;:13;;;-1:-1:-1;;;;;4580:28:2;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4555:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4539:72;;4625:4;:10;;;:17;4646:1;4625:22;4621:81;;;4663:28;;4621:81;4711:23;4819:9;4814:709;4838:4;:10;;;:17;4834:1;:21;4814:709;;;4903:1;4880:4;:10;;;4891:1;4880:13;;;;;;;;;;;;;;:20;:24;4876:71;;;4924:8;;4876:71;4996:13;-1:-1:-1;;;;;4981:61:2;;1093:5;5115:4;:10;;;5126:1;5115:13;;;;;;;;;;;;;;5130:17;5173:1;5148:17;:24;:26;5130:45;;;;;;;;;;;;;;4981:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4981:195:2;;;;;;;;-1:-1:-1;;4981:195:2;;;;;;;;;;;;:::i;:::-;;;4961:552;;5490:8;;4961:552;5261:15;5252:6;:24;5248:137;;;5318:6;5300:24;;5353:4;:10;;;5364:1;5353:13;;;;;;;;;;;;;;5346:20;;5248:137;5193:206;4961:552;4857:3;;4814:709;;;;4264:1265;;;;;;;;;:::o;1883:1058:49:-;2113:20;2150:19;2184:10;2173:40;;;;;;;;;;;;:::i;:::-;2149:64;;2256:16;2303:4;-1:-1:-1;;;;;2290:17:49;:9;-1:-1:-1;;;;;2290:17:49;;2286:280;;;2323:25;;-1:-1:-1;;;2323:25:49;;-1:-1:-1;;;;;2323:13:49;;;;;:25;;2337:10;;2323:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2373:10;2362:21;;2286:280;;;2458:97;-1:-1:-1;;;;;2458:24:49;;2508:4;2531:10;2458:24;:97::i;:::-;2591:4;-1:-1:-1;;;;;2591:9:49;;2608:8;2644:4;-1:-1:-1;;;;;2631:17:49;:9;-1:-1:-1;;;;;2631:17:49;;:49;;2671:9;2631:49;;;2666:1;2631:49;2706:4;-1:-1:-1;;;;;2694:16:49;:8;-1:-1:-1;;;;;2694:16:49;;:47;;2733:8;2694:47;;;2728:1;2694:47;2755:10;2779:1;2802;2591:223;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2576:238;;2870:4;-1:-1:-1;;;;;2858:16:49;:8;-1:-1:-1;;;;;2858:16:49;;2854:81;;;2890:4;-1:-1:-1;;;;;2890:12:49;;2909;2890:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2854:81;1883:1058;;;;;;;;;:::o;7660:277:18:-;7782:7;7791;7818:6;:13;7835:2;7818:19;7814:62;;-1:-1:-1;7861:1:18;;-1:-1:-1;7861:1:18;7853:12;;7814:62;7903:6;7892:38;;;;;;;;;;;;:::i;:::-;7885:45;;;;7660:277;;;;:::o;7051:312::-;7183:17;7214:7;7223;7203:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7183:48;;7341:4;7335:11;7330:2;7324:4;7320:13;7313:34;8306:3814;8477:24;8503:34;8587:17;:24;-1:-1:-1;;;;;8573:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8573:39:18;;8553:59;;8646:17;:24;-1:-1:-1;;;;;8632:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8632:39:18;;8622:49;;8685:17;:24;8713:1;8685:29;8681:95;;;8730:35;;8681:95;8817:16;;;8831:1;8817:16;;;;;;;;;8786:28;;8817:16;;;;;;;;;;;-1:-1:-1;8817:16:18;8786:47;;8860:17;8878:1;8860:20;;;;;;;;;;;;;;8843:11;8855:1;8843:14;;;;;;;;;;;;;:37;;;;;8891:42;;:::i;:::-;-1:-1:-1;8936:219:18;;;;;;;;;8988:14;;-1:-1:-1;;;;;8936:219:18;;;;;;9026:13;;;;8936:219;;;;;;;9065:18;;;;8936:219;;;;9119:25;;;-1:-1:-1;;;;;9119:25:18;;;8936:219;;;9119:25;;;;8936:219;;;;;;;;9166:41;;:::i;:::-;9210:218;;;;;;;;9262:4;:13;;;-1:-1:-1;;;;;9210:218:18;;;;;9299:4;:14;;;-1:-1:-1;;;;;9210:218:18;;;;;9339:4;:17;;;9210:218;;;;9392:4;:25;;;;;;;;;;;9210:218;;;;;;;;;;;9166:262;;9527:45;9551:7;9560:11;9527:23;:45::i;:::-;9509:63;;;;;;9586:11;9598:1;9586:14;;;;;;;;;;;;;;9604:1;9586:19;9582:85;;;9621:35;;;;;9582:85;9677:27;9808:46;9832:8;9842:11;9808:23;:46::i;:::-;9791:63;;;;;;9869:10;9880:1;9869:13;;;;;;;;;;;;;;9886:1;9869:18;9865:84;;;9903:35;;;;;;9865:84;9964:9;9959:2155;9983:17;:24;9979:1;:28;9959:2155;;;10028:25;10072:12;10067:1588;8298:1;10090:4;:37;10067:1588;;;10267:157;10315:17;10333:1;10315:20;;;;;;;;;;;;;;10357:10;10368:1;10357:13;;;;;;;;;;;;;;10392:11;10404:1;10392:14;;;;;;;;;;;;;;10267:26;:157::i;:::-;10250:11;10262:1;10250:14;;;;;;;;;;;;;:174;;;;;10446:11;10458:1;10446:14;;;;;;;;;;;;;;10464:1;10446:19;10442:71;;;10489:5;;10442:71;10547:207;8151:8;7993:3;10596:59;7993:3;10722:11;10734:1;10722:14;;;;;;;10547:207;10530:11;10542:1;10530:14;;;;;;;;;;;;;:224;;;;;10776:11;10788:1;10776:14;;;;;;;;;;;;;;10794:1;10776:19;10772:71;;;10819:5;;10772:71;10860:28;10932:46;10956:8;10966:11;10932:23;:46::i;:::-;11000:14;;10906:72;;-1:-1:-1;10906:72:18;-1:-1:-1;10906:72:18;;11012:1;;11000:14;;;;;;;;;;11018:1;11000:19;10996:71;;;11043:5;;;10996:71;11201:11;11188:24;;11308:17;11326:1;11308:20;;;;;;;;;;;;;;11291:10;11302:1;11291:13;;;;;;;;;;;;;;:37;11287:354;;11352:11;11480:17;11498:1;11480:20;;;;;;;;;;;;;;7993:3;11407:17;11425:1;11407:20;;;;;;;;;;;;;;11391:10;11402:1;11391:13;;;;;;;;;;;;;;:36;11390:63;:110;;;;;;11352:148;;8151:8;11526:3;:41;11522:101;;11595:5;;;;11522:101;11287:354;;-1:-1:-1;10129:6:18;;10067:1588;;;;11681:8;11690:1;11681:11;;;;;;;;;;;;;;11668:7;11676:1;11668:10;;;;;;;;;;;;;:24;;;;;11962:141;12006:17;12024:1;12006:20;;;;;;;;;;;;;;12044:10;12055:1;12044:13;;;;;;;;;;;;;;12075:11;12087:1;12075:14;;;;;;;11962:141;11939:17;11957:1;11939:20;;;;;;;;;;;;;;;;;:164;-1:-1:-1;10009:3:18;;9959:2155;;;;8306:3814;;;;;;;;;:::o;1256:706:54:-;1416:20;1453:23;1478:17;1522:10;1511:49;;;;;;;;;;;;:::i;:::-;1452:108;;-1:-1:-1;1452:108:54;-1:-1:-1;1644:53:54;-1:-1:-1;;;;;1644:24:54;;1452:108;1686:10;1644:24;:53::i;:::-;1741:213;;;;;;;;;;;1832:4;1741:213;;;;1861:15;1741:213;;;;;;;;;;1942:1;1741:213;;;;1723:232;;-1:-1:-1;;;1723:232:54;;-1:-1:-1;;;;;1723:17:54;;;;;:232;;1741:213;1723:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1542:724:50:-;1731:20;1769:12;1796:10;1785:32;;;;;;;;;;;;:::i;:::-;1768:49;-1:-1:-1;1902:86:50;-1:-1:-1;;;;;1902:24:50;;1768:49;1968:10;1902:24;:86::i;:::-;2086:144;;-1:-1:-1;;;2086:144:50;;-1:-1:-1;;;;;2086:19:50;;;;;:144;;2119:9;;2142:10;;2166:8;;2219:1;;2086:144;;;:::i;3834:545:32:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;:::-;:91;;:104::i;1140:762:51:-;1329:20;1365:11;1390:10;1379:32;;;;;;;;;;;;:::i;:::-;1365:46;-1:-1:-1;1496:101:51;-1:-1:-1;;;;;1496:40:51;;1365:46;1577:10;1496:40;:101::i;:::-;1623:243;;-1:-1:-1;;;1623:243:51;;-1:-1:-1;;;;;1623:15:51;;;;;:243;;1652:9;;1675:8;;1738:10;;1798:1;;1837:15;:19;;;1623:243;;;:::i;7301:2724:22:-;7487:35;7592:1;7578:10;7559:9;:16;:29;:34;;7538:117;;;;-1:-1:-1;;;7538:117:22;;;;;;;:::i;:::-;7665:30;;:::i;:::-;-1:-1:-1;7665:203:22;;;;;;;;;7792:8;7665:203;;7822:7;7665:203;;;;7851:6;7665:203;;;;7927:42;;7948:20;7927:42;;;;;;;;;7665:203;;;;7927:42;;;;;;;;;;;;;-1:-1:-1;7927:42:22;7878:91;;7979:21;8028:25;8056:9;8066:10;8056:21;;;;;;;;;;;;;;8028:49;;8091:26;8120:9;8130:10;8143:1;8130:14;8120:25;;;;;;;;;;;;;;8091:54;;8164:9;8159:296;8183:20;8179:1;:24;8159:296;;;8228:19;8266:7;-1:-1:-1;;;;;8266:15:22;;8282:10;8294:11;8307:13;8321:1;8307:16;;;;;;;;;;;8266:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8228:96;;8346:18;8359:4;8346:12;:18::i;:::-;8342:99;;;8418:4;8388:10;8399:15;;;;;;8388:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;8388:34:22;;;-1:-1:-1;;;;;8388:34:22;;;;;8342:99;-1:-1:-1;8205:3:22;;8159:296;;;-1:-1:-1;;;8478:18:22;8474:109;;8556:16;;;;;8474:109;8614:9;:16;8596:10;8609:1;8596:14;:34;8592:349;;;8709:13;-1:-1:-1;;;;;8686:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8674:49;;8742:9;8737:164;8761:13;8757:1;:17;8737:164;;;8814:23;;;8835:1;8814:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8814:23:22;8799:9;8809:1;8799:12;;;;;;;;;;;;;:38;;;;8873:10;8884:1;8873:13;;;;;;;;;;;;;;8855:9;8865:1;8855:12;;;;;;;;;;;;;;8868:1;8855:15;;;;;;;;-1:-1:-1;;;;;8855:31:22;;;:15;;;;;;;;;;;:31;8776:3;;8737:164;;;;8914:16;;;;;8592:349;8992:45;9052:54;9071:7;9080:9;9091:10;9104:1;9091:14;9052:18;:54::i;:::-;8992:114;;9120:19;:26;9150:1;9120:31;9116:122;;;9211:16;;;;;;9116:122;9365:19;:26;9349:13;:42;-1:-1:-1;;;;;9313:88:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9301:100;;9416:9;9411:582;9435:13;9431:1;:17;9411:582;;;9474:9;9469:514;9493:19;:26;9489:1;:30;9469:514;;;9560:26;;9556:30;;;:34;;;9560:19;;9589:1;;9724:22;;;;;;;;;;;;:29;9720:1;:33;-1:-1:-1;;;;;9699:55:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9699:55:22;;9664:9;9674:1;9664:12;;;;;;;;;;;;;:90;;;;9790:10;9801:1;9790:13;;;;;;;;;;;;;;9772:9;9782:1;9772:12;;;;;;;;;;;;;;9785:1;9772:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;9772:31:22;;;-1:-1:-1;;;;;9772:31:22;;;;;9826:9;9821:148;9845:19;9865:1;9845:22;;;;;;;;;;;;;;:29;9841:1;:33;9821:148;;;9925:19;9945:1;9925:22;;;;;;;;;;;;;;9948:1;9925:25;;;;;;;;;;;;;;9903:9;9913:1;9903:12;;;;;;;;;;;;;;9920:1;9916;:5;9903:19;;;;;;;;-1:-1:-1;;;;;9903:47:22;;;:19;;;;;;;;;;;:47;9876:3;;9821:148;;;-1:-1:-1;;9521:3:22;;9469:514;;;-1:-1:-1;9450:3:22;;9411:582;;;;10002:16;;;;7301:2724;;;;;:::o;11328:1082::-;11489:24;11570:1;11550:9;:16;:21;;:64;;;;;11595:8;:15;11613:1;11595:19;11575:9;:16;:39;11550:64;11529:148;;;;-1:-1:-1;;;11529:148:22;;;;;;;:::i;:::-;11866:8;:15;11884:1;11866:19;11842:9;:16;11861:2;11842:21;:43;-1:-1:-1;;;;;11832:54:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11832:54:22;-1:-1:-1;11818:68:22;-1:-1:-1;11948:2:22;11931:20;;11896:9;11962:442;11986:9;:16;11982:1;:20;11962:442;;;12027:5;;12023:211;;12052:14;12069:8;12082:1;12078;:5;12069:15;;;;;;;;;;;;;;-1:-1:-1;;;;;12069:19:22;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12153:3;12149:17;12139:28;;-1:-1:-1;12200:1:22;12193:9;;;;12117:103;12247:20;12270:9;12280:1;12270:12;;;;;;;;;;;;;;;;;;12337:2;12333:14;12323:25;;-1:-1:-1;12377:2:22;12370:10;;;;12004:3;;11962:442;;3886:391:30;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;-1:-1:-1;;;;;4087:25:30;4113:18;;;;;;;;;;;;;-1:-1:-1;;;4113:18:30;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;1665:805:39:-;1857:20;1929:18;1975:10;1951:73;;;;;;;;;;;;:::i;:::-;1928:96;-1:-1:-1;2034:85:39;-1:-1:-1;;;;;2034:24:39;;1928:96;2099:10;2034:24;:85::i;:::-;2213:221;;-1:-1:-1;;;2213:221:39;;-1:-1:-1;;;;;2213:22:39;;;;;:221;;2249:9;;2284:10;;2325:8;;2361:1;;-1:-1:-1;;2409:2:39;2213:221;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2195:239:39;1665:805;-1:-1:-1;;;;;;1665:805:39:o;1531:170:36:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;6714:331:18;6922:4;6916:11;6952:6;6947:3;6940:19;6993:7;6988:2;6983:3;6979:12;6972:29;7026:2;7021:3;7014:15;2270:1332:46;2428:20;2464:14;2488:22;2520:21;2586:10;2575:55;;;;;;;;;;;;:::i;:::-;2649:12;;2551:79;;-1:-1:-1;2551:79:46;;-1:-1:-1;2551:79:46;-1:-1:-1;2665:1:46;-1:-1:-1;2649:17:46;2641:77;;;;-1:-1:-1;;;2641:77:46;;;;;;;:::i;:::-;2751:5;:12;2766:1;2751:16;2736:4;:11;:31;2728:79;;;;-1:-1:-1;;;2728:79:46;;;;;;;:::i;:::-;2873:8;-1:-1:-1;;;;;2840:42:46;:4;2859:1;2845:4;:11;:15;2840:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2840:42:46;;2818:150;;;;-1:-1:-1;;;2818:150:46;;;;;;;:::i;:::-;3053:67;3100:6;3109:10;3068:4;3073:1;3068:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3053:38:46;;;:67;;;;;:::i;:::-;3155:398;;-1:-1:-1;;;3155:398:46;;3131:21;;-1:-1:-1;;;;;3155:48:46;;;;;:398;;3258:10;;3318:1;;3333:5;;3406:4;;3468;;3528:15;;3155:398;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3155:398:46;;;;;;;;;;;;:::i;:::-;3131:422;;3570:7;3593:1;3578:7;:14;:16;3570:25;;;;;;;;;;;;;;3563:32;;;;;;2270:1332;;;;;:::o;1834:1348:42:-;2060:20;2157:27;;:::i;:::-;2198:10;2187:41;;;;;;;;;;;;:::i;:::-;2157:71;;2238:21;2286:4;-1:-1:-1;;;;;2273:17:42;:9;-1:-1:-1;;;;;2273:17:42;;2269:199;;;-1:-1:-1;2346:25:42;;-1:-1:-1;;;2346:25:42;;2322:10;;-1:-1:-1;;;;;2346:13:42;;;;;:25;;2322:10;;2346:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2269:199;;;2427:17;;2402:55;;-1:-1:-1;;;;;2402:24:42;;;2446:10;2402:24;:55::i;:::-;2502:33;;-1:-1:-1;;;2502:33:42;;2478:21;;-1:-1:-1;;;;;2502:18:42;;;;;:33;;2529:4;;2502:33;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2478:57;;2546:12;2560:23;2599:4;:17;;;-1:-1:-1;;;;;2599:22:42;2629:13;2684:4;:29;;;2731:4;:16;;;2765:4;:14;;;2819:10;2873:1;2644:244;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2644:244:42;;;;;;;;;;;;;;-1:-1:-1;;;;;2644:244:42;-1:-1:-1;;;;;;2644:244:42;;;;;;;;;;2599:290;;;;2644:244;2599:290;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2545:344;;;;2904:7;2899:59;;2927:20;:10;:18;:20::i;:::-;2984:4;-1:-1:-1;;;;;2972:16:42;:8;-1:-1:-1;;;;;2972:16:42;;2968:134;;;3019:21;3004:36;;3054:4;-1:-1:-1;;;;;3054:12:42;;3075;3054:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2968:134;3119:56;3161:13;3119:8;-1:-1:-1;;;;;3119:18:42;;3146:4;3119:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;:56::i;:::-;3112:63;1834:1348;-1:-1:-1;;;;;;;;;;;1834:1348:42:o;16578:187:31:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;2108:1339:53:-;2267:20;2303:25;2338:28;2390:22;2455:10;2444:55;;;;;;;;;;;;:::i;:::-;2649:11;;2426:73;;-1:-1:-1;2426:73:53;-1:-1:-1;2664:1:53;-1:-1:-1;2649:16:53;;-1:-1:-1;2641:76:53;;;;-1:-1:-1;;;2641:76:53;;;;;;;:::i;:::-;2773:8;-1:-1:-1;;;;;2748:33:53;:4;2767:1;2753:4;:11;:15;2748:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2748:33:53;;2727:139;;;;-1:-1:-1;;;2727:139:53;;;;;;;:::i;:::-;2950:51;2981:6;2990:10;2950:4;2955:1;2950:7;;;;;;;:51;3036:362;;-1:-1:-1;;;3036:362:53;;3012:21;;-1:-1:-1;;;;;3036:31:53;;;;;:362;;3122:10;;3182:1;;3251:4;;3313;;3373:15;;3036:362;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3036:362:53;;;;;;;;;;;;:::i;:::-;3012:386;;3415:7;3438:1;3423:7;:14;:16;3415:25;;;;;;;;;;;;;;3408:32;;;;;2108:1339;;;;;:::o;2320:1328:40:-;2514:20;2585:32;;:::i;:::-;2631:10;2620:46;;;;;;;;;;;;:::i;:::-;2791:10;;2585:81;;-1:-1:-1;2758:57:40;;-1:-1:-1;;;;;2758:24:40;;;2804:10;2758:24;:57::i;:::-;2864:42;;:::i;:::-;2909:261;;;;;;;;;2959:11;;;;;2909:261;;;;-1:-1:-1;2909:261:40;;;;3047:9;-1:-1:-1;;;;;2909:261:40;;;;;3080:8;-1:-1:-1;;;;;2909:261:40;;;;;3110:10;2909:261;;;;;;;;;;;;;;;;;;;2864:306;;3181:44;;:::i;:::-;-1:-1:-1;3228:203:40;;;;;;;;3290:4;3228:203;;;-1:-1:-1;3228:203:40;;;;;;;;;;;;;;;;;3457:10;;:155;;-1:-1:-1;;;3457:155:40;;3228:203;;-1:-1:-1;;;;;3457:15:40;;;;:155;;3486:7;;3228:203;;;;3559:15;;3457:155;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3442:170;2320:1328;-1:-1:-1;;;;;;;;2320:1328:40:o;7939:916:10:-;8113:17;8201:27;8249:4;:16;;;8201:65;;8277:27;8311:9;-1:-1:-1;;;;;8311:28:10;;8367:4;:9;;;-1:-1:-1;;;;;8353:23:10;:10;-1:-1:-1;;;;;8353:23:10;;:56;;8399:10;8353:56;;;1097:42;8353:56;8437:4;:9;;;-1:-1:-1;;;;;8423:23:10;:10;-1:-1:-1;;;;;8423:23:10;;:56;;8469:10;8423:56;;;1097:42;8423:56;8511:12;;;8521:1;8511:12;;;;;;;;;-1:-1:-1;;;;;;8311:236:10;;;;;;;;;;;;8493:4;;8311:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8311:236:10;;;;;;;;;;;;:::i;:::-;8276:271;;;;8584:10;:17;8562:4;:18;;;:39;8558:80;;-1:-1:-1;8624:3:10;;-1:-1:-1;8617:10:10;;-1:-1:-1;8617:10:10;8558:80;8660:10;8671:4;:18;;;8660:30;;;;;;;;;;;;;;8648:42;;8773:3;8760:9;:16;;8752:25;;8781:4;8752:33;8748:74;;;-1:-1:-1;8808:3:10;;-1:-1:-1;8801:10:10;;-1:-1:-1;8801:10:10;8748:74;8832:16;;7939:916;;;;;:::o;3040:1782:45:-;3306:20;3343:24;3369:17;3413:10;3402:51;;;;;;;;;;;;:::i;:::-;3342:111;;;;3464:21;3516:4;-1:-1:-1;;;;;3503:17:45;:9;-1:-1:-1;;;;;3503:17:45;;3499:437;;3648:98;-1:-1:-1;;;;;3648:24:45;;3698:5;3722:10;3648:24;:98::i;:::-;3499:437;;;-1:-1:-1;3897:28:45;;-1:-1:-1;;;3897:28:45;;3873:10;;-1:-1:-1;;;;;3897:13:45;;;;;:28;;3873:10;;3897:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3499:437;4075:5;-1:-1:-1;;;;;4075:19:45;;4103:13;4173:4;-1:-1:-1;;;;;4160:17:45;:9;-1:-1:-1;;;;;4160:17:45;;:47;;4198:9;4160:47;;;4180:15;4160:47;4249:10;4314:4;-1:-1:-1;;;;;4302:16:45;:8;-1:-1:-1;;;;;4302:16:45;;:45;;4339:8;4302:45;;;4321:15;4302:45;4426:4;-1:-1:-1;;4558:1:45;4618;4634:4;4075:573;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4060:588;;4719:4;-1:-1:-1;;;;;4707:16:45;:8;-1:-1:-1;;;;;4707:16:45;;4703:84;;;4739:4;-1:-1:-1;;;;;4739:12:45;;4760;4739:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4703:84;4796:19;;;3040:1782;;;;;;;;:::o;4752:836:5:-;4939:15;4956:13;5078:25;5122:8;-1:-1:-1;;;;;5106:37:5;;5144:10;5156;5106:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5106:61:5;;;;;;;;;;;;:::i;:::-;5078:89;;5188:4;5177:15;;5206:8;:15;5225:1;5206:20;5202:251;;;5351:61;;-1:-1:-1;;;5351:61:5;;-1:-1:-1;;;;;5351:37:5;;;;;:61;;5389:10;;5401;;5351:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5351:61:5;;;;;;;;;;;;:::i;:::-;5340:72;;5437:5;5426:16;;5202:251;5477:8;:15;5467:6;:25;5463:82;;5524:1;5528:5;5508:26;;;;;;;5463:82;5565:8;5574:6;5565:16;;;;;;;;;;;;;;5555:26;;4752:836;;;;;;;;:::o;2210:2191:41:-;2403:20;2474:35;2519:28;2571:22;2696:10;2685:51;;;;;;;;;;;;:::i;:::-;2886:11;;2607:129;;-1:-1:-1;2607:129:41;-1:-1:-1;2901:1:41;-1:-1:-1;2886:16:41;;-1:-1:-1;2878:73:41;;;;-1:-1:-1;;;2878:73:41;;;;;;;:::i;:::-;3007:8;-1:-1:-1;;;;;2982:33:41;:4;3001:1;2987:4;:11;:15;2982:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2982:33:41;;:114;;;;1759:42;-1:-1:-1;;;;;3032:43:41;:4;3051:1;3037:4;:11;:15;3032:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3032:43:41;;:63;;;;;3091:4;-1:-1:-1;;;;;3079:16:41;:8;-1:-1:-1;;;;;3079:16:41;;3032:63;2961:217;;;;-1:-1:-1;;;2961:217:41;;;;;;;:::i;:::-;3189:21;1759:42;-1:-1:-1;;;;;3402:29:41;:4;3407:1;3402:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3402:29:41;;3398:358;;;3447:25;;-1:-1:-1;;;3447:25:41;;-1:-1:-1;;;;;3447:13:41;;;;;:25;;3461:10;;3447:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3502:10;3486:26;;3398:358;;;3600:145;3649:4;3654:1;3649:7;;;;;;;;;;;;;;3682:20;3721:10;3600:31;:145::i;:::-;3811:435;;-1:-1:-1;;;3811:435:41;;-1:-1:-1;;;;;3811:34:41;;;;;3853:13;;3811:435;;3881:4;;3974:10;;4033:1;;4115:4;;4157:1;;;;3811:435;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3796:450;;1759:42;-1:-1:-1;;;;;4260:43:41;:4;4279:1;4265:4;:11;:15;4260:21;;;;;;;;;;;;;;-1:-1:-1;;;;;4260:43:41;;4256:109;;;4319:4;-1:-1:-1;;;;;4319:12:41;;4339;4319:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4375:19;;;2210:2191;;;;;;:::o;4248:2546:52:-;4476:20;4512:39;4577:10;4566:49;;;;;;;;;;;;:::i;:::-;4512:103;;4674:25;4702:133;4747:4;4765:15;4794:9;4817:8;4702:31;:133::i;:::-;4674:161;;4904:4;-1:-1:-1;;;;;4891:17:52;:9;-1:-1:-1;;;;;4891:17:52;;4887:1871;;;4956:25;;-1:-1:-1;;;4956:25:52;;-1:-1:-1;;;;;4956:13:52;;;;;:25;;4970:10;;4956:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5078:274:52;;-1:-1:-1;;;5078:274:52;;-1:-1:-1;;;;;5078:32:52;;;-1:-1:-1;5078:32:52;;-1:-1:-1;5119:10:52;;5078:274;;5188:1;;5252:15;;5333:4;;5078:274;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5063:289;;4887:1871;;;5427:4;-1:-1:-1;;;;;5415:16:52;:8;-1:-1:-1;;;;;5415:16:52;;5411:1347;;;5495:101;-1:-1:-1;;;;;5495:24:52;;5545:8;5572:10;5495:24;:101::i;:::-;5692:250;;-1:-1:-1;;;5692:250:52;;-1:-1:-1;;;;;5692:28:52;;;;;:250;;5782:10;;5849:1;;5913:15;;5692:250;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5677:265;;5985:4;-1:-1:-1;;;;;5985:12:52;;6006;5985:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5411:1347;;;6147:101;-1:-1:-1;;;;;6147:24:52;;6197:8;6224:10;6147:24;:101::i;:::-;6344:403;;-1:-1:-1;;;6344:403:52;;-1:-1:-1;;;;;6344:30:52;;;;;:403;;6436:10;;6503:1;;;;6650:15;;6725:8;;6344:403;;;:::i;5401:467:30:-;5510:15;5542;5559:23;5594:5;-1:-1:-1;;;;;5586:25:30;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5625:101:30;;;;;;;;;;;;;;-1:-1:-1;;;;;5625:101:30;-1:-1:-1;;;;;;5625:101:30;;;;;;;;;;5586:150;;;;5625:101;5586:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;:::-;5803:48;5401:467;-1:-1:-1;;;;;5401:467:30:o;2692:1279:48:-;2884:20;2955:30;;:::i;:::-;2999:10;2988:44;;;;;;;;;;;;:::i;:::-;2955:77;;3042:21;3066:8;-1:-1:-1;;;;;3066:18:48;;3093:4;3066:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3126:15;;3179:19;;;;3042:57;;-1:-1:-1;3126:15:48;-1:-1:-1;;;;;3157:41:48;;;;;;3153:738;;;3214:97;3256:3;-1:-1:-1;;;;;3256:11:48;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3214:24:48;;;3287:10;3214:24;:97::i;:::-;3326:38;;-1:-1:-1;;;3326:38:48;;-1:-1:-1;;;;;3326:11:48;;;;;:38;;3346:4;;3353:10;;3326:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3153:738;;;3406:4;:19;;;-1:-1:-1;;;;;3385:40:48;3393:8;-1:-1:-1;;;;;3385:40:48;;3381:510;;;3441:18;3462:23;3474:3;-1:-1:-1;;;;;3474:8:48;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2327:8;;3462:11;:23::i;:::-;3441:44;;3555:24;3605:8;-1:-1:-1;;;;;3605:17:48;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3597:28;;3590:2;3582:43;;-1:-1:-1;3639:17:48;3660:56;3705:10;3660:36;:10;3582:43;3660:18;:36::i;:56::-;3773:15;;3639:77;;-1:-1:-1;3731:99:48;;-1:-1:-1;;;;;3731:24:48;;;3806:10;3731:24;:99::i;:::-;3844:36;;-1:-1:-1;;;3844:36:48;;-1:-1:-1;;;;;3844:10:48;;;;;:36;;3863:4;;3870:9;;3844:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3381:510;;;;3908:56;3950:13;3908:8;-1:-1:-1;;;;;3908:18:48;;3935:4;3908:33;;;;;;;;;;;;;;;:::i;1435:1201:43:-;1590:20;1627:18;1647:10;1659:15;1701:10;1690:50;;;;;;;;;;;;:::i;:::-;1626:114;;-1:-1:-1;1626:114:43;-1:-1:-1;1626:114:43;-1:-1:-1;1829:51:43;-1:-1:-1;;;;;1829:24:43;;1626:114;1869:10;1829:24;:51::i;:::-;1895:10;1891:709;;;2156:12;;;2166:1;2156:12;;;;;;;;;-1:-1:-1;;;2001:181:43;;;-1:-1:-1;;;;;2001:18:43;;;;;:181;;2071:10;;2137:1;;2001:181;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1986:196;;1891:709;;;2299:90;;-1:-1:-1;;;2299:90:43;;-1:-1:-1;;;;;2299:26:43;;;;;:90;;2343:4;;2365:10;;2299:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2563:12;;;2573:1;2563:12;;;;;;;;;-1:-1:-1;;;2403:186:43;;;2284:105;;-1:-1:-1;;;;;;2403:17:43;;;;;:186;;2284:105;;2535:10;;2403:186;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1891:709;2610:19;;;1435:1201;;;;;:::o;1018:695:55:-;1214:20;1251:27;1280:19;1326:10;1315:51;;;;;;;;;;;;:::i;:::-;1250:116;;-1:-1:-1;1250:116:55;-1:-1:-1;1420:89:55;-1:-1:-1;;;;;1420:24:55;;1250:116;1489:10;1420:24;:89::i;:::-;1534:172;;-1:-1:-1;;;1534:172:55;;-1:-1:-1;;;;;1534:26:55;;;;;:172;;1574:9;;1597:8;;1627:4;;1659:1;;1690:6;;1534:172;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1519:187;1018:695;-1:-1:-1;;;;;;;1018:695:55:o;1186:622:47:-;1377:20;1414:16;1445:10;1434:34;;;;;;;;;;;;:::i;:::-;1413:55;-1:-1:-1;1553:54:47;-1:-1:-1;;;;;1553:24:47;;1413:55;1596:10;1553:24;:54::i;:::-;1633:168;;-1:-1:-1;;;1633:168:47;;-1:-1:-1;;;;;1633:12:47;;;;;:168;;1659:9;;1682:8;;1704:10;;1763:1;;1786:4;;1633:168;;;:::i;4623:515:30:-;4749:18;4784:15;4801:23;4836:5;-1:-1:-1;;;;;4828:25:30;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4867:126:30;;;;;;;;;;;;;;-1:-1:-1;;;;;4867:126:30;-1:-1:-1;;;;;;4867:126:30;;;;;;;;;;4828:175;;;;4867:126;4828:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;1121:515:44:-;1278:20;1315:12;1329:15;1371:10;1360:39;;;;;;;;;;;;:::i;:::-;1314:85;;-1:-1:-1;1314:85:44;-1:-1:-1;1455:51:44;-1:-1:-1;;;;;1455:24:44;;1314:85;1495:10;1455:24;:51::i;:::-;1532:10;:97;;1600:29;;-1:-1:-1;;;1600:29:44;;-1:-1:-1;;;;;1600:14:44;;;;;:29;;1623:4;;1600:29;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1532:97;;;1557:28;;-1:-1:-1;;;1557:28:44;;-1:-1:-1;;;;;1557:13:44;;;;;:28;;1579:4;;1557:28;;;:::i;10031:329:22:-;10126:32;10206:9;:16;-1:-1:-1;;;;;10185:38:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10185:38:22;;10174:49;;10238:9;10233:121;10257:9;:16;10253:1;:20;10233:121;;;10308:9;10341:1;10337;10318:9;:16;:20;:24;10308:35;;;;;;;;;;;;;;10294:8;10303:1;10294:11;;;;;;;;-1:-1:-1;;;;;10294:49:22;;;:11;;;;;;;;;;;:49;10275:3;;10233:121;;10366:323;10459:32;10539:8;:15;-1:-1:-1;;;;;10518:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10518:37:22;;10507:48;;10570:9;10565:118;10589:8;:15;10585:1;:19;10565:118;;;10639:8;10670:1;10666;10648:8;:15;:19;:23;10639:33;;;;;;;;;;;;;;10625:8;10634:1;10625:11;;;;;;;;-1:-1:-1;;;;;10625:47:22;;;:11;;;;;;;;;;;:47;10606:3;;10565:118;;706:172:16;835:16;;;849:1;835:16;;;;;;;;;793:20;;835:16;;;;;;;;;;;-1:-1:-1;835:16:16;829:22;;870:1;861:3;865:1;861:6;;;;;;;;;;;;;:10;;;;;706:172;;;:::o;1987:267:30:-;2131:39;;-1:-1:-1;;;2131:39:30;;2173:6;;-1:-1:-1;;;;;2131:15:30;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:30;:42::i;12126:417:18:-;12295:21;12336:14;;;:29;;-1:-1:-1;12354:11:18;;12336:29;:49;;;-1:-1:-1;12369:16:18;;12336:49;12332:63;;;-1:-1:-1;12394:1:18;12387:8;;12332:63;12417:18;;;12429:6;12417:9;:18;:9;12449:13;;;;;:23;12445:37;;12481:1;12474:8;;;;;12445:37;12525:11;12519:1;12505:11;:15;12500:1;:21;12499:37;;;;;;;12126:417;-1:-1:-1;;;;;12126:417:18:o;1625:373:33:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:33;;;1625:373::o;764:457::-;850:7;877:6;873:45;;-1:-1:-1;906:1:33;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:33:o;10695:627:22:-;10784:12;10937:17;;10985:13;10981:64;;11025:5;11018:12;;;;;10981:64;10695:627;11118:4;-1:-1:-1;;;;;11118:11:22;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11118:23:22;;11150:4;11118:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11114:86;;-1:-1:-1;11184:5:22;11177:12;;11114:86;11213:4;-1:-1:-1;;;;;11213:11:22;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11213:23:22;;11245:4;11213:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11209:86;;-1:-1:-1;11279:5:22;11272:12;;11209:86;-1:-1:-1;11311:4:22;10695:627;;;:::o;15225:654:31:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:31;14838:2;14936:13;14930:20;;14301:688::o;7279:552:52:-;7517:25;7637:4;-1:-1:-1;;;;;7624:17:52;:9;-1:-1:-1;;;;;7624:17:52;;:122;;7708:38;;-1:-1:-1;;;7708:38:52;;-1:-1:-1;;;;;7708:27:52;;;;;:38;;7736:9;;7708:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7624:122;;;7656:37;;-1:-1:-1;;;7656:37:52;;-1:-1:-1;;;;;7656:27:52;;;;;:37;;7684:8;;7656:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7613:133;-1:-1:-1;;;;;;7764:31:52;;7756:68;;;;-1:-1:-1;;;7756:68:52;;;;;;;:::i;2563:337:30:-;2698:21;2758:23;;;2795:2;2811:6;2722:105;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2722:105:30;;;;;;;;;;;;;;-1:-1:-1;;;;;2722:105:30;-1:-1:-1;;;;;;2722:105:30;;;;;;;;;;;-1:-1:-1;2837:56:30;2876:5;2722:105;2837:30;:56::i;:::-;2563:337;;;;:::o;1217:351::-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;1401:322:37:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:37;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:37;-1:-1:-1;;;;;;1589:127:37;;;;;;;;;;;-1:-1:-1;1401:322:37;;;;;:::o;1334:378:34:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;6923:340:30:-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:30;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:30;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;458:352::-;;;588:3;581:4;573:6;569:17;565:27;555:2;;-1:-1;;596:12;555:2;-1:-1;626:20;;-1:-1;;;;;655:30;;652:2;;;-1:-1;;688:12;652:2;732:4;724:6;720:17;708:29;;783:3;732:4;;767:6;763:17;724:6;749:32;;746:41;743:2;;;800:1;;790:12;836:707;;953:3;946:4;938:6;934:17;930:27;920:2;;-1:-1;;961:12;920:2;1008:6;995:20;1030:80;1045:64;1102:6;1045:64;:::i;:::-;1030:80;:::i;:::-;1138:21;;;1021:89;-1:-1;1182:4;1195:14;;;;1170:17;;;1284;;;1275:27;;;;1272:36;-1:-1;1269:2;;;1321:1;;1311:12;1269:2;1346:1;1331:206;1356:6;1353:1;1350:13;1331:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1424:50;;1488:14;;;;1516;;;;1378:1;1371:9;1331:206;;;1335:14;;;;;913:630;;;;:::o;1569:722::-;;1697:3;1690:4;1682:6;1678:17;1674:27;1664:2;;-1:-1;;1705:12;1664:2;1745:6;1739:13;1767:80;1782:64;1839:6;1782:64;:::i;1767:80::-;1875:21;;;1758:89;-1:-1;1919:4;1932:14;;;;1907:17;;;2021;;;2012:27;;;;2009:36;-1:-1;2006:2;;;2058:1;;2048:12;2006:2;2083:1;2068:217;2093:6;2090:1;2087:13;2068:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;2161:61;;2236:14;;;;2264;;;;2115:1;2108:9;2068:217;;4231:705;;4357:3;4350:4;4342:6;4338:17;4334:27;4324:2;;-1:-1;;4365:12;4324:2;4412:6;4399:20;4434:89;4449:73;4515:6;4449:73;:::i;4434:89::-;4551:21;;;4425:98;-1:-1;4595:4;4608:14;;;;4583:17;;;4703:1;4688:242;4713:6;4710:1;4707:13;4688:242;;;4820:46;4862:3;4595:4;4796:3;4783:17;4587:6;4771:30;;4820:46;:::i;:::-;4808:59;;4881:14;;;;4909;;;;4735:1;4728:9;4688:242;;4978:776;;5118:3;5111:4;5103:6;5099:17;5095:27;5085:2;;-1:-1;;5126:12;5085:2;5173:6;5160:20;5195:103;5210:87;5290:6;5210:87;:::i;5195:103::-;5326:21;;;5186:112;-1:-1;5370:4;5383:14;;;;5358:17;;;5472;;;5463:27;;;;5460:36;-1:-1;5457:2;;;5509:1;;5499:12;5457:2;5534:1;5519:229;5544:6;5541:1;5538:13;5519:229;;;12065:6;12052:20;12077:56;12127:5;12077:56;:::i;:::-;5612:73;;5699:14;;;;5727;;;;5566:1;5559:9;5519:229;;6640:788;;6784:3;6777:4;6769:6;6765:17;6761:27;6751:2;;-1:-1;;6792:12;6751:2;6839:6;6826:20;6861:107;6876:91;6960:6;6876:91;:::i;6861:107::-;6996:21;;;6852:116;-1:-1;7040:4;7053:14;;;;7028:17;;;7154:4;7142:17;;;7133:27;;;;7130:36;-1:-1;7127:2;;;7179:1;;7169:12;7127:2;7204:1;7189:233;7214:6;7211:1;7208:13;7189:233;;;7294:64;7354:3;7342:10;7294:64;:::i;:::-;7282:77;;7373:14;;;;7401;;;;7236:1;7229:9;7189:233;;;7193:14;;;;;;6744:684;;;;:::o;7454:707::-;;7571:3;7564:4;7556:6;7552:17;7548:27;7538:2;;-1:-1;;7579:12;7538:2;7626:6;7613:20;7648:80;7663:64;7720:6;7663:64;:::i;7648:80::-;7756:21;;;7639:89;-1:-1;7800:4;7813:14;;;;7788:17;;;7902;;;7893:27;;;;7890:36;-1:-1;7887:2;;;7939:1;;7929:12;7887:2;7964:1;7949:206;7974:6;7971:1;7968:13;7949:206;;;26441:20;;8042:50;;8106:14;;;;8134;;;;7996:1;7989:9;7949:206;;8187:722;;8315:3;8308:4;8300:6;8296:17;8292:27;8282:2;;-1:-1;;8323:12;8282:2;8363:6;8357:13;8385:80;8400:64;8457:6;8400:64;:::i;8385:80::-;8493:21;;;8376:89;-1:-1;8537:4;8550:14;;;;8525:17;;;8639;;;8630:27;;;;8627:36;-1:-1;8624:2;;;8676:1;;8666:12;8624:2;8701:1;8686:217;8711:6;8708:1;8705:13;8686:217;;;26589:13;;8779:61;;8854:14;;;;8882;;;;8733:1;8726:9;8686:217;;9605:440;;9706:3;9699:4;9691:6;9687:17;9683:27;9673:2;;-1:-1;;9714:12;9673:2;9761:6;9748:20;9783:64;9798:48;9839:6;9798:48;:::i;9783:64::-;9774:73;;9867:6;9860:5;9853:21;9971:3;9903:4;9962:6;9895;9953:16;;9950:25;9947:2;;;9988:1;;9978:12;9947:2;147475:6;9903:4;9895:6;9891:17;9903:4;9929:5;9925:16;147452:30;147531:1;147513:16;;;9903:4;147513:16;147506:27;9929:5;9666:379;-1:-1;;9666:379::o;10054:442::-;;10166:3;10159:4;10151:6;10147:17;10143:27;10133:2;;-1:-1;;10174:12;10133:2;10214:6;10208:13;10236:64;10251:48;10292:6;10251:48;:::i;10236:64::-;10227:73;;10320:6;10313:5;10306:21;10424:3;10356:4;10415:6;10348;10406:16;;10403:25;10400:2;;;10441:1;;10431:12;10400:2;10451:39;10483:6;10356:4;10382:5;10378:16;10356:4;10348:6;10344:17;10451:39;:::i;14966:174::-;15064:13;;152966:1;152956:12;;152946:2;;152982:1;;152972:12;15320:128;15386:20;;15411:32;15386:20;15411:32;:::i;19770:1028::-;;19893:4;19881:9;19876:3;19872:19;19868:30;19865:2;;;-1:-1;;19901:12;19865:2;19929:20;19893:4;19929:20;:::i;:::-;19920:29;;26454:6;26441:20;20022:16;20015:75;20158:2;20216:9;20212:22;72:20;97:33;124:5;97:33;:::i;:::-;20158:2;20173:16;;20166:75;20310:2;20364:22;;72:20;97:33;72:20;97:33;:::i;:::-;20310:2;20325:16;;20318:75;20454:2;20508:22;;72:20;97:33;72:20;97:33;:::i;:::-;20454:2;20469:16;;20462:75;20626:3;20611:19;;20598:33;-1:-1;;;;;20640:30;;20637:2;;;-1:-1;;20673:12;20637:2;20718:58;20772:3;20763:6;20752:9;20748:22;20718:58;:::i;:::-;20626:3;20704:5;20700:16;20693:84;;19859:939;;;;:::o;21976:2030::-;;22093:6;;22081:9;22076:3;22072:19;22068:32;22065:2;;;-1:-1;;22103:12;22065:2;22131:22;22093:6;22131:22;:::i;:::-;22122:31;;;22241:72;22309:3;22285:22;22241:72;:::i;:::-;22223:16;22216:98;22414:72;22482:3;22381:2;22462:9;22458:22;22414:72;:::i;:::-;22381:2;22400:5;22396:16;22389:98;22588:49;22633:3;22555:2;22613:9;22609:22;22588:49;:::i;:::-;22555:2;22574:5;22570:16;22563:75;22739:49;22784:3;22706:2;22764:9;22760:22;22739:49;:::i;:::-;22706:2;22725:5;22721:16;22714:75;22899:49;22944:3;22865;22924:9;22920:22;22899:49;:::i;:::-;22865:3;22885:5;22881:16;22874:75;23045:49;23090:3;23011;23070:9;23066:22;23045:49;:::i;:::-;23011:3;23031:5;23027:16;23020:75;23191:49;23236:3;23157;23216:9;23212:22;23191:49;:::i;:::-;23157:3;23177:5;23173:16;23166:75;23338:49;23383:3;23304;23363:9;23359:22;23338:49;:::i;:::-;23304:3;23324:5;23320:16;23313:75;23457:3;23493:49;23538:3;23457;23518:9;23514:22;23493:49;:::i;:::-;23473:18;;;23466:77;23604:3;23661:22;;;9119:20;23620:18;;;23613:77;23753:3;23789:48;23833:3;23809:22;;;23789:48;:::i;:::-;23753:3;23773:5;23769:18;23762:76;;23899:3;;23960:9;23956:22;26441:20;23899:3;23919:5;23915:18;23908:77;;22059:1947;;;;:::o;25318:773::-;;25434:4;25422:9;25417:3;25413:19;25409:30;25406:2;;;-1:-1;;25442:12;25406:2;25470:20;25434:4;25470:20;:::i;:::-;25461:29;;15245:6;15232:20;153085:1;153078:5;153075:12;153065:2;;-1:-1;;153091:12;153065:2;25556:93;;25707:2;25759:22;;26852:20;26877:31;26852:20;26877:31;:::i;:::-;25740:47;25707:2;25726:5;25722:16;25715:73;;25846:2;25904:9;25900:22;9119:20;25846:2;25865:5;25861:16;25854:75;25987:2;26045:9;26041:22;9119:20;25987:2;26006:5;26002:16;25995:75;25400:691;;;;:::o;26098:130::-;26165:20;;-1:-1;;;;;143007:46;;153298:35;;153288:2;;153347:1;;153337:12;26652:128;26718:20;;-1:-1;;;;;143426:30;;153667:34;;153657:2;;153715:1;;153705:12;27057:241;;27161:2;27149:9;27140:7;27136:23;27132:32;27129:2;;;-1:-1;;27167:12;27129:2;85:6;72:20;97:33;124:5;97:33;:::i;27305:263::-;;27420:2;27408:9;27399:7;27395:23;27391:32;27388:2;;;-1:-1;;27426:12;27388:2;226:6;220:13;238:33;265:5;238:33;:::i;27575:809::-;;;;27782:2;27770:9;27761:7;27757:23;27753:32;27750:2;;;-1:-1;;27788:12;27750:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;27980:2;27965:18;;27959:25;27840:82;;-1:-1;;;;;;27993:30;;;27990:2;;;-1:-1;;28026:12;27990:2;28056:89;28137:7;28128:6;28117:9;28113:22;28056:89;:::i;:::-;28046:99;;28203:2;28192:9;28188:18;28182:25;28168:39;;28004:18;28219:6;28216:30;28213:2;;;-1:-1;;28249:12;28213:2;;28279:89;28360:7;28351:6;28340:9;28336:22;28279:89;:::i;:::-;28269:99;;;27744:640;;;;;:::o;28391:753::-;;;;;28571:3;28559:9;28550:7;28546:23;28542:33;28539:2;;;-1:-1;;28578:12;28539:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;28630:63;-1:-1;28730:2;28769:22;;72:20;97:33;72:20;97:33;:::i;:::-;28738:63;-1:-1;28838:2;28877:22;;72:20;97:33;72:20;97:33;:::i;:::-;28846:63;-1:-1;28974:2;28959:18;;28946:32;-1:-1;;;;;28987:30;;28984:2;;;-1:-1;;29020:12;28984:2;29050:78;29120:7;29111:6;29100:9;29096:22;29050:78;:::i;:::-;29040:88;;;28533:611;;;;;;;:::o;29151:721::-;;;;;29315:3;29303:9;29294:7;29290:23;29286:33;29283:2;;;-1:-1;;29322:12;29283:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29374:63;-1:-1;29474:2;29513:22;;72:20;97:33;72:20;97:33;:::i;:::-;29482:63;-1:-1;29610:2;29595:18;;29582:32;-1:-1;;;;;29623:30;;29620:2;;;-1:-1;;29656:12;29620:2;29686:62;29740:7;29731:6;29720:9;29716:22;29686:62;:::i;:::-;29277:595;;;;-1:-1;29676:72;;29785:2;29824:22;26441:20;;-1:-1;;;29277:595::o;29879:763::-;;;;30067:2;30055:9;30046:7;30042:23;30038:32;30035:2;;;-1:-1;;30073:12;30035:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30125:63;-1:-1;30253:2;30238:18;;30225:32;-1:-1;;;;;30266:30;;;30263:2;;;-1:-1;;30299:12;30263:2;30329:78;30399:7;30390:6;30379:9;30375:22;30329:78;:::i;:::-;30319:88;;30472:2;30461:9;30457:18;30444:32;30430:46;;30277:18;30488:6;30485:30;30482:2;;;-1:-1;;30518:12;30482:2;;30548:78;30618:7;30609:6;30598:9;30594:22;30548:78;:::i;30649:879::-;;;;;;30846:3;30834:9;30825:7;30821:23;30817:33;30814:2;;;-1:-1;;30853:12;30814:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30905:63;-1:-1;31005:2;31044:22;;26441:20;;-1:-1;31113:2;31152:22;;72:20;97:33;72:20;97:33;:::i;:::-;31121:63;-1:-1;31221:2;31260:22;;72:20;97:33;72:20;97:33;:::i;:::-;31229:63;-1:-1;31357:3;31342:19;;31329:33;-1:-1;;;;;31371:30;;31368:2;;;-1:-1;;31404:12;31368:2;31434:78;31504:7;31495:6;31484:9;31480:22;31434:78;:::i;:::-;31424:88;;;30808:720;;;;;;;;:::o;31535:397::-;;;31674:2;31662:9;31653:7;31649:23;31645:32;31642:2;;;-1:-1;;31680:12;31642:2;31738:17;31725:31;-1:-1;;;;;31768:6;31765:30;31762:2;;;-1:-1;;31798:12;31762:2;31836:80;31908:7;31899:6;31888:9;31884:22;31836:80;:::i;31939:392::-;;32079:2;32067:9;32058:7;32054:23;32050:32;32047:2;;;-1:-1;;32085:12;32047:2;32136:17;32130:24;-1:-1;;;;;32166:6;32163:30;32160:2;;;-1:-1;;32196:12;32160:2;32226:89;32307:7;32298:6;32287:9;32283:22;32226:89;:::i;32338:833::-;;;;32557:2;32545:9;32536:7;32532:23;32528:32;32525:2;;;-1:-1;;32563:12;32525:2;32614:17;32608:24;-1:-1;;;;;32652:18;32644:6;32641:30;32638:2;;;-1:-1;;32674:12;32638:2;32776:6;32765:9;32761:22;;;3226:3;3219:4;3211:6;3207:17;3203:27;3193:2;;-1:-1;;3234:12;3193:2;3274:6;3268:13;3296:80;3311:64;3368:6;3311:64;:::i;3296:80::-;3382:16;3418:6;3411:5;3404:21;3448:4;;3465:3;3461:14;3454:21;;3448:4;3440:6;3436:17;3570:3;3448:4;;3554:6;3550:17;3440:6;3541:27;;3538:36;3535:2;;;-1:-1;;3577:12;3535:2;-1:-1;3603:10;;3597:217;3622:6;3619:1;3616:13;3597:217;;;9267:13;;3690:61;;3644:1;3637:9;;;;;3765:14;;;;3793;;3597:217;;;-1:-1;32836:18;;32830:25;32694:99;;-1:-1;32830:25;-1:-1;;;32864:30;;;32861:2;;;-1:-1;;32897:12;32861:2;;32927:89;33008:7;32999:6;32988:9;32984:22;32927:89;:::i;:::-;32917:99;;;33071:84;33147:7;33053:2;33127:9;33123:22;33071:84;:::i;:::-;33061:94;;32519:652;;;;;:::o;33604:799::-;;;;33810:2;33798:9;33789:7;33785:23;33781:32;33778:2;;;-1:-1;;33816:12;33778:2;33874:17;33861:31;-1:-1;;;;;33912:18;33904:6;33901:30;33898:2;;;-1:-1;;33934:12;33898:2;33964:87;34043:7;34034:6;34023:9;34019:22;33964:87;:::i;:::-;33954:97;;34116:2;34105:9;34101:18;34088:32;34074:46;;33912:18;34132:6;34129:30;34126:2;;;-1:-1;;34162:12;34126:2;;34192:87;34271:7;34262:6;34251:9;34247:22;34192:87;:::i;:::-;34182:97;;;34316:2;34359:9;34355:22;26441:20;34324:63;;33772:631;;;;;:::o;34410:423::-;;34562:2;34550:9;34541:7;34537:23;34533:32;34530:2;;;-1:-1;;34568:12;34530:2;34626:17;34613:31;-1:-1;;;;;34656:6;34653:30;34650:2;;;-1:-1;;34686:12;34650:2;34716:101;34809:7;34800:6;34789:9;34785:22;34716:101;:::i;34840:548::-;;;35009:2;34997:9;34988:7;34984:23;34980:32;34977:2;;;-1:-1;;35015:12;34977:2;35073:17;35060:31;-1:-1;;;;;35103:6;35100:30;35097:2;;;-1:-1;;35133:12;35097:2;35163:101;35256:7;35247:6;35236:9;35232:22;35163:101;:::i;:::-;35153:111;;;35301:2;35344:9;35340:22;72:20;97:33;124:5;97:33;:::i;:::-;35309:63;;;;34971:417;;;;;:::o;35395:673::-;;;;35581:2;35569:9;35560:7;35556:23;35552:32;35549:2;;;-1:-1;;35587:12;35549:2;35645:17;35632:31;-1:-1;;;;;35675:6;35672:30;35669:2;;;-1:-1;;35705:12;35669:2;35735:101;35828:7;35819:6;35808:9;35804:22;35735:101;:::i;:::-;35725:111;;;35873:2;35916:9;35912:22;72:20;97:33;124:5;97:33;:::i;:::-;35881:63;-1:-1;35981:2;36020:22;;72:20;97:33;72:20;97:33;:::i;:::-;35989:63;;;;35543:525;;;;;:::o;36075:909::-;;;;36336:2;36324:9;36315:7;36311:23;36307:32;36304:2;;;-1:-1;;36342:12;36304:2;36400:17;36387:31;-1:-1;;;;;36438:18;36430:6;36427:30;36424:2;;;-1:-1;;36460:12;36424:2;36579:6;36568:9;36564:22;;;5945:3;5938:4;5930:6;5926:17;5922:27;5912:2;;-1:-1;;5953:12;5912:2;6000:6;5987:20;6022:108;6037:92;6122:6;6037:92;:::i;6022:108::-;6136:16;6172:6;6165:5;6158:21;6202:4;;6219:3;6215:14;6208:21;;6202:4;6194:6;6190:17;6316:6;6326:3;6202:4;6316:6;6308;6304:19;6194:6;6295:29;;6292:38;6289:2;;;-1:-1;;6333:12;6289:2;-1:-1;6359:10;;6353:236;6378:6;6375:1;6372:13;6353:236;;;6458:65;6519:3;6507:10;6458:65;:::i;:::-;6446:78;;6400:1;6393:9;;;;;6538:14;;;;6566:16;;;;6353:236;;;-1:-1;36480:116;;-1:-1;36646:18;;36633:32;;-1:-1;;;;36674:30;;;36671:2;;;-1:-1;;36707:12;36671:2;;36737:105;36834:7;36825:6;36814:9;36810:22;36737:105;:::i;:::-;36727:115;;;36897:71;36960:7;36879:2;36940:9;36936:22;36897:71;:::i;36991:392::-;;37131:2;37119:9;37110:7;37106:23;37102:32;37099:2;;;-1:-1;;37137:12;37099:2;37188:17;37182:24;-1:-1;;;;;37218:6;37215:30;37212:2;;;-1:-1;;37248:12;37212:2;37278:89;37359:7;37350:6;37339:9;37335:22;37278:89;:::i;37390:657::-;;;37572:2;37560:9;37551:7;37547:23;37543:32;37540:2;;;-1:-1;;37578:12;37540:2;37629:17;37623:24;-1:-1;;;;;37667:18;37659:6;37656:30;37653:2;;;-1:-1;;37689:12;37653:2;37719:89;37800:7;37791:6;37780:9;37776:22;37719:89;:::i;:::-;37709:99;;37866:2;37855:9;37851:18;37845:25;37831:39;;37667:18;37882:6;37879:30;37876:2;;;-1:-1;;37912:12;37876:2;;37942:89;38023:7;38014:6;38003:9;37999:22;37942:89;:::i;:::-;37932:99;;;37534:513;;;;;:::o;38054:263::-;;38169:2;38157:9;38148:7;38144:23;38140:32;38137:2;;;-1:-1;;38175:12;38137:2;-1:-1;9267:13;;38131:186;-1:-1;38131:186::o;38324:981::-;;;;;;38529:3;38517:9;38508:7;38504:23;38500:33;38497:2;;;-1:-1;;38536:12;38497:2;9409:6;9396:20;9421:32;9447:5;9421:32;:::i;:::-;38588:62;-1:-1;38687:2;38726:22;;72:20;97:33;72:20;97:33;:::i;:::-;38695:63;-1:-1;38795:2;38834:22;;72:20;97:33;72:20;97:33;:::i;:::-;38803:63;-1:-1;38931:2;38916:18;;38903:32;-1:-1;;;;;38944:30;;;38941:2;;;-1:-1;;38977:12;38941:2;39007:62;39061:7;39052:6;39041:9;39037:22;39007:62;:::i;:::-;38997:72;;39134:3;39123:9;39119:19;39106:33;39092:47;;38955:18;39151:6;39148:30;39145:2;;;-1:-1;;39181:12;39145:2;;39211:78;39281:7;39272:6;39261:9;39257:22;39211:78;:::i;39312:845::-;;;;;;39492:3;39480:9;39471:7;39467:23;39463:33;39460:2;;;-1:-1;;39499:12;39460:2;9409:6;9396:20;9421:32;9447:5;9421:32;:::i;:::-;39551:62;-1:-1;39650:2;39689:22;;72:20;97:33;72:20;97:33;:::i;:::-;39658:63;-1:-1;39758:2;39797:22;;72:20;97:33;72:20;97:33;:::i;:::-;39766:63;-1:-1;39894:2;39879:18;;39866:32;-1:-1;;;;;39907:30;;39904:2;;;-1:-1;;39940:12;39904:2;39970:62;40024:7;40015:6;40004:9;40000:22;39970:62;:::i;:::-;39454:703;;;;-1:-1;39454:703;;40069:3;40109:22;26441:20;;39454:703;-1:-1;;;39454:703::o;40164:360::-;;40288:2;40276:9;40267:7;40263:23;40259:32;40256:2;;;-1:-1;;40294:12;40256:2;40345:17;40339:24;-1:-1;;;;;40375:6;40372:30;40369:2;;;-1:-1;;40405:12;40369:2;40435:73;40500:7;40491:6;40480:9;40476:22;40435:73;:::i;40845:574::-;;;41025:2;41013:9;41004:7;41000:23;40996:32;40993:2;;;-1:-1;;41031:12;40993:2;11174:6;11168:13;11186:56;11236:5;11186:56;:::i;:::-;41238:2;41223:18;;41217:25;41083:97;;-1:-1;;;;;;41251:30;;41248:2;;;-1:-1;;41284:12;41248:2;41314:89;41395:7;41386:6;41375:9;41371:22;41314:89;:::i;41426:597::-;;;;41606:2;41594:9;41585:7;41581:23;41577:32;41574:2;;;-1:-1;;41612:12;41574:2;11543:6;11537:13;11555:53;11602:5;11555:53;:::i;:::-;41795:2;41859:22;;11885:13;41664:94;;-1:-1;11903:47;11885:13;11903:47;:::i;:::-;41928:2;41975:22;;8992:13;41803:88;;-1:-1;9010:30;8992:13;9010:30;:::i;42030:425::-;;;42175:2;42163:9;42154:7;42150:23;42146:32;42143:2;;;-1:-1;;42181:12;42143:2;11720:6;11714:13;11732:49;11775:5;11732:49;:::i;:::-;42360:2;42407:22;;8992:13;42233:90;;-1:-1;9010:30;8992:13;9010:30;:::i;42778:550::-;;;42946:2;42934:9;42925:7;42921:23;42917:32;42914:2;;;-1:-1;;42952:12;42914:2;12616:6;12610:13;12628:60;12682:5;12628:60;:::i;:::-;43163:2;43148:18;;43142:25;43004:101;;-1:-1;;;;;;43176:30;;43173:2;;;-1:-1;;43209:12;43173:2;43239:73;43304:7;43295:6;43284:9;43280:22;43239:73;:::i;47009:985::-;;;;;47262:3;47250:9;47241:7;47237:23;47233:33;47230:2;;;-1:-1;;47269:12;47230:2;14691:6;14678:20;14703:58;14755:5;14703:58;:::i;:::-;47321:88;-1:-1;47446:2;47485:22;;72:20;97:33;72:20;97:33;:::i;:::-;47454:63;-1:-1;47582:2;47567:18;;47554:32;-1:-1;;;;;47595:30;;;47592:2;;;-1:-1;;47628:12;47592:2;47658:101;47751:7;47742:6;47731:9;47727:22;47658:101;:::i;:::-;47648:111;;47824:2;47813:9;47809:18;47796:32;47782:46;;47606:18;47840:6;47837:30;47834:2;;;-1:-1;;47870:12;47834:2;;47900:78;47970:7;47961:6;47950:9;47946:22;47900:78;:::i;48556:339::-;;48709:2;48697:9;48688:7;48684:23;48680:32;48677:2;;;-1:-1;;48715:12;48677:2;16383:20;48709:2;16383:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;16461:111;;16635:2;16700:22;;;9267:13;16650:16;;;16643:86;;;;-1:-1;16468:16;48671:224;-1:-1;48671:224::o;48902:830::-;;;;;49108:9;49099:7;49095:23;49120:3;49095:23;49091:33;49088:2;;;-1:-1;;49127:12;49088:2;15771:4;15750:19;15746:30;15743:2;;;-1:-1;;15779:12;15743:2;;15807:20;15771:4;15807:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;15885:100;;16048:2;16102:22;;;9119:20;16063:16;;;16056:75;15892:16;-1:-1;15771:4;49356:22;;72:20;97:33;72:20;97:33;:::i;:::-;49325:63;-1:-1;49425:2;49464:22;;72:20;97:33;72:20;97:33;:::i;:::-;49433:63;-1:-1;49561:3;49546:19;;49533:33;-1:-1;;;;;49575:30;;49572:2;;;-1:-1;;49608:12;49739:907;;;;;49953:3;49941:9;49932:7;49928:23;49924:33;49921:2;;;-1:-1;;49960:12;49921:2;50018:17;50005:31;-1:-1;;;;;50056:18;50048:6;50045:30;50042:2;;;-1:-1;;50078:12;50042:2;50163:22;;;;16925:4;16904:19;;;16900:30;16897:2;;;-1:-1;;16933:12;16897:2;16961:20;16925:4;16961:20;:::i;:::-;11358:6;11345:20;11370:57;11421:5;11370:57;:::i;:::-;17042:99;;17231:2;17216:18;;;17203:32;17244:30;;;17241:2;;;-1:-1;;17277:12;17241:2;17408:6;17397:9;17393:22;;;;2461:3;2454:4;2446:6;2442:17;2438:27;2428:2;;-1:-1;;2469:12;2428:2;2516:6;2503:20;2538:105;2553:89;2635:6;2553:89;:::i;2538:105::-;2671:21;;;2728:14;;;;2703:17;;;-1:-1;2808:258;2833:6;2830:1;2827:13;2808:258;;;2940:62;2998:3;17231:2;2916:3;2903:17;2707:6;2891:30;;2940:62;:::i;:::-;2928:75;;3017:14;;;;3045;;;;2855:1;2848:9;2808:258;;;2812:14;;17322:99;17231:2;17308:5;17304:16;17297:125;;;;50098:97;;;50250:53;50295:7;17231:2;50275:9;50271:22;50250:53;:::i;:::-;50240:63;;;;50358:53;50403:7;16925:4;50383:9;50379:22;50358:53;:::i;50653:330::-;;50801:3;50789:9;50780:7;50776:23;50772:33;50769:2;;;-1:-1;;50808:12;50769:2;18506:20;50801:3;18506:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;18591:86;;18758:2;18822:22;;9542:13;9560:32;9542:13;9560:32;:::i;:::-;18758:2;18773:16;;18766:85;18919:2;18983:22;;15532:13;15550:32;15532:13;15550:32;:::i;:::-;18919:2;18934:16;;18927:85;19078:2;19142:22;;15532:13;15550:32;15532:13;15550:32;:::i;:::-;19078:2;19093:16;;19086:85;19097:5;50763:220;-1:-1;;;50763:220::o;50990:822::-;;;;;51191:9;51182:7;51178:23;51203:3;51178:23;51174:33;51171:2;;;-1:-1;;51210:12;51171:2;17612:4;17591:19;17587:30;17584:2;;;-1:-1;;17620:12;17584:2;;17648:20;17612:4;17648:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;17733:75;;17889:2;17942:22;;9396:20;9421:32;9396:20;9421:32;:::i;:::-;17889:2;17904:16;;17897:74;18072:48;18116:3;18039:2;18092:22;;18072:48;:::i;:::-;18039:2;18058:5;18054:16;18047:74;18220:48;18264:3;18187:2;18244:9;18240:22;18220:48;:::i;:::-;18187:2;18202:16;;18195:74;18206:5;-1:-1;51414:53;51459:7;17612:4;51435:22;;51414:53;:::i;:::-;51404:63;;51523:53;51568:7;51504:3;51548:9;51544:22;51523:53;:::i;:::-;51513:63;;51641:3;51630:9;51626:19;51613:33;-1:-1;;;;;51658:6;51655:30;51652:2;;;-1:-1;;51688:12;51819:818;;;;;52019:9;52010:7;52006:23;52031:3;52006:23;52002:33;51999:2;;;-1:-1;;52038:12;51999:2;19361:4;19340:19;19336:30;19333:2;;;-1:-1;;19369:12;19333:2;;19397:20;19361:4;19397:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;19478:75;;19616:2;19670:22;;72:20;97:33;72:20;97:33;:::i;:::-;19616:2;19631:16;;19624:75;19635:5;-1:-1;19361:4;52261:22;;72:20;97:33;72:20;97:33;:::i;52644:410::-;;52793:2;52781:9;52772:7;52768:23;52764:32;52761:2;;;-1:-1;;52799:12;52761:2;52850:17;52844:24;-1:-1;;;;;52888:18;52880:6;52877:30;52874:2;;;-1:-1;;52910:12;52874:2;53006:22;;;;20982:4;20961:19;;;20957:30;20954:2;;;-1:-1;;20990:12;20954:2;21018:20;20982:4;21018:20;:::i;:::-;26595:6;26589:13;21111:16;21104:86;52793:2;21327:9;21323:22;220:13;238:33;265:5;238:33;:::i;:::-;52793:2;21273:16;;21266:86;21421:2;21486:22;;220:13;238:33;220:13;238:33;:::i;:::-;21421:2;21436:16;;21429:86;21576:2;21641:22;;220:13;238:33;220:13;238:33;:::i;:::-;21576:2;21591:16;;21584:86;21752:3;21737:19;;21731:26;21766:30;;;21763:2;;;-1:-1;;21799:12;21763:2;21844:69;21909:3;21900:6;21889:9;21885:22;21844:69;:::i;:::-;21752:3;21826:16;;21819:95;-1:-1;21830:5;52755:299;-1:-1;;;;;52755:299::o;53061:907::-;;;;;53275:3;53263:9;53254:7;53250:23;53246:33;53243:2;;;-1:-1;;53282:12;53243:2;53340:17;53327:31;-1:-1;;;;;53378:18;53370:6;53367:30;53364:2;;;-1:-1;;53400:12;53364:2;53430:87;53509:7;53500:6;53489:9;53485:22;53430:87;:::i;:::-;53420:97;;53554:2;53597:9;53593:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;53562:63;;-1:-1;53662:2;53701:22;;72:20;;97:33;72:20;97:33;:::i;:::-;53670:63;;-1:-1;53798:2;53783:18;;53770:32;;53811:30;;;53808:2;;;-1:-1;;53844:12;53975:771;;;;;54164:3;54152:9;54143:7;54139:23;54135:33;54132:2;;;-1:-1;;54171:12;54132:2;54229:17;54216:31;-1:-1;;;;;54259:6;54256:30;54253:2;;;-1:-1;;54289:12;54253:2;54319:87;54398:7;54389:6;54378:9;54374:22;54319:87;:::i;:::-;54309:97;;;54443:2;54486:9;54482:22;9119:20;54451:63;;54551:2;54594:9;54590:22;72:20;97:33;124:5;97:33;:::i;:::-;54559:63;-1:-1;54659:2;54698:22;;72:20;97:33;72:20;97:33;:::i;:::-;54126:620;;;;-1:-1;54126:620;;-1:-1;;54126:620::o;54753:640::-;;;;54964:3;54952:9;54943:7;54939:23;54935:33;54932:2;;;-1:-1;;54971:12;54932:2;55033:81;55106:7;55082:22;55033:81;:::i;:::-;55023:91;;55170:80;55242:7;55151:3;55222:9;55218:22;55170:80;:::i;:::-;55160:90;;55287:3;55349:9;55345:22;12417:20;12442:51;12487:5;12442:51;:::i;55400:337::-;;55552:2;55540:9;55531:7;55527:23;55523:32;55520:2;;;-1:-1;;55558:12;55520:2;24232:20;55552:2;24232:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;24315:86;;24472:2;24537:22;;220:13;238:33;220:13;238:33;:::i;:::-;24472:2;24487:16;;24480:86;24491:5;55514:223;-1:-1;;;55514:223::o;55744:815::-;;;;;55942:9;55933:7;55929:23;55954:3;55929:23;55925:33;55922:2;;;-1:-1;;55961:12;55922:2;24755:4;24734:19;24730:30;24727:2;;;-1:-1;;24763:12;24727:2;;24791:20;24755:4;24791:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;24874:75;;25019:2;25073:22;;;9119:20;25034:16;;;25027:75;25174:2;25228:22;;72:20;97:33;72:20;97:33;:::i;:::-;25174:2;25189:16;;25182:75;25193:5;-1:-1;24755:4;56182:22;;72:20;97:33;72:20;97:33;:::i;:::-;56151:63;-1:-1;56251:3;56291:22;;72:20;97:33;72:20;97:33;:::i;:::-;56260:63;-1:-1;56388:3;56373:19;;56360:33;-1:-1;;;;;56402:30;;56399:2;;;-1:-1;;56435:12;56566:261;;56680:2;56668:9;56659:7;56655:23;56651:32;56648:2;;;-1:-1;;56686:12;56648:2;26318:6;26312:13;143265:8;153448:5;143254:20;153424:5;153421:34;153411:2;;-1:-1;;153459:12;57104:399;;;57236:2;57224:9;57215:7;57211:23;57207:32;57204:2;;;-1:-1;;57242:12;57204:2;-1:-1;;26589:13;;57405:2;57455:22;;;26589:13;;;;;-1:-1;57198:305::o;57510:259::-;;57623:2;57611:9;57602:7;57598:23;57594:32;57591:2;;;-1:-1;;57629:12;57591:2;27002:6;26996:13;27014:31;27039:5;27014:31;:::i;59175:127::-;-1:-1;;;;;143127:54;59252:45;;59246:56::o;59714:690::-;;59907:5;135572:12;137404:6;137399:3;137392:19;137441:4;;137436:3;137432:14;59919:93;;137441:4;60083:5;134575:14;-1:-1;60122:260;60147:6;60144:1;60141:13;60122:260;;;60208:13;;-1:-1;;;;;143127:54;59252:45;;57930:14;;;;136611;;;;666:18;60162:9;60122:260;;;-1:-1;60388:10;;59838:566;-1:-1;;;;;59838:566::o;60443:690::-;;60636:5;135572:12;137404:6;137399:3;137392:19;137441:4;;137436:3;137432:14;60648:93;;137441:4;60812:5;134575:14;-1:-1;60851:260;60876:6;60873:1;60870:13;60851:260;;;60937:13;;65137:37;;58112:14;;;;136611;;;;60898:1;60891:9;60851:260;;65871:323;;66003:5;135572:12;137404:6;137399:3;137392:19;66086:52;66131:6;137441:4;137436:3;137432:14;137441:4;66112:5;66108:16;66086:52;:::i;:::-;147908:7;147892:14;-1:-1;;147888:28;66150:39;;;;137441:4;66150:39;;65951:243;-1:-1;;65951:243::o;77590:837::-;77815:23;;-1:-1;;;;;143127:54;;;59252:45;;78001:4;77990:16;;;77984:23;139173:13;139166:21;78055:14;;;64919:34;78154:4;78143:16;;;78137:23;143127:54;;;78230:14;;;59252:45;78337:4;78326:16;;;78320:23;139173:13;139166:21;78391:14;;64919:34;77720:707::o;78501:582::-;;78731:16;78725:23;65144:3;65137:37;78902:4;78895:5;78891:16;78885:23;78652:4;78902;78932:3;78928:14;78921:38;78974:71;78652:4;78647:3;78643:14;79026:12;78974:71;:::i;79173:1073::-;;79423:16;79417:23;65144:3;65137:37;79595:4;79588:5;79584:16;79578:23;666:18;;143138:42;;;;138983:5;143127:54;79595:4;79659:3;79655:14;59252:45;143138:42;79757:4;79750:5;79746:16;79740:23;143127:54;79757:4;79821:3;79817:14;59252:45;143138:42;79911:4;79904:5;79900:16;79894:23;143127:54;79911:4;79975:3;79971:14;59252:45;;;80065:4;80058:5;80054:16;80048:23;79342:4;80065;80095:3;80091:14;80084:38;80137:71;79342:4;79337:3;79333:14;80189:12;80137:71;:::i;83139:800::-;83367:16;83361:23;142174:53;142221:5;142174:53;:::i;:::-;68867:66;;83545:4;83534:16;;;83528:23;143539:4;143528:16;83601:14;;;85916:35;83692:4;83681:16;;;83675:23;83752:14;;;65137:37;83843:4;83832:16;;;83826:23;83903:14;;65137:37;83259:680::o;85295:103::-;-1:-1;;;;;143007:46;85356:37;;85350:48::o;85752:100::-;-1:-1;;;;;143426:30;85811:36;;85805:47::o;85963:291::-;;147475:6;147470:3;147465;147452:30;147513:16;;147506:27;;;147513:16;86107:147;-1:-1;86107:147::o;86261:271::-;;66711:5;135572:12;66822:52;66867:6;66862:3;66855:4;66848:5;66844:16;66822:52;:::i;:::-;66886:16;;;;;86395:137;-1:-1;;86395:137::o;86539:222::-;-1:-1;;;;;143127:54;;;;59252:45;;86666:2;86651:18;;86637:124::o;87029:349::-;-1:-1;;;;;143127:54;;;;59105:58;;87364:2;87349:18;;65137:37;87192:2;87177:18;;87163:215::o;87385:333::-;-1:-1;;;;;143127:54;;;59252:45;;143127:54;;87704:2;87689:18;;59252:45;87540:2;87525:18;;87511:207::o;87725:432::-;-1:-1;;;;;143127:54;;;59252:45;;143127:54;;;;88066:2;88051:18;;59252:45;139173:13;;139166:21;88143:2;88128:18;;64919:34;87902:2;87887:18;;87873:284::o;88164:628::-;-1:-1;;;;;143127:54;;;59252:45;;143127:54;;88552:2;88537:18;;59252:45;139173:13;;139166:21;88629:2;88614:18;;64919:34;88387:3;88666:2;88651:18;;88644:48;;;88164:628;;88706:76;;88372:19;;88768:6;88706:76;:::i;88799:640::-;-1:-1;;;;;143127:54;;;59252:45;;143127:54;;89193:2;89178:18;;59252:45;89028:3;89230:2;89215:18;;89208:48;;;88799:640;;89270:76;;89013:19;;89332:6;89270:76;:::i;:::-;89262:84;;65167:5;89425:2;89414:9;89410:18;65137:37;88999:440;;;;;;;:::o;89446:460::-;-1:-1;;;;;143127:54;;;59252:45;;143127:54;;;;89801:2;89786:18;;59252:45;89892:2;89877:18;;69550:58;;;;89637:2;89622:18;;89608:298::o;89913:481::-;-1:-1;;;;;143127:54;;59252:45;;90118:2;90236;90221:18;;90214:48;;;89913:481;;90276:108;;90103:18;;90370:6;90276:108;:::i;90401:740::-;-1:-1;;;;;143127:54;;59252:45;;90684:2;90802;90787:18;;90780:48;;;90401:740;;90842:108;;90669:18;;90936:6;90842:108;:::i;:::-;90998:9;90992:4;90988:20;90983:2;90972:9;90968:18;90961:48;91023:108;91126:4;91117:6;91023:108;:::i;91148:1000::-;-1:-1;;;;;143127:54;;59252:45;;91509:3;91628:2;91613:18;;91606:48;;;91148:1000;;91668:108;;91494:19;;91762:6;91668:108;:::i;:::-;91824:9;91818:4;91814:20;91809:2;91798:9;91794:18;91787:48;91849:108;91952:4;91943:6;91849:108;:::i;:::-;91841:116;;92005:9;91999:4;91995:20;91990:2;91979:9;91975:18;91968:48;92030:108;92133:4;92124:6;92030:108;:::i;92155:740::-;-1:-1;;;;;143127:54;;59252:45;;92438:2;92556;92541:18;;92534:48;;;92155:740;;92596:108;;92423:18;;92690:6;92596:108;:::i;:::-;92752:9;92746:4;92742:20;92737:2;92726:9;92722:18;92715:48;92777:108;92880:4;92871:6;92777:108;:::i;92902:321::-;-1:-1;;;;;143127:54;;;;59252:45;;139173:13;139166:21;93209:2;93194:18;;64919:34;93051:2;93036:18;;93022:201::o;93230:417::-;-1:-1;;;;;143127:54;;59252:45;;93403:2;93521;93506:18;;93499:48;;;93230:417;;93561:76;;93388:18;;93623:6;93561:76;:::i;93654:876::-;-1:-1;;;;;143127:54;;59252:45;;93654:876;142174:53;142221:5;142174:53;:::i;:::-;146735:38;94154:2;94143:9;94139:18;69173:62;93977:3;94191:2;94180:9;94176:18;94169:48;94231:108;93977:3;93966:9;93962:19;94325:6;94231:108;:::i;:::-;94387:9;94381:4;94377:20;94372:2;94361:9;94357:18;94350:48;94412:108;94515:4;94506:6;94412:108;:::i;94537:1644::-;-1:-1;;;;;143127:54;;;59252:45;;94537:1644;;95084:3;;142174:53;142221:5;142174:53;:::i;:::-;146735:38;95261:2;95250:9;95246:18;69173:62;95084:3;95298:2;95287:9;95283:18;95276:48;95338:108;95084:3;95073:9;95069:19;95432:6;95338:108;:::i;:::-;95330:116;;95494:9;95488:4;95484:20;95479:2;95468:9;95464:18;95457:48;95519:108;95622:4;95613:6;95519:108;:::i;:::-;143127:54;;;95706:3;95691:19;;59252:45;95511:116;-1:-1;142174:53;142221:5;142174:53;:::i;:::-;146735:38;95802:3;95791:9;95787:19;69173:62;95856:9;95850:4;95846:20;95840:3;95829:9;95825:19;95818:49;95881:108;95984:4;95975:6;95881:108;:::i;:::-;95873:116;;96038:9;96032:4;96028:20;96022:3;96011:9;96007:19;96000:49;96063:108;96166:4;96157:6;96063:108;:::i;96528:888::-;;96861:2;96882:17;96875:47;96936:108;96861:2;96850:9;96846:18;97030:6;96936:108;:::i;:::-;97092:9;97086:4;97082:20;97077:2;97066:9;97062:18;97055:48;97117:108;97220:4;97211:6;97117:108;:::i;:::-;97109:116;;97273:9;97267:4;97263:20;97258:2;97247:9;97243:18;97236:48;97298:108;97401:4;97392:6;97298:108;:::i;97423:481::-;;97628:2;97649:17;97642:47;97703:108;97628:2;97617:9;97613:18;97797:6;97703:108;:::i;:::-;97695:116;;65167:5;97890:2;97879:9;97875:18;65137:37;97599:305;;;;;:::o;97911:924::-;;98262:2;98251:9;98247:18;98262:2;98283:17;98276:47;98337:126;61388:5;135572:12;137404:6;137399:3;137392:19;137432:14;98251:9;137432:14;61400:102;;137441:4;;;137432:14;137441:4;61559:6;61555:17;98251:9;61546:27;;137441:4;61653:5;134575:14;-1:-1;61692:357;61717:6;61714:1;61711:13;61692:357;;;61769:20;;98251:9;61773:4;61769:20;;61764:3;61757:33;58260:64;58320:3;61824:6;61818:13;58260:64;:::i;:::-;62028:14;;;;61838:90;-1:-1;136611:14;;;;61739:1;61732:9;61692:357;;;61696:14;;98511:9;98505:4;98501:20;137441:4;98485:9;98481:18;98474:48;98536:108;98639:4;98630:6;98536:108;:::i;:::-;98528:116;;;;;98692:9;98686:4;98682:20;98677:2;98666:9;98662:18;98655:48;98717:108;98820:4;98811:6;98717:108;:::i;98842:1022::-;;99206:3;99228:17;99221:47;99282:131;99206:3;99195:9;99191:19;99399:6;99282:131;:::i;:::-;99492:2;99477:18;;65137:37;;;;-1:-1;99583:2;99568:18;;69550:58;;;;-1:-1;;;;;143127:54;;;99666:2;99651:18;;59252:45;143127:54;;99757:3;99742:19;;59105:58;143138:42;99834:19;;;69550:58;99274:139;99177:687;-1:-1;99177:687::o;99871:486::-;100106:2;100120:47;;;135572:12;;100091:18;;;137392:19;;;99871:486;;100106:2;137432:14;;;;;;63514:17;;;63505:27;;;;134575:14;;;99871:486;63671:417;63696:6;63693:1;63690:13;63671:417;;;63748:20;;;-1:-1;;63748:20;63736:33;;63797:13;;75055:23;;75091:38;;;75144:71;74980:14;;;75055:23;75144:71;:::i;:::-;75292:16;;;75286:23;139173:13;139166:21;75357:14;;;64919:34;;;;64067:14;;;;75136:79;-1:-1;136611:14;;;;63718:1;63711:9;63671:417;;;-1:-1;100173:174;;100077:280;-1:-1;;;;;;;;100077:280::o;100364:370::-;;100541:2;100562:17;100555:47;100616:108;100541:2;100530:9;100526:18;100710:6;100616:108;:::i;100741:629::-;;100996:2;101017:17;101010:47;101071:108;100996:2;100985:9;100981:18;101165:6;101071:108;:::i;:::-;101227:9;101221:4;101217:20;101212:2;101201:9;101197:18;101190:48;101252:108;101355:4;101346:6;101252:108;:::i;101377:210::-;139173:13;;139166:21;64919:34;;101498:2;101483:18;;101469:118::o;101594:840::-;139173:13;;139166:21;64919:34;;-1:-1;;;;;143127:54;;102058:2;102043:18;;59252:45;101899:3;102095:2;102080:18;;102073:48;;;101594:840;;102135:108;;101884:19;;102229:6;102135:108;:::i;102441:222::-;65137:37;;;102568:2;102553:18;;102539:124::o;102670:936::-;;65167:5;65144:3;65137:37;102999:3;103118:2;103107:9;103103:18;103096:48;103158:76;102999:3;102988:9;102984:19;103220:6;103158:76;:::i;103613:896::-;-1:-1;;;;;;139339:78;;65365:36;;-1:-1;;;;;143127:54;;;104081:2;104066:18;;59252:45;143127:54;;104164:2;104149:18;;59252:45;143138:42;104201:2;104186:18;;104179:48;;;103613:896;;104241:76;;103903:19;;104303:6;104241:76;:::i;:::-;104366:9;104360:4;104356:20;104350:3;104339:9;104335:19;104328:49;104391:108;104494:4;104485:6;104391:108;:::i;104516:748::-;-1:-1;;;;;;139339:78;;65365:36;;-1:-1;;;;;143127:54;;;104934:2;104919:18;;59252:45;143127:54;;105017:2;105002:18;;59252:45;143138:42;105054:2;105039:18;;105032:48;;;104516:748;;105094:76;;104756:19;;105156:6;105094:76;:::i;:::-;105086:84;;65167:5;105249:3;105238:9;105234:19;65137:37;104742:522;;;;;;;;:::o;105271:306::-;;105416:2;105437:17;105430:47;105491:76;105416:2;105405:9;105401:18;105553:6;105491:76;:::i;106227:860::-;-1:-1;;;;;143127:54;;;67000:75;;143127:54;;;106749:2;106734:18;;67000:75;143127:54;;106832:2;106817:18;;59252:45;106923:2;106908:18;;69550:58;;;143138:42;106960:3;106945:19;;106938:49;;;106227:860;;107001:76;;106523:19;;107063:6;107001:76;:::i;107094:532::-;-1:-1;;;;;143127:54;;;67000:75;;143127:54;;;;107531:2;107516:18;;67000:75;143265:8;143254:20;;;107612:2;107597:18;;85474:36;107321:2;107306:18;;107292:334::o;107633:776::-;-1:-1;;;;;143127:54;;;67000:75;;143127:54;;;108137:2;108122:18;;67000:75;108220:2;108205:18;;65137:37;;;;108311:2;108296:18;;69550:58;143127:54;;;108394:3;108379:19;;59252:45;107926:3;107911:19;;107897:512::o;109215:776::-;-1:-1;;;;;143127:54;;;67000:75;;143127:54;;;;109719:2;109704:18;;67000:75;109802:2;109787:18;;65137:37;;;;109893:2;109878:18;;69550:58;109976:3;109961:19;;65137:37;;;;109508:3;109493:19;;109479:512::o;109998:1260::-;-1:-1;;;;;143127:54;;;67000:75;;110613:2;110598:18;;65137:37;;;143127:54;;;110719:2;110704:18;;67000:75;143127:54;;;110818:2;110803:18;;59252:45;110901:3;110886:19;;65137:37;;;143138:42;110978:19;;69550:58;;;143127:54;;111093:3;111078:19;;59252:45;110425:3;111131;111116:19;;111109:49;;;109998:1260;;111172:76;110410:19;;;111234:6;111172:76;:::i;111265:664::-;-1:-1;;;;;143127:54;;;67000:75;;111718:2;111703:18;;65137:37;;;;143127:54;;111824:2;111809:18;;67000:75;111915:2;111900:18;;69550:58;;;;111530:3;111515:19;;111501:428::o;111936:776::-;-1:-1;;;;;143127:54;;;67000:75;;112417:2;112402:18;;65137:37;;;;143127:54;;;;112523:2;112508:18;;67000:75;112614:2;112599:18;;69550:58;;;;112697:3;112682:19;;65137:37;;;;112229:3;112214:19;;112200:512::o;113664:480::-;113865:2;113850:18;;142174:53;142221:5;142174:53;:::i;:::-;68511:68;;;114047:2;114032:18;;65137:37;;;;114130:2;114115:18;;;65137:37;113836:308;:::o;114151:510::-;114367:2;114352:18;;148151:1;148141:12;;148131:2;;148157:9;114668:560;142923:2;142912:21;;;69306:36;;142912:21;;;;115042:2;115027:18;;69306:36;115125:2;115110:18;;65137:37;143539:4;143528:16;;;115214:2;115199:18;;69846:56;114881:3;114866:19;;114852:376::o;115235:460::-;69550:58;;;115598:2;115583:18;;65137:37;;;;-1:-1;;;;;143127:54;115681:2;115666:18;;59252:45;115426:2;115411:18;;115397:298::o;115702:416::-;115902:2;115916:47;;;70139:2;115887:18;;;137392:19;70175:34;137432:14;;;70155:55;-1:-1;;;70230:12;;;70223:28;70270:12;;;115873:245::o;116125:416::-;116325:2;116339:47;;;70521:2;116310:18;;;137392:19;70557:26;137432:14;;;70537:47;70603:12;;;116296:245::o;116548:416::-;116748:2;116762:47;;;70854:2;116733:18;;;137392:19;70890:34;137432:14;;;70870:55;-1:-1;;;70945:12;;;70938:36;70993:12;;;116719:245::o;116971:416::-;117171:2;117185:47;;;71244:2;117156:18;;;137392:19;71280:34;137432:14;;;71260:55;71349:28;71335:12;;;71328:50;71397:12;;;117142:245::o;117394:416::-;117594:2;117608:47;;;71648:2;117579:18;;;137392:19;71684:34;137432:14;;;71664:55;-1:-1;;;71739:12;;;71732:29;71780:12;;;117565:245::o;117817:416::-;118017:2;118031:47;;;72031:2;118002:18;;;137392:19;72067:34;137432:14;;;72047:55;-1:-1;;;72122:12;;;72115:39;72173:12;;;117988:245::o;118240:416::-;118440:2;118454:47;;;72424:2;118425:18;;;137392:19;72460:34;137432:14;;;72440:55;-1:-1;;;72515:12;;;72508:27;72554:12;;;118411:245::o;118663:416::-;118863:2;118877:47;;;118848:18;;;137392:19;72841:34;137432:14;;;72821:55;72895:12;;;118834:245::o;119086:416::-;119286:2;119300:47;;;73146:2;119271:18;;;137392:19;73182:34;137432:14;;;73162:55;73251:26;73237:12;;;73230:48;73297:12;;;119257:245::o;119509:416::-;119709:2;119723:47;;;73548:2;119694:18;;;137392:19;73584:34;137432:14;;;73564:55;-1:-1;;;73639:12;;;73632:39;73690:12;;;119680:245::o;119932:416::-;120132:2;120146:47;;;73941:2;120117:18;;;137392:19;73977:34;137432:14;;;73957:55;74046:29;74032:12;;;74025:51;74095:12;;;120103:245::o;120355:374::-;74454:23;;-1:-1;;;;;143127:54;59252:45;;74652:4;74641:16;;;74635:23;74712:14;;;65137:37;;;;120558:2;120543:18;;120529:200::o;120736:355::-;75721:23;;-1:-1;;;;;143127:54;59252:45;;75912:4;75901:16;;;75895:23;-1:-1;;;;;;139339:78;75970:14;;;65365:36;76071:4;76060:16;;;76054:23;142923:2;142912:21;;;76129:14;;;69306:36;;;;76228:4;76217:16;;;76211:23;142912:21;;76286:14;;;69306:36;;;;120929:3;120914:19;;120900:191::o;121098:410::-;;121295:2;121316:17;121309:47;76663:16;76657:23;76591:4;121295:2;121284:9;121280:18;76693:38;76746:71;76582:14;121284:9;76582:14;76798:12;76746:71;:::i;:::-;76738:79;;666:18;;143138:42;;;121295:2;76900:5;76896:16;76890:23;143127:54;76967:14;121284:9;76967:14;59252:45;76967:14;77058:5;77054:16;77048:23;77125:14;121284:9;77125:14;65137:37;77125:14;77216:5;77212:16;77206:23;77283:14;121284:9;77283:14;65137:37;77283:14;77382:5;77378:16;77372:23;76591:4;121284:9;77449:14;65137:37;121362:136;;;;121266:242;;;;:::o;121515:740::-;;121798:2;121819:17;121812:47;121873:108;121798:2;121787:9;121783:18;121967:6;121873:108;:::i;:::-;122029:9;122023:4;122019:20;122014:2;122003:9;121999:18;121992:48;122054:108;122157:4;122148:6;122054:108;:::i;:::-;122046:116;;;65167:5;122241:2;122230:9;122226:18;65137:37;121769:486;;;;;;:::o;122262:852::-;;122573:3;122595:17;122588:47;122649:108;122573:3;122562:9;122558:19;122743:6;122649:108;:::i;:::-;122805:9;122799:4;122795:20;122790:2;122779:9;122775:18;122768:48;122830:108;122933:4;122924:6;122830:108;:::i;:::-;123017:2;123002:18;;65137:37;;;;-1:-1;;123100:2;123085:18;65137:37;122822:116;122544:570;-1:-1;;122544:570::o;123121:406::-;;123316:2;123337:17;123330:47;123391:126;123316:2;123305:9;123301:18;123503:6;123391:126;:::i;123534:740::-;;123813:3;123835:17;123828:47;123889:126;123813:3;123802:9;123798:19;124001:6;123889:126;:::i;:::-;124094:2;124079:18;;65137:37;;;;-1:-1;;;;;;143127:54;;;124177:2;124162:18;;59252:45;143127:54;;124260:2;124245:18;;;59252:45;123881:134;123784:490;-1:-1;123784:490::o;124281:703::-;;124592:3;124581:9;124577:19;124569:27;;80570:86;80641:14;80547:16;80541:23;80570:86;:::i;:::-;80741:4;80734:5;80730:16;80724:23;80753:86;80741:4;80828:3;80824:14;80810:12;80753:86;:::i;:::-;;80925:4;80918:5;80914:16;80908:23;80937:63;80925:4;80989:3;80985:14;80971:12;80937:63;:::i;:::-;;81086:4;81079:5;81075:16;81069:23;81098:63;81086:4;81150:3;81146:14;81132:12;81098:63;:::i;:::-;;81255:4;81248:5;81244:16;81238:23;81267:63;81255:4;81319:3;81315:14;81301:12;81267:63;:::i;:::-;;81410:4;81403:5;81399:16;81393:23;81422:63;81410:4;81474:3;81470:14;81456:12;81422:63;:::i;:::-;;81565:4;81558:5;81554:16;81548:23;81577:63;81565:4;81629:3;81625:14;81611:12;81577:63;:::i;:::-;;81721:4;81714:5;81710:16;81704:23;81733:63;81721:4;81785:3;81781:14;81767:12;81733:63;:::i;:::-;;81883:6;;81876:5;81872:18;81866:25;81897:65;81883:6;81949:3;81945:16;81931:12;81897:65;:::i;:::-;-1:-1;;82041:6;82030:18;;;82024:25;82103:16;;;65137:37;82201:6;82190:18;;;82184:25;82215:63;82261:16;;;82184:25;82215:63;:::i;:::-;-1:-1;;82357:6;82346:18;;;82340:25;82419:16;;;65137:37;124745:127;124867:3;124852:19;;124843:6;124745:127;:::i;:::-;124883:91;124969:3;124958:9;124954:19;124945:6;124883:91;:::i;124991:370::-;82792:23;;-1:-1;;;;;143127:54;;;59252:45;;82973:4;82962:16;;;82956:23;143127:54;83033:14;;;59252:45;;;;125192:2;125177:18;;125163:198::o;125368:862::-;;125707:3;125729:17;125722:47;84256:16;84250:23;125707:3;125696:9;125692:19;65137:37;84421:4;84414:5;84410:16;84404:23;148378:1;148371:5;148368:12;148358:2;;148384:9;148358:2;84492:14;;;69017:61;84589:4;84578:16;;84572:23;-1:-1;;;;;143127:54;;;84672:14;;;67000:75;84770:4;84759:16;;84753:23;143127:54;84853:14;;;67000:75;84949:4;84938:16;;84932:23;85009:14;;;65137:37;143138:42;85096:16;;85090:23;84182:4;85133:14;;;85126:38;85179:71;84173:14;;;85090:23;85179:71;:::i;:::-;125775:122;;;125908:136;84421:4;126029:9;126025:18;126016:6;125908:136;:::i;:::-;85107:4;126116:19;;65137:37;;;;84182:4;126200:19;65137:37;125678:552;;-1:-1;;125678:552::o;126466:1092::-;;65167:5;65144:3;65137:37;146872:24;127014:2;127003:9;126999:18;69550:58;126841:3;127051:2;127040:9;127036:18;127029:48;127091:108;126841:3;126830:9;126826:19;127185:6;127091:108;:::i;:::-;127247:9;127241:4;127237:20;127232:2;127221:9;127217:18;127210:48;127272:108;127375:4;127366:6;127272:108;:::i;:::-;-1:-1;;;;;143127:54;;;;127459:3;127444:19;;59252:45;-1:-1;;143138:42;127528:19;65137:37;127264:116;126812:746;-1:-1;;;;126812:746::o;127565:878::-;;65167:5;65144:3;65137:37;146872:24;128058:2;128047:9;128043:18;69550:58;127885:3;128095:2;128084:9;128080:18;128073:48;128135:131;127885:3;127874:9;127870:19;128252:6;128135:131;:::i;:::-;-1:-1;;;;;143127:54;;;;128345:2;128330:18;;59252:45;-1:-1;128428:3;128413:19;65137:37;128127:139;127856:587;-1:-1;;;127856:587::o;128450:544::-;;65167:5;65144:3;65137:37;146872:24;128831:2;128820:9;128816:18;69550:58;128659:2;128868;128857:9;128853:18;128846:48;128908:76;128659:2;128648:9;128644:18;128970:6;128908:76;:::i;129001:746::-;65137:37;;;129452:2;129437:18;;69550:58;;;;129543:2;129528:18;;69550:58;;;;129626:2;129611:18;;65137:37;-1:-1;;;;;143127:54;129732:3;129717:19;;67000:75;129279:3;129264:19;;129250:497::o;129754:460::-;65137:37;;;130117:2;130102:18;;69550:58;;;;130200:2;130185:18;;65137:37;129945:2;129930:18;;129916:298::o;130756:506::-;;;130891:11;130878:25;130942:48;;130966:8;130950:14;130946:29;130942:48;130922:18;130918:73;130908:2;;-1:-1;;130995:12;130908:2;131022:33;;131076:18;;;-1:-1;;;;;;131103:30;;131100:2;;;-1:-1;;131136:12;131100:2;130981:4;131164:13;;-1:-1;130950:14;131196:38;;;131186:49;;131183:2;;;131248:1;;131238:12;131269:256;131331:2;131325:9;131357:17;;;-1:-1;;;;;131417:34;;131453:22;;;131414:62;131411:2;;;131489:1;;131479:12;131411:2;131331;131498:22;131309:216;;-1:-1;131309:216::o;131532:304::-;;-1:-1;;;;;131683:6;131680:30;131677:2;;;-1:-1;;131713:12;131677:2;-1:-1;131758:4;131746:17;;;131811:15;;131614:222::o;134132:321::-;;-1:-1;;;;;134267:6;134264:30;134261:2;;;-1:-1;;134297:12;134261:2;-1:-1;147908:7;134351:17;-1:-1;;134347:33;134438:4;134428:15;;134198:255::o;147548:268::-;147613:1;147620:101;147634:6;147631:1;147628:13;147620:101;;;147701:11;;;147695:18;147682:11;;;147675:39;147656:2;147649:10;147620:101;;;147736:6;147733:1;147730:13;147727:2;;;-1:-1;;147613:1;147783:16;;147776:27;147597:219::o;147929:111::-;148018:1;148011:5;148008:12;147998:2;;148024:9;148519:117;-1:-1;;;;;143127:54;;148578:35;;148568:2;;148627:1;;148617:12;148783:111;148864:5;139173:13;139166:21;148842:5;148839:32;148829:2;;148885:1;;148875:12;149025:115;-1:-1;;;;;;139339:78;;149083:34;;149073:2;;149131:1;;149121:12;153117:115;153202:5;142923:2;142912:21;153178:5;153175:34;153165:2;;153223:1;;153213:12;153731:113;143539:4;153814:5;143528:16;153791:5;153788:33;153778:2;;153835:1;;153825:12"
            }
        }
    },
    "sourceTreeHashHex": "0x3fcfa0d7ad1d92858c2bd242d2bfb1c226ce18cb6c36eb32ec3f4de814340547",
    "sources": {
        "./TestERC20BridgeSampler.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/ERC20BridgeSampler.sol\";\nimport \"../src/interfaces/IEth2Dai.sol\";\nimport \"../src/interfaces/IKyberNetwork.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\nlibrary LibDeterministicQuotes {\n\n    address private constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 private constant RATE_DENOMINATOR = 1 ether;\n    uint256 private constant MIN_RATE = RATE_DENOMINATOR / 100;\n    uint256 private constant MAX_RATE = 100 * RATE_DENOMINATOR;\n    uint8 private constant MIN_DECIMALS = 4;\n    uint8 private constant MAX_DECIMALS = 20;\n\n    function getDeterministicSellQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (uint256 buyAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return sellAmount * rate * buyBase / sellBase / RATE_DENOMINATOR;\n    }\n\n    function getDeterministicBuyQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (uint256 sellAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return buyAmount * RATE_DENOMINATOR * sellBase / rate / buyBase;\n    }\n\n    function getDeterministicTokenDecimals(address token)\n        internal\n        pure\n        returns (uint8 decimals)\n    {\n        if (token == WETH_ADDRESS) {\n            return 18;\n        }\n        bytes32 seed = keccak256(abi.encodePacked(token));\n        return uint8(uint256(seed) % (MAX_DECIMALS - MIN_DECIMALS)) + MIN_DECIMALS;\n    }\n\n    function getDeterministicRate(bytes32 salt, address sellToken, address buyToken)\n        internal\n        pure\n        returns (uint256 rate)\n    {\n        bytes32 seed = keccak256(abi.encodePacked(salt, sellToken, buyToken));\n        return uint256(seed) % (MAX_RATE - MIN_RATE) + MIN_RATE;\n    }\n}\n\ncontract TestDeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n}\n\ncontract FailTrigger {\n\n    // Give this address a balance to force operations to fail.\n    address payable constant public FAILURE_ADDRESS = 0xe9dB8717BC5DFB20aaf538b4a5a02B7791FF430C;\n\n    // Funds `FAILURE_ADDRESS`.\n    function enableFailTrigger() external payable {\n        FAILURE_ADDRESS.transfer(msg.value);\n    }\n\n    function _revertIfShouldFail() internal view {\n        if (FAILURE_ADDRESS.balance != 0) {\n            revert(\"FAIL_TRIGGERED\");\n        }\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchange is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private BASE_SALT = 0x1d6a6a0506b0b4a554b907a4c29d9f4674e461989d9c1921feb17b26716385ab;\n\n    address public tokenAddress;\n    bytes32 public salt;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n        salt = keccak256(abi.encodePacked(BASE_SALT, _tokenAddress));\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenInputPrice()`.\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            ethSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenOutputPrice()`.\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            tokensBought\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthInputPrice()`.\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            tokensSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthOutputPrice()`.\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            ethBought\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapV2Router01 is\n    IUniswapV2Router01,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xadc7fcb33c735913b8635927e66896b356a53a912ab2ceff929e60a04b53b3c1;\n\n    // Deterministic `IUniswapV2Router01.getAmountsOut()`.\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < path.length - 1; ++i) {\n            amounts[i + 1] = LibDeterministicQuotes.getDeterministicSellQuote(\n                SALT,\n                path[i],\n                path[i + 1],\n                amounts[i]\n            );\n        }\n    }\n\n    // Deterministic `IUniswapV2Router01.getAmountsInt()`.\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[path.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; --i) {\n            amounts[i - 1] = LibDeterministicQuotes.getDeterministicBuyQuote(\n                SALT,\n                path[i - 1],\n                path[i],\n                amounts[i]\n            );\n        }\n    }\n}\n\n\n// solhint-disable space-after-comma\ncontract TestERC20BridgeSamplerKyberNetwork is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0x0ff3ca9d46195c39f9a12afb74207b4970349fb3cfb1e459bbf170298d326bc7;\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n    enum ProcessWithRate {NotRequired, Required}\n\n    // IKyberHintHandler\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType /* ethToTokenType */,\n        bytes32[] calldata /* ethToTokenReserveIds */,\n        uint256[] calldata /* ethToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenDest);\n    }\n\n    // IKyberHintHandler\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */,\n        address /* tokenDest  */,\n        TradeType /* EthToTokenType */,\n        bytes32[] calldata /* EthToTokenReserveIds */,\n        uint256[] calldata /* EthToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    // IKyberHintHandler\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        )\n    {\n        reserveIds = new bytes32[](1);\n        reserveIds[0] = bytes32(uint256(1));\n        splitValuesBps = new uint256[](0);\n        processWithRate = ProcessWithRate.NotRequired;\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRateAfterFee()`.\n    function getExpectedRateAfterFee(\n        address fromToken,\n        address toToken,\n        uint256 /* srcQty */,\n        uint256 /* fee */,\n        bytes calldata /* hint */\n    )\n        external\n        view\n        returns\n        (uint256 expectedRate)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRate()`.\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerEth2Dai is\n    IEth2Dai,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xb713b61bb9bb2958a0f5d1534b21e94fc68c4c0c034b0902ed844f2f6cd1b4f7;\n\n    // Deterministic `IEth2Dai.getBuyAmount()`.\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        override\n        external\n        view\n        returns (uint256 buyAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            SALT,\n            payToken,\n            buyToken,\n            payAmount\n        );\n    }\n\n    // Deterministic `IEth2Dai.getPayAmount()`.\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        override\n        external\n        view\n        returns (uint256 payAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            SALT,\n            payToken,\n            buyToken,\n            buyAmount\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSampler is\n    ERC20BridgeSampler,\n    FailTrigger\n{\n    TestERC20BridgeSamplerUniswapV2Router01 public uniswapV2Router;\n    TestERC20BridgeSamplerEth2Dai public eth2Dai;\n    TestERC20BridgeSamplerKyberNetwork public kyber;\n\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n\n    constructor() public ERC20BridgeSampler(IEtherTokenV06(address(0))) {\n        uniswapV2Router = new TestERC20BridgeSamplerUniswapV2Router01();\n        eth2Dai = new TestERC20BridgeSamplerEth2Dai();\n        kyber = new TestERC20BridgeSamplerKyberNetwork();\n    }\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n    }\n\n    // Overridden to return deterministic states.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory,\n        IExchange\n    )\n        override\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        return uint256(keccak256(abi.encode(order.salt))) % order.takerAmount;\n    }\n}\n"
        },
        "../src/ERC20BridgeSampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        BancorSampler(weth)\n        CurveSampler(weth)\n        KyberSampler(weth)\n        MooniswapSampler(weth)\n        UniswapSampler(weth)\n    { }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        payable\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "../src/BalancerSampler.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerSampler is\n    MixinBalancer,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancer(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancer(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolAddress),\n                buyTokenData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        IERC20TokenV06 tokenIn,\n        uint tokenAmountIn,\n        IERC20TokenV06 tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n\ncontract MixinBalancer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeBalancer(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        (IBalancerPool pool) = abi.decode(\n            bridgeData,\n            (IBalancerPool)\n        );\n        sellToken.approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n        // Sell all of this contract's `sellToken` token balance.\n        (boughtAmount,) = pool.swapExactAmountIn(\n            sellToken,  // tokenIn\n            sellAmount, // tokenAmountIn\n            buyToken,   // tokenOut\n            1,          // minAmountOut\n            uint256(-1) // maxPrice\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "../src/SwapRevertSampler.sol": {
            "id": 18,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            gasUsed[i] = _gasUsed[0];\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil2(\n                makerTokenAmounts[i],\n                buyAmounts[0],\n                sellAmounts[0]\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}"
        },
        "../src/GasOverhead.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 0;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 0;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        },
        "../src/BalancerV2Sampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerV2Sampler is\n    MixinBalancerV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancerV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancerV2(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolInfo),\n                buyTokenData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBalancerV2Vault {\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is given in (the number of tokens to send to the Pool is known), returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is given out (the number of tokens to take from the Pool is known), returns the amount of\n     * tokens sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     * For full documentation see https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\n     */\n    function swap(\n        SingleSwap calldata request,\n        FundManagement calldata funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IERC20TokenV06 assetIn;\n        IERC20TokenV06 assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n}\n\ncontract MixinBalancerV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct BalancerV2BridgeData {\n        IBalancerV2Vault vault;\n        bytes32 poolId;\n    }\n\n    function _tradeBalancerV2(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        BalancerV2BridgeData memory data = abi.decode(bridgeData, (BalancerV2BridgeData));\n\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        sellToken.approveIfBelow(address(data.vault), sellAmount);\n\n        // Sell the entire sellAmount\n        IBalancerV2Vault.SingleSwap memory request = IBalancerV2Vault.SingleSwap({\n            poolId: data.poolId,\n            kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n            assetIn: sellToken,\n            assetOut: buyToken,\n            amount: sellAmount, // amount in\n            userData: \"\"\n        });\n\n        IBalancerV2Vault.FundManagement memory funds = IBalancerV2Vault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        boughtAmount = data.vault.swap(\n            request,\n            funds,\n            1, // min amount out\n            block.timestamp // expires after this block\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "../src/BancorSampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    CompilerHack,\n    MixinBancor,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinBancor(weth)\n    { }\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    function sampleSwapFromBancor(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBancorInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address bancorNetwork,\n            address[] memory path,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n        }\n\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(bancorNetwork, path),\n                getSwapQuoteCallback: this.sampleSwapFromBancor\n            }),\n            takerTokenAmounts\n        );\n\n        return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IBancorNetwork {\n    function convertByPath(\n        IERC20TokenV06[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    )\n        external\n        payable\n        returns (uint256);\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n\n\ncontract MixinBancor {\n\n    /// @dev Bancor ETH pseudo-address.\n    IERC20TokenV06 constant public BANCOR_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeBancor(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeBancorInternal(WETH, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeBancorInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        IBancorNetwork bancorNetworkAddress;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (\n                bancorNetworkAddress,\n                _path\n            ) = abi.decode(bridgeData, (IBancorNetwork, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinBancor/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken ||\n            (path[path.length - 1] == BANCOR_ETH_ADDRESS && buyToken == weth),\n            \"MixinBancor/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n\n        uint256 payableAmount = 0;\n        // If it's ETH in the path then withdraw from WETH\n        // The Bancor path will have ETH as the 0xeee address\n        // Bancor expects to be paid in ETH not WETH\n        if (path[0] == BANCOR_ETH_ADDRESS) {\n            weth.withdraw(sellAmount);\n            payableAmount = sellAmount;\n        } else {\n            // Grant an allowance to the Bancor Network.\n            LibERC20TokenV06.approveIfBelow(\n                path[0],\n                address(bancorNetworkAddress),\n                sellAmount\n            );\n        }\n\n        // Convert the tokens\n        boughtAmount = bancorNetworkAddress.convertByPath{value: payableAmount}(\n            path, // path originating with source token and terminating in destination token\n            sellAmount, // amount of source token to trade\n            1, // minimum amount of destination token expected to receive\n            address(this), // beneficiary\n            address(0), // affiliateAccount; no fee paid\n            0 // affiliateFee; no fee paid\n        );\n        if (path[path.length - 1] == BANCOR_ETH_ADDRESS) {\n            weth.deposit{value: boughtAmount}();\n        }\n\n        return boughtAmount;\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "../src/CurveSampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract CurveSampler is\n    MixinCurve,\n    SwapRevertSampler\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinCurve(weth)\n    { }\n\n    function sampleSwapFromCurve(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeCurveInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(curveInfo),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(curveInfo),\n                buyTokenData: abi.encode(\n                    CurveBridgeData({\n                        curveAddress: curveInfo.curveAddress,\n                        exchangeFunctionSelector: curveInfo.exchangeFunctionSelector,\n                        fromCoinIdx: curveInfo.toCoinIdx,\n                        toCoinIdx: curveInfo.fromCoinIdx\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ncontract MixinCurve {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    function _tradeCurve(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeCurveInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeCurveInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n        uint256 payableAmount;\n        if (sellToken == weth) {\n            payableAmount = sellAmount;\n            weth.withdraw(sellAmount);\n        } else {\n            sellToken.approveIfBelow(data.curveAddress, sellAmount);\n        }\n\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n        (bool success, bytes memory resultData) =\n            data.curveAddress.call{value: payableAmount}(abi.encodeWithSelector(\n                data.exchangeFunctionSelector,\n                data.fromCoinIdx,\n                data.toCoinIdx,\n                // dx\n                sellAmount,\n                // min dy\n                1\n            ));\n        if (!success) {\n            resultData.rrevert();\n        }\n\n        if (buyToken == weth) {\n            boughtAmount = address(this).balance;\n            weth.deposit{ value: boughtAmount }();\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "../src/DODOSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ncontract DODOSampler is\n    MixinDodo,\n    SwapRevertSampler\n{\n\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    function sampleSwapFromDodo(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodo(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts.helper, pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts.helper, pool, sellBase),\n                buyTokenData: abi.encode(opts.helper, pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODO {\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n}\n\n\ninterface IDODOHelper {\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 amount\n    )\n        external\n        view\n        returns (uint256);\n}\n\n\ncontract MixinDodo {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodo(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOHelper helper, IDODO pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOHelper, IDODO, bool));\n\n        // Grant the Dodo pool contract an allowance to sell the first token.\n        sellToken.approveIfBelow(address(pool), sellAmount);\n\n        if (isSellBase) {\n            // Sell the Base token directly against the contract\n            boughtAmount = pool.sellBaseToken(\n                // amount to sell\n                sellAmount,\n                // min receive amount\n                1,\n                new bytes(0)\n            );\n        } else {\n            // Need to re-calculate the sell quote amount into buyBase\n            boughtAmount = helper.querySellQuoteToken(\n                pool,\n                sellAmount\n            );\n            pool.buyBaseToken(\n                // amount to buy\n                boughtAmount,\n                // max pay amount\n                sellAmount,\n                new bytes(0)\n            );\n        }\n\n        return boughtAmount;\n    }\n}\n"
        },
        "../src/DODOV2Sampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ncontract DODOV2Sampler is\n    MixinDodoV2,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    function sampleSwapFromDodoV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodoV2(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool, sellBase),\n                buyTokenData: abi.encode(pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODOV2 {\n    function sellBase(address recipient)\n        external\n        returns (uint256);\n\n    function sellQuote(address recipient)\n        external\n        returns (uint256);\n}\n\n\ncontract MixinDodoV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodoV2(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOV2 pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOV2, bool));\n\n        // Transfer the tokens into the pool\n        sellToken.compatTransfer(address(pool), sellAmount);\n\n        boughtAmount = isSellBase ?\n            pool.sellBase(address(this))\n            : pool.sellQuote(address(this));\n    }\n}\n"
        },
        "../src/Eth2DaiSampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract Eth2DaiSampler is\n    MixinOasis,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromOasis(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeOasis(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol": {
            "id": 50,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IOasis {\n\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\n    /// @param sellToken The token being sold.\n    /// @param sellAmount The amount of `sellToken` token being sold.\n    /// @param buyToken The token being bought.\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\n    /// @return boughtAmount Amount of `buyToken` bought.\n    function sellAllAmount(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        uint256 minBoughtAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinOasis {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeOasis(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        (IOasis oasis) = abi.decode(bridgeData, (IOasis));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(\n            address(oasis),\n            sellAmount\n        );\n        // Try to sell all of this contract's `sellToken` token balance.\n        boughtAmount = oasis.sellAllAmount(\n            sellToken,\n            sellAmount,\n            buyToken,\n            // min fill amount\n            1\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "../src/KyberSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "../src/interfaces/IKyberNetwork.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n"
        },
        "../src/KyberDmmSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n"
        },
        "../src/LiquidityProviderSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract LiquidityProviderSampler is\n    MixinZeroExBridge,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromLiquidityProvider(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeZeroExBridge(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(providerAddress, lpData),\n                buyTokenData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol": {
            "id": 55,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../../vendor/ILiquidityProvider.sol\";\n\n\ncontract MixinZeroExBridge {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    function _tradeZeroExBridge(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (ILiquidityProvider provider, bytes memory lpData) =\n            abi.decode(bridgeData, (ILiquidityProvider, bytes));\n        // Trade the good old fashioned way\n        sellToken.compatTransfer(\n            address(provider),\n            sellAmount\n        );\n        boughtAmount = provider.sellTokenForToken(\n            sellToken,\n            buyToken,\n            address(this), // recipient\n            1, // minBuyAmount\n            lpData\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 56,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "../src/MakerPSMSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n"
        },
        "../src/MStableSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract MStableSampler is\n    MixinMStable,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromMStable(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMStable(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IMStable {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address recipient\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinMStable {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeMStable(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMStable mstable) = abi.decode(bridgeData, (IMStable));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(address(mstable), sellAmount);\n\n        boughtAmount = mstable.swap(\n            sellToken,\n            buyToken,\n            sellAmount,\n            // Minimum buy amount.\n            1,\n            address(this)\n        );\n    }\n}\n"
        },
        "../src/MooniswapSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns(address);\n}\n\ncontract MooniswapSampler is\n    MixinMooniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinMooniswap(weth)\n    { }\n\n    function sampleSwapFromMooniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMooniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        // TODO this needs to be ETH\n        pool = IMooniswapRegistry(registry).pools(takerToken, makerToken);\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        pool = IMooniswapRegistry(registry).pools(takerToken, makerToken);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\n/// @dev Moooniswap pool interface.\ninterface IMooniswapPool {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address referrer\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\n/// @dev BridgeAdapter mixin for mooniswap.\ncontract MixinMooniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20TokenV06 for IEtherTokenV06;\n\n    /// @dev WETH token.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeMooniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        return _tradeMooniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeMooniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMooniswapPool pool) = abi.decode(bridgeData, (IMooniswapPool));\n\n        // Convert WETH to ETH.\n        uint256 ethValue = 0;\n        if (sellToken == weth) {\n            weth.withdraw(sellAmount);\n            ethValue = sellAmount;\n        } else {\n            // Grant the pool an allowance.\n            sellToken.approveIfBelow(\n                address(pool),\n                sellAmount\n            );\n        }\n\n        boughtAmount = pool.swap{value: ethValue}(\n            sellToken == weth ? IERC20TokenV06(0) : sellToken,\n            buyToken == weth ? IERC20TokenV06(0) : buyToken,\n            sellAmount,\n            1,\n            address(0)\n        );\n\n        // Wrap ETH to WETH.\n        if (buyToken == weth) {\n            weth.deposit{value:boughtAmount}();\n        }\n    }\n}\n"
        },
        "../src/NativeOrderSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../src/ShellSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract ShellSampler is\n    MixinShell,\n    SwapRevertSampler\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    function sampleSwapFromShell(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeShell(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol": {
            "id": 51,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IShell {\n\n    function originSwap(\n        IERC20TokenV06 from,\n        IERC20TokenV06 to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\ncontract MixinShell {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeShell(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IShell pool = abi.decode(bridgeData, (IShell));\n\n        // Grant the Shell contract an allowance to sell the first token.\n        IERC20TokenV06(sellToken).approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n\n        boughtAmount = pool.originSwap(\n            sellToken,\n            buyToken,\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // deadline\n            block.timestamp + 1\n        );\n        return boughtAmount;\n    }\n}\n"
        },
        "../src/TwoHopSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 intermediateAssetAmount,\n            uint256 buyAmount\n        )\n    {\n        intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, intermediateAssetAmount, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "../src/UniswapSampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": {
            "id": 52,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n"
        },
        "../src/UniswapV2Sampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract UniswapV2Sampler is\n    MixinUniswapV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromUniswapV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV2(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, path),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, path),\n                buyTokenData: abi.encode(router, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "../src/interfaces/IUniswapV2Router01.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol": {
            "id": 53,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    UniswapV2\n*/\ninterface IUniswapV2Router02 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        IERC20TokenV06[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinUniswapV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV2(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapV2Router02 router;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinUniswapV2/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken,\n            \"MixinUniswapV2/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n        // Grant the Uniswap router an allowance to sell the first token.\n        path[0].approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n"
        },
        "../src/UniswapV3Sampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler,\n    SamplerUtils\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        // TODO rework to not use single value array\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                (\n                    uint256[] memory _gasUsed,\n                    uint256[] memory _takerTokenAmounts\n                ) = _sampleSwapApproximateBuys(\n                    SwapRevertSamplerBuyQuoteOpts({\n                        sellToken: address(path[0]),\n                        buyToken: address(path[path.length - 1]),\n                        sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[j])),\n                        buyTokenData: abi.encode(\n                            router,\n                            _toUniswapPath(\n                                reversedPath,\n                                _reversePoolPath(poolPaths[j])\n                            )\n                        ),\n                        getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                    }),\n                    _toSingleValueArray(makerTokenAmounts[i])\n                );\n\n                // We can go from high to low here\n                if (takerTokenAmounts[i] == 0 || takerTokenAmounts[i] >= _takerTokenAmounts[0]) {\n                    takerTokenAmounts[i] = _takerTokenAmounts[0];\n                    gasUsed[i] = _gasUsed[0];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                }\n            }\n            // Break early if we can't complete the buys.\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": {
            "id": 54,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n"
        },
        "../src/SamplerUtils.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n\ncontract SamplerUtils {\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "../src/UtilitySampler.sol": {
            "id": 23,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getCode(address addr)\n        public\n        view\n        returns (bytes memory code)\n    {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(addr, add(code, 0x20), 0, size)\n        }\n    }\n}"
        },
        "../src/interfaces/IEth2Dai.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
        }
    },
    "sourceCodes": {
        "./TestERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/ERC20BridgeSampler.sol\";\nimport \"../src/interfaces/IEth2Dai.sol\";\nimport \"../src/interfaces/IKyberNetwork.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\nlibrary LibDeterministicQuotes {\n\n    address private constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    uint256 private constant RATE_DENOMINATOR = 1 ether;\n    uint256 private constant MIN_RATE = RATE_DENOMINATOR / 100;\n    uint256 private constant MAX_RATE = 100 * RATE_DENOMINATOR;\n    uint8 private constant MIN_DECIMALS = 4;\n    uint8 private constant MAX_DECIMALS = 20;\n\n    function getDeterministicSellQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount\n    )\n        internal\n        pure\n        returns (uint256 buyAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return sellAmount * rate * buyBase / sellBase / RATE_DENOMINATOR;\n    }\n\n    function getDeterministicBuyQuote(\n        bytes32 salt,\n        address sellToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        internal\n        pure\n        returns (uint256 sellAmount)\n    {\n        uint256 sellBase = uint256(10) ** getDeterministicTokenDecimals(sellToken);\n        uint256 buyBase = uint256(10) ** getDeterministicTokenDecimals(buyToken);\n        uint256 rate = getDeterministicRate(salt, sellToken, buyToken);\n        return buyAmount * RATE_DENOMINATOR * sellBase / rate / buyBase;\n    }\n\n    function getDeterministicTokenDecimals(address token)\n        internal\n        pure\n        returns (uint8 decimals)\n    {\n        if (token == WETH_ADDRESS) {\n            return 18;\n        }\n        bytes32 seed = keccak256(abi.encodePacked(token));\n        return uint8(uint256(seed) % (MAX_DECIMALS - MIN_DECIMALS)) + MIN_DECIMALS;\n    }\n\n    function getDeterministicRate(bytes32 salt, address sellToken, address buyToken)\n        internal\n        pure\n        returns (uint256 rate)\n    {\n        bytes32 seed = keccak256(abi.encodePacked(salt, sellToken, buyToken));\n        return uint256(seed) % (MAX_RATE - MIN_RATE) + MIN_RATE;\n    }\n}\n\ncontract TestDeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n}\n\ncontract FailTrigger {\n\n    // Give this address a balance to force operations to fail.\n    address payable constant public FAILURE_ADDRESS = 0xe9dB8717BC5DFB20aaf538b4a5a02B7791FF430C;\n\n    // Funds `FAILURE_ADDRESS`.\n    function enableFailTrigger() external payable {\n        FAILURE_ADDRESS.transfer(msg.value);\n    }\n\n    function _revertIfShouldFail() internal view {\n        if (FAILURE_ADDRESS.balance != 0) {\n            revert(\"FAIL_TRIGGERED\");\n        }\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapExchange is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private BASE_SALT = 0x1d6a6a0506b0b4a554b907a4c29d9f4674e461989d9c1921feb17b26716385ab;\n\n    address public tokenAddress;\n    bytes32 public salt;\n\n    constructor(address _tokenAddress) public {\n        tokenAddress = _tokenAddress;\n        salt = keccak256(abi.encodePacked(BASE_SALT, _tokenAddress));\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenInputPrice()`.\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            ethSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getEthToTokenOutputPrice()`.\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            tokensBought\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthInputPrice()`.\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            salt,\n            tokenAddress,\n            _getWethAddress(),\n            tokensSold\n        );\n    }\n\n    // Deterministic `IUniswapExchangeQuotes.getTokenToEthOutputPrice()`.\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            salt,\n            _getWethAddress(),\n            tokenAddress,\n            ethBought\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerUniswapV2Router01 is\n    IUniswapV2Router01,\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xadc7fcb33c735913b8635927e66896b356a53a912ab2ceff929e60a04b53b3c1;\n\n    // Deterministic `IUniswapV2Router01.getAmountsOut()`.\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[0] = amountIn;\n        for (uint256 i = 0; i < path.length - 1; ++i) {\n            amounts[i + 1] = LibDeterministicQuotes.getDeterministicSellQuote(\n                SALT,\n                path[i],\n                path[i + 1],\n                amounts[i]\n            );\n        }\n    }\n\n    // Deterministic `IUniswapV2Router01.getAmountsInt()`.\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        override\n        external\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length >= 2, \"PATH_TOO_SHORT\");\n        _revertIfShouldFail();\n        amounts = new uint256[](path.length);\n        amounts[path.length - 1] = amountOut;\n        for (uint256 i = path.length - 1; i > 0; --i) {\n            amounts[i - 1] = LibDeterministicQuotes.getDeterministicBuyQuote(\n                SALT,\n                path[i - 1],\n                path[i],\n                amounts[i]\n            );\n        }\n    }\n}\n\n\n// solhint-disable space-after-comma\ncontract TestERC20BridgeSamplerKyberNetwork is\n    TestDeploymentConstants,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0x0ff3ca9d46195c39f9a12afb74207b4970349fb3cfb1e459bbf170298d326bc7;\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n    enum ProcessWithRate {NotRequired, Required}\n\n    // IKyberHintHandler\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType /* ethToTokenType */,\n        bytes32[] calldata /* ethToTokenReserveIds */,\n        uint256[] calldata /* ethToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenDest);\n    }\n\n    // IKyberHintHandler\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType /* tokenToEthType */,\n        bytes32[] calldata /* tokenToEthReserveIds */,\n        uint256[] calldata /* tokenToEthSplits */,\n        address /* tokenDest  */,\n        TradeType /* EthToTokenType */,\n        bytes32[] calldata /* EthToTokenReserveIds */,\n        uint256[] calldata /* EthToTokenSplits */\n    ) external view returns (bytes memory hint)\n    {\n        return abi.encode(tokenSrc);\n    }\n\n    // IKyberHintHandler\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        )\n    {\n        reserveIds = new bytes32[](1);\n        reserveIds[0] = bytes32(uint256(1));\n        splitValuesBps = new uint256[](0);\n        processWithRate = ProcessWithRate.NotRequired;\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRateAfterFee()`.\n    function getExpectedRateAfterFee(\n        address fromToken,\n        address toToken,\n        uint256 /* srcQty */,\n        uint256 /* fee */,\n        bytes calldata /* hint */\n    )\n        external\n        view\n        returns\n        (uint256 expectedRate)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n\n    // Deterministic `IKyberNetworkProxy.getExpectedRate()`.\n    function getExpectedRate(\n        address fromToken,\n        address toToken,\n        uint256\n    )\n        external\n        view\n        returns (uint256 expectedRate, uint256)\n    {\n        _revertIfShouldFail();\n        fromToken = fromToken == ETH_ADDRESS ? _getWethAddress() : fromToken;\n        toToken = toToken == ETH_ADDRESS ? _getWethAddress() : toToken;\n        expectedRate = LibDeterministicQuotes.getDeterministicRate(\n            SALT,\n            fromToken,\n            toToken\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSamplerEth2Dai is\n    IEth2Dai,\n    FailTrigger\n{\n    bytes32 constant private SALT = 0xb713b61bb9bb2958a0f5d1534b21e94fc68c4c0c034b0902ed844f2f6cd1b4f7;\n\n    // Deterministic `IEth2Dai.getBuyAmount()`.\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        override\n        external\n        view\n        returns (uint256 buyAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicSellQuote(\n            SALT,\n            payToken,\n            buyToken,\n            payAmount\n        );\n    }\n\n    // Deterministic `IEth2Dai.getPayAmount()`.\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        override\n        external\n        view\n        returns (uint256 payAmount)\n    {\n        _revertIfShouldFail();\n        return LibDeterministicQuotes.getDeterministicBuyQuote(\n            SALT,\n            payToken,\n            buyToken,\n            buyAmount\n        );\n    }\n}\n\n\ncontract TestERC20BridgeSampler is\n    ERC20BridgeSampler,\n    FailTrigger\n{\n    TestERC20BridgeSamplerUniswapV2Router01 public uniswapV2Router;\n    TestERC20BridgeSamplerEth2Dai public eth2Dai;\n    TestERC20BridgeSamplerKyberNetwork public kyber;\n\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n\n    constructor() public ERC20BridgeSampler(IEtherTokenV06(address(0))) {\n        uniswapV2Router = new TestERC20BridgeSamplerUniswapV2Router01();\n        eth2Dai = new TestERC20BridgeSamplerEth2Dai();\n        kyber = new TestERC20BridgeSamplerKyberNetwork();\n    }\n\n    // Creates Uniswap exchange contracts for tokens.\n    function createTokenExchanges(address[] calldata tokenAddresses)\n        external\n    {\n    }\n\n    // Overridden to return deterministic states.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory,\n        IExchange\n    )\n        override\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        return uint256(keccak256(abi.encode(order.salt))) % order.takerAmount;\n    }\n}\n",
        "../src/ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        BancorSampler(weth)\n        CurveSampler(weth)\n        KyberSampler(weth)\n        MooniswapSampler(weth)\n        UniswapSampler(weth)\n    { }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        payable\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "../src/BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerSampler is\n    MixinBalancer,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancer(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancer(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolAddress),\n                buyTokenData: abi.encode(poolAddress),\n                getSwapQuoteCallback: this.sampleSwapFromBalancer\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IBalancerPool {\n    /// @dev Sell `tokenAmountIn` of `tokenIn` and receive `tokenOut`.\n    /// @param tokenIn The token being sold\n    /// @param tokenAmountIn The amount of `tokenIn` to sell.\n    /// @param tokenOut The token being bought.\n    /// @param minAmountOut The minimum amount of `tokenOut` to buy.\n    /// @param maxPrice The maximum value for `spotPriceAfter`.\n    /// @return tokenAmountOut The amount of `tokenOut` bought.\n    /// @return spotPriceAfter The new marginal spot price of the given\n    ///         token pair for this pool.\n    function swapExactAmountIn(\n        IERC20TokenV06 tokenIn,\n        uint tokenAmountIn,\n        IERC20TokenV06 tokenOut,\n        uint minAmountOut,\n        uint maxPrice\n    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n}\n\ncontract MixinBalancer {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeBalancer(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        (IBalancerPool pool) = abi.decode(\n            bridgeData,\n            (IBalancerPool)\n        );\n        sellToken.approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n        // Sell all of this contract's `sellToken` token balance.\n        (boughtAmount,) = pool.swapExactAmountIn(\n            sellToken,  // tokenIn\n            sellAmount, // tokenAmountIn\n            buyToken,   // tokenOut\n            1,          // minAmountOut\n            uint256(-1) // maxPrice\n        );\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "../src/SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            gasUsed[i] = _gasUsed[0];\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil2(\n                makerTokenAmounts[i],\n                buyAmounts[0],\n                sellAmounts[0]\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}",
        "../src/GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 0;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 0;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n",
        "../src/BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract BalancerV2Sampler is\n    MixinBalancerV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromBalancerV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBalancerV2(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2BridgeData memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(poolInfo),\n                buyTokenData: abi.encode(poolInfo),\n                getSwapQuoteCallback: this.sampleSwapFromBalancerV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBalancerV2.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBalancerV2Vault {\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is given in (the number of tokens to send to the Pool is known), returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is given out (the number of tokens to take from the Pool is known), returns the amount of\n     * tokens sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     * For full documentation see https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\n     */\n    function swap(\n        SingleSwap calldata request,\n        FundManagement calldata funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IERC20TokenV06 assetIn;\n        IERC20TokenV06 assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n}\n\ncontract MixinBalancerV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct BalancerV2BridgeData {\n        IBalancerV2Vault vault;\n        bytes32 poolId;\n    }\n\n    function _tradeBalancerV2(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        BalancerV2BridgeData memory data = abi.decode(bridgeData, (BalancerV2BridgeData));\n\n        // Grant an allowance to the exchange to spend `fromTokenAddress` token.\n        sellToken.approveIfBelow(address(data.vault), sellAmount);\n\n        // Sell the entire sellAmount\n        IBalancerV2Vault.SingleSwap memory request = IBalancerV2Vault.SingleSwap({\n            poolId: data.poolId,\n            kind: IBalancerV2Vault.SwapKind.GIVEN_IN,\n            assetIn: sellToken,\n            assetOut: buyToken,\n            amount: sellAmount, // amount in\n            userData: \"\"\n        });\n\n        IBalancerV2Vault.FundManagement memory funds = IBalancerV2Vault.FundManagement({\n            sender: address(this),\n            fromInternalBalance: false,\n            recipient: payable(address(this)),\n            toInternalBalance: false\n        });\n\n        boughtAmount = data.vault.swap(\n            request,\n            funds,\n            1, // min amount out\n            block.timestamp // expires after this block\n        );\n        return boughtAmount;\n    }\n}\n",
        "../src/BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    CompilerHack,\n    MixinBancor,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinBancor(weth)\n    { }\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    function sampleSwapFromBancor(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeBancorInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address bancorNetwork,\n            address[] memory path,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n        }\n\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(bancorNetwork, path),\n                getSwapQuoteCallback: this.sampleSwapFromBancor\n            }),\n            takerTokenAmounts\n        );\n\n        return (bancorNetwork, path, gasUsed, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IBancorNetwork {\n    function convertByPath(\n        IERC20TokenV06[] calldata _path,\n        uint256 _amount,\n        uint256 _minReturn,\n        address _beneficiary,\n        address _affiliateAccount,\n        uint256 _affiliateFee\n    )\n        external\n        payable\n        returns (uint256);\n    function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n    function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n\n\ncontract MixinBancor {\n\n    /// @dev Bancor ETH pseudo-address.\n    IERC20TokenV06 constant public BANCOR_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeBancor(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeBancorInternal(WETH, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeBancorInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        IBancorNetwork bancorNetworkAddress;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (\n                bancorNetworkAddress,\n                _path\n            ) = abi.decode(bridgeData, (IBancorNetwork, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinBancor/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken ||\n            (path[path.length - 1] == BANCOR_ETH_ADDRESS && buyToken == weth),\n            \"MixinBancor/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n\n        uint256 payableAmount = 0;\n        // If it's ETH in the path then withdraw from WETH\n        // The Bancor path will have ETH as the 0xeee address\n        // Bancor expects to be paid in ETH not WETH\n        if (path[0] == BANCOR_ETH_ADDRESS) {\n            weth.withdraw(sellAmount);\n            payableAmount = sellAmount;\n        } else {\n            // Grant an allowance to the Bancor Network.\n            LibERC20TokenV06.approveIfBelow(\n                path[0],\n                address(bancorNetworkAddress),\n                sellAmount\n            );\n        }\n\n        // Convert the tokens\n        boughtAmount = bancorNetworkAddress.convertByPath{value: payableAmount}(\n            path, // path originating with source token and terminating in destination token\n            sellAmount, // amount of source token to trade\n            1, // minimum amount of destination token expected to receive\n            address(this), // beneficiary\n            address(0), // affiliateAccount; no fee paid\n            0 // affiliateFee; no fee paid\n        );\n        if (path[path.length - 1] == BANCOR_ETH_ADDRESS) {\n            weth.deposit{value: boughtAmount}();\n        }\n\n        return boughtAmount;\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "../src/CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract CurveSampler is\n    MixinCurve,\n    SwapRevertSampler\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinCurve(weth)\n    { }\n\n    function sampleSwapFromCurve(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeCurveInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(curveInfo),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param takerToken The taker token to sell.\n    /// @param makerToken The maker token to buy.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveBridgeData memory curveInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(curveInfo),\n                buyTokenData: abi.encode(\n                    CurveBridgeData({\n                        curveAddress: curveInfo.curveAddress,\n                        exchangeFunctionSelector: curveInfo.exchangeFunctionSelector,\n                        fromCoinIdx: curveInfo.toCoinIdx,\n                        toCoinIdx: curveInfo.fromCoinIdx\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromCurve\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinCurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ncontract MixinCurve {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n\n    struct CurveBridgeData {\n        address curveAddress;\n        bytes4 exchangeFunctionSelector;\n        int128 fromCoinIdx;\n        int128 toCoinIdx;\n    }\n\n    function _tradeCurve(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeCurveInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeCurveInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data to get the Curve metadata.\n        CurveBridgeData memory data = abi.decode(bridgeData, (CurveBridgeData));\n        uint256 payableAmount;\n        if (sellToken == weth) {\n            payableAmount = sellAmount;\n            weth.withdraw(sellAmount);\n        } else {\n            sellToken.approveIfBelow(data.curveAddress, sellAmount);\n        }\n\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n        (bool success, bytes memory resultData) =\n            data.curveAddress.call{value: payableAmount}(abi.encodeWithSelector(\n                data.exchangeFunctionSelector,\n                data.fromCoinIdx,\n                data.toCoinIdx,\n                // dx\n                sellAmount,\n                // min dy\n                1\n            ));\n        if (!success) {\n            resultData.rrevert();\n        }\n\n        if (buyToken == weth) {\n            boughtAmount = address(this).balance;\n            weth.deposit{ value: boughtAmount }();\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../src/DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ncontract DODOSampler is\n    MixinDodo,\n    SwapRevertSampler\n{\n\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    function sampleSwapFromDodo(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodo(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts.helper, pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, gasUsed, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts.helper, pool, sellBase),\n                buyTokenData: abi.encode(opts.helper, pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodo\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodo.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODO {\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    )\n        external\n        returns (uint256);\n}\n\n\ninterface IDODOHelper {\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 amount\n    )\n        external\n        view\n        returns (uint256);\n}\n\n\ncontract MixinDodo {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodo(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOHelper helper, IDODO pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOHelper, IDODO, bool));\n\n        // Grant the Dodo pool contract an allowance to sell the first token.\n        sellToken.approveIfBelow(address(pool), sellAmount);\n\n        if (isSellBase) {\n            // Sell the Base token directly against the contract\n            boughtAmount = pool.sellBaseToken(\n                // amount to sell\n                sellAmount,\n                // min receive amount\n                1,\n                new bytes(0)\n            );\n        } else {\n            // Need to re-calculate the sell quote amount into buyBase\n            boughtAmount = helper.querySellQuoteToken(\n                pool,\n                sellAmount\n            );\n            pool.buyBaseToken(\n                // amount to buy\n                boughtAmount,\n                // max pay amount\n                sellAmount,\n                new bytes(0)\n            );\n        }\n\n        return boughtAmount;\n    }\n}\n",
        "../src/DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ncontract DODOV2Sampler is\n    MixinDodoV2,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    function sampleSwapFromDodoV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeDodoV2(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool, sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bool sellBase,\n            address pool,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, gasUsed, takerTokenAmounts);\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool, sellBase),\n                buyTokenData: abi.encode(pool, !sellBase),\n                getSwapQuoteCallback: this.sampleSwapFromDodoV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinDodoV2.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IDODOV2 {\n    function sellBase(address recipient)\n        external\n        returns (uint256);\n\n    function sellQuote(address recipient)\n        external\n        returns (uint256);\n}\n\n\ncontract MixinDodoV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeDodoV2(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IDODOV2 pool, bool isSellBase) =\n            abi.decode(bridgeData, (IDODOV2, bool));\n\n        // Transfer the tokens into the pool\n        sellToken.compatTransfer(address(pool), sellAmount);\n\n        boughtAmount = isSellBase ?\n            pool.sellBase(address(this))\n            : pool.sellQuote(address(this));\n    }\n}\n",
        "../src/Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract Eth2DaiSampler is\n    MixinOasis,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromOasis(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeOasis(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromOasis\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinOasis.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IOasis {\n\n    /// @dev Sell `sellAmount` of `sellToken` token and receive `buyToken` token.\n    /// @param sellToken The token being sold.\n    /// @param sellAmount The amount of `sellToken` token being sold.\n    /// @param buyToken The token being bought.\n    /// @param minBoughtAmount Minimum amount of `buyToken` token to buy.\n    /// @return boughtAmount Amount of `buyToken` bought.\n    function sellAllAmount(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        uint256 minBoughtAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinOasis {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeOasis(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        (IOasis oasis) = abi.decode(bridgeData, (IOasis));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(\n            address(oasis),\n            sellAmount\n        );\n        // Try to sell all of this contract's `sellToken` token balance.\n        boughtAmount = oasis.sellAllAmount(\n            sellToken,\n            sellAmount,\n            buyToken,\n            // min fill amount\n            1\n        );\n        return boughtAmount;\n    }\n}\n",
        "../src/KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract KyberSampler is\n    MixinKyber,\n    SwapRevertSampler\n{\n\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinKyber(weth)\n    { }\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    function sampleSwapFromKyber(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        KyberSamplerOpts memory opts = abi.decode(bridgeData, (KyberSamplerOpts));\n        return _tradeKyberInternal(\n            // these are Immutable in MixinKyber, since they are only set in constructor they must be passed in\n            IERC20TokenV06(KYBER_ETH_ADDRESS),\n            IEtherTokenV06(opts.weth),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            abi.encode(opts.networkProxy, opts.hint)\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed per sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return gasUsed Gas consumed for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes32 reserveId,\n            bytes memory hint,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, gasUsed, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(opts),\n                buyTokenData: abi.encode(opts),\n                getSwapQuoteCallback: this.sampleSwapFromKyber\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "../src/interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyber.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens\n    /// using a hint for the reserve.\n    /// @param sellToken Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyToken Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @param hint The hint for the selective inclusion (or exclusion) of reserves\n    /// @return boughtAmount Amount of tokens bought.\n    function tradeWithHint(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        IERC20TokenV06 buyToken,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address payable walletId,\n        bytes calldata hint\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ncontract MixinKyber {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Address indicating the trade is using ETH\n    IERC20TokenV06 private immutable KYBER_ETH_ADDRESS =\n        IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeKyber(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        return _tradeKyberInternal(KYBER_ETH_ADDRESS, WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeKyberInternal(\n        IERC20TokenV06 kyberEthAddress,\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IKyberNetworkProxy kyber, bytes memory hint) =\n            abi.decode(bridgeData, (IKyberNetworkProxy, bytes));\n\n        uint256 payableAmount = 0;\n        if (sellToken != weth) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            sellToken.approveIfBelow(\n                address(kyber),\n                sellAmount\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            payableAmount = sellAmount;\n            weth.withdraw(payableAmount);\n        }\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        boughtAmount = kyber.tradeWithHint{ value: payableAmount }(\n            // Input token.\n            sellToken == weth ? kyberEthAddress : sellToken,\n            // Sell amount.\n            sellAmount,\n            // Output token.\n            buyToken == weth ? kyberEthAddress : buyToken,\n            // Transfer to this contract\n            address(uint160(address(this))),\n            // Buy as much as possible.\n            uint256(-1),\n            // Lowest minimum conversion rate\n            1,\n            // No affiliate address.\n            address(0),\n            hint\n        );\n        // If receving ETH, wrap it to WETH.\n        if (buyToken == weth) {\n            weth.deposit{ value: boughtAmount }();\n        }\n        return boughtAmount;\n    }\n}\n",
        "../src/KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "../src/LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract LiquidityProviderSampler is\n    MixinZeroExBridge,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromLiquidityProvider(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeZeroExBridge(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        bytes memory lpData;\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(providerAddress, lpData),\n                buyTokenData: abi.encode(providerAddress, lpData),\n                getSwapQuoteCallback: this.sampleSwapFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinZeroExBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\nimport \"../../../vendor/ILiquidityProvider.sol\";\n\n\ncontract MixinZeroExBridge {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    function _tradeZeroExBridge(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (ILiquidityProvider provider, bytes memory lpData) =\n            abi.decode(bridgeData, (ILiquidityProvider, bytes));\n        // Trade the good old fashioned way\n        sellToken.compatTransfer(\n            address(provider),\n            sellAmount\n        );\n        boughtAmount = provider.sellTokenForToken(\n            sellToken,\n            buyToken,\n            address(this), // recipient\n            1, // minBuyAmount\n            lpData\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "../src/MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "../src/MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract MStableSampler is\n    MixinMStable,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromMStable(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMStable(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\ninterface IMStable {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address recipient\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n\ncontract MixinMStable {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeMStable(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMStable mstable) = abi.decode(bridgeData, (IMStable));\n\n        // Grant an allowance to the exchange to spend `sellToken` token.\n        sellToken.approveIfBelow(address(mstable), sellAmount);\n\n        boughtAmount = mstable.swap(\n            sellToken,\n            buyToken,\n            sellAmount,\n            // Minimum buy amount.\n            1,\n            address(this)\n        );\n    }\n}\n",
        "../src/MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IMooniswapRegistry {\n    function pools(address token1, address token2) external view returns(address);\n}\n\ncontract MooniswapSampler is\n    MixinMooniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinMooniswap(weth)\n    { }\n\n    function sampleSwapFromMooniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMooniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        // TODO this needs to be ETH\n        pool = IMooniswapRegistry(registry).pools(takerToken, makerToken);\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (address pool, uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        pool = IMooniswapRegistry(registry).pools(takerToken, makerToken);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n\n/// @dev Moooniswap pool interface.\ninterface IMooniswapPool {\n\n    function swap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        uint256 minBoughtAmount,\n        address referrer\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n}\n\n/// @dev BridgeAdapter mixin for mooniswap.\ncontract MixinMooniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibERC20TokenV06 for IEtherTokenV06;\n\n    /// @dev WETH token.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeMooniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n\n        return _tradeMooniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeMooniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IMooniswapPool pool) = abi.decode(bridgeData, (IMooniswapPool));\n\n        // Convert WETH to ETH.\n        uint256 ethValue = 0;\n        if (sellToken == weth) {\n            weth.withdraw(sellAmount);\n            ethValue = sellAmount;\n        } else {\n            // Grant the pool an allowance.\n            sellToken.approveIfBelow(\n                address(pool),\n                sellAmount\n            );\n        }\n\n        boughtAmount = pool.swap{value: ethValue}(\n            sellToken == weth ? IERC20TokenV06(0) : sellToken,\n            buyToken == weth ? IERC20TokenV06(0) : buyToken,\n            sellAmount,\n            1,\n            address(0)\n        );\n\n        // Wrap ETH to WETH.\n        if (buyToken == weth) {\n            weth.deposit{value:boughtAmount}();\n        }\n    }\n}\n",
        "../src/NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../src/ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract ShellSampler is\n    MixinShell,\n    SwapRevertSampler\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    function sampleSwapFromShell(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeShell(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(pool),\n                buyTokenData: abi.encode(pool),\n                getSwapQuoteCallback: this.sampleSwapFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinShell.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IShell {\n\n    function originSwap(\n        IERC20TokenV06 from,\n        IERC20TokenV06 to,\n        uint256 fromAmount,\n        uint256 minTargetAmount,\n        uint256 deadline\n    )\n        external\n        returns (uint256 toAmount);\n}\n\ncontract MixinShell {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeShell(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IShell pool = abi.decode(bridgeData, (IShell));\n\n        // Grant the Shell contract an allowance to sell the first token.\n        IERC20TokenV06(sellToken).approveIfBelow(\n            address(pool),\n            sellAmount\n        );\n\n        boughtAmount = pool.originSwap(\n            sellToken,\n            buyToken,\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // deadline\n            block.timestamp + 1\n        );\n        return boughtAmount;\n    }\n}\n",
        "../src/TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 intermediateAssetAmount,\n            uint256 buyAmount\n        )\n    {\n        intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, intermediateAssetAmount, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "../src/UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract UniswapSampler is\n    MixinUniswap,\n    SwapRevertSampler\n{\n\n    constructor(IEtherTokenV06 weth)\n        public\n        MixinUniswap(weth)\n    { }\n\n    function sampleSwapFromUniswap(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapInternal(\n            IEtherTokenV06(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(router),\n                buyTokenData: abi.encode(router),\n                getSwapQuoteCallback: this.sampleSwapFromUniswap\n            }),\n            makerTokenAmounts\n        );\n    }\n\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param token The token contract.\n    function getExchange(IERC20TokenV06 token)\n        external\n        view\n        returns (IUniswapExchange exchange);\n}\n\ninterface IUniswapExchange {\n\n    /// @dev Buys at least `minTokensBought` tokens with ETH and transfer them\n    ///      to `recipient`.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @return tokensBought Amount of tokens bought.\n    function ethToTokenTransferInput(\n        uint256 minTokensBought,\n        uint256 deadline,\n        address recipient\n    )\n        external\n        payable\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minEthBought` ETH with tokens.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minEthBought The minimum amount of ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @return ethBought Amount of tokens bought.\n    function tokenToEthSwapInput(\n        uint256 tokensSold,\n        uint256 minEthBought,\n        uint256 deadline\n    )\n        external\n        returns (uint256 ethBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token\n    ///      and transfer them to `recipient`.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param recipient Who to transfer the tokens to.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenTransferInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        address recipient,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n\n    /// @dev Buys at least `minTokensBought` tokens with the exchange token.\n    /// @param tokensSold Amount of tokens to sell.\n    /// @param minTokensBought The minimum number of tokens to buy.\n    /// @param minEthBought The minimum amount of intermediate ETH to buy.\n    /// @param deadline Time when this order expires.\n    /// @param buyToken The token being bought.\n    /// @return tokensBought Amount of tokens bought.\n    function tokenToTokenSwapInput(\n        uint256 tokensSold,\n        uint256 minTokensBought,\n        uint256 minEthBought,\n        uint256 deadline,\n        IERC20TokenV06 buyToken\n    )\n        external\n        returns (uint256 tokensBought);\n}\n\ncontract MixinUniswap {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    /// @dev Mainnet address of the WETH contract.\n    IEtherTokenV06 private immutable WETH;\n\n    constructor(IEtherTokenV06 weth)\n        public\n    {\n        WETH = weth;\n    }\n\n    function _tradeUniswap(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        _tradeUniswapInternal(WETH, sellToken, buyToken, sellAmount, bridgeData);\n    }\n\n    function _tradeUniswapInternal(\n        IEtherTokenV06 weth,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapExchangeFactory exchangeFactory =\n            abi.decode(bridgeData, (IUniswapExchangeFactory));\n\n        // Get the exchange for the token pair.\n        IUniswapExchange exchange = _getUniswapExchangeForTokenPair(\n            weth,\n            exchangeFactory,\n            sellToken,\n            buyToken\n        );\n\n        // Convert from WETH to a token.\n        if (sellToken == weth) {\n            // Unwrap the WETH.\n            weth.withdraw(sellAmount);\n            // Buy as much of `buyToken` token with ETH as possible\n            boughtAmount = exchange.ethToTokenTransferInput{ value: sellAmount }(\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Recipient is `this`.\n                address(this)\n            );\n\n        // Convert from a token to WETH.\n        } else if (buyToken == weth) {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much ETH with `sellToken` token as possible.\n            boughtAmount = exchange.tokenToEthSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Expires after this block.\n                block.timestamp\n            );\n            // Wrap the ETH.\n            weth.deposit{ value: boughtAmount }();\n        // Convert from one token to another.\n        } else {\n            // Grant the exchange an allowance.\n            sellToken.approveIfBelow(\n                address(exchange),\n                sellAmount\n            );\n            // Buy as much `buyToken` token with `sellToken` token\n            boughtAmount = exchange.tokenToTokenSwapInput(\n                // Sell all tokens we hold.\n                sellAmount,\n                // Minimum buy amount.\n                1,\n                // Must buy at least 1 intermediate wei of ETH.\n                1,\n                // Expires after this block.\n                block.timestamp,\n                // Convert to `buyToken`.\n                buyToken\n            );\n        }\n\n        return boughtAmount;\n    }\n\n    /// @dev Retrieves the uniswap exchange for a given token pair.\n    ///      In the case of a WETH-token exchange, this will be the non-WETH token.\n    ///      In th ecase of a token-token exchange, this will be the first token.\n    /// @param exchangeFactory The exchange factory.\n    /// @param sellToken The address of the token we are converting from.\n    /// @param buyToken The address of the token we are converting to.\n    /// @return exchange The uniswap exchange.\n    function _getUniswapExchangeForTokenPair(\n        IEtherTokenV06 weth,\n        IUniswapExchangeFactory exchangeFactory,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken\n    )\n        private\n        view\n        returns (IUniswapExchange exchange)\n    {\n        // Whichever isn't WETH is the exchange token.\n        exchange = sellToken == weth\n            ? exchangeFactory.getExchange(buyToken)\n            : exchangeFactory.getExchange(sellToken);\n        require(address(exchange) != address(0), \"MixinUniswap/NO_EXCHANGE\");\n    }\n}\n",
        "../src/UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol\";\nimport \"./SwapRevertSampler.sol\";\n\n\ncontract UniswapV2Sampler is\n    MixinUniswapV2,\n    SwapRevertSampler\n{\n\n    function sampleSwapFromUniswapV2(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV2(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, path),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return gasUsed gas consumed for each sample amount\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, path),\n                buyTokenData: abi.encode(router, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromUniswapV2\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "../src/interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV2.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    UniswapV2\n*/\ninterface IUniswapV2Router02 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        IERC20TokenV06[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinUniswapV2 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV2(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        IUniswapV2Router02 router;\n        IERC20TokenV06[] memory path;\n        {\n            address[] memory _path;\n            (router, _path) = abi.decode(bridgeData, (IUniswapV2Router02, address[]));\n            // To get around `abi.decode()` not supporting interface array types.\n            assembly { path := _path }\n        }\n\n        require(path.length >= 2, \"MixinUniswapV2/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(\n            path[path.length - 1] == buyToken,\n            \"MixinUniswapV2/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n        );\n        // Grant the Uniswap router an allowance to sell the first token.\n        path[0].approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "../src/UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler,\n    SamplerUtils\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        // TODO rework to not use single value array\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                (\n                    uint256[] memory _gasUsed,\n                    uint256[] memory _takerTokenAmounts\n                ) = _sampleSwapApproximateBuys(\n                    SwapRevertSamplerBuyQuoteOpts({\n                        sellToken: address(path[0]),\n                        buyToken: address(path[path.length - 1]),\n                        sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[j])),\n                        buyTokenData: abi.encode(\n                            router,\n                            _toUniswapPath(\n                                reversedPath,\n                                _reversePoolPath(poolPaths[j])\n                            )\n                        ),\n                        getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                    }),\n                    _toSingleValueArray(makerTokenAmounts[i])\n                );\n\n                // We can go from high to low here\n                if (takerTokenAmounts[i] == 0 || takerTokenAmounts[i] >= _takerTokenAmounts[0]) {\n                    takerTokenAmounts[i] = _takerTokenAmounts[0];\n                    gasUsed[i] = _gasUsed[0];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                }\n            }\n            // Break early if we can't complete the buys.\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n",
        "../src/SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n\ncontract SamplerUtils {\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "../src/UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getCode(address addr)\n        public\n        view\n        returns (bytes memory code)\n    {\n        assembly {\n            // retrieve the size of the code, this needs assembly\n            let size := extcodesize(addr)\n            // allocate output byte array - this could also be done without assembly\n            // by using o_code = new bytes(size)\n            code := mload(0x40)\n            // new \"memory end\" including padding\n            mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            // store length in memory\n            mstore(code, size)\n            // actually retrieve the code, this needs assembly\n            extcodecopy(addr, add(code, 0x20), 0, size)\n        }\n    }\n}",
        "../src/interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
