{
    "schemaVersion": "2.0.0",
    "contractName": "TestDydx",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "marginRatio",
                                "type": "uint256"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "address",
                                        "name": "owner",
                                        "type": "address"
                                    },
                                    {
                                        "internalType": "address",
                                        "name": "operator",
                                        "type": "address"
                                    }
                                ],
                                "internalType": "struct TestDydx.OperatorConfig[]",
                                "name": "operators",
                                "type": "tuple[]"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "address",
                                        "name": "owner",
                                        "type": "address"
                                    },
                                    {
                                        "internalType": "uint256",
                                        "name": "accountId",
                                        "type": "uint256"
                                    },
                                    {
                                        "internalType": "int256[]",
                                        "name": "balances",
                                        "type": "int256[]"
                                    }
                                ],
                                "internalType": "struct TestDydx.AccountConfig[]",
                                "name": "accounts",
                                "type": "tuple[]"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "address",
                                        "name": "token",
                                        "type": "address"
                                    },
                                    {
                                        "internalType": "uint256",
                                        "name": "price",
                                        "type": "uint256"
                                    }
                                ],
                                "internalType": "struct TestDydx.MarketInfo[]",
                                "name": "markets",
                                "type": "tuple[]"
                            }
                        ],
                        "internalType": "struct TestDydx.TestConfig",
                        "name": "config",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "owner",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "number",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IDydx.AccountInfo",
                        "name": "account",
                        "type": "tuple"
                    }
                ],
                "name": "getAdjustedAccountValues",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IDydx.Value",
                        "name": "supplyValue",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IDydx.Value",
                        "name": "borrowValue",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "operator",
                        "type": "address"
                    }
                ],
                "name": "getIsLocalOperator",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "isLocalOperator",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "getMarketMarginPremium",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IDydx.D256",
                        "name": "premium",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "marketId",
                        "type": "uint256"
                    }
                ],
                "name": "getMarketPrice",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "value",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IDydx.Price",
                        "name": "price",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "marketId",
                        "type": "uint256"
                    }
                ],
                "name": "getMarketTokenAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "getRiskParams",
                "outputs": [
                    {
                        "components": [
                            {
                                "components": [
                                    {
                                        "internalType": "uint256",
                                        "name": "value",
                                        "type": "uint256"
                                    }
                                ],
                                "internalType": "struct IDydx.D256",
                                "name": "marginRatio",
                                "type": "tuple"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "uint256",
                                        "name": "value",
                                        "type": "uint256"
                                    }
                                ],
                                "internalType": "struct IDydx.D256",
                                "name": "liquidationSpread",
                                "type": "tuple"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "uint256",
                                        "name": "value",
                                        "type": "uint256"
                                    }
                                ],
                                "internalType": "struct IDydx.D256",
                                "name": "earningsRate",
                                "type": "tuple"
                            },
                            {
                                "components": [
                                    {
                                        "internalType": "uint256",
                                        "name": "value",
                                        "type": "uint256"
                                    }
                                ],
                                "internalType": "struct IDydx.Value",
                                "name": "minBorrowedValue",
                                "type": "tuple"
                            }
                        ],
                        "internalType": "struct IDydx.RiskParams",
                        "name": "riskParams",
                        "type": "tuple"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {}
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60806040523480156200001157600080fd5b5060405162000e5538038062000e55833981016040819052620000349162000515565b805160035560005b816060015151811015620000ae576002826060015182815181106200005d57fe5b602090810291909101810151825460018082018555600094855293839020825160029092020180546001600160a01b0319166001600160a01b0390921691909117815591015190820155016200003c565b5060005b8160200151518110156200012d57620000ca6200024b565b82602001518281518110620000db57fe5b6020026020010151905060016000806200010484600001518560200151620001dd60201b60201c565b81526020810191909152604001600020805460ff191691151591909117905550600101620000b2565b5060005b816040015151811015620001d5576200014962000262565b826040015182815181106200015a57fe5b6020026020010151905060008090505b816040015151811015620001ca57816040015181815181106200018957fe5b602002602001015160016000620001b085600001518660200151866200021360201b60201c565b81526020810191909152604001600020556001016200016a565b505060010162000131565b505062000661565b60008282604051602001620001f4929190620005df565b6040516020818303038152906040528051906020012090505b92915050565b60008383836040516020016200022c93929190620005f9565b6040516020818303038152906040528051906020012090509392505050565b604080518082019091526000808252602082015290565b604051806060016040528060006001600160a01b0316815260200160008152602001606081525090565b80516001600160a01b03811681146200020d57600080fd5b600082601f830112620002b5578081fd5b8151620002cc620002c68262000641565b6200061a565b818152915060208083019084810181840286018201871015620002ee57600080fd5b60005b848110156200030f57815184529282019290820190600101620002f1565b505050505092915050565b600082601f8301126200032b578081fd5b81516200033c620002c68262000641565b818152915060208083019084810160005b848110156200030f57815187016060818a03601f190112156200036f57600080fd5b6200037b60606200061a565b620003898a8684016200028c565b815260408201518582015260608201516001600160401b03811115620003ae57600080fd5b620003be8b8783860101620002a4565b60408301525085525092820192908201906001016200034d565b600082601f830112620003e9578081fd5b8151620003fa620002c68262000641565b818152915060208083019084810160408402860182018710156200041d57600080fd5b60005b848110156200030f57604082890312156200043a57600080fd5b6200044660406200061a565b6200045289846200028c565b8152828401518482015284529282019260409091019060010162000420565b600082601f83011262000482578081fd5b815162000493620002c68262000641565b81815291506020808301908481016040840286018201871015620004b657600080fd5b60005b848110156200030f5760408289031215620004d357600080fd5b620004df60406200061a565b620004eb89846200028c565b8152620004fb898585016200028c565b8185015284529282019260409190910190600101620004b9565b60006020828403121562000527578081fd5b81516001600160401b03808211156200053e578283fd5b8184016080818703121562000551578384fd5b6200055d60806200061a565b92508051835260208101518281111562000575578485fd5b620005838782840162000471565b6020850152506040810151828111156200059b578485fd5b620005a9878284016200031a565b604085015250606081015182811115620005c1578485fd5b620005cf87828401620003d8565b6060850152509195945050505050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6040518181016001600160401b03811182821017156200063957600080fd5b604052919050565b60006001600160401b0382111562000657578081fd5b5060209081020190565b6107e480620006716000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638928378e116100505780638928378e146100d5578063f9416052146100f5578063fd04b6061461011657610072565b8063062bd3e9146100775780633a031bf0146100a057806369794795146100c0575b600080fd5b61008a610085366004610664565b610129565b60405161009791906106b5565b60405180910390f35b6100b36100ae366004610619565b610165565b604051610097919061072b565b6100c8610191565b6040516100979190610762565b6100e86100e3366004610664565b6101e8565b6040516100979190610758565b61010861010336600461064d565b6102b7565b604051610097929190610791565b6100e8610124366004610664565b61033d565b60006002828154811061013857fe5b600091825260209091206002909102015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6000806000610174858561034a565b815260208101919091526040016000205460ff1690505b92915050565b610199610571565b506040805160a081018252600354608082019081528152815160208181018452600080835281840192909252835180820185528281528385015283519081019093528252606081019190915290565b6101f06105b0565b6101f86105c3565b6002838154811061020557fe5b6000918252602080832060408051808201909152600290930201805473ffffffffffffffffffffffffffffffffffffffff16808452600190910154918301919091529092506102539061037d565b60ff1690506002848154811061026557fe5b6000918252602090912060016002909202010154835260128111156102a25760128103600a0a836000018181518161029957fe5b049052506102b0565b82516012829003600a0a0283525b5050919050565b6102bf6105b0565b6102c76105b0565b60005b6002548110156103375760006001816102f46102e960208901896105fe565b88602001358661044c565b815260200190815260200160002054905061030e826101e8565b5102600081126103235783518101845261032e565b825160008290030183525b506001016102ca565b50915091565b6103456105b0565b919050565b6000828260405160200161035f9291906106d6565b60405160208183030381529060405280519060200120905092915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516103e1919061067c565b600060405180830381855afa9150503d806000811461041c576040519150601f19603f3d011682016040523d82523d6000602084013e610421565b606091505b5091509150818015610434575080516020145b156102b057610444816000610482565b949350505050565b6000838383604051602001610463939291906106fd565b6040516020818303038152906040528051906020012090509392505050565b600061048e8383610495565b9392505050565b600081602001835110156104bb576104bb6104b660058551856020016104c4565b610569565b50016020015190565b6060632800659560e01b8484846040516024016104e393929190610736565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60405180608001604052806105846105b0565b81526020016105916105b0565b815260200161059e6105b0565b81526020016105ab6105b0565b905290565b6040518060200160405280600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018b57600080fd5b60006020828403121561060f578081fd5b61048e83836105da565b6000806040838503121561062b578081fd5b61063584846105da565b915061064484602085016105da565b90509250929050565b60006040828403121561065e578081fd5b50919050565b600060208284031215610675578081fd5b5035919050565b60008251815b8181101561069c5760208186018101518583015201610682565b818111156106aa5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b901515815260200190565b606081016008851061074457fe5b938152602081019290925260409091015290565b9051815260200190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b915182525160208201526040019056fea365627a7a72315820e43d20e3f93f87c4d0edd339ca65746bdfdf5804a19493537754d1b2879e4e956c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xE55 CODESIZE SUB DUP1 PUSH3 0xE55 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x515 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x3 SSTORE PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x60 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0xAE JUMPI PUSH1 0x2 DUP3 PUSH1 0x60 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x5D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE PUSH1 0x0 SWAP5 DUP6 MSTORE SWAP4 DUP4 SWAP1 KECCAK256 DUP3 MLOAD PUSH1 0x2 SWAP1 SWAP3 MUL ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP2 ADD MLOAD SWAP1 DUP3 ADD SSTORE ADD PUSH3 0x3C JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x12D JUMPI PUSH3 0xCA PUSH3 0x24B JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0xDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x0 DUP1 PUSH3 0x104 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD PUSH3 0x1DD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH3 0xB2 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x1D5 JUMPI PUSH3 0x149 PUSH3 0x262 JUMP JUMPDEST DUP3 PUSH1 0x40 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH3 0x15A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP2 PUSH1 0x40 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH3 0x1CA JUMPI DUP2 PUSH1 0x40 ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH3 0x189 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x0 PUSH3 0x1B0 DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH3 0x213 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH3 0x16A JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH3 0x131 JUMP JUMPDEST POP POP PUSH3 0x661 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x1F4 SWAP3 SWAP2 SWAP1 PUSH3 0x5DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x22C SWAP4 SWAP3 SWAP2 SWAP1 PUSH3 0x5F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2B5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x2CC PUSH3 0x2C6 DUP3 PUSH3 0x641 JUMP JUMPDEST PUSH3 0x61A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH3 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x30F JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x2F1 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x32B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x33C PUSH3 0x2C6 DUP3 PUSH3 0x641 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x30F JUMPI DUP2 MLOAD DUP8 ADD PUSH1 0x60 DUP2 DUP11 SUB PUSH1 0x1F NOT ADD SLT ISZERO PUSH3 0x36F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x37B PUSH1 0x60 PUSH3 0x61A JUMP JUMPDEST PUSH3 0x389 DUP11 DUP7 DUP5 ADD PUSH3 0x28C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP6 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3BE DUP12 DUP8 DUP4 DUP7 ADD ADD PUSH3 0x2A4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP DUP6 MSTORE POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x34D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x3E9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x3FA PUSH3 0x2C6 DUP3 PUSH3 0x641 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x40 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH3 0x41D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x30F JUMPI PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH3 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x446 PUSH1 0x40 PUSH3 0x61A JUMP JUMPDEST PUSH3 0x452 DUP10 DUP5 PUSH3 0x28C JUMP JUMPDEST DUP2 MSTORE DUP3 DUP5 ADD MLOAD DUP5 DUP3 ADD MSTORE DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 PUSH1 0x40 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x420 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x482 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x493 PUSH3 0x2C6 DUP3 PUSH3 0x641 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x40 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH3 0x4B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH3 0x30F JUMPI PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH3 0x4D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x4DF PUSH1 0x40 PUSH3 0x61A JUMP JUMPDEST PUSH3 0x4EB DUP10 DUP5 PUSH3 0x28C JUMP JUMPDEST DUP2 MSTORE PUSH3 0x4FB DUP10 DUP6 DUP6 ADD PUSH3 0x28C JUMP JUMPDEST DUP2 DUP6 ADD MSTORE DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH3 0x4B9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x527 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x53E JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP5 ADD PUSH1 0x80 DUP2 DUP8 SUB SLT ISZERO PUSH3 0x551 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x55D PUSH1 0x80 PUSH3 0x61A JUMP JUMPDEST SWAP3 POP DUP1 MLOAD DUP4 MSTORE PUSH1 0x20 DUP2 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x575 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x583 DUP8 DUP3 DUP5 ADD PUSH3 0x471 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MSTORE POP PUSH1 0x40 DUP2 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x59B JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x5A9 DUP8 DUP3 DUP5 ADD PUSH3 0x31A JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MSTORE POP PUSH1 0x60 DUP2 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH3 0x5C1 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH3 0x5CF DUP8 DUP3 DUP5 ADD PUSH3 0x3D8 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE POP SWAP2 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH3 0x639 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0x657 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH2 0x7E4 DUP1 PUSH3 0x671 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8928378E GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8928378E EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xF9416052 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0xFD04B606 EQ PUSH2 0x116 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x62BD3E9 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3A031BF0 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0x69794795 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x6B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0xAE CALLDATASIZE PUSH1 0x4 PUSH2 0x619 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x762 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x64D JUMP JUMPDEST PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x138 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x174 DUP6 DUP6 PUSH2 0x34A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x199 PUSH2 0x571 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP2 DUP2 ADD DUP5 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE DUP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 MLOAD DUP1 DUP3 ADD DUP6 MSTORE DUP3 DUP2 MSTORE DUP4 DUP6 ADD MSTORE DUP4 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP4 MSTORE DUP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x205 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x253 SWAP1 PUSH2 0x37D JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x2 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x265 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD DUP4 MSTORE PUSH1 0x12 DUP2 GT ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x12 DUP2 SUB PUSH1 0xA EXP DUP4 PUSH1 0x0 ADD DUP2 DUP2 MLOAD DUP2 PUSH2 0x299 JUMPI INVALID JUMPDEST DIV SWAP1 MSTORE POP PUSH2 0x2B0 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x12 DUP3 SWAP1 SUB PUSH1 0xA EXP MUL DUP4 MSTORE JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BF PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0x5B0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 PUSH1 0x1 DUP2 PUSH2 0x2F4 PUSH2 0x2E9 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x5FE JUMP JUMPDEST DUP9 PUSH1 0x20 ADD CALLDATALOAD DUP7 PUSH2 0x44C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x30E DUP3 PUSH2 0x1E8 JUMP JUMPDEST MLOAD MUL PUSH1 0x0 DUP2 SLT PUSH2 0x323 JUMPI DUP4 MLOAD DUP2 ADD DUP5 MSTORE PUSH2 0x32E JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 DUP3 SWAP1 SUB ADD DUP4 MSTORE JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2CA JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x5B0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35F SWAP3 SWAP2 SWAP1 PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x421 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x434 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2B0 JUMPI PUSH2 0x444 DUP2 PUSH1 0x0 PUSH2 0x482 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x463 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E DUP4 DUP4 PUSH2 0x495 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BB PUSH2 0x4B6 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x569 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x584 PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x591 PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59E PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AB PUSH2 0x5B0 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x60F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x48E DUP4 DUP4 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x62B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x635 DUP5 DUP5 PUSH2 0x5DA JUMP JUMPDEST SWAP2 POP PUSH2 0x644 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x5DA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x65E JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x675 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x69C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x682 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6AA JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x744 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP2 MLOAD DUP3 MSTORE MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xE4 RETURNDATASIZE KECCAK256 0xE3 0xF9 EXTCODEHASH DUP8 0xC4 0xD0 0xED 0xD3 CODECOPY 0xCA PUSH6 0x746BDFDF5804 LOG1 SWAP5 SWAP4 MSTORE8 PUSH24 0x54D1B2879E4E956C6578706572696D656E74616CF564736F PUSH13 0x63430005110040000000000000 ",
                "sourceMap": "827:4342:11:-;;;1454:807;8:9:-1;5:2;;;30:1;27;20:12;5:2;1454:807:11;;;;;;;;;;;;;;;;;;;;;1524:18;;1509:12;:33;1524:18;1552:137;1590:6;:14;;;:21;1579:8;:32;1552:137;;;1639:8;1653:6;:14;;;1668:8;1653:24;;;;;;;;;;;;;;;;;;;27:10:-1;;39:1;23:18;;;45:23;;-1:-1;1639:39:11;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1639:39:11;-1:-1:-1;;;;;1639:39:11;;;;;;;;;;;;;;;;1613:10;1552:137;;;-1:-1:-1;1703:9:11;1698:197;1722:6;:16;;;:23;1718:1;:27;1698:197;;;1766:24;;:::i;:::-;1793:6;:16;;;1810:1;1793:19;;;;;;;;;;;;;;1766:46;;1880:4;1826:10;:51;1837:39;1854:2;:8;;;1864:2;:11;;;1837:16;;;:39;;:::i;:::-;1826:51;;;;;;;;;;;-1:-1:-1;1826:51:11;:58;;-1:-1:-1;;1826:58:11;;;;;;;;;;-1:-1:-1;;1747:3:11;1698:197;;;-1:-1:-1;1909:9:11;1904:351;1928:6;:15;;;:22;1924:1;:26;1904:351;;;1971:25;;:::i;:::-;1999:6;:15;;;2015:1;1999:18;;;;;;;;;;;;;;1971:46;;2036:16;2055:1;2036:20;;2031:214;2069:4;:13;;;:20;2058:8;:31;2031:214;;;2207:4;:13;;;2221:8;2207:23;;;;;;;;;;;;;;2121:8;:63;2130:53;2146:4;:10;;;2158:4;:14;;;2174:8;2130:15;;;:53;;:::i;:::-;2121:63;;;;;;;;;;;-1:-1:-1;2121:63:11;:109;2091:10;;2031:214;;;-1:-1:-1;;1952:3:11;;1904:351;;;;1454:807;827:4342;;4667:227;4772:20;4849:5;4868:8;4825:61;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4825:61:11;;;4815:72;;;;;;4808:79;;4667:227;;;;;:::o;4900:267::-;5023:19;5099:5;5118:9;5141:8;5075:84;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5075:84:11;;;5065:95;;;;;;5058:102;;4900:267;;;;;:::o;827:4342::-;;;;;;;;;;-1:-1:-1;827:4342:11;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;;;;;827:4342:11;;;;;;;;;;;;;;;:::o;5:134:-1:-;83:13;;-1:-1;;;;;10025:54;;10229:35;;10219:2;;10278:1;;10268:12;163:711;;286:3;279:4;271:6;267:17;263:27;253:2;;-1:-1;;294:12;253:2;334:6;328:13;356:75;371:59;423:6;371:59;;;356:75;;;459:21;;;347:84;-1:-1;503:4;516:14;;;;491:17;;;605;;;596:27;;;;593:36;-1:-1;590:2;;;642:1;;632:12;590:2;667:1;652:216;677:6;674:1;671:13;652:216;;;3444:13;;745:60;;819:14;;;;847;;;;699:1;692:9;652:216;;;656:14;;;;;246:628;;;;;922:759;;1073:3;1066:4;1058:6;1054:17;1050:27;1040:2;;-1:-1;;1081:12;1040:2;1121:6;1115:13;1143:103;1158:87;1238:6;1158:87;;1143:103;1274:21;;;1134:112;-1:-1;1318:4;1331:14;;;;1306:17;;;1426:1;1411:264;1436:6;1433:1;1430:13;1411:264;;;1506:10;;1494:23;;3669:4;3648:19;;;-1:-1;;3648:19;3644:30;3641:2;;;1426:1;;3677:12;3641:2;3705:20;3669:4;3705:20;;;3808:60;3864:3;1318:4;1494:23;;3808:60;;;3783:86;;4000:22;;;6737:13;3950:16;;;3943:86;3669:4;4100:18;;4094:25;-1:-1;;;;;4128:30;;4125:2;;;1426:1;;4161:12;4125:2;4206:80;4282:3;1318:4;4273:6;1494:23;4258:22;;4206:80;;;4000:22;4188:16;;4181:106;-1:-1;1524:88;;-1:-1;1626:14;;;;1654;;;;1458:1;1451:9;1411:264;;1726:786;;1874:3;1867:4;1859:6;1855:17;1851:27;1841:2;;-1:-1;;1882:12;1841:2;1922:6;1916:13;1944:100;1959:84;2036:6;1959:84;;1944:100;2072:21;;;1935:109;-1:-1;2116:4;2129:14;;;;2104:17;;;2230:4;2218:17;;2209:27;;;;2206:36;-1:-1;2203:2;;;2255:1;;2245:12;2203:2;2280:1;2265:241;2290:6;2287:1;2284:13;2265:241;;;2230:4;4460:9;4455:3;4451:19;4447:30;4444:2;;;2280:1;;4480:12;4444:2;4508:20;2230:4;4508:20;;;4611:60;4667:3;4643:22;4611:60;;;4586:86;;4799:22;;;6737:13;4749:16;;;4742:86;2358:85;;2457:14;;;;2230:4;2485:14;;;;2312:1;2305:9;2265:241;;2561:798;;2713:3;2706:4;2698:6;2694:17;2690:27;2680:2;;-1:-1;;2721:12;2680:2;2761:6;2755:13;2783:104;2798:88;2879:6;2798:88;;2783:104;2915:21;;;2774:113;-1:-1;2959:4;2972:14;;;;2947:17;;;3073:4;3061:17;;3052:27;;;;3049:36;-1:-1;3046:2;;;3098:1;;3088:12;3046:2;3123:1;3108:245;3133:6;3130:1;3127:13;3108:245;;;3073:4;5009:9;5004:3;5000:19;4996:30;4993:2;;;3123:1;;5029:12;4993:2;5057:20;3073:4;5057:20;;;5160:60;5216:3;5192:22;5160:60;;;5142:16;5135:86;5319:60;5375:3;2959:4;5355:9;5351:22;5319:60;;;5301:16;;;5294:86;3201:89;;3304:14;;;;3073:4;3332:14;;;;;3155:1;3148:9;3108:245;;6800:398;;6943:2;6931:9;6922:7;6918:23;6914:32;6911:2;;;-1:-1;;6949:12;6911:2;6994:24;;-1:-1;;;;;7027:30;;;7024:2;;;-1:-1;;7060:12;7024:2;7165:6;7154:9;7150:22;5569:4;5557:9;5552:3;5548:19;5544:30;5541:2;;;-1:-1;;5577:12;5541:2;5605:20;5569:4;5605:20;;;5596:29;;5746:22;6737:13;5696:16;5689:86;6943:2;5851:9;5847:18;5841:25;7038:18;5878:6;5875:30;5872:2;;;-1:-1;;5908:12;5872:2;5953:109;6058:3;6049:6;6038:9;6034:22;5953:109;;;6943:2;5939:5;5935:16;5928:135;;6149:2;6138:9;6134:18;6128:25;7038:18;6165:6;6162:30;6159:2;;;-1:-1;;6195:12;6159:2;6240:108;6344:3;6335:6;6324:9;6320:22;6240:108;;;6149:2;6226:5;6222:16;6215:134;;6434:2;6423:9;6419:18;6413:25;7038:18;6450:6;6447:30;6444:2;;;-1:-1;;6480:12;6444:2;6525:105;6626:3;6617:6;6606:9;6602:22;6525:105;;;6434:2;6507:16;;6500:131;-1:-1;6511:5;;6905:293;-1:-1;;;;;6905:293;7445:324;-1:-1;;;;;10025:54;;;7276:37;;10025:54;;7755:2;7740:18;;7276:37;7591:2;7576:18;;7562:207;7776:435;-1:-1;;;;;10025:54;;;;7276:37;;8114:2;8099:18;;7396:37;;;;8197:2;8182:18;;7396:37;7950:2;7935:18;;7921:290;8218:256;8280:2;8274:9;8306:17;;;-1:-1;;;;;8366:34;;8402:22;;;8363:62;8360:2;;;8438:1;;8428:12;8360:2;8280;8447:22;8258:216;;-1:-1;8258:216;8481:299;;-1:-1;;;;;8624:30;;8621:2;;;-1:-1;;8657:12;8621:2;-1:-1;8702:4;8690:17;;;8755:15;;8558:222;;827:4342:11;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80638928378e116100505780638928378e146100d5578063f9416052146100f5578063fd04b6061461011657610072565b8063062bd3e9146100775780633a031bf0146100a057806369794795146100c0575b600080fd5b61008a610085366004610664565b610129565b60405161009791906106b5565b60405180910390f35b6100b36100ae366004610619565b610165565b604051610097919061072b565b6100c8610191565b6040516100979190610762565b6100e86100e3366004610664565b6101e8565b6040516100979190610758565b61010861010336600461064d565b6102b7565b604051610097929190610791565b6100e8610124366004610664565b61033d565b60006002828154811061013857fe5b600091825260209091206002909102015473ffffffffffffffffffffffffffffffffffffffff1692915050565b6000806000610174858561034a565b815260208101919091526040016000205460ff1690505b92915050565b610199610571565b506040805160a081018252600354608082019081528152815160208181018452600080835281840192909252835180820185528281528385015283519081019093528252606081019190915290565b6101f06105b0565b6101f86105c3565b6002838154811061020557fe5b6000918252602080832060408051808201909152600290930201805473ffffffffffffffffffffffffffffffffffffffff16808452600190910154918301919091529092506102539061037d565b60ff1690506002848154811061026557fe5b6000918252602090912060016002909202010154835260128111156102a25760128103600a0a836000018181518161029957fe5b049052506102b0565b82516012829003600a0a0283525b5050919050565b6102bf6105b0565b6102c76105b0565b60005b6002548110156103375760006001816102f46102e960208901896105fe565b88602001358661044c565b815260200190815260200160002054905061030e826101e8565b5102600081126103235783518101845261032e565b825160008290030183525b506001016102ca565b50915091565b6103456105b0565b919050565b6000828260405160200161035f9291906106d6565b60405160208183030381529060405280519060200120905092915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce567000000000000000000000000000000000000000000000000000000008152506040516103e1919061067c565b600060405180830381855afa9150503d806000811461041c576040519150601f19603f3d011682016040523d82523d6000602084013e610421565b606091505b5091509150818015610434575080516020145b156102b057610444816000610482565b949350505050565b6000838383604051602001610463939291906106fd565b6040516020818303038152906040528051906020012090509392505050565b600061048e8383610495565b9392505050565b600081602001835110156104bb576104bb6104b660058551856020016104c4565b610569565b50016020015190565b6060632800659560e01b8484846040516024016104e393929190610736565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60405180608001604052806105846105b0565b81526020016105916105b0565b815260200161059e6105b0565b81526020016105ab6105b0565b905290565b6040518060200160405280600081525090565b604080518082019091526000808252602082015290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461018b57600080fd5b60006020828403121561060f578081fd5b61048e83836105da565b6000806040838503121561062b578081fd5b61063584846105da565b915061064484602085016105da565b90509250929050565b60006040828403121561065e578081fd5b50919050565b600060208284031215610675578081fd5b5035919050565b60008251815b8181101561069c5760208186018101518583015201610682565b818111156106aa5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b901515815260200190565b606081016008851061074457fe5b938152602081019290925260409091015290565b9051815260200190565b815151815260208083015151908201526040808301515190820152606091820151519181019190915260800190565b915182525160208201526040019056fea365627a7a72315820e43d20e3f93f87c4d0edd339ca65746bdfdf5804a19493537754d1b2879e4e956c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x72 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8928378E GT PUSH2 0x50 JUMPI DUP1 PUSH4 0x8928378E EQ PUSH2 0xD5 JUMPI DUP1 PUSH4 0xF9416052 EQ PUSH2 0xF5 JUMPI DUP1 PUSH4 0xFD04B606 EQ PUSH2 0x116 JUMPI PUSH2 0x72 JUMP JUMPDEST DUP1 PUSH4 0x62BD3E9 EQ PUSH2 0x77 JUMPI DUP1 PUSH4 0x3A031BF0 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0x69794795 EQ PUSH2 0xC0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x129 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x6B5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB3 PUSH2 0xAE CALLDATASIZE PUSH1 0x4 PUSH2 0x619 JUMP JUMPDEST PUSH2 0x165 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x72B JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x191 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x762 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0xE3 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x758 JUMP JUMPDEST PUSH2 0x108 PUSH2 0x103 CALLDATASIZE PUSH1 0x4 PUSH2 0x64D JUMP JUMPDEST PUSH2 0x2B7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP3 SWAP2 SWAP1 PUSH2 0x791 JUMP JUMPDEST PUSH2 0xE8 PUSH2 0x124 CALLDATASIZE PUSH1 0x4 PUSH2 0x664 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x138 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x174 DUP6 DUP6 PUSH2 0x34A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x199 PUSH2 0x571 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x3 SLOAD PUSH1 0x80 DUP3 ADD SWAP1 DUP2 MSTORE DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP2 DUP2 ADD DUP5 MSTORE PUSH1 0x0 DUP1 DUP4 MSTORE DUP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 MLOAD DUP1 DUP3 ADD DUP6 MSTORE DUP3 DUP2 MSTORE DUP4 DUP6 ADD MSTORE DUP4 MLOAD SWAP1 DUP2 ADD SWAP1 SWAP4 MSTORE DUP3 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 0x1F0 PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x1F8 PUSH2 0x5C3 JUMP JUMPDEST PUSH1 0x2 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x205 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MUL ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP1 DUP5 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x253 SWAP1 PUSH2 0x37D JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x2 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x265 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x1 PUSH1 0x2 SWAP1 SWAP3 MUL ADD ADD SLOAD DUP4 MSTORE PUSH1 0x12 DUP2 GT ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x12 DUP2 SUB PUSH1 0xA EXP DUP4 PUSH1 0x0 ADD DUP2 DUP2 MLOAD DUP2 PUSH2 0x299 JUMPI INVALID JUMPDEST DIV SWAP1 MSTORE POP PUSH2 0x2B0 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x12 DUP3 SWAP1 SUB PUSH1 0xA EXP MUL DUP4 MSTORE JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2BF PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x2C7 PUSH2 0x5B0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 PUSH1 0x1 DUP2 PUSH2 0x2F4 PUSH2 0x2E9 PUSH1 0x20 DUP10 ADD DUP10 PUSH2 0x5FE JUMP JUMPDEST DUP9 PUSH1 0x20 ADD CALLDATALOAD DUP7 PUSH2 0x44C JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH2 0x30E DUP3 PUSH2 0x1E8 JUMP JUMPDEST MLOAD MUL PUSH1 0x0 DUP2 SLT PUSH2 0x323 JUMPI DUP4 MLOAD DUP2 ADD DUP5 MSTORE PUSH2 0x32E JUMP JUMPDEST DUP3 MLOAD PUSH1 0x0 DUP3 SWAP1 SUB ADD DUP4 MSTORE JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2CA JUMP JUMPDEST POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x345 PUSH2 0x5B0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x35F SWAP3 SWAP2 SWAP1 PUSH2 0x6D6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x3E1 SWAP2 SWAP1 PUSH2 0x67C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x41C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x421 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x434 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2B0 JUMPI PUSH2 0x444 DUP2 PUSH1 0x0 PUSH2 0x482 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x463 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x6FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x48E DUP4 DUP4 PUSH2 0x495 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x4BB JUMPI PUSH2 0x4BB PUSH2 0x4B6 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x4C4 JUMP JUMPDEST PUSH2 0x569 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x4E3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x736 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x584 PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x591 PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x59E PUSH2 0x5B0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AB PUSH2 0x5B0 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x18B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x60F JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x48E DUP4 DUP4 PUSH2 0x5DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x62B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x635 DUP5 DUP5 PUSH2 0x5DA JUMP JUMPDEST SWAP2 POP PUSH2 0x644 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x5DA JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x65E JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x675 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x69C JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x682 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6AA JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x744 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD MLOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x60 SWAP2 DUP3 ADD MLOAD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP2 MLOAD DUP3 MSTORE MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xE4 RETURNDATASIZE KECCAK256 0xE3 0xF9 EXTCODEHASH DUP8 0xC4 0xD0 0xED 0xD3 CODECOPY 0xCA PUSH6 0x746BDFDF5804 LOG1 SWAP5 SWAP4 MSTORE8 PUSH24 0x54D1B2879E4E956C6578706572696D656E74616CF564736F PUSH13 0x63430005110040000000000000 ",
                "sourceMap": "827:4342:11:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;827:4342:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2498:184;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;2267:225;;;;;;;;;:::i;:::-;;;;;;;;2688:348;;;:::i;:::-;;;;;;;;4142:519;;;;;;;;;:::i;:::-;;;;;;;;3042:917;;;;;;;;;:::i;:::-;;;;;;;;;3965:171;;;;;;;;;:::i;2498:184::-;2608:20;2651:8;2660;2651:18;;;;;;;;;;;;;;;;;;;;;:24;;;;2498:184;-1:-1:-1;;2498:184:11:o;2267:225::-;2397:20;2440:10;:45;2451:33;2468:5;2475:8;2451:16;:33::i;:::-;2440:45;;;;;;;;;;;-1:-1:-1;2440:45:11;;;;;-1:-1:-1;2267:225:11;;;;;:::o;2688:348::-;2760:34;;:::i;:::-;-1:-1:-1;2817:212:11;;;2861:24;;;;;2872:12;;2817:212;;;2861:24;;;2817:212;;2918:13;;2861:24;2918:13;;;;;-1:-1:-1;2918:13:11;;;2817:212;;;;;;;2959:13;;;;;;;;;;-1:-1:-1;;;2817:212:11;3004:14;;;;;;;;;;2817:212;;;;;;;2688:348;:::o;4142:519::-;4243:24;;:::i;:::-;4283;;:::i;:::-;4310:8;4319;4310:18;;;;;;;;;;;;;;;;4283:45;;;;;;;;;4310:18;;;;;4283:45;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4357:36:11;;:22;:36::i;:::-;4338:55;;;;4417:8;4426;4417:18;;;;;;;;;;;;;;;;:24;:18;;;;;:24;;4403:38;;4523:2;4512:13;;4508:147;;;4574:2;4563:8;:13;4556:2;:21;4541:5;:11;;:36;;;;;;;;;;;-1:-1:-1;4508:147:11;;;4608:36;;4630:2;:13;;;4623:2;:21;4608:36;;;4508:147;4142:519;;;;;:::o;3042:917::-;3173:30;;:::i;:::-;3205;;:::i;:::-;3256:16;3251:702;3289:8;:15;3278:26;;3251:702;;;3332:14;3365:8;3332:14;3374:56;3390:13;;;;:7;:13;;;3405:7;:14;;;3421:8;3374:15;:56::i;:::-;3365:66;;;;;;;;;;;;3332:99;;3733:24;3748:8;3733:14;:24::i;:::-;:30;3716:48;3733:30;3782:12;;3778:165;;3814:37;;;;;;3778:165;;;3890:38;;3919:8;;;;3890:38;;;3778:165;-1:-1:-1;3306:10:11;;3251:702;;;;3042:917;;;:::o;3965:171::-;4053:25;;:::i;:::-;3965:171;;;:::o;4667:227::-;4772:20;4849:5;4868:8;4825:61;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;4825:61:11;;;4815:72;;;;;;4808:79;;4667:227;;;;:::o;3905:366:19:-;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;:16;;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:19;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;3905:366;-1:-1:-1;;;;3905:366:19:o;4900:267:11:-;5023:19;5099:5;5118:9;5141:8;5075:84;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5075:84:11;;;5065:95;;;;;;5058:102;;4900:267;;;;;:::o;15929:220:41:-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;:::-;16089:30;15929:220;-1:-1:-1;;;15929:220:41:o;14133:679::-;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;:::-;14325:21;:245::i;:::-;-1:-1:-1;14759:13:41;14661:2;14759:13;14753:20;;14133:679::o;1292:378:42:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:42;;;49:4:-1;25:18;;61:17;;1515:148:42;182:15:-1;1515:148:42;;;;179:29:-1;;;;160:49;;;1515:148:42;-1:-1:-1;1292:378:42;;;;;:::o;1511:170:44:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;827:4342:11;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;-1:-1:-1;827:4342:11;;;;;;;;:::o;5:130:-1:-;72:20;;9727:42;9716:54;;10516:35;;10506:2;;10565:1;;10555:12;481:241;;585:2;573:9;564:7;560:23;556:32;553:2;;;-1:-1;;591:12;553:2;653:53;698:7;674:22;653:53;;729:366;;;850:2;838:9;829:7;825:23;821:32;818:2;;;-1:-1;;856:12;818:2;918:53;963:7;939:22;918:53;;;908:63;;1026:53;1071:7;1008:2;1051:9;1047:22;1026:53;;;1016:63;;812:283;;;;;;1102:303;;1237:2;1225:9;1216:7;1212:23;1208:32;1205:2;;;-1:-1;;1243:12;1205:2;-1:-1;1295:94;1199:206;-1:-1;1199:206;1412:241;;1516:2;1504:9;1495:7;1491:23;1487:32;1484:2;;;-1:-1;;1522:12;1484:2;-1:-1;411:20;;1478:175;-1:-1;1478:175;5562:254;;2043:5;9085:12;-1:-1;10119:101;10133:6;10130:1;10127:13;10119:101;;;2187:4;10200:11;;;;;10194:18;10181:11;;;10174:39;10148:10;10119:101;;;10235:6;10232:1;10229:13;10226:2;;;-1:-1;10291:6;10286:3;10282:16;10275:27;10226:2;-1:-1;2218:16;;;;;5683:133;-1:-1;;5683:133;5823:213;9727:42;9716:54;;;;1731:37;;5941:2;5926:18;;5912:124;6043:324;9727:42;9716:54;;;1731:37;;9716:54;;6353:2;6338:18;;1731:37;6189:2;6174:18;;6160:207;6374:435;9727:42;9716:54;;;;1731:37;;6712:2;6697:18;;5393:37;;;;6795:2;6780:18;;5393:37;6548:2;6533:18;;6519:290;6816:201;9443:13;;9436:21;1845:34;;6928:2;6913:18;;6899:118;7024:503;7232:2;7217:18;;10428:1;10418:12;;10408:2;;10434:9;10408:2;2351:84;;;7430:2;7415:18;;5393:37;;;;7513:2;7498:18;;;5393:37;7203:324;;7534:301;2696:23;;5393:37;;7696:2;7681:18;;7667:168;8154:326;3823:23;;2696;5393:37;;4047:4;4036:16;;;4030:23;2696;4147:14;;;5393:37;4249:4;4238:16;;;4232:23;2696;4349:14;;;5393:37;4455:4;4444:16;;;4438:23;2696;4557:14;;;5393:37;;;;8328:3;8313:19;;8299:181;8487:508;2696:23;;5393:37;;2696:23;8981:2;8966:18;;5393:37;8725:2;8710:18;;8696:299"
            }
        }
    },
    "sourceTreeHashHex": "0x3e22dea911230a65d2d363c9b21320101b27b0c8701c432547b4ed7d20c1ea59",
    "sources": {
        "./TestDydx.sol": {
            "id": 11
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": {
            "id": 16
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 19
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 44
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 41
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 42
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 20
        }
    },
    "sourceCodes": {
        "./TestDydx.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\n\n\n// solhint-disable separate-by-one-line-in-contract\ncontract TestDydx {\n\n    struct OperatorConfig {\n        address owner;\n        address operator;\n    }\n\n    struct AccountConfig {\n        address owner;\n        uint256 accountId;\n        int256[] balances;\n    }\n\n    struct MarketInfo {\n        address token;\n        uint256 price;\n    }\n\n    struct TestConfig {\n        uint256 marginRatio;\n        OperatorConfig[] operators;\n        AccountConfig[] accounts;\n        MarketInfo[] markets;\n    }\n\n    mapping (bytes32 => bool) private _operators;\n    mapping (bytes32 => int256) private _balance;\n    MarketInfo[] private _markets;\n    uint256 private _marginRatio;\n\n    constructor(TestConfig memory config) public {\n        _marginRatio = config.marginRatio;\n        for (uint256 marketId = 0; marketId < config.markets.length; ++marketId) {\n            _markets.push(config.markets[marketId]);\n        }\n        for (uint256 i = 0; i < config.operators.length; ++i) {\n            OperatorConfig memory op = config.operators[i];\n            _operators[_getOperatorHash(op.owner, op.operator)] = true;\n        }\n        for (uint256 i = 0; i < config.accounts.length; ++i) {\n            AccountConfig memory acct = config.accounts[i];\n            for (uint256 marketId = 0; marketId < acct.balances.length; ++marketId) {\n                _balance[_getBalanceHash(acct.owner, acct.accountId, marketId)] =\n                    acct.balances[marketId];\n            }\n        }\n    }\n\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator)\n    {\n        return _operators[_getOperatorHash(owner, operator)];\n    }\n\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress)\n    {\n        return _markets[marketId].token;\n    }\n\n    function getRiskParams()\n        external\n        view\n        returns (IDydx.RiskParams memory riskParams)\n    {\n        return IDydx.RiskParams({\n            marginRatio: IDydx.D256(_marginRatio),\n            liquidationSpread: IDydx.D256(0),\n            earningsRate: IDydx.D256(0),\n            minBorrowedValue: IDydx.Value(0)\n        });\n    }\n\n    function getAdjustedAccountValues(\n        IDydx.AccountInfo calldata account\n    )\n        external\n        view\n        returns (IDydx.Value memory supplyValue, IDydx.Value memory borrowValue)\n    {\n        for (uint256 marketId = 0; marketId < _markets.length; ++marketId) {\n            int256 balance =\n                _balance[_getBalanceHash(account.owner, account.number, marketId)];\n            // Account values have 36 decimal places.\n            // `getMarketPrice()` returns a unit with\n            // 18 + (18 - TOKEN_DECIMALS) decimal places so multiplying the price\n            // with the wei balance will result in a 36 decimal value.\n            balance = balance * int256(getMarketPrice(marketId).value);\n            if (balance >= 0) {\n                supplyValue.value += uint256(balance);\n            } else {\n                borrowValue.value += uint256(-balance);\n            }\n        }\n    }\n\n    function getMarketMarginPremium(uint256)\n        external\n        view\n        returns (IDydx.D256 memory premium)\n    {\n        // Return 0.\n        return premium;\n    }\n\n    function getMarketPrice(\n        uint256 marketId\n    )\n        public\n        view\n        returns (IDydx.Price memory price)\n    {\n        MarketInfo memory market = _markets[marketId];\n        uint256 decimals = LibERC20Token.decimals(market.token);\n        price.value = _markets[marketId].price;\n        // Market prices have 18 + (18 - TOKEN_DECIMALS)\n        if (decimals > 18) {\n            price.value /= 10 ** (decimals - 18);\n        } else {\n            price.value *= 10 ** (18 - decimals);\n        }\n    }\n\n    function _getOperatorHash(address owner, address operator)\n        private\n        pure\n        returns (bytes32 operatorHash)\n    {\n        return keccak256(abi.encode(\n            owner,\n            operator\n        ));\n    }\n\n    function _getBalanceHash(address owner, uint256 accountId, uint256 marketId)\n        private\n        pure\n        returns (bytes32 balanceHash)\n    {\n        return keccak256(abi.encode(\n            owner,\n            accountId,\n            marketId\n        ));\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IDydx {\n\n    /// @dev Represents the unique key that specifies an account\n    struct AccountInfo {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\n    /// parsed into before being processed.\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountIdx;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountIdx;\n        bytes data;\n    }\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct D256 {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n\n    struct Price {\n        uint256 value;\n    }\n\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    /// @dev The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Value minBorrowedValue;\n    }\n\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\n    ///      One call to operate() is considered a singular \"operation\". Account collateralization is\n    ///      ensured only after the completion of the entire operation.\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\n    ///                   index in the list.\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\n    ///                   actions will be processed in order.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external;\n\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\n    //      operator is a smart contract and implements the IAutoTrader interface.\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\n    function setOperators(OperatorArg[] calldata args) external;\n\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\n    /// @param owner The owner of the accounts\n    /// @param operator The possible operator\n    /// @return isLocalOperator True if operator is approved for owner's accounts\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator);\n\n    /// @dev Get the ERC20 token address for a market.\n    /// @param marketId The market to query\n    /// @return tokenAddress The token address\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress);\n\n    /// @dev Get all risk parameters in a single struct.\n    /// @return riskParams All global risk parameters\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams);\n\n    /// @dev Get the price of the token for a market.\n    /// @param marketId The market to query\n    /// @return price The price of each atomic unit of the token\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price);\n\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\n    ///      include the market require a higher collateralization to avoid being liquidated.\n    /// @param  marketId  The market to query\n    /// @return premium The market's margin premium\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (D256 memory premium);\n\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\n    ///      margin-ratio when determining if the account can be liquidated.\n    /// @param account The account to query\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue);\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-asset-proxy=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-asset-proxy",
                "@0x/contracts-exchange=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-erc721=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc721",
                "@0x/contracts-erc1155=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc1155"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 5000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
