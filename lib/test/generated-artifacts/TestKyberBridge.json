{
    "schemaVersion": "2.0.0",
    "contractName": "TestKyberBridge",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "spenderAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "KyberBridgeTokenApprove",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "recipientAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "KyberBridgeTokenTransfer",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "msgValue",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "sellTokenAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "buyTokenAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address payable",
                        "name": "recipientAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "maxBuyTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "minConversionRate",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "walletId",
                        "type": "address"
                    }
                ],
                "name": "KyberBridgeTrade",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "msgValue",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "KyberBridgeWethDeposit",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "KyberBridgeWethWithdraw",
                "type": "event"
            },
            {
                "payable": true,
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "KYBER_ETH_ADDRESS",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "toTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "bridgeTransferFrom",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "decimals",
                        "type": "uint8"
                    }
                ],
                "name": "createToken",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "grantTokensTo",
                "outputs": [],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicValue",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "setNextFillAmount",
                "outputs": [],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spenderAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "tokenApprove",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    }
                ],
                "name": "tokenBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "recipientAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "tokenTransfer",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "success",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "buyTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address payable",
                        "name": "recipientAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "maxBuyTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minConversionRate",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "walletId",
                        "type": "address"
                    }
                ],
                "name": "trade",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "boughtAmount",
                        "type": "uint256"
                    }
                ],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "weth",
                "outputs": [
                    {
                        "internalType": "contract IEtherToken",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    }
                ],
                "name": "wethDeposit",
                "outputs": [],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address payable",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "wethWithdraw",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "KyberBridge overridden to mock tokens and implement IKyberBridge.",
            "methods": {
                "bridgeTransferFrom(address,address,address,uint256,bytes)": {
                    "details": "Callback for `IKyberBridge`. Tries to buy `amount` of      `toTokenAddress` tokens by selling the entirety of the opposing asset      to the `KyberNetworkProxy` contract, then transfers the bought      tokens to `to`.",
                    "params": {
                        "amount": "Minimum amount of `toTokenAddress` tokens to buy.",
                        "bridgeData": "The abi-encoeded \"from\" token address.",
                        "from": "The maker (this contract).",
                        "to": "The recipient of the bought tokens.",
                        "toTokenAddress": "The token to give to `to`."
                    },
                    "return": "success The magic bytes if successful."
                },
                "isValidSignature(bytes32,bytes)": {
                    "details": "`SignatureType.Wallet` callback, so that this bridge can be the maker      and sign for itself in orders. Always succeeds.",
                    "return": "magicValue Magic success bytes, always."
                },
                "trade(address,uint256,address,address,uint256,uint256,address)": {
                    "details": "Implementation of `IKyberNetworkProxy.trade()`"
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50601260405161001f9061006b565b6100299190610078565b604051809103906000f080158015610045573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055610086565b6106a080611f9783390190565b60ff91909116815260200190565b611f02806100956000396000f3fe6080604052600436106100d25760003560e01c806363b5ac411161007f578063cb3c28c711610059578063cb3c28c7146101e7578063d08533d014610207578063e42c08f214610227578063fb3f4d2914610247576100d2565b806363b5ac41146101a157806365c53a03146101b4578063c2df82e6146101c7576100d2565b806329f7fc9e116100b057806329f7fc9e1461014a5780633fc8cef31461016c5780635aed4ec314610181576100d2565b806315eaef6b146100d45780631626ba7e1461010a57806320b6d5bc14610137575b005b3480156100e057600080fd5b506100f46100ef36600461139f565b610267565b6040516101019190611666565b60405180910390f35b34801561011657600080fd5b5061012a610125366004611479565b6102f4565b6040516101019190611671565b6100d261014536600461139f565b61031c565b34801561015657600080fd5b5061015f6103d7565b6040516101019190611530565b34801561017857600080fd5b5061015f6103ef565b34801561018d57600080fd5b5061015f61019c3660046114f3565b61040b565b6100d26101af3660046112d5565b610447565b6100d26101c23660046114c3565b6104fa565b3480156101d357600080fd5b5061012a6101e236600461131c565b610562565b6101fa6101f53660046113df565b610b63565b604051610101919061173c565b34801561021357600080fd5b506100d26102223660046112f1565b610bb9565b34801561023357600080fd5b506101fa6102423660046112d5565b610caf565b34801561025357600080fd5b506100f461026236600461139f565b610ce4565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff888116855292528083208054869003905590851682528082208054850190555190917f585bc061c1fb99029ae845359d195a4e868890b2566636c927533576e9a89f61916102e29190879087908790611551565b60405180910390a15060019392505050565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083208786168452909152812080548501905554909116146103905760405133903480156108fc02916000818181858888f1935050505015801561038a573d6000803e3d6000fd5b506103d2565b8034146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611705565b60405180910390fd5b505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405161041a90611209565b61042491906117c0565b604051809103906000f080158015610440573d6000803e3d6000fd5b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610498576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c9906116ce565b6000546104bc9073ffffffffffffffffffffffffffffffffffffffff16823461031c565b7f493b326af1902255740bfd4716a9196f808baee3482695e1cc52bf038d12f60d3482346040516104ef93929190611745565b60405180910390a150565b341561055d57348114610539576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611705565b60005461055d9073ffffffffffffffffffffffffffffffffffffffff16303461031c565b600255565b600061056c611216565b610574610d1b565b73ffffffffffffffffffffffffffffffffffffffff168152610594610d1f565b73ffffffffffffffffffffffffffffffffffffffff1660208201526105bb838501856112d5565b73ffffffffffffffffffffffffffffffffffffffff166040808301829052517f70a082310000000000000000000000000000000000000000000000000000000081526370a0823190610611903090600401611530565b60206040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066191908101906114db565b60608201819052610676575060009050610b59565b670de0b6b3a764000060a08201819052610696908663ffffffff610d3b16565b60a082015260408101516106c4906106ad90610d7a565b60a08301519060ff16600a0a63ffffffff610d3b16565b60a0820181905260608201516106e0919063ffffffff610e4b16565b60a08201526107086106f189610d7a565b60a08301519060ff16600a0a63ffffffff610e4b16565b60a0820152604081015173ffffffffffffffffffffffffffffffffffffffff8981169116141561076e576107458160400151878360600151610e75565b507fdc1600f3000000000000000000000000000000000000000000000000000000009050610b59565b806020015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146107c5576107c0816040015182600001518360600151610f3c565b610877565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee604082810191909152606082015160808301819052602083015191517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d916108449160040161173c565b600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050505b6000816020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161490506000826000015173ffffffffffffffffffffffffffffffffffffffff1663cb3c28c7846080015185604001518660600151866108ea578e610900565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8761090b578d61090d565b305b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a60a0015160006040518963ffffffff1660e01b8152600401610957979695949392919061161c565b6020604051808303818588803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052506109a991908101906114db565b90508115610aa957826020015173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b5050505050826020015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610a55929190611588565b602060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa79190810190611459565b505b60408301517f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a99073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610b0a578360400151610b10565b83602001515b6060850151604051610b2a92918e9186908f908f906115d5565b60405180910390a1507fdc1600f300000000000000000000000000000000000000000000000000000000925050505b9695505050505050565b60007f59ac183f99ea1126881a40dad44fe910c20477829dc17810fc6b6d468aea52b23489898989898989604051610ba2989796959493929190611771565b60405180910390a150600254979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c9906116ce565b6000805473ffffffffffffffffffffffffffffffffffffffff9081168252600160209081526040808420928616808552929091528083208054859003905551909183156108fc02918491818181858888f19350505050158015610c71573d6000803e3d6000fd5b507ff952181f7dc65f02b4be7610895c88da3f0ae66b3a0109ad34efdbd9a74d039d8282604051610ca3929190611588565b60405180910390a15050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b60007f9eba1462601f8272038ef8765c03e22d58589df272104d304d4fe8e2c92cab15338585856040516102e29493929190611551565b3090565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600082610d4a57506000610d74565b82820282848281610d5757fe5b0414610d7157610d71610d6c60018686611013565b6110b8565b90505b92915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051610dde9190611514565b600060405180830381855afa9150503d8060008114610e19576040519150601f19603f3d011682016040523d82523d6000602084013e610e1e565b606091505b5091509150818015610e31575080516020145b15610e4457610e418160006110c0565b92505b5050919050565b600081610e6157610e61610d6c60038585611013565b6000828481610e6c57fe5b04949350505050565b6040516060907fa9059cbb0000000000000000000000000000000000000000000000000000000090610ead9085908590602401611588565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610f3684826110cc565b50505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610f9290309087906004016115ae565b60206040518083038186803b158015610faa57600080fd5b505afa158015610fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fe291908101906114db565b10156103d2576103d283837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611188565b606063e946c1bb60e01b8484846040516024016110329392919061169e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000610d7183836111c0565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516110f59190611514565b6000604051808303816000865af19150503d8060008114611132576040519150601f19603f3d011682016040523d82523d6000602084013e611137565b606091505b5091509150811561117b57805161114f575050611184565b80516020141561117b5760006111668260006110c0565b9050806001141561117957505050611184565b505b610f36816110b8565b5050565b6040516060907f095ea7b30000000000000000000000000000000000000000000000000000000090610ead9085908590602401611588565b600081602001835110156111e1576111e1610d6c60058551856020016111ea565b50016020015190565b6060632800659560e01b848484604051602401611032939291906116c0565b6106a08061182083390190565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60008083601f84011261129f578182fd5b50813567ffffffffffffffff8111156112b6578182fd5b6020830191508360208285010111156112ce57600080fd5b9250929050565b6000602082840312156112e6578081fd5b8135610d71816117fa565b60008060408385031215611303578081fd5b823561130e816117fa565b946020939093013593505050565b60008060008060008060a08789031215611334578182fd5b863561133f816117fa565b9550602087013561134f816117fa565b9450604087013561135f816117fa565b935060608701359250608087013567ffffffffffffffff811115611381578283fd5b61138d89828a0161128e565b979a9699509497509295939492505050565b6000806000606084860312156113b3578283fd5b83356113be816117fa565b925060208401356113ce816117fa565b929592945050506040919091013590565b600080600080600080600060e0888a0312156113f9578081fd5b8735611404816117fa565b965060208801359550604088013561141b816117fa565b9450606088013561142b816117fa565b93506080880135925060a0880135915060c0880135611449816117fa565b8091505092959891949750929550565b60006020828403121561146a578081fd5b81518015158114610d71578182fd5b60008060006040848603121561148d578283fd5b83359250602084013567ffffffffffffffff8111156114aa578283fd5b6114b68682870161128e565b9497909650939450505050565b6000602082840312156114d4578081fd5b5035919050565b6000602082840312156114ec578081fd5b5051919050565b600060208284031215611504578081fd5b813560ff81168114610d71578182fd5b600082516115268184602087016117ce565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff9788168152602081019690965293861660408601529185166060850152608084015260a083015290911660c082015260e00190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600485106116ac57fe5b938152602081019290925260409091015290565b60608101600885106116ac57fe5b60208082526009908201527f4f4e4c595f574554480000000000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f56414c55455f414d4f554e545f4d49534d415443480000000000000000000000604082015260600190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b97885273ffffffffffffffffffffffffffffffffffffffff968716602089015260408801959095529285166060870152908416608086015260a085015260c08401521660e08201526101000190565b60ff91909116815260200190565b60005b838110156117e95781810151838201526020016117d1565b83811115610f365750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461181c57600080fd5b5056fe608060405234801561001057600080fd5b506040516106a03803806106a083398101604081905261002f91610059565b6000805460ff191660ff9290921691909117610100600160a81b0319166101003302179055610081565b60006020828403121561006a578081fd5b815160ff8116811461007a578182fd5b9392505050565b610610806100906000396000f3fe6080604052600436106100705760003560e01c806370a082311161004e57806370a08231146100ef578063a9059cbb1461011c578063d0e30db01461013c578063dd62ed3e1461014457610070565b8063095ea7b3146100755780632e1a7d4d146100ab578063313ce567146100cd575b600080fd5b34801561008157600080fd5b506100956100903660046104b2565b610164565b6040516100a291906105ab565b60405180910390f35b3480156100b757600080fd5b506100cb6100c6366004610503565b61021e565b005b3480156100d957600080fd5b506100e26102af565b6040516100a291906105bf565b3480156100fb57600080fd5b5061010f61010a366004610463565b6102b8565b6040516100a291906105b6565b34801561012857600080fd5b506100956101373660046104b2565b610363565b6100cb6103c2565b34801561015057600080fd5b5061010f61015f36600461047e565b610437565b600080546040517ffb3f4d2900000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063fb3f4d29906101c390339087908790600401610554565b602060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061021591908101906104dc565b90505b92915050565b6000546040517fd08533d000000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063d08533d09061027a9033908590600401610585565b600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050505050565b60005460ff1681565b600080546040517fe42c08f200000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e42c08f290610313908590600401610533565b60206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610218919081019061051b565b600080546040517f15eaef6b00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906315eaef6b906101c390339087908790600401610554565b6000546040517f63b5ac4100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906363b5ac4190349061041e903390600401610533565b6000604051808303818588803b15801561029457600080fd5b600092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461021857600080fd5b600060208284031215610474578081fd5b610215838361043f565b60008060408385031215610490578081fd5b61049a848461043f565b91506104a9846020850161043f565b90509250929050565b600080604083850312156104c4578182fd5b6104ce848461043f565b946020939093013593505050565b6000602082840312156104ed578081fd5b815180151581146104fc578182fd5b9392505050565b600060208284031215610514578081fd5b5035919050565b60006020828403121561052c578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b60ff9190911681526020019056fea365627a7a72315820725afd2fa5cc4452c8c8466218d89f81d63de14df5beee23d24a7c75c8a98d276c6578706572696d656e74616cf564736f6c63430005110040a365627a7a723158206f3333f0d9d39d2be75ccfc992c39b1669e2784b216b546899510088bfb7b0ea6c6578706572696d656e74616cf564736f6c63430005110040608060405234801561001057600080fd5b506040516106a03803806106a083398101604081905261002f91610059565b6000805460ff191660ff9290921691909117610100600160a81b0319166101003302179055610081565b60006020828403121561006a578081fd5b815160ff8116811461007a578182fd5b9392505050565b610610806100906000396000f3fe6080604052600436106100705760003560e01c806370a082311161004e57806370a08231146100ef578063a9059cbb1461011c578063d0e30db01461013c578063dd62ed3e1461014457610070565b8063095ea7b3146100755780632e1a7d4d146100ab578063313ce567146100cd575b600080fd5b34801561008157600080fd5b506100956100903660046104b2565b610164565b6040516100a291906105ab565b60405180910390f35b3480156100b757600080fd5b506100cb6100c6366004610503565b61021e565b005b3480156100d957600080fd5b506100e26102af565b6040516100a291906105bf565b3480156100fb57600080fd5b5061010f61010a366004610463565b6102b8565b6040516100a291906105b6565b34801561012857600080fd5b506100956101373660046104b2565b610363565b6100cb6103c2565b34801561015057600080fd5b5061010f61015f36600461047e565b610437565b600080546040517ffb3f4d2900000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063fb3f4d29906101c390339087908790600401610554565b602060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061021591908101906104dc565b90505b92915050565b6000546040517fd08533d000000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063d08533d09061027a9033908590600401610585565b600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050505050565b60005460ff1681565b600080546040517fe42c08f200000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e42c08f290610313908590600401610533565b60206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610218919081019061051b565b600080546040517f15eaef6b00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906315eaef6b906101c390339087908790600401610554565b6000546040517f63b5ac4100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906363b5ac4190349061041e903390600401610533565b6000604051808303818588803b15801561029457600080fd5b600092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461021857600080fd5b600060208284031215610474578081fd5b610215838361043f565b60008060408385031215610490578081fd5b61049a848461043f565b91506104a9846020850161043f565b90509250929050565b600080604083850312156104c4578182fd5b6104ce848461043f565b946020939093013593505050565b6000602082840312156104ed578081fd5b815180151581146104fc578182fd5b9392505050565b600060208284031215610514578081fd5b5035919050565b60006020828403121561052c578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b60ff9190911681526020019056fea365627a7a72315820725afd2fa5cc4452c8c8466218d89f81d63de14df5beee23d24a7c75c8a98d276c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x12 PUSH1 0x40 MLOAD PUSH2 0x1F SWAP1 PUSH2 0x6B JUMP JUMPDEST PUSH2 0x29 SWAP2 SWAP1 PUSH2 0x78 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x45 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x86 JUMP JUMPDEST PUSH2 0x6A0 DUP1 PUSH2 0x1F97 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1F02 DUP1 PUSH2 0x95 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x63B5AC41 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xCB3C28C7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCB3C28C7 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0xD08533D0 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0xE42C08F2 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xFB3F4D29 EQ PUSH2 0x247 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x63B5AC41 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x65C53A03 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x1C7 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x29F7FC9E GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x29F7FC9E EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x3FC8CEF3 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x5AED4EC3 EQ PUSH2 0x181 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x15EAEF6B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0x20B6D5BC EQ PUSH2 0x137 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x1479 JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1671 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1530 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0x14F3 JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x131C JUMP JUMPDEST PUSH2 0x562 JUMP JUMPDEST PUSH2 0x1FA PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DF JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x173C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0xBB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x242 CALLDATASIZE PUSH1 0x4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP1 DUP6 AND DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE MLOAD SWAP1 SWAP2 PUSH32 0x585BC061C1FB99029AE845359D195A4E868890B2566636C927533576E9A89F61 SWAP2 PUSH2 0x2E2 SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SLOAD SWAP1 SWAP2 AND EQ PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x38A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x3D2 JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0x3D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x41A SWAP1 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x17C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4BC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 CALLVALUE PUSH2 0x31C JUMP JUMPDEST PUSH32 0x493B326AF1902255740BFD4716A9196F808BAEE3482695E1CC52BF038D12F60D CALLVALUE DUP3 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x4EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x55D JUMPI CALLVALUE DUP2 EQ PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x55D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS CALLVALUE PUSH2 0x31C JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C PUSH2 0x1216 JUMP JUMPDEST PUSH2 0x574 PUSH2 0xD1B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x594 PUSH2 0xD1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x5BB DUP4 DUP6 ADD DUP6 PUSH2 0x12D5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x70A08231 SWAP1 PUSH2 0x611 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1530 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x661 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x676 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH2 0xB59 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x696 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xD3B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x6C4 SWAP1 PUSH2 0x6AD SWAP1 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0xD3B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x6E0 SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE4B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x708 PUSH2 0x6F1 DUP10 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0xE4B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x76E JUMPI PUSH2 0x745 DUP2 PUSH1 0x40 ADD MLOAD DUP8 DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xE75 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0xB59 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7C5 JUMPI PUSH2 0x7C0 DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xF3C JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x20 DUP4 ADD MLOAD SWAP2 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x844 SWAP2 PUSH1 0x4 ADD PUSH2 0x173C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x872 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCB3C28C7 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH2 0x8EA JUMPI DUP15 PUSH2 0x900 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP8 PUSH2 0x90B JUMPI DUP14 PUSH2 0x90D JUMP JUMPDEST ADDRESS JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH1 0xA0 ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP10 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x957 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x161C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x984 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x9A9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0xAA9 JUMPI DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP10 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP3 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xAA7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1459 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0xB0A JUMPI DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB10 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xB2A SWAP3 SWAP2 DUP15 SWAP2 DUP7 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x59AC183F99EA1126881A40DAD44FE910C20477829DC17810FC6B6D468AEA52B2 CALLVALUE DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xBA2 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1771 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x2 SLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP7 AND DUP1 DUP6 MSTORE SWAP3 SWAP1 SWAP2 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0xF952181F7DC65F02B4BE7610895C88DA3F0AE66B3A0109AD34EFDBD9A74D039D DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xCA3 SWAP3 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9EBA1462601F8272038EF8765C03E22D58589DF272104D304D4FE8E2C92CAB15 CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x2E2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1551 JUMP JUMPDEST ADDRESS SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD4A JUMPI POP PUSH1 0x0 PUSH2 0xD74 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xD57 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xD71 JUMPI PUSH2 0xD71 PUSH2 0xD6C PUSH1 0x1 DUP7 DUP7 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x10B8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xDDE SWAP2 SWAP1 PUSH2 0x1514 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xE31 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0xE44 JUMPI PUSH2 0xE41 DUP2 PUSH1 0x0 PUSH2 0x10C0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE61 JUMPI PUSH2 0xE61 PUSH2 0xD6C PUSH1 0x3 DUP6 DUP6 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xE6C JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xEAD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xF36 DUP5 DUP3 PUSH2 0x10CC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xF92 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xFE2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST LT ISZERO PUSH2 0x3D2 JUMPI PUSH2 0x3D2 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1188 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1032 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x169E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD71 DUP4 DUP4 PUSH2 0x11C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x10F5 SWAP2 SWAP1 PUSH2 0x1514 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1132 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1137 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x117B JUMPI DUP1 MLOAD PUSH2 0x114F JUMPI POP POP PUSH2 0x1184 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x117B JUMPI PUSH1 0x0 PUSH2 0x1166 DUP3 PUSH1 0x0 PUSH2 0x10C0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1179 JUMPI POP POP POP PUSH2 0x1184 JUMP JUMPDEST POP JUMPDEST PUSH2 0xF36 DUP2 PUSH2 0x10B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xEAD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x11E1 JUMPI PUSH2 0x11E1 PUSH2 0xD6C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x11EA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1032 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16C0 JUMP JUMPDEST PUSH2 0x6A0 DUP1 PUSH2 0x1820 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x129F JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12B6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD71 DUP2 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1303 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x130E DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1334 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x133F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x134F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x135F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1381 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x138D DUP10 DUP3 DUP11 ADD PUSH2 0x128E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13B3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x13BE DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x13CE DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13F9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x1404 DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x141B DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x142B DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH2 0x1449 DUP2 PUSH2 0x17FA JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x146A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x148D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14AA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x14B6 DUP7 DUP3 DUP8 ADD PUSH2 0x128E JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14EC JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1504 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xD71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1526 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x17CE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP4 DUP7 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 DUP6 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x16AC JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x16AC JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F574554480000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x56414C55455F414D4F554E545F4D49534D415443480000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 DUP6 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP1 DUP5 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17E9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF36 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x181C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x6A0 CODESIZE SUB DUP1 PUSH2 0x6A0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 CALLER MUL OR SWAP1 SSTORE PUSH2 0x81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x7A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x610 DUP1 PUSH2 0x90 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x144 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x164 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCB PUSH2 0xC6 CALLDATASIZE PUSH1 0x4 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x21E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE2 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0x463 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH2 0xCB PUSH2 0x3C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x437 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xFB3F4D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xFB3F4D29 SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x215 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4DC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD08533D000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xD08533D0 SWAP1 PUSH2 0x27A SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x585 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE42C08F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xE42C08F2 SWAP1 PUSH2 0x313 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x218 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x15EAEF6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x15EAEF6B SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x63B5AC4100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x63B5AC41 SWAP1 CALLVALUE SWAP1 PUSH2 0x41E SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x474 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x215 DUP4 DUP4 PUSH2 0x43F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x490 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x49A DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP2 POP PUSH2 0x4A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x43F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4CE DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4FC JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x514 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH19 0x5AFD2FA5CC4452C8C8466218D89F81D63DE14D CREATE2 0xBE 0xEE 0x23 0xD2 0x4A PUSH29 0x75C8A98D276C6578706572696D656E74616CF564736F6C634300051100 BLOCKHASH LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH16 0x3333F0D9D39D2BE75CCFC992C39B1669 0xE2 PUSH25 0x4B216B546899510088BFB7B0EA6C6578706572696D656E7461 PUSH13 0xF564736F6C6343000511004060 DUP1 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x6A0 CODESIZE SUB DUP1 PUSH2 0x6A0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 CALLER MUL OR SWAP1 SSTORE PUSH2 0x81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x7A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x610 DUP1 PUSH2 0x90 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x144 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x164 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCB PUSH2 0xC6 CALLDATASIZE PUSH1 0x4 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x21E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE2 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0x463 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH2 0xCB PUSH2 0x3C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x437 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xFB3F4D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xFB3F4D29 SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x215 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4DC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD08533D000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xD08533D0 SWAP1 PUSH2 0x27A SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x585 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE42C08F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xE42C08F2 SWAP1 PUSH2 0x313 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x218 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x15EAEF6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x15EAEF6B SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x63B5AC4100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x63B5AC41 SWAP1 CALLVALUE SWAP1 PUSH2 0x41E SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x474 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x215 DUP4 DUP4 PUSH2 0x43F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x490 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x49A DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP2 POP PUSH2 0x4A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x43F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4CE DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4FC JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x514 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH19 0x5AFD2FA5CC4452C8C8466218D89F81D63DE14D CREATE2 0xBE 0xEE 0x23 0xD2 0x4A PUSH29 0x75C8A98D276C6578706572696D656E74616CF564736F6C634300051100 BLOCKHASH ",
                "sourceMap": "2891:4855:43:-;;;3962:84;8:9:-1;5:2;;;30:1;27;20:12;5:2;3962:84:43;4034:2;4020:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;3993:4:43;:46;;-1:-1:-1;;;;;;3993:46:43;-1:-1:-1;;;;;3993:46:43;;;;;;;;;;2891:4855;;;;;;;;;;:::o;152:227:-1:-;457:4;446:16;;;;83:57;;277:2;262:18;;248:131;;2891:4855:43;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x6080604052600436106100d25760003560e01c806363b5ac411161007f578063cb3c28c711610059578063cb3c28c7146101e7578063d08533d014610207578063e42c08f214610227578063fb3f4d2914610247576100d2565b806363b5ac41146101a157806365c53a03146101b4578063c2df82e6146101c7576100d2565b806329f7fc9e116100b057806329f7fc9e1461014a5780633fc8cef31461016c5780635aed4ec314610181576100d2565b806315eaef6b146100d45780631626ba7e1461010a57806320b6d5bc14610137575b005b3480156100e057600080fd5b506100f46100ef36600461139f565b610267565b6040516101019190611666565b60405180910390f35b34801561011657600080fd5b5061012a610125366004611479565b6102f4565b6040516101019190611671565b6100d261014536600461139f565b61031c565b34801561015657600080fd5b5061015f6103d7565b6040516101019190611530565b34801561017857600080fd5b5061015f6103ef565b34801561018d57600080fd5b5061015f61019c3660046114f3565b61040b565b6100d26101af3660046112d5565b610447565b6100d26101c23660046114c3565b6104fa565b3480156101d357600080fd5b5061012a6101e236600461131c565b610562565b6101fa6101f53660046113df565b610b63565b604051610101919061173c565b34801561021357600080fd5b506100d26102223660046112f1565b610bb9565b34801561023357600080fd5b506101fa6102423660046112d5565b610caf565b34801561025357600080fd5b506100f461026236600461139f565b610ce4565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff888116855292528083208054869003905590851682528082208054850190555190917f585bc061c1fb99029ae845359d195a4e868890b2566636c927533576e9a89f61916102e29190879087908790611551565b60405180910390a15060019392505050565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602090815260408083208786168452909152812080548501905554909116146103905760405133903480156108fc02916000818181858888f1935050505015801561038a573d6000803e3d6000fd5b506103d2565b8034146103d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611705565b60405180910390fd5b505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405161041a90611209565b61042491906117c0565b604051809103906000f080158015610440573d6000803e3d6000fd5b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610498576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c9906116ce565b6000546104bc9073ffffffffffffffffffffffffffffffffffffffff16823461031c565b7f493b326af1902255740bfd4716a9196f808baee3482695e1cc52bf038d12f60d3482346040516104ef93929190611745565b60405180910390a150565b341561055d57348114610539576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c990611705565b60005461055d9073ffffffffffffffffffffffffffffffffffffffff16303461031c565b600255565b600061056c611216565b610574610d1b565b73ffffffffffffffffffffffffffffffffffffffff168152610594610d1f565b73ffffffffffffffffffffffffffffffffffffffff1660208201526105bb838501856112d5565b73ffffffffffffffffffffffffffffffffffffffff166040808301829052517f70a082310000000000000000000000000000000000000000000000000000000081526370a0823190610611903090600401611530565b60206040518083038186803b15801561062957600080fd5b505afa15801561063d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061066191908101906114db565b60608201819052610676575060009050610b59565b670de0b6b3a764000060a08201819052610696908663ffffffff610d3b16565b60a082015260408101516106c4906106ad90610d7a565b60a08301519060ff16600a0a63ffffffff610d3b16565b60a0820181905260608201516106e0919063ffffffff610e4b16565b60a08201526107086106f189610d7a565b60a08301519060ff16600a0a63ffffffff610e4b16565b60a0820152604081015173ffffffffffffffffffffffffffffffffffffffff8981169116141561076e576107458160400151878360600151610e75565b507fdc1600f3000000000000000000000000000000000000000000000000000000009050610b59565b806020015173ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146107c5576107c0816040015182600001518360600151610f3c565b610877565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee604082810191909152606082015160808301819052602083015191517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691632e1a7d4d916108449160040161173c565b600060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050505b6000816020015173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161490506000826000015173ffffffffffffffffffffffffffffffffffffffff1663cb3c28c7846080015185604001518660600151866108ea578e610900565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8761090b578d61090d565b305b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a60a0015160006040518963ffffffff1660e01b8152600401610957979695949392919061161c565b6020604051808303818588803b15801561097057600080fd5b505af1158015610984573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052506109a991908101906114db565b90508115610aa957826020015173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109fd57600080fd5b505af1158015610a11573d6000803e3d6000fd5b5050505050826020015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89836040518363ffffffff1660e01b8152600401610a55929190611588565b602060405180830381600087803b158015610a6f57600080fd5b505af1158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610aa79190810190611459565b505b60408301517f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a99073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610b0a578360400151610b10565b83602001515b6060850151604051610b2a92918e9186908f908f906115d5565b60405180910390a1507fdc1600f300000000000000000000000000000000000000000000000000000000925050505b9695505050505050565b60007f59ac183f99ea1126881a40dad44fe910c20477829dc17810fc6b6d468aea52b23489898989898989604051610ba2989796959493929190611771565b60405180910390a150600254979650505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c9906116ce565b6000805473ffffffffffffffffffffffffffffffffffffffff9081168252600160209081526040808420928616808552929091528083208054859003905551909183156108fc02918491818181858888f19350505050158015610c71573d6000803e3d6000fd5b507ff952181f7dc65f02b4be7610895c88da3f0ae66b3a0109ad34efdbd9a74d039d8282604051610ca3929190611588565b60405180910390a15050565b33600090815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff949094168352929052205490565b60007f9eba1462601f8272038ef8765c03e22d58589df272104d304d4fe8e2c92cab15338585856040516102e29493929190611551565b3090565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b600082610d4a57506000610d74565b82820282848281610d5757fe5b0414610d7157610d71610d6c60018686611013565b6110b8565b90505b92915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051610dde9190611514565b600060405180830381855afa9150503d8060008114610e19576040519150601f19603f3d011682016040523d82523d6000602084013e610e1e565b606091505b5091509150818015610e31575080516020145b15610e4457610e418160006110c0565b92505b5050919050565b600081610e6157610e61610d6c60038585611013565b6000828481610e6c57fe5b04949350505050565b6040516060907fa9059cbb0000000000000000000000000000000000000000000000000000000090610ead9085908590602401611588565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610f3684826110cc565b50505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e90610f9290309087906004016115ae565b60206040518083038186803b158015610faa57600080fd5b505afa158015610fbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fe291908101906114db565b10156103d2576103d283837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611188565b606063e946c1bb60e01b8484846040516024016110329392919061169e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b6000610d7183836111c0565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516110f59190611514565b6000604051808303816000865af19150503d8060008114611132576040519150601f19603f3d011682016040523d82523d6000602084013e611137565b606091505b5091509150811561117b57805161114f575050611184565b80516020141561117b5760006111668260006110c0565b9050806001141561117957505050611184565b505b610f36816110b8565b5050565b6040516060907f095ea7b30000000000000000000000000000000000000000000000000000000090610ead9085908590602401611588565b600081602001835110156111e1576111e1610d6c60058551856020016111ea565b50016020015190565b6060632800659560e01b848484604051602401611032939291906116c0565b6106a08061182083390190565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60008083601f84011261129f578182fd5b50813567ffffffffffffffff8111156112b6578182fd5b6020830191508360208285010111156112ce57600080fd5b9250929050565b6000602082840312156112e6578081fd5b8135610d71816117fa565b60008060408385031215611303578081fd5b823561130e816117fa565b946020939093013593505050565b60008060008060008060a08789031215611334578182fd5b863561133f816117fa565b9550602087013561134f816117fa565b9450604087013561135f816117fa565b935060608701359250608087013567ffffffffffffffff811115611381578283fd5b61138d89828a0161128e565b979a9699509497509295939492505050565b6000806000606084860312156113b3578283fd5b83356113be816117fa565b925060208401356113ce816117fa565b929592945050506040919091013590565b600080600080600080600060e0888a0312156113f9578081fd5b8735611404816117fa565b965060208801359550604088013561141b816117fa565b9450606088013561142b816117fa565b93506080880135925060a0880135915060c0880135611449816117fa565b8091505092959891949750929550565b60006020828403121561146a578081fd5b81518015158114610d71578182fd5b60008060006040848603121561148d578283fd5b83359250602084013567ffffffffffffffff8111156114aa578283fd5b6114b68682870161128e565b9497909650939450505050565b6000602082840312156114d4578081fd5b5035919050565b6000602082840312156114ec578081fd5b5051919050565b600060208284031215611504578081fd5b813560ff81168114610d71578182fd5b600082516115268184602087016117ce565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff9788168152602081019690965293861660408601529185166060850152608084015260a083015290911660c082015260e00190565b901515815260200190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600485106116ac57fe5b938152602081019290925260409091015290565b60608101600885106116ac57fe5b60208082526009908201527f4f4e4c595f574554480000000000000000000000000000000000000000000000604082015260600190565b60208082526015908201527f56414c55455f414d4f554e545f4d49534d415443480000000000000000000000604082015260600190565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b97885273ffffffffffffffffffffffffffffffffffffffff968716602089015260408801959095529285166060870152908416608086015260a085015260c08401521660e08201526101000190565b60ff91909116815260200190565b60005b838110156117e95781810151838201526020016117d1565b83811115610f365750506000910152565b73ffffffffffffffffffffffffffffffffffffffff8116811461181c57600080fd5b5056fe608060405234801561001057600080fd5b506040516106a03803806106a083398101604081905261002f91610059565b6000805460ff191660ff9290921691909117610100600160a81b0319166101003302179055610081565b60006020828403121561006a578081fd5b815160ff8116811461007a578182fd5b9392505050565b610610806100906000396000f3fe6080604052600436106100705760003560e01c806370a082311161004e57806370a08231146100ef578063a9059cbb1461011c578063d0e30db01461013c578063dd62ed3e1461014457610070565b8063095ea7b3146100755780632e1a7d4d146100ab578063313ce567146100cd575b600080fd5b34801561008157600080fd5b506100956100903660046104b2565b610164565b6040516100a291906105ab565b60405180910390f35b3480156100b757600080fd5b506100cb6100c6366004610503565b61021e565b005b3480156100d957600080fd5b506100e26102af565b6040516100a291906105bf565b3480156100fb57600080fd5b5061010f61010a366004610463565b6102b8565b6040516100a291906105b6565b34801561012857600080fd5b506100956101373660046104b2565b610363565b6100cb6103c2565b34801561015057600080fd5b5061010f61015f36600461047e565b610437565b600080546040517ffb3f4d2900000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063fb3f4d29906101c390339087908790600401610554565b602060405180830381600087803b1580156101dd57600080fd5b505af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061021591908101906104dc565b90505b92915050565b6000546040517fd08533d000000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063d08533d09061027a9033908590600401610585565b600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b5050505050565b60005460ff1681565b600080546040517fe42c08f200000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff169063e42c08f290610313908590600401610533565b60206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610218919081019061051b565b600080546040517f15eaef6b00000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906315eaef6b906101c390339087908790600401610554565b6000546040517f63b5ac4100000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff16906363b5ac4190349061041e903390600401610533565b6000604051808303818588803b15801561029457600080fd5b600092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461021857600080fd5b600060208284031215610474578081fd5b610215838361043f565b60008060408385031215610490578081fd5b61049a848461043f565b91506104a9846020850161043f565b90509250929050565b600080604083850312156104c4578182fd5b6104ce848461043f565b946020939093013593505050565b6000602082840312156104ed578081fd5b815180151581146104fc578182fd5b9392505050565b600060208284031215610514578081fd5b5035919050565b60006020828403121561052c578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b90815260200190565b60ff9190911681526020019056fea365627a7a72315820725afd2fa5cc4452c8c8466218d89f81d63de14df5beee23d24a7c75c8a98d276c6578706572696d656e74616cf564736f6c63430005110040a365627a7a723158206f3333f0d9d39d2be75ccfc992c39b1669e2784b216b546899510088bfb7b0ea6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD2 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x63B5AC41 GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xCB3C28C7 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xCB3C28C7 EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0xD08533D0 EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0xE42C08F2 EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xFB3F4D29 EQ PUSH2 0x247 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x63B5AC41 EQ PUSH2 0x1A1 JUMPI DUP1 PUSH4 0x65C53A03 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x1C7 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x29F7FC9E GT PUSH2 0xB0 JUMPI DUP1 PUSH4 0x29F7FC9E EQ PUSH2 0x14A JUMPI DUP1 PUSH4 0x3FC8CEF3 EQ PUSH2 0x16C JUMPI DUP1 PUSH4 0x5AED4EC3 EQ PUSH2 0x181 JUMPI PUSH2 0xD2 JUMP JUMPDEST DUP1 PUSH4 0x15EAEF6B EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0x20B6D5BC EQ PUSH2 0x137 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4 PUSH2 0xEF CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x267 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1666 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x1479 JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1671 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x145 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x31C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3D7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x1530 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x3EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x19C CALLDATASIZE PUSH1 0x4 PUSH2 0x14F3 JUMP JUMPDEST PUSH2 0x40B JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1AF CALLDATASIZE PUSH1 0x4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0x447 JUMP JUMPDEST PUSH2 0xD2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x14C3 JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12A PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x131C JUMP JUMPDEST PUSH2 0x562 JUMP JUMPDEST PUSH2 0x1FA PUSH2 0x1F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x13DF JUMP JUMPDEST PUSH2 0xB63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x101 SWAP2 SWAP1 PUSH2 0x173C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x222 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F1 JUMP JUMPDEST PUSH2 0xBB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x233 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FA PUSH2 0x242 CALLDATASIZE PUSH1 0x4 PUSH2 0x12D5 JUMP JUMPDEST PUSH2 0xCAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x253 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF4 PUSH2 0x262 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0xCE4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP1 DUP6 AND DUP3 MSTORE DUP1 DUP3 KECCAK256 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE MLOAD SWAP1 SWAP2 PUSH32 0x585BC061C1FB99029AE845359D195A4E868890B2566636C927533576E9A89F61 SWAP2 PUSH2 0x2E2 SWAP2 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH2 0x1551 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SLOAD SWAP1 SWAP2 AND EQ PUSH2 0x390 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 CALLVALUE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x38A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x3D2 JUMP JUMPDEST DUP1 CALLVALUE EQ PUSH2 0x3D2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x40 MLOAD PUSH2 0x41A SWAP1 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x424 SWAP2 SWAP1 PUSH2 0x17C0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x440 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0x498 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x4BC SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 CALLVALUE PUSH2 0x31C JUMP JUMPDEST PUSH32 0x493B326AF1902255740BFD4716A9196F808BAEE3482695E1CC52BF038D12F60D CALLVALUE DUP3 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x4EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1745 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x55D JUMPI CALLVALUE DUP2 EQ PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x1705 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x55D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS CALLVALUE PUSH2 0x31C JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x56C PUSH2 0x1216 JUMP JUMPDEST PUSH2 0x574 PUSH2 0xD1B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH2 0x594 PUSH2 0xD1F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x5BB DUP4 DUP6 ADD DUP6 PUSH2 0x12D5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH4 0x70A08231 SWAP1 PUSH2 0x611 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x1530 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x63D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x661 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x676 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH2 0xB59 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x696 SWAP1 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xD3B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x6C4 SWAP1 PUSH2 0x6AD SWAP1 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0xD3B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x6E0 SWAP2 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xE4B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x708 PUSH2 0x6F1 DUP10 PUSH2 0xD7A JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MLOAD SWAP1 PUSH1 0xFF AND PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH2 0xE4B AND JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x76E JUMPI PUSH2 0x745 DUP2 PUSH1 0x40 ADD MLOAD DUP8 DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xE75 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0xB59 JUMP JUMPDEST DUP1 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x40 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x7C5 JUMPI PUSH2 0x7C0 DUP2 PUSH1 0x40 ADD MLOAD DUP3 PUSH1 0x0 ADD MLOAD DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xF3C JUMP JUMPDEST PUSH2 0x877 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH1 0x40 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x80 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x20 DUP4 ADD MLOAD SWAP2 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP3 AND SWAP2 PUSH4 0x2E1A7D4D SWAP2 PUSH2 0x844 SWAP2 PUSH1 0x4 ADD PUSH2 0x173C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x85E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x872 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCB3C28C7 DUP5 PUSH1 0x80 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x60 ADD MLOAD DUP7 PUSH2 0x8EA JUMPI DUP15 PUSH2 0x900 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP8 PUSH2 0x90B JUMPI DUP14 PUSH2 0x90D JUMP JUMPDEST ADDRESS JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 PUSH1 0xA0 ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP10 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x957 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x161C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x970 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x984 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x9A9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST SWAP1 POP DUP2 ISZERO PUSH2 0xAA9 JUMPI DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA11 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP3 PUSH1 0x20 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA9059CBB DUP10 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA55 SWAP3 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xAA7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1459 JUMP JUMPDEST POP JUMPDEST PUSH1 0x40 DUP4 ADD MLOAD PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE EQ PUSH2 0xB0A JUMPI DUP4 PUSH1 0x40 ADD MLOAD PUSH2 0xB10 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD JUMPDEST PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0xB2A SWAP3 SWAP2 DUP15 SWAP2 DUP7 SWAP1 DUP16 SWAP1 DUP16 SWAP1 PUSH2 0x15D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x59AC183F99EA1126881A40DAD44FE910C20477829DC17810FC6B6D468AEA52B2 CALLVALUE DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xBA2 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1771 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 0x2 SLOAD SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ PUSH2 0xC0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C9 SWAP1 PUSH2 0x16CE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP3 DUP7 AND DUP1 DUP6 MSTORE SWAP3 SWAP1 SWAP2 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE MLOAD SWAP1 SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xC71 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH32 0xF952181F7DC65F02B4BE7610895C88DA3F0AE66B3A0109AD34EFDBD9A74D039D DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0xCA3 SWAP3 SWAP2 SWAP1 PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x9EBA1462601F8272038EF8765C03E22D58589DF272104D304D4FE8E2C92CAB15 CALLER DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x2E2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1551 JUMP JUMPDEST ADDRESS SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xD4A JUMPI POP PUSH1 0x0 PUSH2 0xD74 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xD57 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xD71 JUMPI PUSH2 0xD71 PUSH2 0xD6C PUSH1 0x1 DUP7 DUP7 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x10B8 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xDDE SWAP2 SWAP1 PUSH2 0x1514 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0xE31 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0xE44 JUMPI PUSH2 0xE41 DUP2 PUSH1 0x0 PUSH2 0x10C0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xE61 JUMPI PUSH2 0xE61 PUSH2 0xD6C PUSH1 0x3 DUP6 DUP6 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xE6C JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xEAD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xF36 DUP5 DUP3 PUSH2 0x10CC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0xF92 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x15AE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xFE2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x14DB JUMP JUMPDEST LT ISZERO PUSH2 0x3D2 JUMPI PUSH2 0x3D2 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x1188 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1032 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x169E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0xD71 DUP4 DUP4 PUSH2 0x11C0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x10F5 SWAP2 SWAP1 PUSH2 0x1514 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1132 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1137 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x117B JUMPI DUP1 MLOAD PUSH2 0x114F JUMPI POP POP PUSH2 0x1184 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0x117B JUMPI PUSH1 0x0 PUSH2 0x1166 DUP3 PUSH1 0x0 PUSH2 0x10C0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1179 JUMPI POP POP POP PUSH2 0x1184 JUMP JUMPDEST POP JUMPDEST PUSH2 0xF36 DUP2 PUSH2 0x10B8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xEAD SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1588 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x11E1 JUMPI PUSH2 0x11E1 PUSH2 0xD6C PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x11EA JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1032 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x16C0 JUMP JUMPDEST PUSH2 0x6A0 DUP1 PUSH2 0x1820 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x129F JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12B6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x12CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12E6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xD71 DUP2 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1303 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x130E DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1334 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x133F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x134F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x135F DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1381 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x138D DUP10 DUP3 DUP11 ADD PUSH2 0x128E JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x13B3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x13BE DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x13CE DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13F9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x1404 DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD PUSH2 0x141B DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD PUSH2 0x142B DUP2 PUSH2 0x17FA JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD PUSH2 0x1449 DUP2 PUSH2 0x17FA JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x146A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x148D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x14AA JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x14B6 DUP7 DUP3 DUP8 ADD PUSH2 0x128E JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14D4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14EC JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1504 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xD71 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1526 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x17CE JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP8 DUP9 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE SWAP4 DUP7 AND PUSH1 0x40 DUP7 ADD MSTORE SWAP2 DUP6 AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x16AC JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x16AC JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F4E4C595F574554480000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x15 SWAP1 DUP3 ADD MSTORE PUSH32 0x56414C55455F414D4F554E545F4D49534D415443480000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP8 DUP9 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND PUSH1 0x20 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP3 DUP6 AND PUSH1 0x60 DUP8 ADD MSTORE SWAP1 DUP5 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x17E9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x17D1 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xF36 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x181C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x6A0 CODESIZE SUB DUP1 PUSH2 0x6A0 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x59 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND PUSH2 0x100 CALLER MUL OR SWAP1 SSTORE PUSH2 0x81 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x7A JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x610 DUP1 PUSH2 0x90 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x11C JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x144 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x164 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCB PUSH2 0xC6 CALLDATASIZE PUSH1 0x4 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x21E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE2 PUSH2 0x2AF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5BF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x10A CALLDATASIZE PUSH1 0x4 PUSH2 0x463 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA2 SWAP2 SWAP1 PUSH2 0x5B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x363 JUMP JUMPDEST PUSH2 0xCB PUSH2 0x3C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10F PUSH2 0x15F CALLDATASIZE PUSH1 0x4 PUSH2 0x47E JUMP JUMPDEST PUSH2 0x437 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xFB3F4D2900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xFB3F4D29 SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x215 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4DC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xD08533D000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xD08533D0 SWAP1 PUSH2 0x27A SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x585 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE42C08F200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xE42C08F2 SWAP1 PUSH2 0x313 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x33F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x218 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x51B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x15EAEF6B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x15EAEF6B SWAP1 PUSH2 0x1C3 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x554 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x63B5AC4100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH2 0x100 SWAP1 SWAP2 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x63B5AC41 SWAP1 CALLVALUE SWAP1 PUSH2 0x41E SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0x533 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x474 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x215 DUP4 DUP4 PUSH2 0x43F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x490 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x49A DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP2 POP PUSH2 0x4A9 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x43F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4C4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4CE DUP5 DUP5 PUSH2 0x43F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4ED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x4FC JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x514 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x52C JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH19 0x5AFD2FA5CC4452C8C8466218D89F81D63DE14D CREATE2 0xBE 0xEE 0x23 0xD2 0x4A PUSH29 0x75C8A98D276C6578706572696D656E74616CF564736F6C634300051100 BLOCKHASH LOG3 PUSH6 0x627A7A723158 KECCAK256 PUSH16 0x3333F0D9D39D2BE75CCFC992C39B1669 0xE2 PUSH25 0x4B216B546899510088BFB7B0EA6C6578706572696D656E7461 PUSH13 0xF564736F6C6343000511004000 ",
                "sourceMap": "2891:4855:43:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6287:470;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6287:470:43;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6636:192:16;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6636:192:16;;;;;;;;:::i;:::-;;;;;;;;6961:414:43;;;;;;;;;:::i;1610:86:16:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1610:86:16;;;:::i;:::-;;;;;;;;3817:23:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3817:23:43;;;:::i;4747:153::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4747:153:43;;;;;;;;:::i;5208:342::-;;;;;;;;;:::i;4906:296::-;;;;;;;;;:::i;2658:3772:16:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2658:3772:16;;;;;;;;:::i;4112:629:43:-;;;;;;;;;:::i;:::-;;;;;;;;5556:373;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5556:373:43;;;;;;;;:::i;6763:192::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6763:192:43;;;;;;;;:::i;5935:346::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5935:346:43;;;;;;;;:::i;6287:470::-;6481:10;6438:12;6466:26;;;:14;:26;;;;;;;;;:40;;;;;;;;;;:50;;;;;;;6526:44;;;;;;;;:54;;;;;;6595:134;6438:12;;6595:134;;;;6481:10;6466:40;;6526:44;;6466:50;;6595:134;;;;;;;;;;-1:-1:-1;6746:4:43;6287:470;;;;;:::o;6636:192:16:-;6796:25;6636:192;;;;;:::o;6961:414:43:-;7089:28;;;;;;;;:14;:28;;;;;;;;:42;;;;;;;;;;:52;;;;;;7179:4;;;;7155:29;7151:218;;7244:30;;:10;;7264:9;7244:30;;;;;;;;;7264:9;7244:10;:30;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7244:30:43;7151:218;;;7326:6;7313:9;:19;7305:53;;;;;;;;;;;;;;;;;;;;;;6961:414;;;:::o;1610:86:16:-;1654:42;1610:86;:::o;3817:23:43:-;;;;;;:::o;4747:153::-;4818:20;4883:8;4869:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;4854:39:43;4747:153;-1:-1:-1;;4747:153:43:o;5208:342::-;5342:4;;;;5320:10;:27;5312:49;;;;;;;;;;;;;;5393:4;;5371:53;;5393:4;;5400:12;5414:9;5371:13;:53::i;:::-;5439:104;5475:9;5498:12;5524:9;5439:104;;;;;;;;;;;;;;;;;5208:342;:::o;4906:296::-;5000:9;:14;4996:166;;5048:9;5038:6;:19;5030:53;;;;;;;;;;;;;;5119:4;;5097:54;;5119:4;;5134;5141:9;5097:13;:54::i;:::-;5171:15;:24;4906:296::o;2658:3772:16:-;2859:14;2889:23;;:::i;:::-;2955:30;:28;:30::i;:::-;2922:64;;;;3021:17;:15;:17::i;:::-;2996:43;;:10;;;:43;3141:33;;;;3152:10;3141:33;;;3114:60;;3115:22;;;;3114:60;;;3256;;;;:45;;:60;;3310:4;;3256:60;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3256:60:16;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3256:60:16;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3256:60:16;;;;;;;;;3231:22;;;:85;;;3326:128;;-1:-1:-1;1794:3:16;;-1:-1:-1;3423:20:16;;3326:128;1885:8;3595:20;;;:38;;;3666:36;;3695:6;3666:36;:28;:36;:::i;:::-;3643:20;;;:59;3814:22;;;;3735:113;;3791:46;;:22;:46::i;:::-;3735:20;;;;;3783:55;;3777:2;:61;3735:113;:28;:113;:::i;:::-;3712:20;;;:136;;;3910:22;;;;3881:52;;3712:136;3881:52;:28;:52;:::i;:::-;3858:20;;;:75;3966:105;4022:38;4045:14;4022:22;:38::i;:::-;3966:20;;;;;4014:47;;4008:2;:53;3966:105;:28;:105;:::i;:::-;3943:20;;;:128;4085:22;;;;:40;;;;;;;4081:863;;;4202:74;4225:5;:22;;;4249:2;4253:5;:22;;;4202;:74::i;:::-;-1:-1:-1;4297:14:16;;-1:-1:-1;4290:21:16;;4081:863;4366:5;:10;;;4332:45;;:5;:22;;;:45;;;4328:616;;4505:160;4551:5;:22;;;4599:5;:11;;;4629:5;:22;;;4505:28;:160::i;:::-;4328:616;;;1654:42;4776:22;;;;:42;;;;4854:22;;;;4832:19;;;:44;;;4890:10;;;;:43;;;;;4776:42;4890:19;;;;;;:43;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4890:43:16;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4890:43:16;;;;4328:616;4953:18;5000:5;:10;;;4974:37;;:14;:37;;;4953:58;;5136:20;5159:5;:11;;;:17;;;5183:5;:19;;;5245:5;:22;;;5309:5;:22;;;5374:13;:50;;5410:14;5374:50;;;1654:42;5374:50;5562:13;:70;;5628:2;5562:70;;;5602:4;5562:70;5694:2;5830:5;:20;;;5909:1;5159:762;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5159:762:16;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5159:762:16;;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;5159:762:16;;;;;;;;;5136:785;;5989:13;5985:135;;;6018:5;:10;;;:18;;;6043:12;6018:40;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6018:40:16;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6018:40:16;;;;;6072:5;:10;;;:19;;;6092:2;6096:12;6072:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6072:37:16;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6072:37:16;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;6072:37:16;;;;;;;;;;5985:135;6168:22;;;;6135:257;;6168:43;;1654:42;6168:43;:90;;6236:5;:22;;;6168:90;;;6222:5;:10;;;6168:90;6300:22;;;;6135:257;;;;;6272:14;;6336:12;;6362:4;;6380:2;;6135:257;;;;;;;;;;-1:-1:-1;6409:14:16;;-1:-1:-1;;;2658:3772:16;;;;;;;;;:::o;4112:629:43:-;4415:20;4456:246;4486:9;4509:16;4539:10;4563:15;4592:16;4622:17;4653;4684:8;4456:246;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4719:15:43;;4112:629;;;;;;;;;:::o;5556:373::-;5707:4;;;;5685:10;:27;5677:49;;;;;;;;;;;;;;5736:29;5759:4;;;;;;5736:29;;:14;:29;;;;;;;;:43;;;;;;;;;;;;;:53;;;;;;;5799:29;5736:43;;5799:29;;;;;5783:6;;5799:29;5736;5799;5783:6;5736:43;5799:29;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5799:29:43;5843:79;5880:12;5906:6;5843:79;;;;;;;;;;;;;;;;5556:373;;:::o;6763:192::-;6923:10;6870:15;6908:26;;;:14;:26;;;;;;;;;:40;;;;;;;;;;;;6763:192::o;5935:346::-;6086:12;6119:134;6156:10;6180:12;6206:14;6234:9;6119:134;;;;;;;;;;7431:137;7556:4;7431:137;:::o;7620:124::-;7694:7;7732:4;;;7620:124;:::o;122:448:70:-;208:7;235:6;231:45;;-1:-1:-1;264:1:70;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;:::-;342:21;:193::i;:::-;562:1;-1:-1:-1;122:448:70;;;;;:::o;3905:366:50:-;3985:19;4036:2;4020:18;;4049:15;4066:23;4093:5;:16;;4110:18;;;;;;;;;;;;;;;;;4093:36;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4048:81:50;;;;4143:10;:37;;;;;4157:10;:17;4178:2;4157:23;4143:37;4139:126;;;4218:35;4239:10;4251:1;4218:20;:35::i;:::-;4196:58;;4139:126;3905:366;;;;;:::o;576:383:70:-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:70:o;2581:324:50:-;2727:114;;2703:21;;2763:32;;2727:114;;2809:2;;2825:6;;2727:114;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2727:114:50;;;49:4:-1;25:18;;61:17;;2727:114:50;182:15:-1;2727:114:50;;;;179:29:-1;;;;160:49;;;2727:114:50;-1:-1:-1;2851:47:50;2882:5;2727:114;2851:30;:47::i;:::-;2581:324;;;;:::o;1978:267::-;2115:52;;;;;2170:6;;2115:28;;;;;;:52;;2152:4;;2159:7;;2115:52;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2115:52:50;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2115:52:50;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2115:52:50;;;;;;;;;:61;2111:128;;;2192:36;2200:5;2207:7;2224:2;2192:7;:36::i;731:322:71:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;919:127:71;;;49:4:-1;25:18;;61:17;;919:127:71;182:15:-1;919:127:71;;;;179:29:-1;;;;160:49;;;919:127:71;-1:-1:-1;731:322:71;;;;;:::o;1511:170:69:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;15929:220:64;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;6120:571:50:-;6252:15;6269:23;6296:6;:11;;6308:8;6296:21;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6251:66:50;;;;6331:10;6327:315;;;6361:17;;6357:67;;6403:7;;;;6357:67;6441:10;:17;6462:2;6441:23;6437:195;;;6484:14;6501:35;6522:10;6534:1;6501:20;:35::i;:::-;6484:52;;6558:6;6568:1;6558:11;6554:64;;;6593:7;;;;;6554:64;6437:195;;6651:33;6673:10;6651:21;:33::i;6120:571::-;;;:::o;1194:338::-;1347:121;;1323:21;;1383:31;;1347:121;;1428:7;;1449:9;;1347:121;;;;14133:679:64;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:64;14661:2;14759:13;14753:20;;14133:679::o;1292:378:65:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;2891:4855:43;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;581:336:-1:-;;;695:3;688:4;680:6;676:17;672:27;662:2;;-1:-1;;703:12;662:2;-1:-1;733:20;;773:18;762:30;;759:2;;;-1:-1;;795:12;759:2;839:4;831:6;827:17;815:29;;890:3;839:4;870:17;831:6;856:32;;853:41;850:2;;;907:1;;897:12;850:2;655:262;;;;;;1336:241;;1440:2;1428:9;1419:7;1415:23;1411:32;1408:2;;;-1:-1;;1446:12;1408:2;85:6;72:20;97:33;124:5;97:33;;1848:382;;;1977:2;1965:9;1956:7;1952:23;1948:32;1945:2;;;-1:-1;;1983:12;1945:2;230:6;217:20;242:41;277:5;242:41;;;2035:71;2143:2;2182:22;;;;992:20;;-1:-1;;;1939:291;2237:867;;;;;;;2428:3;2416:9;2407:7;2403:23;2399:33;2396:2;;;-1:-1;;2435:12;2396:2;85:6;72:20;97:33;124:5;97:33;;;2487:63;-1:-1;2587:2;2626:22;;72:20;97:33;72:20;97:33;;;2595:63;-1:-1;2695:2;2734:22;;72:20;97:33;72:20;97:33;;;2703:63;-1:-1;2803:2;2842:22;;992:20;;-1:-1;2939:3;2924:19;;2911:33;2964:18;2953:30;;2950:2;;;-1:-1;;2986:12;2950:2;3024:64;3080:7;3071:6;3060:9;3056:22;3024:64;;;2390:714;;;;-1:-1;2390:714;;-1:-1;2390:714;;3014:74;;2390:714;-1:-1;;;2390:714;3111:491;;;;3249:2;3237:9;3228:7;3224:23;3220:32;3217:2;;;-1:-1;;3255:12;3217:2;85:6;72:20;97:33;124:5;97:33;;;3307:63;-1:-1;3407:2;3446:22;;72:20;97:33;72:20;97:33;;;3211:391;;3415:63;;-1:-1;;;3515:2;3554:22;;;;992:20;;3211:391;3609:1011;;;;;;;;3823:3;3811:9;3802:7;3798:23;3794:33;3791:2;;;-1:-1;;3830:12;3791:2;85:6;72:20;97:33;124:5;97:33;;;3882:63;-1:-1;3982:2;4021:22;;992:20;;-1:-1;4090:2;4129:22;;72:20;97:33;72:20;97:33;;;4098:63;-1:-1;4198:2;4245:22;;217:20;242:41;217:20;242:41;;;4206:71;-1:-1;4314:3;4354:22;;992:20;;-1:-1;4423:3;4463:22;;992:20;;-1:-1;4532:3;4572:22;;72:20;97:33;72:20;97:33;;;4541:63;;;;3785:835;;;;;;;;;;;4627:257;;4739:2;4727:9;4718:7;4714:23;4710:32;4707:2;;;-1:-1;;4745:12;4707:2;376:6;370:13;21261:5;18473:13;18466:21;21239:5;21236:32;21226:2;;-1:-1;;21272:12;4891:490;;;;5031:2;5019:9;5010:7;5006:23;5002:32;4999:2;;;-1:-1;;5037:12;4999:2;510:6;497:20;5089:63;;5217:2;5206:9;5202:18;5189:32;5241:18;5233:6;5230:30;5227:2;;;-1:-1;;5263:12;5227:2;5301:64;5357:7;5348:6;5337:9;5333:22;5301:64;;;4993:388;;5291:74;;-1:-1;5291:74;;-1:-1;;;;4993:388;5388:241;;5492:2;5480:9;5471:7;5467:23;5463:32;5460:2;;;-1:-1;;5498:12;5460:2;-1:-1;992:20;;5454:175;-1:-1;5454:175;5636:263;;5751:2;5739:9;5730:7;5726:23;5722:32;5719:2;;;-1:-1;;5757:12;5719:2;-1:-1;1140:13;;5713:186;-1:-1;5713:186;5906:237;;6008:2;5996:9;5987:7;5983:23;5979:32;5976:2;;;-1:-1;;6014:12;5976:2;1281:6;1268:20;19347:4;21629:5;19336:16;21606:5;21603:33;21593:2;;-1:-1;;21640:12;8935:254;;6951:5;17709:12;7062:52;7107:6;7102:3;7095:4;7088:5;7084:16;7062:52;;;7126:16;;;;;9056:133;-1:-1;;9056:133;9465:213;19142:42;19131:54;;;;6386:45;;9583:2;9568:18;;9554:124;9921:563;19142:42;19131:54;;;6229:58;;19131:54;;;10304:2;10289:18;;6386:45;19131:54;;10387:2;10372:18;;6386:45;10470:2;10455:18;;8772:37;;;;10131:3;10116:19;;10102:382;10491:340;19142:42;19131:54;;;;6229:58;;10817:2;10802:18;;8772:37;10645:2;10630:18;;10616:215;10838:324;19142:42;19131:54;;;6386:45;;19131:54;;11148:2;11133:18;;6386:45;10984:2;10969:18;;10955:207;11169:771;19142:42;19131:54;;;6386:45;;19131:54;;;11592:2;11577:18;;6386:45;11675:2;11660:18;;8772:37;;;;11758:2;11743:18;;8772:37;;;;19131:54;;11841:3;11826:19;;6386:45;19131:54;;;11925:3;11910:19;;6386:45;11427:3;11412:19;;11398:542;12278:931;19142:42;19131:54;;;6386:45;;12753:2;12738:18;;8772:37;;;;19131:54;;;12836:2;12821:18;;6386:45;19131:54;;;12935:2;12920:18;;6386:45;13018:3;13003:19;;8772:37;13102:3;13087:19;;8772:37;19131:54;;;13194:3;13179:19;;6229:58;12588:3;12573:19;;12559:650;13216:201;18473:13;;18466:21;6628:34;;13328:2;13313:18;;13299:118;13424:209;18650:66;18639:78;;;;6743:36;;13540:2;13525:18;;13511:122;13900:473;14093:2;14078:18;;20753:1;20743:12;;20733:2;;20759:9;20733:2;7772:69;;;14276:2;14261:18;;8772:37;;;;14359:2;14344:18;;;8772:37;14064:309;;14380:503;14588:2;14573:18;;20887:1;20877:12;;20867:2;;20893:9;14890:407;15081:2;15095:47;;;8279:1;15066:18;;;18135:19;8314:11;18175:14;;;8294:32;8345:12;;;15052:245;15304:407;15495:2;15509:47;;;8596:2;15480:18;;;18135:19;8632:23;18175:14;;;8612:44;8675:12;;;15466:245;15718:213;8772:37;;;15836:2;15821:18;;15807:124;15938:435;8772:37;;;19142:42;19131:54;;;;16276:2;16261:18;;6386:45;16359:2;16344:18;;8772:37;16112:2;16097:18;;16083:290;16380:1027;8772:37;;;19142:42;19131:54;;;16875:2;16860:18;;6386:45;16958:2;16943:18;;8772:37;;;;19131:54;;;17041:2;17026:18;;6386:45;19131:54;;;17140:3;17125:19;;6386:45;17224:3;17209:19;;8772:37;17308:3;17293:19;;8772:37;19131:54;17392:3;17377:19;;6386:45;16710:3;16695:19;;16681:726;17414:205;19347:4;19336:16;;;;8888:35;;17528:2;17513:18;;17499:120;20387:268;20452:1;20459:101;20473:6;20470:1;20467:13;20459:101;;;20540:11;;;20534:18;20521:11;;;20514:39;20495:2;20488:10;20459:101;;;20575:6;20572:1;20569:13;20566:2;;;-1:-1;;20452:1;20622:16;;20615:27;20436:219;20916:117;19142:42;21003:5;19131:54;20978:5;20975:35;20965:2;;21024:1;;21014:12;20965:2;20959:74;"
            }
        }
    },
    "sourceTreeHashHex": "0x09a82d37223e1e946de2d6c7dd394c4486e16e8962db2ec15e7c563c40553975",
    "sources": {
        "./TestKyberBridge.sol": {
            "id": 43
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 51
        },
        "../src/bridges/KyberBridge.sol": {
            "id": 16
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": {
            "id": 52
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 50
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 69
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 64
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 65
        },
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 60
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 70
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 71
        },
        "../src/interfaces/IERC20Bridge.sol": {
            "id": 31
        },
        "../src/interfaces/IKyberNetworkProxy.sol": {
            "id": 34
        }
    },
    "sourceCodes": {
        "./TestKyberBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"../src/bridges/KyberBridge.sol\";\nimport \"../src/interfaces/IKyberNetworkProxy.sol\";\n\n\n// solhint-disable no-simple-event-func-name\ninterface ITestContract {\n\n    function wethWithdraw(\n        address payable ownerAddress,\n        uint256 amount\n    )\n        external;\n\n    function wethDeposit(\n        address ownerAddress\n    )\n        external\n        payable;\n\n    function tokenTransfer(\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    )\n        external\n        returns (bool success);\n\n    function tokenApprove(\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    )\n        external\n        returns (bool success);\n\n    function tokenBalanceOf(\n        address ownerAddress\n    )\n        external\n        view\n        returns (uint256 balance);\n}\n\n\n/// @dev A minimalist ERC20/WETH token.\ncontract TestToken {\n\n    uint8 public decimals;\n    ITestContract private _testContract;\n\n    constructor(uint8 decimals_) public {\n        decimals = decimals_;\n        _testContract = ITestContract(msg.sender);\n    }\n\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        return _testContract.tokenApprove(\n            msg.sender,\n            spender,\n            allowance\n        );\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool)\n    {\n        return _testContract.tokenTransfer(\n            msg.sender,\n            recipient,\n            amount\n        );\n    }\n\n    function withdraw(uint256 amount)\n        external\n    {\n        return _testContract.wethWithdraw(msg.sender, amount);\n    }\n\n    function deposit()\n        external\n        payable\n    {\n        return _testContract.wethDeposit.value(msg.value)(msg.sender);\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return _testContract.tokenBalanceOf(owner);\n    }\n}\n\n\n/// @dev KyberBridge overridden to mock tokens and implement IKyberBridge.\ncontract TestKyberBridge is\n    KyberBridge,\n    ITestContract,\n    IKyberNetworkProxy\n{\n    event KyberBridgeTrade(\n        uint256 msgValue,\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    );\n\n    event KyberBridgeWethWithdraw(\n        address ownerAddress,\n        uint256 amount\n    );\n\n    event KyberBridgeWethDeposit(\n        uint256 msgValue,\n        address ownerAddress,\n        uint256 amount\n    );\n\n    event KyberBridgeTokenApprove(\n        address tokenAddress,\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    );\n\n    event KyberBridgeTokenTransfer(\n        address tokenAddress,\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    );\n\n    IEtherToken public weth;\n    mapping (address => mapping (address => uint256)) private _tokenBalances;\n    uint256 private _nextFillAmount;\n\n    constructor() public {\n        weth = IEtherToken(address(new TestToken(18)));\n    }\n\n    /// @dev Implementation of `IKyberNetworkProxy.trade()`\n    function trade(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    )\n        external\n        payable\n        returns(uint256 boughtAmount)\n    {\n        emit KyberBridgeTrade(\n            msg.value,\n            sellTokenAddress,\n            sellAmount,\n            buyTokenAddress,\n            recipientAddress,\n            maxBuyTokenAmount,\n            minConversionRate,\n            walletId\n        );\n        return _nextFillAmount;\n    }\n\n    function createToken(uint8 decimals)\n        external\n        returns (address tokenAddress)\n    {\n        return address(new TestToken(decimals));\n    }\n\n    function setNextFillAmount(uint256 amount)\n        external\n        payable\n    {\n        if (msg.value != 0) {\n            require(amount == msg.value, \"VALUE_AMOUNT_MISMATCH\");\n            grantTokensTo(address(weth), address(this), msg.value);\n        }\n        _nextFillAmount = amount;\n    }\n\n    function wethDeposit(\n        address ownerAddress\n    )\n        external\n        payable\n    {\n        require(msg.sender == address(weth), \"ONLY_WETH\");\n        grantTokensTo(address(weth), ownerAddress, msg.value);\n        emit KyberBridgeWethDeposit(\n            msg.value,\n            ownerAddress,\n            msg.value\n        );\n    }\n\n    function wethWithdraw(\n        address payable ownerAddress,\n        uint256 amount\n    )\n        external\n    {\n        require(msg.sender == address(weth), \"ONLY_WETH\");\n        _tokenBalances[address(weth)][ownerAddress] -= amount;\n        ownerAddress.transfer(amount);\n        emit KyberBridgeWethWithdraw(\n            ownerAddress,\n            amount\n        );\n    }\n\n    function tokenApprove(\n        address ownerAddress,\n        address spenderAddress,\n        uint256 allowance\n    )\n        external\n        returns (bool success)\n    {\n        emit KyberBridgeTokenApprove(\n            msg.sender,\n            ownerAddress,\n            spenderAddress,\n            allowance\n        );\n        return true;\n    }\n\n    function tokenTransfer(\n        address ownerAddress,\n        address recipientAddress,\n        uint256 amount\n    )\n        external\n        returns (bool success)\n    {\n        _tokenBalances[msg.sender][ownerAddress] -= amount;\n        _tokenBalances[msg.sender][recipientAddress] += amount;\n        emit KyberBridgeTokenTransfer(\n            msg.sender,\n            ownerAddress,\n            recipientAddress,\n            amount\n        );\n        return true;\n    }\n\n    function tokenBalanceOf(\n        address ownerAddress\n    )\n        external\n        view\n        returns (uint256 balance)\n    {\n        return _tokenBalances[msg.sender][ownerAddress];\n    }\n\n    function grantTokensTo(address tokenAddress, address ownerAddress, uint256 amount)\n        public\n        payable\n    {\n        _tokenBalances[tokenAddress][ownerAddress] += amount;\n        if (tokenAddress != address(weth)) {\n            // Send back ether if not WETH.\n            msg.sender.transfer(msg.value);\n        } else {\n            require(msg.value == amount, \"VALUE_AMOUNT_MISMATCH\");\n        }\n    }\n\n    // @dev overridden to point to this contract.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(this);\n    }\n\n    // @dev overridden to point to test WETH.\n    function _getWethAddress()\n        internal\n        view\n        returns (address)\n    {\n        return address(weth);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "../src/bridges/KyberBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\nimport \"../interfaces/IKyberNetworkProxy.sol\";\n\n\n// solhint-disable space-after-comma\ncontract KyberBridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    using LibSafeMath for uint256;\n\n    // @dev Structure used internally to get around stack limits.\n    struct TradeState {\n        IKyberNetworkProxy kyber;\n        IEtherToken weth;\n        address fromTokenAddress;\n        uint256 fromTokenBalance;\n        uint256 payableAmount;\n        uint256 conversionRate;\n    }\n\n    /// @dev Kyber ETH pseudo-address.\n    address constant public KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev `bridgeTransferFrom()` failure result.\n    bytes4 constant private BRIDGE_FAILED = 0x0;\n    /// @dev Precision of Kyber rates.\n    uint256 constant private KYBER_RATE_BASE = 10 ** 18;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber.\n    function ()\n        external\n        payable\n    {}\n\n    /// @dev Callback for `IKyberBridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the opposing asset\n    ///      to the `KyberNetworkProxy` contract, then transfers the bought\n    ///      tokens to `to`.\n    /// @param toTokenAddress The token to give to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoeded \"from\" token address.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        TradeState memory state;\n        state.kyber = IKyberNetworkProxy(_getKyberNetworkProxyAddress());\n        state.weth = IEtherToken(_getWethAddress());\n        // Decode the bridge data to get the `fromTokenAddress`.\n        (state.fromTokenAddress) = abi.decode(bridgeData, (address));\n        // Query the balance of \"from\" tokens.\n        state.fromTokenBalance = IERC20Token(state.fromTokenAddress).balanceOf(address(this));\n        if (state.fromTokenBalance == 0) {\n            // Return failure if no input tokens.\n            return BRIDGE_FAILED;\n        }\n        // Compute the conversion rate, expressed in 18 decimals.\n        // The sequential notation is to get around stack limits.\n        state.conversionRate = KYBER_RATE_BASE;\n        state.conversionRate = state.conversionRate.safeMul(amount);\n        state.conversionRate = state.conversionRate.safeMul(\n            10 ** uint256(LibERC20Token.decimals(state.fromTokenAddress))\n        );\n        state.conversionRate = state.conversionRate.safeDiv(state.fromTokenBalance);\n        state.conversionRate = state.conversionRate.safeDiv(\n            10 ** uint256(LibERC20Token.decimals(toTokenAddress))\n        );\n        if (state.fromTokenAddress == toTokenAddress) {\n            // Just transfer the tokens if they're the same.\n            LibERC20Token.transfer(state.fromTokenAddress, to, state.fromTokenBalance);\n            return BRIDGE_SUCCESS;\n        } else if (state.fromTokenAddress != address(state.weth)) {\n            // If the input token is not WETH, grant an allowance to the exchange\n            // to spend them.\n            LibERC20Token.approveIfBelow(\n                state.fromTokenAddress,\n                address(state.kyber),\n                state.fromTokenBalance\n            );\n        } else {\n            // If the input token is WETH, unwrap it and attach it to the call.\n            state.fromTokenAddress = KYBER_ETH_ADDRESS;\n            state.payableAmount = state.fromTokenBalance;\n            state.weth.withdraw(state.fromTokenBalance);\n        }\n        bool isToTokenWeth = toTokenAddress == address(state.weth);\n\n        // Try to sell all of this contract's input token balance through\n        // `KyberNetworkProxy.trade()`.\n        uint256 boughtAmount = state.kyber.trade.value(state.payableAmount)(\n            // Input token.\n            state.fromTokenAddress,\n            // Sell amount.\n            state.fromTokenBalance,\n            // Output token.\n            isToTokenWeth ? KYBER_ETH_ADDRESS : toTokenAddress,\n            // Transfer to this contract if converting to ETH, otherwise\n            // transfer directly to the recipient.\n            isToTokenWeth ? address(uint160(address(this))) : address(uint160(to)),\n            // Buy as much as possible.\n            uint256(-1),\n            // Compute the minimum conversion rate, which is expressed in units with\n            // 18 decimal places.\n            state.conversionRate,\n            // No affiliate address.\n            address(0)\n        );\n        // Wrap ETH output and transfer to recipient.\n        if (isToTokenWeth) {\n            state.weth.deposit.value(boughtAmount)();\n            state.weth.transfer(to, boughtAmount);\n        }\n\n        emit ERC20BridgeTransfer(\n            state.fromTokenAddress == KYBER_ETH_ADDRESS ? address(state.weth) : state.fromTokenAddress,\n            toTokenAddress,\n            state.fromTokenBalance,\n            boughtAmount,\n            from,\n            to\n        );\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Magic success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n\n    // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "../src/interfaces/IERC20Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n",
        "../src/interfaces/IKyberNetworkProxy.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IKyberNetworkProxy {\n\n    /// @dev Sells `sellTokenAddress` tokens for `buyTokenAddress` tokens.\n    /// @param sellTokenAddress Token to sell.\n    /// @param sellAmount Amount of tokens to sell.\n    /// @param buyTokenAddress Token to buy.\n    /// @param recipientAddress Address to send bought tokens to.\n    /// @param maxBuyTokenAmount A limit on the amount of tokens to buy.\n    /// @param minConversionRate The minimal conversion rate. If actual rate\n    ///        is lower, trade is canceled.\n    /// @param walletId The wallet ID to send part of the fees\n    /// @return boughtAmount Amount of tokens bought.\n    function trade(\n        address sellTokenAddress,\n        uint256 sellAmount,\n        address buyTokenAddress,\n        address payable recipientAddress,\n        uint256 maxBuyTokenAmount,\n        uint256 minConversionRate,\n        address walletId\n    )\n        external\n        payable\n        returns(uint256 boughtAmount);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc1155=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc1155",
                "@0x/contracts-erc20=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/michaelzhu/monorepo/node_modules/@0x/contracts-exchange"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
