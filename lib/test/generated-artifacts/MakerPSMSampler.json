{
    "schemaVersion": "2.0.0",
    "contractName": "MakerPSMSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50611cfd806100206000396000f3fe60806040526004361061004e5760003560e01c80631f4ff03e1461005a578063281e34321461007c57806378fee41c146100b35780637f7f4f13146100d3578063c7dd6c4f146100f357610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a610075366004611766565b610120565b005b34801561008857600080fd5b5061009c6100973660046118bc565b610454565b6040516100aa929190611ac9565b60405180910390f35b3480156100bf57600080fd5b5061007a6100ce3660046117ff565b6104fa565b3480156100df57600080fd5b5061009c6100ee3660046118bc565b6106ba565b3480156100ff57600080fd5b5061011361010e36600461169d565b610791565b6040516100aa9190611c1d565b600084905060008260018451038151811061013757fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b815260040161016e9190611aee565b600060405180830381600087803b15801561018857600080fd5b505af1925050508015610199575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906101c89030908590600401611a59565b600060405180830381600087803b1580156101e257600080fd5b505af19250505080156101f3575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561022f57600080fd5b505af193505050508015610241575060015b506040516000904780156108fc029183818181858288f1935050505015801561026e573d6000803e3d6000fd5b506060835167ffffffffffffffff8111801561028957600080fd5b506040519080825280602002602001820160405280156102b3578160200160208202803683370190505b5090506060845167ffffffffffffffff811180156102d057600080fd5b506040519080825280602002602001820160405280156102fa578160200160208202803683370190505b50905060005b855181101561043e57306001600160a01b03166378fee41c621e84808c8c8c8c8c888151811061032c57fe5b60200260200101516040518763ffffffff1660e01b8152600401610354959493929190611b47565b600060405180830381600088803b15801561036e57600080fd5b5087f193505050508015610380575060015b610415573d8080156103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b506103bd816107a8565b8584815181106103c957fe5b602002602001018585815181106103dc57fe5b60200260200101828152508281525050508382815181106103f957fe5b60200260200101516000141561040f575061043e565b50610436565b60405162461bcd60e51b815260040161042d90611bc5565b60405180910390fd5b600101610300565b5061044982826107dd565b505050505050505050565b6060806104ed6040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200160405180604001604052808a600001516001600160a01b031681526020018a604001516001600160a01b03168152506040516020016104c29190611bfa565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b9101528461080b565b9097909650945050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561053e57600080fd5b505af192505050801561054f575060015b5060005a905060006060306001600160a01b0316888888888860405160240161057b9493929190611a8c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105b99190611a29565b6000604051808303816000865af19150503d80600081146105f6576040519150601f19603f3d011682016040523d82523d6000602084013e6105fb565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561064757600080fd5b505afa925050508015610677575060408051601f3d908101601f1916820190925261067491810190611967565b60015b61068057610685565b909203915b8161069357610693816108dc565b6106b0818060200190518101906106aa9190611967565b846108e4565b5050505050505050565b6060806106c561150d565b604051806040016040528088600001516001600160a01b0316815260200188604001516001600160a01b031681525090506107836040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001836040516020016107339190611bfa565b6040516020818303038152906040528152602001836040516020016107589190611bfa565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b910152856108f5565b909890975095505050505050565b600061079f85858486610dad565b95945050505050565b60008082516040146107bf575060009050806107d8565b828060200190518101906107d3919061197f565b915091505b915091565b606082826040516020016107f2929190611ac9565b6040516020818303038152906040529050805160208201fd5b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946108579460a09390931b6001600160e01b03191693919290918a90600401611af9565b600060405180830381600087803b15801561087157600080fd5b505af1925050508015610882575060015b610415573d8080156108b0576040519150601f19603f3d011682016040523d82523d6000602084013e6108b5565b606091505b50808060200190518101906108ca9190611705565b935091506108d59050565b9250929050565b805160208201fd5b604051828152816020820152604081fd5b606080825160001415610907576108d5565b825167ffffffffffffffff8111801561091f57600080fd5b50604051908082528060200260200182016040528015610949578160200160208202803683370190505b509050825167ffffffffffffffff8111801561096457600080fd5b5060405190808252806020026020018201604052801561098e578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106109c257fe5b6020026020010151816000815181106109d757fe5b6020026020010181815250506109eb611524565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152610a49611524565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b8152509050610ab4818461080b565b805190945015905080610adb575082600081518110610acf57fe5b60200260200101516000145b15610ae8575050506108d5565b6060610af4838561080b565b805190925015905080610b1b575080600081518110610b0f57fe5b60200260200101516000145b15610b2957505050506108d5565b60005b8751811015610da157606060005b6003811015610d0157610b898a8481518110610b5257fe5b602002602001015185600081518110610b6757fe5b602002602001015189600081518110610b7c57fe5b6020026020010151611199565b87600081518110610b9657fe5b602090810291909101015286511580610bc3575086600081518110610bb757fe5b60200260200101516000145b15610bcd57610d01565b610be660056127100161271089600081518110610b7c57fe5b87600081518110610bf357fe5b602090810291909101015286511580610c20575086600081518110610c1457fe5b60200260200101516000145b15610c2a57610d01565b6060610c36878961080b565b805191945091501580610c5d575080600081518110610c5157fe5b60200260200101516000145b15610c685750610d01565b8094508a8481518110610c7757fe5b602002602001015185600081518110610c8c57fe5b602002602001015110610cf85760008b8581518110610ca757fe5b60200260200101516127108d8781518110610cbe57fe5b602002602001015188600081518110610cd357fe5b6020026020010151030281610ce457fe5b04905060058111610cf6575050610d01565b505b50600101610b3a565b5060008151118015610d14575060008351115b15610d985780600081518110610d2657fe5b6020026020010151888381518110610d3a57fe5b602002602001018181525050610d7f898381518110610d5557fe5b602002602001015184600081518110610d6a57fe5b602002602001015188600081518110610b7c57fe5b878381518110610d8b57fe5b6020026020010181815250505b50600101610b2c565b50505050509250929050565b6000610db761150d565b82806020019051810190610dcb919061187a565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610dfb9190611a45565b60206040518083038186803b158015610e1357600080fd5b505afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611967565b82516020840151919250906001600160a01b0389811691161415610f5357610eee816001600160a01b03166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea557600080fd5b505afa158015610eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edd9190611681565b6001600160a01b038a1690886111f3565b604051634acc893b60e11b81526001600160a01b03821690639599127690610f1c9030908a90600401611a59565b600060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b50505050611107565b82602001516001600160a01b0316876001600160a01b03161415611107576000610ff6826001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610faf57600080fd5b505afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611967565b670de0b6b3a76400009061128b565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561103357600080fd5b505afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906119a2565b60ff16600a0a90506000611089836110838b856112b5565b906112e6565b86519091506110a3906001600160a01b038d16908b6111f3565b604051638d7ef9bb60e01b81526001600160a01b03851690638d7ef9bb906110d19030908590600401611a59565b600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b505050505050505b61118d82886001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111379190611a45565b60206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611967565b90611310565b98975050505050505050565b60008315806111a6575081155b806111af575082155b156111bc575060006111ec565b838202828582816111c957fe5b04146111d95760009150506111ec565b83600185038201816111e757fe5b049150505b9392505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906112239030908790600401611a72565b60206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611967565b101561128657611286838360001961132f565b505050565b6000828201838110156112ac576112ac6112a760008686611390565b6108dc565b90505b92915050565b6000826112c4575060006112af565b828202828482816112d157fe5b04146112ac576112ac6112a760018686611390565b6000816112fc576112fc6112a760038585611390565b600082848161130757fe5b04949350505050565b600082821115611329576113296112a760028585611390565b50900390565b606063095ea7b360e01b838360405160240161134c929190611a59565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061138a84826113ea565b50505050565b606063e946c1bb60e01b8484846040516024016113af93929190611b95565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b60006060836001600160a01b0316836040516114069190611a29565b6000604051808303816000865af19150503d8060008114611443576040519150601f19603f3d011682016040523d82523d6000602084013e611448565b606091505b509150915081801561145e575061145e81611477565b1561146a575050611473565b61138a816108dc565b5050565b600081516000141561148b575060016114b8565b60208251106114b85760006114a18360006114bd565b905080600114156114b65760019150506114b8565b505b919050565b60006112ac8383600081602001835110156114e5576114e56112a760058551856020016114ee565b50016020015190565b6060632800659560e01b8484846040516024016113af93929190611bb7565b604080518082019091526000808252602082015290565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b600082601f83011261155c578081fd5b813561156f61156a82611c4d565b611c26565b81815291506020808301908481018184028601820187101561159057600080fd5b60005b848110156115af57813584529282019290820190600101611593565b505050505092915050565b600082601f8301126115ca578081fd5b81516115d861156a82611c4d565b8181529150602080830190848101818402860182018710156115f957600080fd5b60005b848110156115af578151845292820192908201906001016115fc565b600082601f830112611628578081fd5b813567ffffffffffffffff81111561163e578182fd5b611651601f8201601f1916602001611c26565b915080825283602082850101111561166857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611692578081fd5b81516112ac81611c99565b600080600080608085870312156116b2578283fd5b84356116bd81611c99565b935060208501356116cd81611c99565b9250604085013567ffffffffffffffff8111156116e8578283fd5b6116f487828801611618565b949793965093946060013593505050565b60008060408385031215611717578182fd5b825167ffffffffffffffff8082111561172e578384fd5b61173a868387016115ba565b9350602085015191508082111561174f578283fd5b5061175c858286016115ba565b9150509250929050565b600080600080600060a0868803121561177d578081fd5b853561178881611cb1565b9450602086013561179881611c99565b935060408601356117a881611c99565b9250606086013567ffffffffffffffff808211156117c4578283fd5b6117d089838a01611618565b935060808801359150808211156117e5578283fd5b506117f28882890161154c565b9150509295509295909350565b600080600080600060a08688031215611816578081fd5b853561182181611cb1565b9450602086013561183181611c99565b9350604086013561184181611c99565b9250606086013567ffffffffffffffff81111561185c578182fd5b61186888828901611618565b95989497509295608001359392505050565b60006040828403121561188b578081fd5b6118956040611c26565b82516118a081611c99565b815260208301516118b081611c99565b60208201529392505050565b60008060008084860360c08112156118d2578485fd5b60608112156118df578485fd5b506118ea6060611c26565b85356118f581611c99565b815260208681013590820152604086013561190f81611c99565b60408201529350606085013561192481611c99565b9250608085013561193481611c99565b915060a085013567ffffffffffffffff81111561194f578182fd5b61195b8782880161154c565b91505092959194509250565b600060208284031215611978578081fd5b5051919050565b60008060408385031215611991578182fd5b505080516020909101519092909150565b6000602082840312156119b3578081fd5b815160ff811681146112ac578182fd5b6000815180845260208085019450808401835b838110156119f2578151875295820195908201906001016119d6565b509495945050505050565b60008151808452611a15816020860160208601611c6d565b601f01601f19169290920160200192915050565b60008251611a3b818460208701611c6d565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152608060408201819052600090611ab8908301856119fd565b905082606083015295945050505050565b600060408252611adc60408301856119c3565b828103602084015261079f81856119c3565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b35908301856119fd565b828103608084015261118d81856119c3565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b83908301856119fd565b90508260808301529695505050505050565b6060810160048510611ba357fe5b938152602081019290925260409091015290565b6060810160088510611ba357fe5b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b81516001600160a01b039081168252602092830151169181019190915260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611c4557600080fd5b604052919050565b600067ffffffffffffffff821115611c63578081fd5b5060209081020190565b60005b83811015611c88578181015183820152602001611c70565b8381111561138a5750506000910152565b6001600160a01b0381168114611cae57600080fd5b50565b6001600160e01b031981168114611cae57600080fdfea26469706673582212202fb5f62655b4130532fa51f43bb72381f9ad7dc052458b0b8b0412a16888272c64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1CFD DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xF3 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x120 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BC JUMP JUMPDEST PUSH2 0x454 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x1AC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x18BC JUMP JUMPDEST PUSH2 0x6BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x10E CALLDATASIZE PUSH1 0x4 PUSH2 0x169D JUMP JUMPDEST PUSH2 0x791 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1AEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x199 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1C8 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F3 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x241 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x26E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x43E JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x32C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x354 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B47 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x380 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3BD DUP2 PUSH2 0x7A8 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x40F JUMPI POP PUSH2 0x43E JUMP JUMPDEST POP PUSH2 0x436 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x42D SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x300 JUMP JUMPDEST POP PUSH2 0x449 DUP3 DUP3 PUSH2 0x7DD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x4ED PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C2 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x80B JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x54F JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x57B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x677 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x674 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x680 JUMPI PUSH2 0x685 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x693 JUMPI PUSH2 0x693 DUP2 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x6B0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6AA SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST DUP5 PUSH2 0x8E4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x6C5 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x783 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x733 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x758 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79F DUP6 DUP6 DUP5 DUP7 PUSH2 0xDAD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x7BF JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x7D8 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D3 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F2 SWAP3 SWAP2 SWAP1 PUSH2 0x1AC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x857 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AF9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x882 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CA SWAP2 SWAP1 PUSH2 0x1705 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x8D5 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x907 JUMPI PUSH2 0x8D5 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x949 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x98E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9EB PUSH2 0x1524 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xA49 PUSH2 0x1524 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xAB4 DUP2 DUP5 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xADB JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xACF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xAE8 JUMPI POP POP POP PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAF4 DUP4 DUP6 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xB1B JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xB29 JUMPI POP POP POP POP PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD01 JUMPI PUSH2 0xB89 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1199 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB96 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xBC3 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xBCD JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH2 0xBE6 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBF3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xC20 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC2A JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC36 DUP8 DUP10 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0xC5D JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC68 JUMPI POP PUSH2 0xD01 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xCBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xCD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xCE4 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xCF6 JUMPI POP POP PUSH2 0xD01 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB3A JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0xD14 JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0xD98 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD26 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xD7F DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB2C JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB7 PUSH2 0x150D JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDCB SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFB SWAP2 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE4B SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xF53 JUMPI PUSH2 0xEEE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDD SWAP2 SWAP1 PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0xF1C SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 PUSH2 0xFF6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE7 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1047 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x106B SWAP2 SWAP1 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x1089 DUP4 PUSH2 0x1083 DUP12 DUP6 PUSH2 0x12B5 JUMP JUMPDEST SWAP1 PUSH2 0x12E6 JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x10A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x10D1 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x118D DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1137 SWAP2 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1163 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1187 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST SWAP1 PUSH2 0x1310 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x11A6 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x11AF JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x11BC JUMPI POP PUSH1 0x0 PUSH2 0x11EC JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x11C9 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x11D9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11EC JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x11E7 JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1223 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST LT ISZERO PUSH2 0x1286 JUMPI PUSH2 0x1286 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x132F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x12A7 PUSH1 0x0 DUP7 DUP7 PUSH2 0x1390 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12C4 JUMPI POP PUSH1 0x0 PUSH2 0x12AF JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x12D1 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x12A7 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x12FC JUMPI PUSH2 0x12FC PUSH2 0x12A7 PUSH1 0x3 DUP6 DUP6 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1307 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1329 JUMPI PUSH2 0x1329 PUSH2 0x12A7 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1390 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x134C SWAP3 SWAP2 SWAP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x138A DUP5 DUP3 PUSH2 0x13EA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B95 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1406 SWAP2 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1443 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1448 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x145E JUMPI POP PUSH2 0x145E DUP2 PUSH2 0x1477 JUMP JUMPDEST ISZERO PUSH2 0x146A JUMPI POP POP PUSH2 0x1473 JUMP JUMPDEST PUSH2 0x138A DUP2 PUSH2 0x8DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x148B JUMPI POP PUSH1 0x1 PUSH2 0x14B8 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x14B8 JUMPI PUSH1 0x0 PUSH2 0x14A1 DUP4 PUSH1 0x0 PUSH2 0x14BD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x14B8 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AC DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x14E5 JUMPI PUSH2 0x14E5 PUSH2 0x12A7 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14EE JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x155C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x156F PUSH2 0x156A DUP3 PUSH2 0x1C4D JUMP JUMPDEST PUSH2 0x1C26 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15AF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1593 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15D8 PUSH2 0x156A DUP3 PUSH2 0x1C4D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x15F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15AF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15FC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1628 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1651 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1C26 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1692 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12AC DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16B2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16BD DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16CD DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16E8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x16F4 DUP8 DUP3 DUP9 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1717 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x172E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x173A DUP7 DUP4 DUP8 ADD PUSH2 0x15BA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x174F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x175C DUP6 DUP3 DUP7 ADD PUSH2 0x15BA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x177D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1788 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1798 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x17A8 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17C4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x17D0 DUP10 DUP4 DUP11 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17E5 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x17F2 DUP9 DUP3 DUP10 ADD PUSH2 0x154C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1816 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1821 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1831 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1841 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x185C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1868 DUP9 DUP3 DUP10 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x188B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1895 PUSH1 0x40 PUSH2 0x1C26 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x18A0 DUP2 PUSH2 0x1C99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x18B0 DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x18D2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x18DF JUMPI DUP5 DUP6 REVERT JUMPDEST POP PUSH2 0x18EA PUSH1 0x60 PUSH2 0x1C26 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x18F5 DUP2 PUSH2 0x1C99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x190F DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1924 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x1934 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x195B DUP8 DUP3 DUP9 ADD PUSH2 0x154C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1978 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1991 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19B3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19D6 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1A15 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C6D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1A3B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C6D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AB8 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1ADC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x19C3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x79F DUP2 DUP6 PUSH2 0x19C3 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B35 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x118D DUP2 DUP6 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B83 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1BA3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1BA3 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1C63 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C88 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C70 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x138A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xB5 0xF6 0x26 SSTORE 0xB4 SGT SDIV ORIGIN STATICCALL MLOAD DELEGATECALL EXTCODESIZE 0xB7 0x23 DUP2 0xF9 0xAD PUSH30 0xC052458B0B8B0412A16888272C64736F6C634300060C0033000000000000 ",
                "sourceMap": "803:2388:14:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x60806040526004361061004e5760003560e01c80631f4ff03e1461005a578063281e34321461007c57806378fee41c146100b35780637f7f4f13146100d3578063c7dd6c4f146100f357610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a610075366004611766565b610120565b005b34801561008857600080fd5b5061009c6100973660046118bc565b610454565b6040516100aa929190611ac9565b60405180910390f35b3480156100bf57600080fd5b5061007a6100ce3660046117ff565b6104fa565b3480156100df57600080fd5b5061009c6100ee3660046118bc565b6106ba565b3480156100ff57600080fd5b5061011361010e36600461169d565b610791565b6040516100aa9190611c1d565b600084905060008260018451038151811061013757fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b815260040161016e9190611aee565b600060405180830381600087803b15801561018857600080fd5b505af1925050508015610199575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906101c89030908590600401611a59565b600060405180830381600087803b1580156101e257600080fd5b505af19250505080156101f3575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561022f57600080fd5b505af193505050508015610241575060015b506040516000904780156108fc029183818181858288f1935050505015801561026e573d6000803e3d6000fd5b506060835167ffffffffffffffff8111801561028957600080fd5b506040519080825280602002602001820160405280156102b3578160200160208202803683370190505b5090506060845167ffffffffffffffff811180156102d057600080fd5b506040519080825280602002602001820160405280156102fa578160200160208202803683370190505b50905060005b855181101561043e57306001600160a01b03166378fee41c621e84808c8c8c8c8c888151811061032c57fe5b60200260200101516040518763ffffffff1660e01b8152600401610354959493929190611b47565b600060405180830381600088803b15801561036e57600080fd5b5087f193505050508015610380575060015b610415573d8080156103ae576040519150601f19603f3d011682016040523d82523d6000602084013e6103b3565b606091505b506103bd816107a8565b8584815181106103c957fe5b602002602001018585815181106103dc57fe5b60200260200101828152508281525050508382815181106103f957fe5b60200260200101516000141561040f575061043e565b50610436565b60405162461bcd60e51b815260040161042d90611bc5565b60405180910390fd5b600101610300565b5061044982826107dd565b505050505050505050565b6060806104ed6040518060800160405280876001600160a01b03168152602001866001600160a01b0316815260200160405180604001604052808a600001516001600160a01b031681526020018a604001516001600160a01b03168152506040516020016104c29190611bfa565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b9101528461080b565b9097909650945050505050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561053e57600080fd5b505af192505050801561054f575060015b5060005a905060006060306001600160a01b0316888888888860405160240161057b9493929190611a8c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105b99190611a29565b6000604051808303816000865af19150503d80600081146105f6576040519150601f19603f3d011682016040523d82523d6000602084013e6105fb565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561064757600080fd5b505afa925050508015610677575060408051601f3d908101601f1916820190925261067491810190611967565b60015b61068057610685565b909203915b8161069357610693816108dc565b6106b0818060200190518101906106aa9190611967565b846108e4565b5050505050505050565b6060806106c561150d565b604051806040016040528088600001516001600160a01b0316815260200188604001516001600160a01b031681525090506107836040518060a00160405280886001600160a01b03168152602001876001600160a01b03168152602001836040516020016107339190611bfa565b6040516020818303038152906040528152602001836040516020016107589190611bfa565b60408051601f1981840301815291815290825230602090811b63c7dd6c4f1790911b910152856108f5565b909890975095505050505050565b600061079f85858486610dad565b95945050505050565b60008082516040146107bf575060009050806107d8565b828060200190518101906107d3919061197f565b915091505b915091565b606082826040516020016107f2929190611ac9565b6040516020818303038152906040529050805160208201fd5b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946108579460a09390931b6001600160e01b03191693919290918a90600401611af9565b600060405180830381600087803b15801561087157600080fd5b505af1925050508015610882575060015b610415573d8080156108b0576040519150601f19603f3d011682016040523d82523d6000602084013e6108b5565b606091505b50808060200190518101906108ca9190611705565b935091506108d59050565b9250929050565b805160208201fd5b604051828152816020820152604081fd5b606080825160001415610907576108d5565b825167ffffffffffffffff8111801561091f57600080fd5b50604051908082528060200260200182016040528015610949578160200160208202803683370190505b509050825167ffffffffffffffff8111801561096457600080fd5b5060405190808252806020026020018201604052801561098e578160200160208202803683370190505b506040805160018082528183019092529193506060919060208083019080368337019050509050836000815181106109c257fe5b6020026020010151816000815181106109d757fe5b6020026020010181815250506109eb611524565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152610a49611524565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b8152509050610ab4818461080b565b805190945015905080610adb575082600081518110610acf57fe5b60200260200101516000145b15610ae8575050506108d5565b6060610af4838561080b565b805190925015905080610b1b575080600081518110610b0f57fe5b60200260200101516000145b15610b2957505050506108d5565b60005b8751811015610da157606060005b6003811015610d0157610b898a8481518110610b5257fe5b602002602001015185600081518110610b6757fe5b602002602001015189600081518110610b7c57fe5b6020026020010151611199565b87600081518110610b9657fe5b602090810291909101015286511580610bc3575086600081518110610bb757fe5b60200260200101516000145b15610bcd57610d01565b610be660056127100161271089600081518110610b7c57fe5b87600081518110610bf357fe5b602090810291909101015286511580610c20575086600081518110610c1457fe5b60200260200101516000145b15610c2a57610d01565b6060610c36878961080b565b805191945091501580610c5d575080600081518110610c5157fe5b60200260200101516000145b15610c685750610d01565b8094508a8481518110610c7757fe5b602002602001015185600081518110610c8c57fe5b602002602001015110610cf85760008b8581518110610ca757fe5b60200260200101516127108d8781518110610cbe57fe5b602002602001015188600081518110610cd357fe5b6020026020010151030281610ce457fe5b04905060058111610cf6575050610d01565b505b50600101610b3a565b5060008151118015610d14575060008351115b15610d985780600081518110610d2657fe5b6020026020010151888381518110610d3a57fe5b602002602001018181525050610d7f898381518110610d5557fe5b602002602001015184600081518110610d6a57fe5b602002602001015188600081518110610b7c57fe5b878381518110610d8b57fe5b6020026020010181815250505b50600101610b2c565b50505050509250929050565b6000610db761150d565b82806020019051810190610dcb919061187a565b90506000856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610dfb9190611a45565b60206040518083038186803b158015610e1357600080fd5b505afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611967565b82516020840151919250906001600160a01b0389811691161415610f5357610eee816001600160a01b03166301664f666040518163ffffffff1660e01b815260040160206040518083038186803b158015610ea557600080fd5b505afa158015610eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edd9190611681565b6001600160a01b038a1690886111f3565b604051634acc893b60e11b81526001600160a01b03821690639599127690610f1c9030908a90600401611a59565b600060405180830381600087803b158015610f3657600080fd5b505af1158015610f4a573d6000803e3d6000fd5b50505050611107565b82602001516001600160a01b0316876001600160a01b03161415611107576000610ff6826001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b158015610faf57600080fd5b505afa158015610fc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe79190611967565b670de0b6b3a76400009061128b565b90506000886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561103357600080fd5b505afa158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906119a2565b60ff16600a0a90506000611089836110838b856112b5565b906112e6565b86519091506110a3906001600160a01b038d16908b6111f3565b604051638d7ef9bb60e01b81526001600160a01b03851690638d7ef9bb906110d19030908590600401611a59565b600060405180830381600087803b1580156110eb57600080fd5b505af11580156110ff573d6000803e3d6000fd5b505050505050505b61118d82886001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016111379190611a45565b60206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111879190611967565b90611310565b98975050505050505050565b60008315806111a6575081155b806111af575082155b156111bc575060006111ec565b838202828582816111c957fe5b04146111d95760009150506111ec565b83600185038201816111e757fe5b049150505b9392505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906112239030908790600401611a72565b60206040518083038186803b15801561123b57600080fd5b505afa15801561124f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112739190611967565b101561128657611286838360001961132f565b505050565b6000828201838110156112ac576112ac6112a760008686611390565b6108dc565b90505b92915050565b6000826112c4575060006112af565b828202828482816112d157fe5b04146112ac576112ac6112a760018686611390565b6000816112fc576112fc6112a760038585611390565b600082848161130757fe5b04949350505050565b600082821115611329576113296112a760028585611390565b50900390565b606063095ea7b360e01b838360405160240161134c929190611a59565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061138a84826113ea565b50505050565b606063e946c1bb60e01b8484846040516024016113af93929190611b95565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b60006060836001600160a01b0316836040516114069190611a29565b6000604051808303816000865af19150503d8060008114611443576040519150601f19603f3d011682016040523d82523d6000602084013e611448565b606091505b509150915081801561145e575061145e81611477565b1561146a575050611473565b61138a816108dc565b5050565b600081516000141561148b575060016114b8565b60208251106114b85760006114a18360006114bd565b905080600114156114b65760019150506114b8565b505b919050565b60006112ac8383600081602001835110156114e5576114e56112a760058551856020016114ee565b50016020015190565b6060632800659560e01b8484846040516024016113af93929190611bb7565b604080518082019091526000808252602082015290565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b600082601f83011261155c578081fd5b813561156f61156a82611c4d565b611c26565b81815291506020808301908481018184028601820187101561159057600080fd5b60005b848110156115af57813584529282019290820190600101611593565b505050505092915050565b600082601f8301126115ca578081fd5b81516115d861156a82611c4d565b8181529150602080830190848101818402860182018710156115f957600080fd5b60005b848110156115af578151845292820192908201906001016115fc565b600082601f830112611628578081fd5b813567ffffffffffffffff81111561163e578182fd5b611651601f8201601f1916602001611c26565b915080825283602082850101111561166857600080fd5b8060208401602084013760009082016020015292915050565b600060208284031215611692578081fd5b81516112ac81611c99565b600080600080608085870312156116b2578283fd5b84356116bd81611c99565b935060208501356116cd81611c99565b9250604085013567ffffffffffffffff8111156116e8578283fd5b6116f487828801611618565b949793965093946060013593505050565b60008060408385031215611717578182fd5b825167ffffffffffffffff8082111561172e578384fd5b61173a868387016115ba565b9350602085015191508082111561174f578283fd5b5061175c858286016115ba565b9150509250929050565b600080600080600060a0868803121561177d578081fd5b853561178881611cb1565b9450602086013561179881611c99565b935060408601356117a881611c99565b9250606086013567ffffffffffffffff808211156117c4578283fd5b6117d089838a01611618565b935060808801359150808211156117e5578283fd5b506117f28882890161154c565b9150509295509295909350565b600080600080600060a08688031215611816578081fd5b853561182181611cb1565b9450602086013561183181611c99565b9350604086013561184181611c99565b9250606086013567ffffffffffffffff81111561185c578182fd5b61186888828901611618565b95989497509295608001359392505050565b60006040828403121561188b578081fd5b6118956040611c26565b82516118a081611c99565b815260208301516118b081611c99565b60208201529392505050565b60008060008084860360c08112156118d2578485fd5b60608112156118df578485fd5b506118ea6060611c26565b85356118f581611c99565b815260208681013590820152604086013561190f81611c99565b60408201529350606085013561192481611c99565b9250608085013561193481611c99565b915060a085013567ffffffffffffffff81111561194f578182fd5b61195b8782880161154c565b91505092959194509250565b600060208284031215611978578081fd5b5051919050565b60008060408385031215611991578182fd5b505080516020909101519092909150565b6000602082840312156119b3578081fd5b815160ff811681146112ac578182fd5b6000815180845260208085019450808401835b838110156119f2578151875295820195908201906001016119d6565b509495945050505050565b60008151808452611a15816020860160208601611c6d565b601f01601f19169290920160200192915050565b60008251611a3b818460208701611c6d565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03858116825284166020820152608060408201819052600090611ab8908301856119fd565b905082606083015295945050505050565b600060408252611adc60408301856119c3565b828103602084015261079f81856119c3565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b35908301856119fd565b828103608084015261118d81856119c3565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a060608201819052600090611b83908301856119fd565b90508260808301529695505050505050565b6060810160048510611ba357fe5b938152602081019290925260409091015290565b6060810160088510611ba357fe5b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b81516001600160a01b039081168252602092830151169181019190915260400190565b90815260200190565b60405181810167ffffffffffffffff81118282101715611c4557600080fd5b604052919050565b600067ffffffffffffffff821115611c63578081fd5b5060209081020190565b60005b83811015611c88578181015183820152602001611c70565b8381111561138a5750506000910152565b6001600160a01b0381168114611cae57600080fd5b50565b6001600160e01b031981168114611cae57600080fdfea26469706673582212202fb5f62655b4130532fa51f43bb72381f9ad7dc052458b0b8b0412a16888272c64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xB3 JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0xC7DD6C4F EQ PUSH2 0xF3 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x1766 JUMP JUMPDEST PUSH2 0x120 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x18BC JUMP JUMPDEST PUSH2 0x454 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP3 SWAP2 SWAP1 PUSH2 0x1AC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xCE CALLDATASIZE PUSH1 0x4 PUSH2 0x17FF JUMP JUMPDEST PUSH2 0x4FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0xEE CALLDATASIZE PUSH1 0x4 PUSH2 0x18BC JUMP JUMPDEST PUSH2 0x6BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x113 PUSH2 0x10E CALLDATASIZE PUSH1 0x4 PUSH2 0x169D JUMP JUMPDEST PUSH2 0x791 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAA SWAP2 SWAP1 PUSH2 0x1C1D JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x137 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x1AEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x199 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1C8 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F3 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x241 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x26E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2FA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x43E JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x32C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x354 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B47 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x380 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x3BD DUP2 PUSH2 0x7A8 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3C9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x40F JUMPI POP PUSH2 0x43E JUMP JUMPDEST POP PUSH2 0x436 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x42D SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x300 JUMP JUMPDEST POP PUSH2 0x449 DUP3 DUP3 PUSH2 0x7DD JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x4ED PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C2 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP5 PUSH2 0x80B JUMP JUMPDEST SWAP1 SWAP8 SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x54F JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x57B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5B9 SWAP2 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5F6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5FB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x677 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x674 SWAP2 DUP2 ADD SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x680 JUMPI PUSH2 0x685 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x693 JUMPI PUSH2 0x693 DUP2 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0x6B0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6AA SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST DUP5 PUSH2 0x8E4 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x6C5 PUSH2 0x150D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP SWAP1 POP PUSH2 0x783 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x733 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x758 SWAP2 SWAP1 PUSH2 0x1BFA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0xC7DD6C4F OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x8F5 JUMP JUMPDEST SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x79F DUP6 DUP6 DUP5 DUP7 PUSH2 0xDAD JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0x7BF JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x7D8 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7D3 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F2 SWAP3 SWAP2 SWAP1 PUSH2 0x1AC9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x857 SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1AF9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x871 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x882 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8B0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CA SWAP2 SWAP1 PUSH2 0x1705 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x8D5 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x907 JUMPI PUSH2 0x8D5 JUMP JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x949 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x98E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x9EB PUSH2 0x1524 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xA49 PUSH2 0x1524 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xAB4 DUP2 DUP5 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0xADB JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xACF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xAE8 JUMPI POP POP POP PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xAF4 DUP4 DUP6 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0xB1B JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB0F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xB29 JUMPI POP POP POP POP PUSH2 0x8D5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0xDA1 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xD01 JUMPI PUSH2 0xB89 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB52 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1199 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB96 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xBC3 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xBCD JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH2 0xBE6 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBF3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0xC20 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC2A JUMPI PUSH2 0xD01 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xC36 DUP8 DUP10 PUSH2 0x80B JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0xC5D JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xC68 JUMPI POP PUSH2 0xD01 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC77 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xCA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xCBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xCD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xCE4 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xCF6 JUMPI POP POP PUSH2 0xD01 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB3A JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0xD14 JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0xD98 JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD26 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD3A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xD7F DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD55 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD6A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB7C JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xD8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xB2C JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB7 PUSH2 0x150D JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xDCB SWAP2 SWAP1 PUSH2 0x187A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDFB SWAP2 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE4B SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xF53 JUMPI PUSH2 0xEEE DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1664F66 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xEDD SWAP2 SWAP1 PUSH2 0x1681 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP9 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4ACC893B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x95991276 SWAP1 PUSH2 0xF1C SWAP1 ADDRESS SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xF4A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1107 JUMP JUMPDEST DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1107 JUMPI PUSH1 0x0 PUSH2 0xFF6 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xFAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFC3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFE7 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x128B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1033 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1047 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x106B SWAP2 SWAP1 PUSH2 0x19A2 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH1 0x0 PUSH2 0x1089 DUP4 PUSH2 0x1083 DUP12 DUP6 PUSH2 0x12B5 JUMP JUMPDEST SWAP1 PUSH2 0x12E6 JUMP JUMPDEST DUP7 MLOAD SWAP1 SWAP2 POP PUSH2 0x10A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP1 DUP12 PUSH2 0x11F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8D7EF9BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0x8D7EF9BB SWAP1 PUSH2 0x10D1 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x10FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMPDEST PUSH2 0x118D DUP3 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1137 SWAP2 SWAP1 PUSH2 0x1A45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1163 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1187 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST SWAP1 PUSH2 0x1310 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x11A6 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x11AF JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x11BC JUMPI POP PUSH1 0x0 PUSH2 0x11EC JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x11C9 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x11D9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11EC JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x11E7 JUMPI INVALID JUMPDEST DIV SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1223 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A72 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x123B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1273 SWAP2 SWAP1 PUSH2 0x1967 JUMP JUMPDEST LT ISZERO PUSH2 0x1286 JUMPI PUSH2 0x1286 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x132F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x12A7 PUSH1 0x0 DUP7 DUP7 PUSH2 0x1390 JUMP JUMPDEST PUSH2 0x8DC JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12C4 JUMPI POP PUSH1 0x0 PUSH2 0x12AF JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x12D1 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x12AC JUMPI PUSH2 0x12AC PUSH2 0x12A7 PUSH1 0x1 DUP7 DUP7 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x12FC JUMPI PUSH2 0x12FC PUSH2 0x12A7 PUSH1 0x3 DUP6 DUP6 PUSH2 0x1390 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x1307 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1329 JUMPI PUSH2 0x1329 PUSH2 0x12A7 PUSH1 0x2 DUP6 DUP6 PUSH2 0x1390 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x134C SWAP3 SWAP2 SWAP1 PUSH2 0x1A59 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x138A DUP5 DUP3 PUSH2 0x13EA JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B95 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1406 SWAP2 SWAP1 PUSH2 0x1A29 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1443 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1448 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x145E JUMPI POP PUSH2 0x145E DUP2 PUSH2 0x1477 JUMP JUMPDEST ISZERO PUSH2 0x146A JUMPI POP POP PUSH2 0x1473 JUMP JUMPDEST PUSH2 0x138A DUP2 PUSH2 0x8DC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x148B JUMPI POP PUSH1 0x1 PUSH2 0x14B8 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x14B8 JUMPI PUSH1 0x0 PUSH2 0x14A1 DUP4 PUSH1 0x0 PUSH2 0x14BD JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x14B6 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x14B8 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12AC DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x14E5 JUMPI PUSH2 0x14E5 PUSH2 0x12A7 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x14EE JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13AF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1BB7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x155C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x156F PUSH2 0x156A DUP3 PUSH2 0x1C4D JUMP JUMPDEST PUSH2 0x1C26 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15AF JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1593 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15CA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15D8 PUSH2 0x156A DUP3 PUSH2 0x1C4D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x15F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15AF JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x15FC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1628 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x163E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1651 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1C26 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1668 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1692 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x12AC DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16B2 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16BD DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16CD DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16E8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x16F4 DUP8 DUP3 DUP9 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1717 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x172E JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x173A DUP7 DUP4 DUP8 ADD PUSH2 0x15BA JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x174F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x175C DUP6 DUP3 DUP7 ADD PUSH2 0x15BA JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x177D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1788 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1798 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x17A8 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x17C4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x17D0 DUP10 DUP4 DUP11 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x17E5 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x17F2 DUP9 DUP3 DUP10 ADD PUSH2 0x154C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1816 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1821 DUP2 PUSH2 0x1CB1 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1831 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1841 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x185C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1868 DUP9 DUP3 DUP10 ADD PUSH2 0x1618 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x188B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1895 PUSH1 0x40 PUSH2 0x1C26 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x18A0 DUP2 PUSH2 0x1C99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x18B0 DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x18D2 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x18DF JUMPI DUP5 DUP6 REVERT JUMPDEST POP PUSH2 0x18EA PUSH1 0x60 PUSH2 0x1C26 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x18F5 DUP2 PUSH2 0x1C99 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x190F DUP2 PUSH2 0x1C99 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x1924 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x1934 DUP2 PUSH2 0x1C99 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x194F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x195B DUP8 DUP3 DUP9 ADD PUSH2 0x154C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1978 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1991 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x19B3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x12AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19F2 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19D6 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1A15 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1C6D JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1A3B DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1C6D JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AB8 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x1ADC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x19C3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x79F DUP2 DUP6 PUSH2 0x19C3 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B35 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x118D DUP2 DUP6 PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B83 SWAP1 DUP4 ADD DUP6 PUSH2 0x19FD JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1BA3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1BA3 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1C45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1C63 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1C88 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1C70 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x138A JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1CAE JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0xB5 0xF6 0x26 SSTORE 0xB4 SGT SDIV ORIGIN STATICCALL MLOAD DELEGATECALL EXTCODESIZE 0xB7 0x23 DUP2 0xF9 0xAD PUSH30 0xC052458B0B8B0412A16888272C64736F6C634300060C0033000000000000 ",
                "sourceMap": "803:2388:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4294:2209:18;;;;;;;;;;-1:-1:-1;4294:2209:18;;;;;:::i;:::-;;:::i;:::-;;1496:829:14;;;;;;;;;;-1:-1:-1;1496:829:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;3054:1014:18;;;;;;;;;;-1:-1:-1;3054:1014:18;;;;;:::i;:::-;;:::i;2331:858:14:-;;;;;;;;;;-1:-1:-1;2331:858:14;;;;;:::i;:::-;;:::i;1059:384::-;;;;;;;;;;-1:-1:-1;1059:384:14;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4294:2209:18:-;4503:28;4555:9;4503:63;;4700:16;4719:9;4748:1;4729:9;:16;:20;4719:31;;;;;;;;;;;;;;4700:50;;4833:15;-1:-1:-1;;;;;4833:27:18;;4861:4;4833:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4817:71;4945:52;;-1:-1:-1;;;4945:52:18;;-1:-1:-1;;;;;4945:27:18;;;;;:52;;4981:4;;4988:8;;4945:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4929:90;5068:9;-1:-1:-1;;;;;5045:42:18;;5096:8;5045:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5029:101;5230:42;;5238:1;;5250:21;5230:42;;;;;5238:1;5230:42;5238:1;5230:42;5250:21;5238:1;5230:42;;;;;;;;;;;;;;;;;;;;;5283:27;5327:9;:16;5313:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5313:31:18;;5283:61;;5354:24;5395:9;:16;5381:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5381:31:18;;5354:58;;5428:9;5423:988;5447:9;:16;5443:1;:20;5423:988;;;5504:4;-1:-1:-1;;;;;5504:16:18;;1713:3;5561:8;5591:9;5622:8;5652:10;5684:9;5694:1;5684:12;;;;;;;;;;;;;;5504:210;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5484:917;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5937:38;5968:6;5937:30;:38::i;:::-;5908:10;5919:1;5908:13;;;;;;;;;;;;;5923:7;5931:1;5923:10;;;;;;;;;;;;;5907:68;;;;;;;;;;6321:10;6332:1;6321:13;;;;;;;;;;;;;;6338:1;6321:18;6317:70;;;6363:5;;;6317:70;5811:590;5484:917;;;5745:50;;-1:-1:-1;;;5745:50:18;;;;;;;:::i;:::-;;;;;;;;;5465:3;;5423:988;;;;6458:38;6476:10;6488:7;6458:17;:38::i;:::-;4294:2209;;;;;;;;;:::o;1496:829:14:-;1704:24;1730:34;1811:507;1848:429;;;;;;;;1904:10;-1:-1:-1;;;;;1848:429:14;;;;;1942:10;-1:-1:-1;;;;;1848:429:14;;;;;2014:163;;;;;;;;2071:7;:18;;;-1:-1:-1;;;;;2014:163:14;;;;;2131:7;:23;;;-1:-1:-1;;;;;2014:163:14;;;;1982:213;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1982:213:14;;;;;;;;;1848:429;;;2235:4;1982:213;1848:429;;;2235:27;1848:429;;;;;;;2291:17;1811:23;:507::i;:::-;1780:538;;;;-1:-1:-1;1496:829:14;-1:-1:-1;;;;;1496:829:14:o;3054:1014:18:-;-1:-1:-1;;;;;;;;;;3306:39:18;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3290:79;3405:15;3423:9;3405:27;;3471:12;3485:17;3514:4;-1:-1:-1;;;;;3506:18:18;3561:8;3571:9;3582:8;3592:10;3604:8;3538:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3538:75:18;;;;;;;;;;;;;;-1:-1:-1;;;;;3538:75:18;-1:-1:-1;;;;;;3538:75:18;;;;;;;;;;3506:117;;;;3538:75;3506:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3470:153;;;;3653:9;3643:7;:19;3633:29;;-1:-1:-1;;;;;;;;;;3734:34:18;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3734:36:18;;;;;;;;-1:-1:-1;;3734:36:18;;;;;;;;;;;;:::i;:::-;;;3718:169;;;;;3845:21;;;;3718:169;3902:7;3897:53;;3925:14;:4;:12;:14::i;:::-;4000:61;4035:4;4024:27;;;;;;;;;;;;:::i;:::-;4053:7;4000:23;:61::i;:::-;3054:1014;;;;;;;;:::o;2331:858:14:-;2538:24;2564:34;2614:30;;:::i;:::-;2647:127;;;;;;;;2692:7;:18;;;-1:-1:-1;;;;;2647:127:14;;;;;2740:7;:23;;;-1:-1:-1;;;;;2647:127:14;;;;2614:160;;2815:367;2855:286;;;;;;;;2914:10;-1:-1:-1;;;;;2855:286:14;;;;;2952:10;-1:-1:-1;;;;;2855:286:14;;;;;3006:4;2995:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;2855:286;;;;3054:4;3043:16;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3043:16:14;;;;;;;;;2855:286;;;3099:4;3043:16;2855:286;;;3099:27;2855:286;;;;;;;3155:17;2815:26;:367::i;:::-;2784:398;;;;-1:-1:-1;2331:858:14;-1:-1:-1;;;;;;2331:858:14:o;1059:384::-;1251:7;1281:155;1324:9;1363:8;1386:16;1416:10;1281:14;:155::i;:::-;1274:162;1059:384;-1:-1:-1;;;;;1059:384:14:o;9394:277:18:-;9516:7;9525;9552:6;:13;9569:2;9552:19;9548:62;;-1:-1:-1;9595:1:18;;-1:-1:-1;9595:1:18;9587:12;;9548:62;9637:6;9626:38;;;;;;;;;;;;:::i;:::-;9619:45;;;;9394:277;;;;:::o;8785:312::-;8917:17;8948:7;8957;8937:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;8917:48;;9075:4;9069:11;9064:2;9058:4;9054:13;9047:34;6509:708;6666:24;6789:25;;;;6841:14;;6873:13;;;;6789:25;6904:15;;;;6751:209;;-1:-1:-1;;;6751:209:18;;6666:24;;6751:4;;:20;;:209;;6789:34;;;;;-1:-1:-1;;;;;;6789:34:18;;6841:14;;6873:13;;6937:9;;6751:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6735:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7169:6;7158:42;;;;;;;;;;;;:::i;:::-;7134:66;-1:-1:-1;7134:66:18;-1:-1:-1;6735:476:18;;-1:-1:-1;6735:476:18;6983:50;6509:708;;;;;:::o;1531:170:36:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;8448:331:18;8656:4;8650:11;8686:6;8681:3;8674:19;8727:7;8722:2;8717:3;8713:12;8706:29;8760:2;8755:3;8748:15;9677:4060;9848:24;9874:34;9928:17;:24;9956:1;9928:29;9924:95;;;9973:35;;9924:95;10063:17;:24;10049:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10049:39:18;;10029:59;;10122:17;:24;10108:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10108:39:18;-1:-1:-1;10189:16:18;;;10203:1;10189:16;;;;;;;;;10098:49;;-1:-1:-1;10158:28:18;;10189:16;;;;;;;;;;;;-1:-1:-1;10189:16:18;10158:47;;10232:17;10250:1;10232:20;;;;;;;;;;;;;;10215:11;10227:1;10215:14;;;;;;;;;;;;;:37;;;;;10263:42;;:::i;:::-;-1:-1:-1;10308:219:18;;;;;;;;;10360:14;;-1:-1:-1;;;;;10308:219:18;;;;;;10398:13;;;;10308:219;;;;;;;10437:18;;;;10308:219;;;;10491:25;;;-1:-1:-1;;;;;10491:25:18;;;10308:219;;;10491:25;;;;10308:219;;;;;;;;10538:41;;:::i;:::-;10582:218;;;;;;;;10634:4;:13;;;-1:-1:-1;;;;;10582:218:18;;;;;10671:4;:14;;;-1:-1:-1;;;;;10582:218:18;;;;;10711:4;:17;;;10582:218;;;;10764:4;:25;;;;;;;;;;;10582:218;;;;;;;;;;;10538:262;;10899:45;10923:7;10932:11;10899:23;:45::i;:::-;10958:18;;10881:63;;-1:-1:-1;10958:23:18;;-1:-1:-1;10958:23:18;:46;;;10985:11;10997:1;10985:14;;;;;;;;;;;;;;11003:1;10985:19;10958:46;10954:112;;;11020:35;;;;;10954:112;11076:27;11207:46;11231:8;11241:11;11207:23;:46::i;:::-;11268:17;;11190:63;;-1:-1:-1;11268:22:18;;-1:-1:-1;11268:22:18;:44;;;11294:10;11305:1;11294:13;;;;;;;;;;;;;;11311:1;11294:18;11268:44;11264:110;;;11328:35;;;;;;11264:110;11389:9;11384:2347;11408:17;:24;11404:1;:28;11384:2347;;;11453:25;11497:12;11492:1667;1545:1;11515:4;:37;11492:1667;;;11692:156;11739:17;11757:1;11739:20;;;;;;;;;;;;;;11781:10;11792:1;11781:13;;;;;;;;;;;;;;11816:11;11828:1;11816:14;;;;;;;;;;;;;;11692:25;:156::i;:::-;11675:11;11687:1;11675:14;;;;;;;;;;;;;;;;;:173;11870:18;;:23;;:46;;;11897:11;11909:1;11897:14;;;;;;;;;;;;;;11915:1;11897:19;11870:46;11866:98;;;11940:5;;11866:98;11998:206;1398:8;1602:3;12046:59;1602:3;12172:11;12184:1;12172:14;;;;;;;11998:206;11981:11;11993:1;11981:14;;;;;;;;;;;;;;;;;:223;12226:18;;:23;;:46;;;12253:11;12265:1;12253:14;;;;;;;;;;;;;;12271:1;12253:19;12226:46;12222:98;;;12296:5;;12222:98;12337:28;12409:46;12433:8;12443:11;12409:23;:46::i;:::-;12477:18;;12383:72;;-1:-1:-1;12383:72:18;-1:-1:-1;12477:23:18;;:46;;;12504:11;12516:1;12504:14;;;;;;;;;;;;;;12522:1;12504:19;12477:46;12473:98;;;12547:5;;;12473:98;12705:11;12692:24;;12812:17;12830:1;12812:20;;;;;;;;;;;;;;12795:10;12806:1;12795:13;;;;;;;;;;;;;;:37;12791:354;;12856:11;12984:17;13002:1;12984:20;;;;;;;;;;;;;;1602:3;12911:17;12929:1;12911:20;;;;;;;;;;;;;;12895:10;12906:1;12895:13;;;;;;;;;;;;;;:36;12894:63;:110;;;;;;12856:148;;1398:8;13030:3;:41;13026:101;;13099:5;;;;13026:101;12791:354;;-1:-1:-1;11554:6:18;;11492:1667;;;;13194:1;13176:8;:15;:19;:44;;;;;13219:1;13199:10;:17;:21;13176:44;13172:549;;;13253:8;13262:1;13253:11;;;;;;;;;;;;;;13240:7;13248:1;13240:10;;;;;;;;;;;;;:24;;;;;13550:156;13597:17;13615:1;13597:20;;;;;;;;;;;;;;13639:10;13650:1;13639:13;;;;;;;;;;;;;;13674:11;13686:1;13674:14;;;;;;;13550:156;13527:17;13545:1;13527:20;;;;;;;;;;;;;:179;;;;;13172:549;-1:-1:-1;11434:3:18;;11384:2347;;;;9677:4060;;;;;;;;;:::o;2692:1279:49:-;2884:20;2955:30;;:::i;:::-;2999:10;2988:44;;;;;;;;;;;;:::i;:::-;2955:77;;3042:21;3066:8;-1:-1:-1;;;;;3066:18:49;;3093:4;3066:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3126:15;;3179:19;;;;3042:57;;-1:-1:-1;3126:15:49;-1:-1:-1;;;;;3157:41:49;;;;;;3153:738;;;3214:97;3256:3;-1:-1:-1;;;;;3256:11:49;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;3214:24:49;;;3287:10;3214:24;:97::i;:::-;3326:38;;-1:-1:-1;;;3326:38:49;;-1:-1:-1;;;;;3326:11:49;;;;;:38;;3346:4;;3353:10;;3326:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3153:738;;;3406:4;:19;;;-1:-1:-1;;;;;3385:40:49;3393:8;-1:-1:-1;;;;;3385:40:49;;3381:510;;;3441:18;3462:23;3474:3;-1:-1:-1;;;;;3474:8:49;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2327:8;;3462:11;:23::i;:::-;3441:44;;3555:24;3605:8;-1:-1:-1;;;;;3605:17:49;;:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3597:28;;3590:2;3582:43;;-1:-1:-1;3639:17:49;3660:56;3705:10;3660:36;:10;3582:43;3660:18;:36::i;:::-;:44;;:56::i;:::-;3773:15;;3639:77;;-1:-1:-1;3731:99:49;;-1:-1:-1;;;;;3731:24:49;;;3806:10;3731:24;:99::i;:::-;3844:36;;-1:-1:-1;;;3844:36:49;;-1:-1:-1;;;;;3844:10:49;;;;;:36;;3863:4;;3870:9;;3844:36;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3381:510;;;;3908:56;3950:13;3908:8;-1:-1:-1;;;;;3908:18:49;;3935:4;3908:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:41;;:56::i;:::-;3901:63;2692:1279;-1:-1:-1;;;;;;;;2692:1279:49:o;13743:416:18:-;13911:21;13952:14;;;:29;;-1:-1:-1;13970:11:18;;13952:29;:49;;;-1:-1:-1;13985:16:18;;13952:49;13948:63;;;-1:-1:-1;14010:1:18;14003:8;;13948:63;14033:18;;;14045:6;14033:9;:18;:9;14065:13;;;;;:23;14061:37;;14097:1;14090:8;;;;;14061:37;14141:11;14135:1;14121:11;:15;14116:1;:21;14115:37;;;;;;14108:44;;;13743:416;;;;;;:::o;1987:267:30:-;2131:39;;-1:-1:-1;;;2131:39:30;;2173:6;;-1:-1:-1;;;;;2131:15:30;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:30;:42::i;:::-;1987:267;;;:::o;2004:392:33:-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;:::-;2165:24;:196::i;:::-;2388:1;-1:-1:-1;2004:392:33;;;;;:::o;764:457::-;850:7;877:6;873:45;;-1:-1:-1;906:1:33;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:33:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:33;;;1625:373::o;1217:351:30:-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1383:112:30;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:112:30;-1:-1:-1;;;;;;1383:112:30;;;;;;;;;;;-1:-1:-1;1505:56:30;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;1401:322:37:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:37;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:37;-1:-1:-1;;;;;;1589:127:37;;;;;;;;;;;-1:-1:-1;1401:322:37;;;;;:::o;6923:340:30:-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:30;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:30;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;6555:61;6443:183;;6237:395;;;:::o;16122:220:31:-;16243:14;16290:21;16302:1;16305:5;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:31;14838:2;14936:13;14930:20;;14301:688::o;1334:378:34:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;301:707::-;;418:3;411:4;403:6;399:17;395:27;385:2;;-1:-1;;426:12;385:2;473:6;460:20;495:80;510:64;567:6;510:64;:::i;:::-;495:80;:::i;:::-;603:21;;;486:89;-1:-1;647:4;660:14;;;;635:17;;;749;;;740:27;;;;737:36;-1:-1;734:2;;;786:1;;776:12;734:2;811:1;796:206;821:6;818:1;815:13;796:206;;;3824:20;;889:50;;953:14;;;;981;;;;843:1;836:9;796:206;;;800:14;;;;;378:630;;;;:::o;1034:722::-;;1162:3;1155:4;1147:6;1143:17;1139:27;1129:2;;-1:-1;;1170:12;1129:2;1210:6;1204:13;1232:80;1247:64;1304:6;1247:64;:::i;1232:80::-;1340:21;;;1223:89;-1:-1;1384:4;1397:14;;;;1372:17;;;1486;;;1477:27;;;;1474:36;-1:-1;1471:2;;;1523:1;;1513:12;1471:2;1548:1;1533:217;1558:6;1555:1;1552:13;1533:217;;;3972:13;;1626:61;;1701:14;;;;1729;;;;1580:1;1573:9;1533:217;;2037:440;;2138:3;2131:4;2123:6;2119:17;2115:27;2105:2;;-1:-1;;2146:12;2105:2;2193:6;2180:20;21015:18;21007:6;21004:30;21001:2;;;-1:-1;;21037:12;21001:2;2215:64;21110:9;21091:17;;-1:-1;;21087:33;21178:4;21168:15;2215:64;:::i;:::-;2206:73;;2299:6;2292:5;2285:21;2403:3;21178:4;2394:6;2327;2385:16;;2382:25;2379:2;;;2420:1;;2410:12;2379:2;24276:6;21178:4;2327:6;2323:17;21178:4;2361:5;2357:16;24253:30;24332:1;24314:16;;;21178:4;24314:16;24307:27;2361:5;2098:379;-1:-1;;2098:379::o;4172:263::-;;4287:2;4275:9;4266:7;4262:23;4258:32;4255:2;;;-1:-1;;4293:12;4255:2;226:6;220:13;238:33;265:5;238:33;:::i;4442:721::-;;;;;4606:3;4594:9;4585:7;4581:23;4577:33;4574:2;;;-1:-1;;4613:12;4574:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;4665:63;-1:-1;4765:2;4804:22;;72:20;97:33;72:20;97:33;:::i;:::-;4773:63;-1:-1;4901:2;4886:18;;4873:32;4925:18;4914:30;;4911:2;;;-1:-1;;4947:12;4911:2;4977:62;5031:7;5022:6;5011:9;5007:22;4977:62;:::i;:::-;4568:595;;;;-1:-1;4967:72;;5076:2;5115:22;3824:20;;-1:-1;;;4568:595::o;5170:657::-;;;5352:2;5340:9;5331:7;5327:23;5323:32;5320:2;;;-1:-1;;5358:12;5320:2;5409:17;5403:24;5447:18;;5439:6;5436:30;5433:2;;;-1:-1;;5469:12;5433:2;5499:89;5580:7;5571:6;5560:9;5556:22;5499:89;:::i;:::-;5489:99;;5646:2;5635:9;5631:18;5625:25;5611:39;;5447:18;5662:6;5659:30;5656:2;;;-1:-1;;5692:12;5656:2;;5722:89;5803:7;5794:6;5783:9;5779:22;5722:89;:::i;:::-;5712:99;;;5314:513;;;;;:::o;5834:981::-;;;;;;6039:3;6027:9;6018:7;6014:23;6010:33;6007:2;;;-1:-1;;6046:12;6007:2;1980:6;1967:20;1992:32;2018:5;1992:32;:::i;:::-;6098:62;-1:-1;6197:2;6236:22;;72:20;97:33;72:20;97:33;:::i;:::-;6205:63;-1:-1;6305:2;6344:22;;72:20;97:33;72:20;97:33;:::i;:::-;6313:63;-1:-1;6441:2;6426:18;;6413:32;6465:18;6454:30;;;6451:2;;;-1:-1;;6487:12;6451:2;6517:62;6571:7;6562:6;6551:9;6547:22;6517:62;:::i;:::-;6507:72;;6644:3;6633:9;6629:19;6616:33;6602:47;;6465:18;6661:6;6658:30;6655:2;;;-1:-1;;6691:12;6655:2;;6721:78;6791:7;6782:6;6771:9;6767:22;6721:78;:::i;:::-;6711:88;;;6001:814;;;;;;;;:::o;6822:845::-;;;;;;7002:3;6990:9;6981:7;6977:23;6973:33;6970:2;;;-1:-1;;7009:12;6970:2;1980:6;1967:20;1992:32;2018:5;1992:32;:::i;:::-;7061:62;-1:-1;7160:2;7199:22;;72:20;97:33;72:20;97:33;:::i;:::-;7168:63;-1:-1;7268:2;7307:22;;72:20;97:33;72:20;97:33;:::i;:::-;7276:63;-1:-1;7404:2;7389:18;;7376:32;7428:18;7417:30;;7414:2;;;-1:-1;;7450:12;7414:2;7480:62;7534:7;7525:6;7514:9;7510:22;7480:62;:::i;:::-;6964:703;;;;-1:-1;6964:703;;7579:3;7619:22;3824:20;;6964:703;-1:-1;;;6964:703::o;7674:337::-;;7826:2;7814:9;7805:7;7801:23;7797:32;7794:2;;;-1:-1;;7832:12;7794:2;2704:20;7826:2;2704:20;:::i;:::-;226:6;220:13;238:33;265:5;238:33;:::i;:::-;2787:86;;2944:2;3009:22;;220:13;238:33;220:13;238:33;:::i;:::-;2944:2;2959:16;;2952:86;2963:5;7788:223;-1:-1;;;7788:223::o;8018:815::-;;;;;8216:9;8207:7;8203:23;8228:3;8203:23;8199:33;8196:2;;;-1:-1;;8235:12;8196:2;3227:4;3206:19;3202:30;3199:2;;;-1:-1;;3235:12;3199:2;;3263:20;3227:4;3263:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;3346:75;;3491:2;3545:22;;;1831:20;3506:16;;;3499:75;3646:2;3700:22;;72:20;97:33;72:20;97:33;:::i;:::-;3646:2;3661:16;;3654:75;3665:5;-1:-1;3227:4;8456:22;;72:20;97:33;72:20;97:33;:::i;:::-;8425:63;-1:-1;8525:3;8565:22;;72:20;97:33;72:20;97:33;:::i;:::-;8534:63;-1:-1;8662:3;8647:19;;8634:33;8687:18;8676:30;;8673:2;;;-1:-1;;8709:12;8673:2;8739:78;8809:7;8800:6;8789:9;8785:22;8739:78;:::i;:::-;8729:88;;;8190:643;;;;;;;:::o;8840:263::-;;8955:2;8943:9;8934:7;8930:23;8926:32;8923:2;;;-1:-1;;8961:12;8923:2;-1:-1;3972:13;;8917:186;-1:-1;8917:186::o;9110:399::-;;;9242:2;9230:9;9221:7;9217:23;9213:32;9210:2;;;-1:-1;;9248:12;9210:2;-1:-1;;3972:13;;9411:2;9461:22;;;3972:13;;;;;-1:-1;9204:305::o;9516:259::-;;9629:2;9617:9;9608:7;9604:23;9600:32;9597:2;;;-1:-1;;9635:12;9597:2;4117:6;4111:13;23462:4;25558:5;23451:16;25535:5;25532:33;25522:2;;-1:-1;;25569:12;10374:690;;10567:5;21461:12;21876:6;21871:3;21864:19;21913:4;;21908:3;21904:14;10579:93;;21913:4;10743:5;21315:14;-1:-1;10782:260;10807:6;10804:1;10801:13;10782:260;;;10868:13;;13395:37;;9936:14;;;;21719;;;;10829:1;10822:9;10782:260;;;-1:-1;11048:10;;10498:566;-1:-1;;;;;10498:566::o;11300:343::-;;11442:5;21461:12;21876:6;21871:3;21864:19;11535:52;11580:6;21913:4;21908:3;21904:14;21913:4;11561:5;11557:16;11535:52;:::i;:::-;21110:9;24693:14;-1:-1;;24689:28;11599:39;;;;21913:4;11599:39;;11390:253;-1:-1;;11390:253::o;13564:271::-;;11810:5;21461:12;11921:52;11966:6;11961:3;11954:4;11947:5;11943:16;11921:52;:::i;:::-;11985:16;;;;;13698:137;-1:-1;;13698:137::o;13842:222::-;-1:-1;;;;;23246:54;;;;10174:37;;13969:2;13954:18;;13940:124::o;14071:349::-;-1:-1;;;;;23246:54;;;;10043:58;;14406:2;14391:18;;13395:37;14234:2;14219:18;;14205:215::o;14427:333::-;-1:-1;;;;;23246:54;;;10174:37;;23246:54;;14746:2;14731:18;;10174:37;14582:2;14567:18;;14553:207::o;14767:640::-;-1:-1;;;;;23246:54;;;10174:37;;23246:54;;15161:2;15146:18;;10174:37;14996:3;15198:2;15183:18;;15176:48;;;14767:640;;15238:76;;14981:19;;15300:6;15238:76;:::i;:::-;15230:84;;13425:5;15393:2;15382:9;15378:18;13395:37;14967:440;;;;;;;:::o;15754:629::-;;16009:2;16030:17;16023:47;16084:108;16009:2;15998:9;15994:18;16178:6;16084:108;:::i;:::-;16240:9;16234:4;16230:20;16225:2;16214:9;16210:18;16203:48;16265:108;16368:4;16359:6;16265:108;:::i;16390:210::-;22592:13;;22585:21;11137:34;;16511:2;16496:18;;16482:118::o;16607:896::-;-1:-1;;;;;;22758:78;;11252:36;;-1:-1;;;;;23246:54;;;17075:2;17060:18;;10174:37;23246:54;;17158:2;17143:18;;10174:37;23257:42;17195:2;17180:18;;17173:48;;;16607:896;;17235:76;;16897:19;;17297:6;17235:76;:::i;:::-;17360:9;17354:4;17350:20;17344:3;17333:9;17329:19;17322:49;17385:108;17488:4;17479:6;17385:108;:::i;17510:748::-;-1:-1;;;;;;22758:78;;11252:36;;-1:-1;;;;;23246:54;;;17928:2;17913:18;;10174:37;23246:54;;18011:2;17996:18;;10174:37;23257:42;18048:2;18033:18;;18026:48;;;17510:748;;18088:76;;17750:19;;18150:6;18088:76;:::i;:::-;18080:84;;13425:5;18243:3;18232:9;18228:19;13395:37;17736:522;;;;;;;;:::o;18265:480::-;18466:2;18451:18;;24819:1;24809:12;;24799:2;;24825:9;24799:2;12102:68;;;18648:2;18633:18;;13395:37;;;;18731:2;18716:18;;;13395:37;18437:308;:::o;18752:510::-;18968:2;18953:18;;24952:1;24942:12;;24932:2;;24958:9;19269:416;19469:2;19483:47;;;19454:18;;;21864:19;12642:34;21904:14;;;12622:55;12696:12;;;19440:245::o;19692:370::-;13050:23;;-1:-1;;;;;23246:54;;;10174:37;;13231:4;13220:16;;;13214:23;23246:54;13291:14;;;10174:37;;;;19893:2;19878:18;;19864:198::o;20069:222::-;13395:37;;;20196:2;20181:18;;20167:124::o;20298:256::-;20360:2;20354:9;20386:17;;;20461:18;20446:34;;20482:22;;;20443:62;20440:2;;;20518:1;;20508:12;20440:2;20360;20527:22;20338:216;;-1:-1;20338:216::o;20561:304::-;;20720:18;20712:6;20709:30;20706:2;;;-1:-1;;20742:12;20706:2;-1:-1;20787:4;20775:17;;;20840:15;;20643:222::o;24349:268::-;24414:1;24421:101;24435:6;24432:1;24429:13;24421:101;;;24502:11;;;24496:18;24483:11;;;24476:39;24457:2;24450:10;24421:101;;;24537:6;24534:1;24531:13;24528:2;;;-1:-1;;24414:1;24584:16;;24577:27;24398:219::o;24981:117::-;-1:-1;;;;;23246:54;;25040:35;;25030:2;;25089:1;;25079:12;25030:2;25024:74;:::o;25229:115::-;-1:-1;;;;;;22758:78;;25287:34;;25277:2;;25335:1;;25325:12"
            }
        }
    },
    "sourceTreeHashHex": "0xd2c17f394271a9020ac069d7f45a03dcd2a53c1aab627d467f48650e598b1cd4",
    "sources": {
        "./MakerPSMSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 18,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        }
    },
    "sourceCodes": {
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ncontract MakerPSMSampler is\n    MixinMakerPSM,\n    SwapRevertSampler\n{\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    function sampleSwapFromMakerPsm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeMakerPsm(\n            IERC20TokenV06(sellToken),\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory makerTokenAmounts)\n    {\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                bridgeData: abi.encode(\n                    MakerPsmBridgeData({\n                        psmAddress: psmInfo.psmAddress,\n                        gemTokenAddres: psmInfo.gemTokenAddress\n                    })\n                ),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        MakerPsmBridgeData memory data = MakerPsmBridgeData({\n            psmAddress: psmInfo.psmAddress,\n            gemTokenAddres: psmInfo.gemTokenAddress\n        });\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: takerToken,\n                buyToken: makerToken,\n                sellTokenData: abi.encode(data),\n                buyTokenData: abi.encode(data),\n                getSwapQuoteCallback: this.sampleSwapFromMakerPsm\n            }),\n            makerTokenAmounts\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinMakerPSM.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ncontract MixinMakerPSM {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n    using LibSafeMathV06 for uint256;\n\n    struct MakerPsmBridgeData {\n        address psmAddress;\n        address gemTokenAddres;\n    }\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.md\n\n    function _tradeMakerPsm(\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        // Decode the bridge data.\n        MakerPsmBridgeData memory data = abi.decode(bridgeData, (MakerPsmBridgeData));\n        uint256 beforeBalance = buyToken.balanceOf(address(this));\n\n        IPSM psm = IPSM(data.psmAddress);\n\n        if (address(sellToken) == data.gemTokenAddres) {\n            sellToken.approveIfBelow(\n                psm.gemJoin(),\n                sellAmount\n            );\n\n            psm.sellGem(address(this), sellAmount);\n        } else if (address(buyToken) == data.gemTokenAddres) {\n            uint256 feeDivisor = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% fee [tout is in wad];\n            uint256 buyTokenBaseUnit = uint256(10) ** uint256(buyToken.decimals());\n            uint256 gemAmount =  sellAmount.safeMul(buyTokenBaseUnit).safeDiv(feeDivisor);\n\n            sellToken.approveIfBelow(\n                data.psmAddress,\n                sellAmount\n            );\n            psm.buyGem(address(this), gemAmount);\n        }\n\n        return buyToken.balanceOf(address(this)).safeSub(beforeBalance);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n\n    /// @dev Fixed address to register and read Gas overhead introduced by Swap revert sampling\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Upper limit of gas to give to a single Swap call\n    uint256 private constant CALL_STIPEND = 2e6;\n\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: CALL_STIPEND}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n\n                // Some sources (Balancer) display issues, especially with small amounts\n                // Where the amountsOut can range, e.g 448,0,0,0,2476,3048,0,4279,4941,0,0,7133,\n\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _getNativeWrappedToken()\n        internal\n        view\n        returns (IEtherTokenV06)\n    {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        address token;\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            token = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n        } else if (chainId == 3) {\n            // Ropsten\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 4) {\n            // Rinkeby\n            token = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n        } else if (chainId == 42) {\n            // Kovan\n            token = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n        } else if (chainId == 56) {\n            // BSC \n            token = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n        } else if (chainId == 137) {\n            // Polygon\n            token = 0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270;\n        } else if (chainId == 1337) {\n            // 0x Ganache\n            token = 0x0B1ba0af832d7C05fD64161E0Db78E85978E8082;\n        }\n        if (token == address(0)) {\n            revert(\"No native wrapped token\");\n        }\n        return IEtherTokenV06(token);\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
