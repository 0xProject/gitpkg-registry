{
    "schemaVersion": "2.0.0",
    "contractName": "DODOHelper",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "contract IDODO",
                        "name": "dodo",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "querySellBaseToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "contract IDODO",
                        "name": "dodo",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "querySellQuoteToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "querySellBaseToken(address,uint256)": {
                    "details": "Calculate the amount bought when the Base token is requested to be sold. This is directly supported in DODO and this is a convenience function.",
                    "params": {
                        "dodo": "The address of the DODO pool",
                        "sellAmount": "the amount of the Base to sell"
                    },
                    "return": "The amount bought of Quote token when selling Base token."
                },
                "querySellQuoteToken(address,uint256)": {
                    "details": "Calculate the amount bought when the Quote token is requested to be sold. This is not directly supported in DODO so we perform the calculation and use the result to buyBase. Note: This has a small amount of imprecision so there is a likelyhood of change (in quote token).",
                    "params": {
                        "dodo": "The address of the DODO pool",
                        "sellAmount": "the amount of the Quote to sell"
                    },
                    "return": "The amount bought of Base token when selling Quote token."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50610c26806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ca19ebd91461003b578063ef4a83f814610086575b600080fd5b6100746004803603604081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356100bf565b60408051918252519081900360200190f35b6100746004803603604081101561009c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561062a565b6000806100ca610ba9565b8473ffffffffffffffffffffffffffffffffffffffff1663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011057600080fd5b505afa158015610124573d6000803e3d6000fd5b505050506040513d602081101561013a57600080fd5b50518152604080517f7c9b8e89000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff871691637c9b8e89916004808301926020929190829003018186803b1580156101a457600080fd5b505afa1580156101b8573d6000803e3d6000fd5b505050506040513d60208110156101ce57600080fd5b505160408083019190915280517feab5d20e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff87169163eab5d20e916004808301926020929190829003018186803b15801561023d57600080fd5b505afa158015610251573d6000803e3d6000fd5b505050506040513d602081101561026757600080fd5b5051602082810191909152604080517fec2fd46d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff88169263ec2fd46d9260048082019391829003018186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d60208110156102fe57600080fd5b505160c0820152604080517fffa64225000000000000000000000000000000000000000000000000000000008152815173ffffffffffffffffffffffffffffffffffffffff88169263ffa642259260048082019391829003018186803b15801561036757600080fd5b505afa15801561037b573d6000803e3d6000fd5b505050506040513d604081101561039157600080fd5b50805160209182015160808401526060830152604080517f17be952e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8816926317be952e9260048082019391829003018186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d602081101561043057600080fd5b505160ff16600281111561044057fe5b8160a00190600281111561045057fe5b9081600281111561045d57fe5b90525060008160a00151600281111561047257fe5b14156104895761048284826106b0565b9150610530565b60018160a00151600281111561049b57fe5b14156104ab57610482848261070b565b60006104c88260600151836020015161074c90919063ffffffff16565b905060006104e78360400151846080015161074c90919063ffffffff16565b9050808611610501576104fa8684610770565b935061052d565b61052a61051d610517888463ffffffff61074c16565b856106b0565b839063ffffffff6107a916565b93505b50505b60006105ad838773ffffffffffffffffffffffffffffffffffffffff1663c0ffa1786040518163ffffffff1660e01b815260040160206040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b50516107c5565b905060006105fb848873ffffffffffffffffffffffffffffffffffffffff1663ab44a7a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561057c57600080fd5b905061061d82610611868463ffffffff61074c16565b9063ffffffff61074c16565b9450505050505b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663a2801e16836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d60208110156106a757600080fd5b50519392505050565b6000806106eb836060015184606001516106df6106d9670de0b6b3a764000088600001516107ef565b886107c5565b60008760c00151610819565b6060840151909150610703908263ffffffff61074c16565b949350505050565b600080610734836060015184602001516106df6106d9670de0b6b3a764000088600001516107ef565b6020840151909150610703908263ffffffff61074c16565b60008282111561076a5761076a610765600285856109aa565b610a49565b50900390565b60006107a282608001516107918585604001516107a990919063ffffffff16565b6040850151855160c0870151610a51565b9392505050565b6000828201838110156107a2576107a2610765600086866109aa565b6000670de0b6b3a76400006107e0848463ffffffff610ac616565b816107e757fe5b049392505050565b60006107a28261080d85670de0b6b3a764000063ffffffff610ac616565b9063ffffffff610af716565b60008061083a8661080d8961082e878c6107c5565b9063ffffffff610ac616565b905060006108596106d9670de0b6b3a76400008663ffffffff61074c16565b90506001851561087a57610873828863ffffffff6107a916565b915061088d565b61088a838863ffffffff6107a916565b92505b8282106108af576108a4828463ffffffff61074c16565b9150600190506108c6565b6108bf838363ffffffff61074c16565b9150600090505b60006108fb6108e8600461082e670de0b6b3a76400008a63ffffffff61074c16565b6108f68c61082e8a8f6107c5565b6107c5565b905061092561092082610914868063ffffffff610ac616565b9063ffffffff6107a916565b610b21565b90506000610946600261082e670de0b6b3a76400008a63ffffffff61074c16565b90506000831561096757610960858463ffffffff6107a916565b905061097a565b610977838663ffffffff61074c16565b90505b88156109975761098a81836107ef565b96505050505050506109a1565b61098a8183610b58565b95945050505050565b606063e946c1bb60e01b848484604051602401808460038111156109ca57fe5b60ff1681526020018381526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b600080610a68846108f6888863ffffffff61074c16565b90506000610a89610a838861080d8b8063ffffffff610ac616565b87610b58565b90506000610a9785836107c5565b9050610ab9836108f683610914670de0b6b3a76400008a63ffffffff61074c16565b9998505050505050505050565b600082610ad557506000610624565b82820282848281610ae257fe5b04146107a2576107a2610765600186866109aa565b600081610b0d57610b0d610765600385856109aa565b6000828481610b1857fe5b04949350505050565b80600160028204015b81811015610b5257809150600281828581610b4157fe5b040181610b4a57fe5b049050610b2a565b50919050565b60006107a2610b7584670de0b6b3a764000063ffffffff610ac616565b83600080610b89848063ffffffff610af716565b905082810284038015610ba157506001019050610624565b509050610624565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006002811115610be457fe5b815260200160008152509056fea265627a7a7231582016a27ebefc92c346f36f216b5dc29063adc1a351ef84c712ac4be79aa68b16c464736f6c63430005110032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC26 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA19EBD9 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEF4A83F8 EQ PUSH2 0x86 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x74 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x62A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCA PUSH2 0xBA9 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x796DA7AF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x7C9B8E8900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0x7C9B8E89 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH32 0xEAB5D20E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0xEAB5D20E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x251 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xEC2FD46D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xEC2FD46D SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFA6422500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xFFA64225 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x17BE952E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0x17BE952E SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x440 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x450 JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x45D JUMPI INVALID JUMPDEST SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x472 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x489 JUMPI PUSH2 0x482 DUP5 DUP3 PUSH2 0x6B0 JUMP JUMPDEST SWAP2 POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x49B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4AB JUMPI PUSH2 0x482 DUP5 DUP3 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C8 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x74C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4E7 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x74C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT PUSH2 0x501 JUMPI PUSH2 0x4FA DUP7 DUP5 PUSH2 0x770 JUMP JUMPDEST SWAP4 POP PUSH2 0x52D JUMP JUMPDEST PUSH2 0x52A PUSH2 0x51D PUSH2 0x517 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST DUP6 PUSH2 0x6B0 JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP JUMPDEST PUSH1 0x0 PUSH2 0x5AD DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC0FFA178 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x590 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5FB DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAB44A7A3 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x61D DUP3 PUSH2 0x611 DUP7 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA2801E16 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6EB DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x6DF PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x7EF JUMP JUMPDEST DUP9 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0xC0 ADD MLOAD PUSH2 0x819 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x703 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x734 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x6DF PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x703 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x76A JUMPI PUSH2 0x76A PUSH2 0x765 PUSH1 0x2 DUP6 DUP6 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0x791 DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x7A9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP6 MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0xA51 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH2 0x7A2 PUSH2 0x765 PUSH1 0x0 DUP7 DUP7 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7E0 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP2 PUSH2 0x7E7 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 DUP3 PUSH2 0x80D DUP6 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAF7 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83A DUP7 PUSH2 0x80D DUP10 PUSH2 0x82E DUP8 DUP13 PUSH2 0x7C5 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x859 PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP6 ISZERO PUSH2 0x87A JUMPI PUSH2 0x873 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x88D JUMP JUMPDEST PUSH2 0x88A DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 DUP3 LT PUSH2 0x8AF JUMPI PUSH2 0x8A4 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 SWAP1 POP PUSH2 0x8C6 JUMP JUMPDEST PUSH2 0x8BF DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8FB PUSH2 0x8E8 PUSH1 0x4 PUSH2 0x82E PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST PUSH2 0x8F6 DUP13 PUSH2 0x82E DUP11 DUP16 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH2 0x925 PUSH2 0x920 DUP3 PUSH2 0x914 DUP7 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST PUSH2 0xB21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x946 PUSH1 0x2 PUSH2 0x82E PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 ISZERO PUSH2 0x967 JUMPI PUSH2 0x960 DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x97A JUMP JUMPDEST PUSH2 0x977 DUP4 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 ISZERO PUSH2 0x997 JUMPI PUSH2 0x98A DUP2 DUP4 PUSH2 0x7EF JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x98A DUP2 DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x9CA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA68 DUP5 PUSH2 0x8F6 DUP9 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA89 PUSH2 0xA83 DUP9 PUSH2 0x80D DUP12 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP8 PUSH2 0xB58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA97 DUP6 DUP4 PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH2 0xAB9 DUP4 PUSH2 0x8F6 DUP4 PUSH2 0x914 PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xAD5 JUMPI POP PUSH1 0x0 PUSH2 0x624 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xAE2 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7A2 JUMPI PUSH2 0x7A2 PUSH2 0x765 PUSH1 0x1 DUP7 DUP7 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xB0D JUMPI PUSH2 0xB0D PUSH2 0x765 PUSH1 0x3 DUP6 DUP6 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xB18 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x2 DUP3 DIV ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB52 JUMPI DUP1 SWAP2 POP PUSH1 0x2 DUP2 DUP3 DUP6 DUP2 PUSH2 0xB41 JUMPI INVALID JUMPDEST DIV ADD DUP2 PUSH2 0xB4A JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xB2A JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 PUSH2 0xB75 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0xB89 DUP5 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAF7 AND JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MUL DUP5 SUB DUP1 ISZERO PUSH2 0xBA1 JUMPI POP PUSH1 0x1 ADD SWAP1 POP PUSH2 0x624 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBE4 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 AND LOG2 PUSH31 0xBEFC92C346F36F216B5DC29063ADC1A351EF84C712AC4BE79AA68B16C46473 PUSH16 0x6C634300051100320000000000000000 ",
                "sourceMap": "6932:5021:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6932:5021:3;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063ca19ebd91461003b578063ef4a83f814610086575b600080fd5b6100746004803603604081101561005157600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356100bf565b60408051918252519081900360200190f35b6100746004803603604081101561009c57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813516906020013561062a565b6000806100ca610ba9565b8473ffffffffffffffffffffffffffffffffffffffff1663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b15801561011057600080fd5b505afa158015610124573d6000803e3d6000fd5b505050506040513d602081101561013a57600080fd5b50518152604080517f7c9b8e89000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff871691637c9b8e89916004808301926020929190829003018186803b1580156101a457600080fd5b505afa1580156101b8573d6000803e3d6000fd5b505050506040513d60208110156101ce57600080fd5b505160408083019190915280517feab5d20e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff87169163eab5d20e916004808301926020929190829003018186803b15801561023d57600080fd5b505afa158015610251573d6000803e3d6000fd5b505050506040513d602081101561026757600080fd5b5051602082810191909152604080517fec2fd46d000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff88169263ec2fd46d9260048082019391829003018186803b1580156102d457600080fd5b505afa1580156102e8573d6000803e3d6000fd5b505050506040513d60208110156102fe57600080fd5b505160c0820152604080517fffa64225000000000000000000000000000000000000000000000000000000008152815173ffffffffffffffffffffffffffffffffffffffff88169263ffa642259260048082019391829003018186803b15801561036757600080fd5b505afa15801561037b573d6000803e3d6000fd5b505050506040513d604081101561039157600080fd5b50805160209182015160808401526060830152604080517f17be952e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8816926317be952e9260048082019391829003018186803b15801561040657600080fd5b505afa15801561041a573d6000803e3d6000fd5b505050506040513d602081101561043057600080fd5b505160ff16600281111561044057fe5b8160a00190600281111561045057fe5b9081600281111561045d57fe5b90525060008160a00151600281111561047257fe5b14156104895761048284826106b0565b9150610530565b60018160a00151600281111561049b57fe5b14156104ab57610482848261070b565b60006104c88260600151836020015161074c90919063ffffffff16565b905060006104e78360400151846080015161074c90919063ffffffff16565b9050808611610501576104fa8684610770565b935061052d565b61052a61051d610517888463ffffffff61074c16565b856106b0565b839063ffffffff6107a916565b93505b50505b60006105ad838773ffffffffffffffffffffffffffffffffffffffff1663c0ffa1786040518163ffffffff1660e01b815260040160206040518083038186803b15801561057c57600080fd5b505afa158015610590573d6000803e3d6000fd5b505050506040513d60208110156105a657600080fd5b50516107c5565b905060006105fb848873ffffffffffffffffffffffffffffffffffffffff1663ab44a7a36040518163ffffffff1660e01b815260040160206040518083038186803b15801561057c57600080fd5b905061061d82610611868463ffffffff61074c16565b9063ffffffff61074c16565b9450505050505b92915050565b60008273ffffffffffffffffffffffffffffffffffffffff1663a2801e16836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561067d57600080fd5b505afa158015610691573d6000803e3d6000fd5b505050506040513d60208110156106a757600080fd5b50519392505050565b6000806106eb836060015184606001516106df6106d9670de0b6b3a764000088600001516107ef565b886107c5565b60008760c00151610819565b6060840151909150610703908263ffffffff61074c16565b949350505050565b600080610734836060015184602001516106df6106d9670de0b6b3a764000088600001516107ef565b6020840151909150610703908263ffffffff61074c16565b60008282111561076a5761076a610765600285856109aa565b610a49565b50900390565b60006107a282608001516107918585604001516107a990919063ffffffff16565b6040850151855160c0870151610a51565b9392505050565b6000828201838110156107a2576107a2610765600086866109aa565b6000670de0b6b3a76400006107e0848463ffffffff610ac616565b816107e757fe5b049392505050565b60006107a28261080d85670de0b6b3a764000063ffffffff610ac616565b9063ffffffff610af716565b60008061083a8661080d8961082e878c6107c5565b9063ffffffff610ac616565b905060006108596106d9670de0b6b3a76400008663ffffffff61074c16565b90506001851561087a57610873828863ffffffff6107a916565b915061088d565b61088a838863ffffffff6107a916565b92505b8282106108af576108a4828463ffffffff61074c16565b9150600190506108c6565b6108bf838363ffffffff61074c16565b9150600090505b60006108fb6108e8600461082e670de0b6b3a76400008a63ffffffff61074c16565b6108f68c61082e8a8f6107c5565b6107c5565b905061092561092082610914868063ffffffff610ac616565b9063ffffffff6107a916565b610b21565b90506000610946600261082e670de0b6b3a76400008a63ffffffff61074c16565b90506000831561096757610960858463ffffffff6107a916565b905061097a565b610977838663ffffffff61074c16565b90505b88156109975761098a81836107ef565b96505050505050506109a1565b61098a8183610b58565b95945050505050565b606063e946c1bb60e01b848484604051602401808460038111156109ca57fe5b60ff1681526020018381526020018281526020019350505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b805160208201fd5b600080610a68846108f6888863ffffffff61074c16565b90506000610a89610a838861080d8b8063ffffffff610ac616565b87610b58565b90506000610a9785836107c5565b9050610ab9836108f683610914670de0b6b3a76400008a63ffffffff61074c16565b9998505050505050505050565b600082610ad557506000610624565b82820282848281610ae257fe5b04146107a2576107a2610765600186866109aa565b600081610b0d57610b0d610765600385856109aa565b6000828481610b1857fe5b04949350505050565b80600160028204015b81811015610b5257809150600281828581610b4157fe5b040181610b4a57fe5b049050610b2a565b50919050565b60006107a2610b7584670de0b6b3a764000063ffffffff610ac616565b83600080610b89848063ffffffff610af716565b905082810284038015610ba157506001019050610624565b509050610624565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006002811115610be457fe5b815260200160008152509056fea265627a7a7231582016a27ebefc92c346f36f216b5dc29063adc1a351ef84c712ac4be79aa68b16c464736f6c63430005110032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCA19EBD9 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xEF4A83F8 EQ PUSH2 0x86 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x74 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xBF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x74 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x62A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCA PUSH2 0xBA9 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x796DA7AF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x124 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x13A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x7C9B8E8900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0x7C9B8E89 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH32 0xEAB5D20E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0xEAB5D20E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x251 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x267 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x20 DUP3 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xEC2FD46D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xEC2FD46D SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFA6422500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xFFA64225 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x367 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x391 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x17BE952E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0x17BE952E SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x406 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x430 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x440 JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x450 JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x45D JUMPI INVALID JUMPDEST SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x472 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x489 JUMPI PUSH2 0x482 DUP5 DUP3 PUSH2 0x6B0 JUMP JUMPDEST SWAP2 POP PUSH2 0x530 JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x49B JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x4AB JUMPI PUSH2 0x482 DUP5 DUP3 PUSH2 0x70B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C8 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x74C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4E7 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0x74C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT PUSH2 0x501 JUMPI PUSH2 0x4FA DUP7 DUP5 PUSH2 0x770 JUMP JUMPDEST SWAP4 POP PUSH2 0x52D JUMP JUMPDEST PUSH2 0x52A PUSH2 0x51D PUSH2 0x517 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST DUP6 PUSH2 0x6B0 JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP JUMPDEST PUSH1 0x0 PUSH2 0x5AD DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC0FFA178 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x590 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5FB DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAB44A7A3 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0x61D DUP3 PUSH2 0x611 DUP7 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA2801E16 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x67D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x691 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6EB DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0x6DF PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x7EF JUMP JUMPDEST DUP9 PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0xC0 ADD MLOAD PUSH2 0x819 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x703 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x734 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x6DF PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0x7EF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0x703 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x76A JUMPI PUSH2 0x76A PUSH2 0x765 PUSH1 0x2 DUP6 DUP6 PUSH2 0x9AA JUMP JUMPDEST PUSH2 0xA49 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0x791 DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0x7A9 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP6 MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0xA51 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x7A2 JUMPI PUSH2 0x7A2 PUSH2 0x765 PUSH1 0x0 DUP7 DUP7 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x7E0 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP2 PUSH2 0x7E7 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 DUP3 PUSH2 0x80D DUP6 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAF7 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83A DUP7 PUSH2 0x80D DUP10 PUSH2 0x82E DUP8 DUP13 PUSH2 0x7C5 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x859 PUSH2 0x6D9 PUSH8 0xDE0B6B3A7640000 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP6 ISZERO PUSH2 0x87A JUMPI PUSH2 0x873 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP2 POP PUSH2 0x88D JUMP JUMPDEST PUSH2 0x88A DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 DUP3 LT PUSH2 0x8AF JUMPI PUSH2 0x8A4 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 SWAP1 POP PUSH2 0x8C6 JUMP JUMPDEST PUSH2 0x8BF DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0x8FB PUSH2 0x8E8 PUSH1 0x4 PUSH2 0x82E PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST PUSH2 0x8F6 DUP13 PUSH2 0x82E DUP11 DUP16 PUSH2 0x7C5 JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH2 0x925 PUSH2 0x920 DUP3 PUSH2 0x914 DUP7 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST PUSH2 0xB21 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x946 PUSH1 0x2 PUSH2 0x82E PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 ISZERO PUSH2 0x967 JUMPI PUSH2 0x960 DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x7A9 AND JUMP JUMPDEST SWAP1 POP PUSH2 0x97A JUMP JUMPDEST PUSH2 0x977 DUP4 DUP7 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 ISZERO PUSH2 0x997 JUMPI PUSH2 0x98A DUP2 DUP4 PUSH2 0x7EF JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0x9A1 JUMP JUMPDEST PUSH2 0x98A DUP2 DUP4 PUSH2 0xB58 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD DUP1 DUP5 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x9CA JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xA68 DUP5 PUSH2 0x8F6 DUP9 DUP9 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA89 PUSH2 0xA83 DUP9 PUSH2 0x80D DUP12 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP8 PUSH2 0xB58 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xA97 DUP6 DUP4 PUSH2 0x7C5 JUMP JUMPDEST SWAP1 POP PUSH2 0xAB9 DUP4 PUSH2 0x8F6 DUP4 PUSH2 0x914 PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0x74C AND JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xAD5 JUMPI POP PUSH1 0x0 PUSH2 0x624 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0xAE2 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x7A2 JUMPI PUSH2 0x7A2 PUSH2 0x765 PUSH1 0x1 DUP7 DUP7 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xB0D JUMPI PUSH2 0xB0D PUSH2 0x765 PUSH1 0x3 DUP6 DUP6 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0xB18 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x2 DUP3 DIV ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xB52 JUMPI DUP1 SWAP2 POP PUSH1 0x2 DUP2 DUP3 DUP6 DUP2 PUSH2 0xB41 JUMPI INVALID JUMPDEST DIV ADD DUP2 PUSH2 0xB4A JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0xB2A JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7A2 PUSH2 0xB75 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0xAC6 AND JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0xB89 DUP5 DUP1 PUSH4 0xFFFFFFFF PUSH2 0xAF7 AND JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MUL DUP5 SUB DUP1 ISZERO PUSH2 0xBA1 JUMPI POP PUSH1 0x1 ADD SWAP1 POP PUSH2 0x624 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBE4 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 AND LOG2 PUSH31 0xBEFC92C346F36F216B5DC29063ADC1A351EF84C712AC4BE79AA68B16C46473 PUSH16 0x6C634300051100320000000000000000 ",
                "sourceMap": "6932:5021:3:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6932:5021:3;;;;;;;;;;;;;;;;;;;;;;;;8550:2007;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8550:2007:3;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7847:199;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7847:199:3;;;;;;;;;:::i;8550:2007::-;8678:7;8701:17;8794:22;;:::i;:::-;8878:4;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8878:21:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8878:21:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8878:21:3;8858:41;;8952:22;;;;;;;;:20;;;;;;:22;;;;;8878:21;;8952:22;;;;;;;:20;:22;;;5:2:-1;;;;30:1;27;20:12;5:2;8952:22:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8952:22:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8952:22:3;8942:7;;;;:32;;;;9026:21;;;;;;;:19;;;;;;:21;;;;;8952:22;;9026:21;;;;;;;:19;:21;;;5:2:-1;;;;30:1;27;20:12;5:2;9026:21:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9026:21:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9026:21:3;;9016:7;;;:31;;;;9067:10;;;;;;;;:8;;;;;;:10;;;;;;;;;;;:8;:10;;;5:2:-1;;;;30:1;27;20:12;5:2;9067:10:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9067:10:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9067:10:3;9057:7;;;:20;9299:24;;;;;;;;:22;;;;;;:24;;;;;;;;;;;:22;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;9299:24:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9299:24:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9299:24:3;;;;;;;9278:17;;;9259:64;9260:16;;;9259:64;9299:24;9471:17;;;;;;;:15;;;;;;:17;;;;;;;;;;;:15;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;9471:17:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9471:17:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9471:17:3;9463:26;;;;;;;;;;9447:5;:13;;:42;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9634:11:3;9617:5;:13;;;:28;;;;;;;;;9613:672;;;9673:38;9693:10;9705:5;9673:19;:38::i;:::-;9661:50;;9613:672;;;9749:17;9732:5;:13;;;:34;;;;;;;;;9728:557;;;9794:40;9816:10;9828:5;9794:21;:40::i;9728:557::-;9865:19;9887:33;9903:5;:16;;;9887:5;:7;;;:15;;:33;;;;:::i;:::-;9865:55;;9934:20;9957:34;9983:5;:7;;;9957:5;:17;;;:25;;:34;;;;:::i;:::-;9934:57;;10023:12;10009:10;:26;10005:270;;10067:40;10089:10;10101:5;10067:21;:40::i;:::-;10055:52;;10005:270;;;10158:102;10199:60;10219:32;:10;10238:12;10219:32;:18;:32;:::i;:::-;10253:5;10199:19;:60::i;:::-;10158:11;;:102;:19;:102;:::i;:::-;10146:114;;10005:270;9728:557;;;10320:13;10336:48;10352:9;10363:4;:18;;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10363:20:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10363:20:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;10363:20:3;10336:15;:48::i;:::-;10320:64;;10394:13;10410:48;10426:9;10437:4;:18;;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;10410:48:3;10394:64;-1:-1:-1;10511:39:3;10544:5;10511:24;:9;10394:64;10511:24;:17;:24;:::i;:::-;:32;:39;:32;:39;:::i;:::-;10504:46;;;;;;8550:2007;;;;;:::o;7847:199::-;7974:7;8004:4;:23;;;8028:10;8004:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8004:35:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8004:35:3;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8004:35:3;;7847:199;-1:-1:-1;;;7847:199:3:o;10563:500::-;10679:24;10719:10;10732:279;10786:5;:16;;;10816:5;:16;;;10846:115;10879:44;7073:6;10905:5;:17;;;10879:20;:44::i;:::-;10941:6;10846:15;:115::i;:::-;10975:5;10994;:7;;;10732:40;:279::i;:::-;11028:16;;;;10719:292;;-1:-1:-1;11028:28:3;;10719:292;11028:28;:24;:28;:::i;:::-;11021:35;10563:500;-1:-1:-1;;;;10563:500:3:o;11069:505::-;11209:23;11248:10;11261:270;11315:5;:16;;;11345:5;:7;;;11366:115;11399:44;7073:6;11425:5;:17;;;11399:20;:44::i;11261:270::-;11548:7;;;;11248:283;;-1:-1:-1;11548:19:3;;11248:283;11548:19;:15;:19;:::i;965:364:53:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;:::-;1099:21;:191::i;:::-;-1:-1:-1;1317:5:53;;;965:364::o;11580:371:3:-;11720:24;11767:177;11807:5;:17;;;11838:23;11854:6;11838:5;:7;;;:15;;:23;;;;:::i;:::-;11875:7;;;;11896:17;;11927:7;;;;11767:26;:177::i;:::-;11760:184;11580:371;-1:-1:-1;;;11580:371:3:o;1335:383:53:-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;897:147:3:-;984:7;884:6;1014:17;:6;1029:1;1014:17;:14;:17;:::i;:::-;:23;;;;;;;897:147;-1:-1:-1;;;897:147:3:o;1050:159::-;1142:7;1172:30;1200:1;1172:19;:6;884;1172:19;:14;:19;:::i;:::-;:27;:30;:27;:30;:::i;3244:1535::-;3422:7;3521:14;3538:46;3581:2;3538:34;3569:2;3538:22;3554:1;3557:2;3538:15;:22::i;:::-;:30;:34;:30;:34;:::i;:46::-;3521:63;-1:-1:-1;3606:9:3;3618:35;3634:14;1789:6;3646:1;3634:14;:11;:14;:::i;3618:35::-;3606:47;-1:-1:-1;3691:4:3;3705:166;;;;3738:18;:1;3748:7;3738:18;:9;:18;:::i;:::-;3734:22;;3705:166;;;3816:23;:6;3831:7;3816:23;:14;:23;:::i;:::-;3807:32;;3705:166;3889:6;3884:1;:11;3880:176;;3915:17;:1;3925:6;3915:17;:9;:17;:::i;:::-;3911:21;;3958:4;3946:16;;3880:176;;;3997:17;:6;4012:1;3997:17;:14;:17;:::i;:::-;3993:21;;4040:5;4028:17;;3880:176;4092:18;4113:112;4142:25;4165:1;4142:14;1789:6;4154:1;4142:14;:11;:14;:::i;:25::-;4181:34;4212:2;4181:22;4197:1;4200:2;4181:15;:22::i;:34::-;4113:15;:112::i;:::-;4092:133;-1:-1:-1;4263:39:3;4269:32;4092:133;4269:12;4279:1;;4269:12;:9;:12;:::i;:::-;:20;:32;:20;:32;:::i;:::-;4263:5;:39::i;:::-;4250:52;-1:-1:-1;4360:19:3;4382:25;4405:1;4382:14;1789:6;4394:1;4382:14;:11;:14;:::i;:25::-;4360:47;;4427:17;4458:9;4454:137;;;4495:21;:1;4505:10;4495:21;:9;:21;:::i;:::-;4483:33;;4454:137;;;4559:21;:10;4578:1;4559:21;:18;:21;:::i;:::-;4547:33;;4454:137;4605:9;4601:172;;;4637:44;4658:9;4669:11;4637:20;:44::i;:::-;4630:51;;;;;;;;;;4601:172;4719:43;4739:9;4750:11;4719:19;:43::i;3244:1535::-;;;;;;;;:::o;731:322:54:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;919:127:54;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;919:127:54;912:134;;731:322;;;;;:::o;1511:170:52:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;2234:504:3;2412:7;;2456:34;2472:1;2475:14;:2;2486;2475:14;:10;:14;:::i;2456:34::-;2435:55;-1:-1:-1;2511:16:3;2530:51;2550:26;2573:2;2550:14;2561:2;;2550:14;:10;:14;:::i;:26::-;2578:2;2530:19;:51::i;:::-;2511:70;;2591:15;2609:28;2625:1;2628:8;2609:15;:28::i;:::-;2591:46;-1:-1:-1;2671:60:3;2687:10;2699:31;2591:46;2699:14;1789:6;2711:1;2699:14;:11;:14;:::i;2671:60::-;2664:67;2234:504;-1:-1:-1;;;;;;;;;2234:504:3:o;122:448:53:-;208:7;235:6;231:45;;-1:-1:-1;264:1:53;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:53:o;1802:227:3:-;1912:1;1920;1916;1912:5;;:9;1946:77;1957:1;1953;:5;1946:77;;;1978:1;1974:5;;2011:1;2006;2002;1998;:5;;;;;;:9;1997:15;;;;;;1993:19;;1946:77;;;1802:227;;;;:::o;1215:160::-;1306:7;1336:32;1345:19;:6;884;1345:19;:14;:19;:::i;:::-;1366:1;1468:7;;1510:12;1520:1;;1510:12;:9;:12;:::i;:::-;1491:31;-1:-1:-1;1556:12:3;;;1552:16;;1582:13;;1578:109;;-1:-1:-1;1629:1:3;1618:12;;-1:-1:-1;1611:19:3;;1578:109;-1:-1:-1;1668:8:3;-1:-1:-1;1661:15:3;;6932:5021;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0x4c9fb8f6c1deb95922b04724395dfbe21e7a320e9ac46c7733211511560cd2b6",
    "sources": {
        "./DODOHelper.sol": {
            "id": 3
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 52
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 54
        }
    },
    "sourceCodes": {
        "./DODOHelper.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\n// solhint-disable var-name-mixedcase\n// solhint-disable func-name-mixedcase\n// solhint-disable func-param-name-mixedcase\nlibrary DecimalMath {\n\n    using LibSafeMath for uint256;\n\n    uint256 internal constant ONE = 10**18;\n\n    function mul(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.safeMul(d) / ONE;\n    }\n\n    function divFloor(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.safeMul(ONE).safeDiv(d);\n    }\n\n    function divCeil(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _divCeil(target.safeMul(ONE), d);\n    }\n\n    function _divCeil(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotient = a.safeDiv(a);\n        uint256 remainder = a - quotient * b;\n        if (remainder > 0) {\n            return quotient + 1;\n        } else {\n            return quotient;\n        }\n    }\n}\n\n\nlibrary DODOMath {\n\n    using LibSafeMath for uint256;\n    uint256 internal constant ONE = 10**18;\n\n    function _Sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = x / 2 + 1;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    /*\n        Integrate dodo curve fron V1 to V2\n        require V0>=V1>=V2>0\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\n        let V1-V2=delta\n        res = i*delta*(1-k+k(V0^2/V1/V2))\n    */\n    function _GeneralIntegrate(\n        uint256 V0,\n        uint256 V1,\n        uint256 V2,\n        uint256 i,\n        uint256 k\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 fairAmount = DecimalMath.mul(i, V1.safeSub(V2)); // i*delta\n        uint256 V0V0V1V2 = DecimalMath.divCeil(V0.safeMul(V0).safeDiv(V1), V2);\n        uint256 penalty = DecimalMath.mul(k, V0V0V1V2); // k(V0^2/V1/V2)\n        return DecimalMath.mul(fairAmount, ONE.safeSub(k).safeAdd(penalty));\n    }\n\n    /*\n        The same with integration expression above, we have:\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n        Given Q1 and deltaB, solve Q2\n        This is a quadratic function and the standard version is\n        aQ2^2 + bQ2 + c = 0, where\n        a=1-k\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\n        c=-kQ0^2\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\n        note: another root is negative, abondan\n        if deltaBSig=true, then Q2>Q1\n        if deltaBSig=false, then Q2<Q1\n    */\n    function _SolveQuadraticFunctionForTrade(\n        uint256 Q0,\n        uint256 Q1,\n        uint256 ideltaB,\n        bool deltaBSig,\n        uint256 k\n    ) internal pure returns (uint256) {\n        // calculate -b value and sig\n        // -b = (1-k)Q1-kQ0^2/Q1+i*deltaB\n        uint256 kQ02Q1 = DecimalMath.mul(k, Q0).safeMul(Q0).safeDiv(Q1); // kQ0^2/Q1\n        uint256 b = DecimalMath.mul(ONE.safeSub(k), Q1); // (1-k)Q1\n        bool minusbSig = true;\n        if (deltaBSig) {\n            b = b.safeAdd(ideltaB); // (1-k)Q1+i*deltaB\n        } else {\n            kQ02Q1 = kQ02Q1.safeAdd(ideltaB); // i*deltaB+kQ0^2/Q1\n        }\n        if (b >= kQ02Q1) {\n            b = b.safeSub(kQ02Q1);\n            minusbSig = true;\n        } else {\n            b = kQ02Q1.safeSub(b);\n            minusbSig = false;\n        }\n\n        // calculate sqrt\n        uint256 squareRoot = DecimalMath.mul(\n            ONE.safeSub(k).safeMul(4),\n            DecimalMath.mul(k, Q0).safeMul(Q0)\n        ); // 4(1-k)kQ0^2\n        squareRoot = _Sqrt(b.safeMul(b).safeAdd(squareRoot)); // sqrt(b*b+4(1-k)kQ0*Q0)\n\n        // final res\n        uint256 denominator = ONE.safeSub(k).safeMul(2); // 2(1-k)\n        uint256 numerator;\n        if (minusbSig) {\n            numerator = b.safeAdd(squareRoot);\n        } else {\n            numerator = squareRoot.safeSub(b);\n        }\n\n        if (deltaBSig) {\n            return DecimalMath.divFloor(numerator, denominator);\n        } else {\n            return DecimalMath.divCeil(numerator, denominator);\n        }\n    }\n\n    /*\n        Start from the integration function\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\n        let fairAmount = i*deltaB\n    */\n    function _SolveQuadraticFunctionForTarget(\n        uint256 V1,\n        uint256 k,\n        uint256 fairAmount\n    )\n        internal\n        pure\n        returns (uint256 V0)\n    {\n        // V0 = V1+V1*(sqrt-1)/2k\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mul(k, fairAmount).safeMul(4), V1);\n        sqrt = _Sqrt(sqrt.safeMul(ONE).safeMul(ONE));\n        uint256 premium = DecimalMath.divCeil(sqrt.safeSub(ONE), k.safeMul(2));\n        // V0 is greater than or equal to V1 according to the solution\n        return DecimalMath.mul(V1, ONE.safeAdd(premium));\n    }\n}\n\n\ninterface IDODO {\n\n    /// @dev Sells the Base token receiving the Quote token\n    function sellBaseToken(uint256 sellAmount, uint256 minReceiveQuote, bytes calldata data)\n        external\n        returns (uint256);\n\n    /// @dev Buys the Base token selling the Quote token\n    function buyBaseToken(uint256 amount, uint256 maxPayQuote, bytes calldata data)\n        external\n        returns (uint256);\n\n    /// @dev Returns the current status the DODO pool is in\n    function _R_STATUS_() external view returns (uint8);\n\n    /// @dev Returns the virtual Base token balance\n    function _BASE_BALANCE_() external view returns (uint256);\n    /// @dev Returns the virtual Quote token balance\n    function _QUOTE_BALANCE_() external view returns (uint256);\n\n    function _K_() external view returns (uint256);\n    function _MT_FEE_RATE_() external view returns (uint256);\n    function _LP_FEE_RATE_() external view returns (uint256);\n\n    /// @dev Returns the targets for the Base and Quote token\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n\n    /// @dev Returns the current oracle price for the pool\n    function getOraclePrice() external view returns (uint256);\n\n    /// @dev Returns the amount of quote bought when selling the base token\n    function querySellBaseToken(uint256 sellAmount) external view returns (uint256);\n}\n\n\ncontract DODOHelper {\n\n    using LibSafeMath for uint256;\n\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\n\n    uint256 internal constant ONE = 10**18;\n\n    struct DODOState {\n        // The current oracle price\n        uint256 oraclePrice;\n        // Internal Base balance\n        uint256 B;\n        // Internal Quote balance\n        uint256 Q;\n        // Wanted Base balance\n        uint256 baseTarget;\n        // Wanted Quote balance\n        uint256 quoteTarget;\n        // Equal, Above or Below the target\n        RStatus rStatus;\n        uint256 K;\n    }\n\n    /// @dev Calculate the amount bought when the Base token\n    /// is requested to be sold. This is directly supported in DODO\n    /// and this is a convenience function.\n    /// @param dodo The address of the DODO pool\n    /// @param sellAmount the amount of the Base to sell\n    /// @return The amount bought of Quote token when selling Base token.\n    function querySellBaseToken(\n        IDODO dodo,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return dodo.querySellBaseToken(sellAmount);\n    }\n\n    /// @dev Calculate the amount bought when the Quote token\n    /// is requested to be sold. This is not directly supported in DODO\n    /// so we perform the calculation and use the result to buyBase.\n    /// Note: This has a small amount of imprecision so there is a likelyhood\n    /// of change (in quote token).\n    /// @param dodo The address of the DODO pool\n    /// @param sellAmount the amount of the Quote to sell\n    /// @return The amount bought of Base token when selling Quote token.\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        uint256 buyAmount;\n        // Fetch all relevant state for the required calculations\n        DODOState memory state;\n        // Current Oracle price\n        state.oraclePrice = dodo.getOraclePrice();\n        // Virtual Quote balance\n        state.Q = dodo._QUOTE_BALANCE_();\n        // Virtual Base balance\n        state.B = dodo._BASE_BALANCE_();\n        state.K = dodo._K_();\n\n        // DODO can be in 3 states at any block. This is\n        // dependent on the oracle price and DODO wants to reach\n        // a target based of the latest updated.\n        (state.baseTarget, state.quoteTarget) = dodo.getExpectedTarget();\n        // It can be at the target (ONE), above the target (ABOVE_ONE)\n        // or below the target (BELOW ONE)\n        state.rStatus = RStatus(dodo._R_STATUS_());\n        // In each case there is a different calculation to perform\n        // to get there in the way DODO wants\n        if (state.rStatus == RStatus.ONE) {\n            buyAmount = _ROneSellQuoteToken(sellAmount, state);\n        } else if (state.rStatus == RStatus.ABOVE_ONE) {\n            buyAmount = _RAboveSellQuoteToken(sellAmount, state);\n        } else {\n            uint256 backOneBase = state.B.safeSub(state.baseTarget);\n            uint256 backOneQuote = state.quoteTarget.safeSub(state.Q);\n            if (sellAmount <= backOneQuote) {\n                buyAmount = _RBelowSellQuoteToken(sellAmount, state);\n            } else {\n                buyAmount = backOneBase.safeAdd(\n                    _ROneSellQuoteToken(sellAmount.safeSub(backOneQuote), state));\n            }\n        }\n        // Calculate fees\n        uint256 mtFee = DecimalMath.mul(buyAmount, dodo._MT_FEE_RATE_());\n        uint256 lpFee = DecimalMath.mul(buyAmount, dodo._LP_FEE_RATE_());\n        // Buy amount less the fees\n        return buyAmount.safeSub(lpFee).safeSub(mtFee);\n    }\n\n    function _ROneSellQuoteToken(uint256 amount, DODOState memory state)\n        internal\n        view\n        returns (uint256 receiveBaseToken)\n    {\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n            state.baseTarget,\n            state.baseTarget,\n            DecimalMath.mul(\n                DecimalMath.divFloor(ONE, state.oraclePrice),\n                amount\n            ),\n            false,\n            state.K\n        );\n        return state.baseTarget.safeSub(B2);\n    }\n\n    function _RAboveSellQuoteToken(\n        uint256 amount,\n        DODOState memory state\n    )\n        internal\n        view\n        returns (uint256 receieBaseToken)\n    {\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n            state.baseTarget,\n            state.B,\n            DecimalMath.mul(\n                DecimalMath.divFloor(ONE, state.oraclePrice),\n                amount\n            ),\n            false,\n            state.K\n        );\n        return state.B.safeSub(B2);\n    }\n\n    function _RBelowSellQuoteToken(\n        uint256 amount,\n        DODOState memory state\n    )\n        internal\n        view\n        returns (uint256 receiveBaseToken)\n    {\n        return DODOMath._GeneralIntegrate(\n            state.quoteTarget,\n            state.Q.safeAdd(amount),\n            state.Q,\n            state.oraclePrice,\n            state.K\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange",
                "@0x/contracts-asset-proxy=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-asset-proxy"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
