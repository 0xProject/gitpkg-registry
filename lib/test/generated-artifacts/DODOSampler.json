{
    "schemaVersion": "2.0.0",
    "contractName": "DODOSampler",
    "compilerOutput": {
        "abi": [
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "contract IDODO",
                        "name": "dodo",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "querySellBaseToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "contract IDODO",
                        "name": "dodo",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "querySellQuoteToken",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "querySellBaseToken(address,uint256)": {
                    "details": "Calculate the amount bought when the Base token is requested to be sold. This is directly supported in DODO and this is a convenience function.",
                    "params": {
                        "dodo": "The address of the DODO pool",
                        "sellAmount": "the amount of the Base to sell"
                    },
                    "return": "The amount bought of Quote token when selling Base token."
                },
                "querySellQuoteToken(address,uint256)": {
                    "details": "Calculate the amount bought when the Quote token is requested to be sold. This is not directly supported in DODO so we perform the calculation and use the result to buyBase. Note: This has a small amount of imprecision so there is a likelyhood of change (in quote token).",
                    "params": {
                        "dodo": "The address of the DODO pool",
                        "sellAmount": "the amount of the Quote to sell"
                    },
                    "return": "The amount bought of Base token when selling Quote token."
                },
                "sampleBuysFromDODO(address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "return": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                },
                "sampleSellsFromDODO(address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "return": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50611524806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063be5b12b414610051578063ca19ebd91461007c578063d442057b1461009c578063ef4a83f8146100bc575b600080fd5b61006461005f36600461119c565b6100cf565b604051610073939291906113b6565b60405180910390f35b61008f61008a36600461125b565b61059c565b604051610073919061146c565b6100af6100aa36600461119c565b610b05565b60405161007391906113a3565b61008f6100ca36600461125b565b610b0e565b60008060606100de8587610bba565b8351604080518281526020808402820101909152818015610109578160200160208202803883390190505b509150610114610c2d565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b815260040161014e929190611356565b60206040518083038186803b15801561016657600080fd5b505afa15801561017a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061019e9190810190611180565b925073ffffffffffffffffffffffffffffffffffffffff831615610355576001935060005b8181101561034f57600060608573ffffffffffffffffffffffffffffffffffffffff16620493e0600073ffffffffffffffffffffffffffffffffffffffff1663a2801e16905060e01b8a868151811061021857fe5b6020026020010151604051602401610230919061146c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102b9919061131d565b6000604051808303818686fa925050503d80600081146102f5576040519150601f19603f3d011682016040523d82523d6000602084013e6102fa565b606091505b5090925090506000821561031f578180602001905161031c9190810190611286565b90505b8061032c5750505061034f565b8086858151811061033957fe5b60209081029190910101525050506001016101c3565b50610591565b61035d610c2d565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c687896040518363ffffffff1660e01b8152600401610397929190611356565b60206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e79190810190611180565b925073ffffffffffffffffffffffffffffffffffffffff831661040a5750610593565b60009350835b8181101561058f5785516000906060903090620493e0907fca19ebd9000000000000000000000000000000000000000000000000000000009089908c908890811061045757fe5b602002602001015160405160240161047092919061137d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516104f9919061131d565b6000604051808303818686fa925050503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b5090925090506000821561055f578180602001905161055c9190810190611286565b90505b8061056c5750505061058f565b8086858151811061057957fe5b6020908102919091010152505050600101610410565b505b505b93509350939050565b6000806105a7611138565b8473ffffffffffffffffffffffffffffffffffffffff1663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ed57600080fd5b505afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106259190810190611286565b8160000181815250508473ffffffffffffffffffffffffffffffffffffffff16637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106ac9190810190611286565b8160400181815250508473ffffffffffffffffffffffffffffffffffffffff1663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107339190810190611286565b8160200181815250508473ffffffffffffffffffffffffffffffffffffffff1663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107ba9190810190611286565b60c0820152604080517fffa64225000000000000000000000000000000000000000000000000000000008152815173ffffffffffffffffffffffffffffffffffffffff88169263ffa642259260048082019391829003018186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610859919081019061129e565b60808301526060820152604080517f17be952e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8716916317be952e916004808301926020929190829003018186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061090191908101906112c1565b60ff16600281111561090f57fe5b8160a00190600281111561091f57fe5b9081600281111561092c57fe5b90525060008160a00151600281111561094157fe5b1415610958576109518482610c45565b91506109ff565b60018160a00151600281111561096a57fe5b141561097a576109518482610ca0565b600061099782606001518360200151610ce190919063ffffffff16565b905060006109b683604001518460800151610ce190919063ffffffff16565b90508086116109d0576109c98684610d05565b93506109fc565b6109f96109ec6109e6888463ffffffff610ce116565b85610c45565b839063ffffffff610d3716565b93505b50505b6000610a88838773ffffffffffffffffffffffffffffffffffffffff1663c0ffa1786040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4b57600080fd5b505afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a839190810190611286565b610d53565b90506000610ad6848873ffffffffffffffffffffffffffffffffffffffff1663ab44a7a36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4b57600080fd5b9050610af882610aec868463ffffffff610ce116565b9063ffffffff610ce116565b9450505050505b92915050565b60609392505050565b6040517fa2801e1600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff84169063a2801e1690610b6390859060040161146c565b60206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb39190810190611286565b9392505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c209061140f565b60405180910390fd5b5050565b733a97247df274a17c59a3bd12735ea3fcdfb4995090565b600080610c8083606001518460600151610c74610c6e670de0b6b3a76400008860000151610d7d565b88610d53565b60008760c00151610da7565b6060840151909150610c98908263ffffffff610ce116565b949350505050565b600080610cc983606001518460200151610c74610c6e670de0b6b3a76400008860000151610d7d565b6020840151909150610c98908263ffffffff610ce116565b600082821115610cff57610cff610cfa60028585610f33565b610fd8565b50900390565b6000610bb38260800151610d26858560400151610d3790919063ffffffff16565b6040850151855160c0870151610fe0565b600082820183811015610bb357610bb3610cfa60008686610f33565b6000670de0b6b3a7640000610d6e848463ffffffff61105516565b81610d7557fe5b049392505050565b6000610bb382610d9b85670de0b6b3a764000063ffffffff61105516565b9063ffffffff61108616565b600080610dc886610d9b89610dbc878c610d53565b9063ffffffff61105516565b90506000610de7610c6e670de0b6b3a76400008663ffffffff610ce116565b905060018515610e0857610e01828863ffffffff610d3716565b9150610e1b565b610e18838863ffffffff610d3716565b92505b828210610e3d57610e32828463ffffffff610ce116565b915060019050610e54565b610e4d838363ffffffff610ce116565b9150600090505b6000610e84610e766004610dbc670de0b6b3a76400008a63ffffffff610ce116565b610a838c610dbc8a8f610d53565b9050610eae610ea982610e9d868063ffffffff61105516565b9063ffffffff610d3716565b6110b0565b90506000610ecf6002610dbc670de0b6b3a76400008a63ffffffff610ce116565b905060008315610ef057610ee9858463ffffffff610d3716565b9050610f03565b610f00838663ffffffff610ce116565b90505b8815610f2057610f138183610d7d565b9650505050505050610f2a565b610f1381836110e7565b95945050505050565b606063e946c1bb60e01b848484604051602401610f52939291906113ed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600080610ff784610a83888863ffffffff610ce116565b9050600061101861101288610d9b8b8063ffffffff61105516565b876110e7565b905060006110268583610d53565b905061104883610a8383610e9d670de0b6b3a76400008a63ffffffff610ce116565b9998505050505050505050565b60008261106457506000610aff565b8282028284828161107157fe5b0414610bb357610bb3610cfa60018686610f33565b60008161109c5761109c610cfa60038585610f33565b60008284816110a757fe5b04949350505050565b80600160028204015b818110156110e1578091506002818285816110d057fe5b0401816110d957fe5b0490506110b9565b50919050565b6000610bb361110484670de0b6b3a764000063ffffffff61105516565b83600080611118848063ffffffff61108616565b90508281028403801561113057506001019050610aff565b509050610aff565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000600281111561117357fe5b8152602001600081525090565b600060208284031215611191578081fd5b8151610bb3816114bc565b6000806000606084860312156111b0578182fd5b83356111bb816114bc565b92506020848101356111cc816114bc565b9250604085013567ffffffffffffffff8111156111e7578283fd5b80860187601f8201126111f8578384fd5b8035915061120d6112088361149c565b611475565b82815283810190828501858502840186018b1015611229578687fd5b8693505b8484101561124b57803583526001939093019291850191850161122d565b5080955050505050509250925092565b6000806040838503121561126d578182fd5b8235611278816114bc565b946020939093013593505050565b600060208284031215611297578081fd5b5051919050565b600080604083850312156112b0578182fd5b505080516020909101519092909150565b6000602082840312156112d2578081fd5b815160ff81168114610bb3578182fd5b6000815180845260208401935060208301825b828110156113135781518652602095860195909101906001016112f5565b5093949350505050565b60008251815b8181101561133d5760208186018101518583015201611323565b8181111561134b5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252610bb360208301846112e2565b6000841515825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610f2a60608301846112e2565b60608101600485106113fb57fe5b938152602081019290925260409091015290565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561149457600080fd5b604052919050565b600067ffffffffffffffff8211156114b2578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146114de57600080fd5b5056fea365627a7a7231582049ef11561bad4f24404251d57de9a053ddccf7704e0bd715e2005f6dccbc145a6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1524 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0xCA19EBD9 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0xD442057B EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xEF4A83F8 EQ PUSH2 0xBC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x119C JUMP JUMPDEST PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP2 SWAP1 PUSH2 0x146C JUMP JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x119C JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP2 SWAP1 PUSH2 0x13A3 JUMP JUMPDEST PUSH2 0x8F PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x125B JUMP JUMPDEST PUSH2 0xB0E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xDE DUP6 DUP8 PUSH2 0xBBA JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x109 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x114 PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14E SWAP3 SWAP2 SWAP1 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x19E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x355 JUMPI PUSH1 0x1 SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA2801E16 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x218 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x146C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x31F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x31C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x32C JUMPI POP POP POP PUSH2 0x34F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x339 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1C3 JUMP JUMPDEST POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x35D PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP8 DUP10 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x397 SWAP3 SWAP2 SWAP1 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3E7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x40A JUMPI POP PUSH2 0x593 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x58F JUMPI DUP6 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xCA19EBD900000000000000000000000000000000000000000000000000000000 SWAP1 DUP10 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0x457 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x470 SWAP3 SWAP2 SWAP1 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4F9 SWAP2 SWAP1 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x53A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x55F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x55C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x56C JUMPI POP POP POP PUSH2 0x58F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x579 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x410 JUMP JUMPDEST POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5A7 PUSH2 0x1138 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x796DA7AF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x625 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7C9B8E89 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x688 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x6AC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEAB5D20E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x70F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x733 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEC2FD46D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x796 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x7BA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFA6422500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xFFA64225 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x835 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x859 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x129E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x17BE952E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0x17BE952E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x901 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x90F JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x91F JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x92C JUMPI INVALID JUMPDEST SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x941 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x958 JUMPI PUSH2 0x951 DUP5 DUP3 PUSH2 0xC45 JUMP JUMPDEST SWAP2 POP PUSH2 0x9FF JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x96A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x97A JUMPI PUSH2 0x951 DUP5 DUP3 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x997 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xCE1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9B6 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xCE1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT PUSH2 0x9D0 JUMPI PUSH2 0x9C9 DUP7 DUP5 PUSH2 0xD05 JUMP JUMPDEST SWAP4 POP PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x9F9 PUSH2 0x9EC PUSH2 0x9E6 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST DUP6 PUSH2 0xC45 JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP JUMPDEST PUSH1 0x0 PUSH2 0xA88 DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC0FFA178 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xA83 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD6 DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAB44A7A3 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0xAF8 DUP3 PUSH2 0xAEC DUP7 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH2 0xB63 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x146C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xBB3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC20 SWAP1 PUSH2 0x140F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC80 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0xC74 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0xD7D JUMP JUMPDEST DUP9 PUSH2 0xD53 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0xC0 ADD MLOAD PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC98 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCC9 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xC74 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC98 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xCFF JUMPI PUSH2 0xCFF PUSH2 0xCFA PUSH1 0x2 DUP6 DUP6 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0xFD8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0xD26 DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xD37 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP6 MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xBB3 JUMPI PUSH2 0xBB3 PUSH2 0xCFA PUSH1 0x0 DUP7 DUP7 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD6E DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP2 PUSH2 0xD75 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 DUP3 PUSH2 0xD9B DUP6 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1086 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDC8 DUP7 PUSH2 0xD9B DUP10 PUSH2 0xDBC DUP8 DUP13 PUSH2 0xD53 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDE7 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP6 ISZERO PUSH2 0xE08 JUMPI PUSH2 0xE01 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE1B JUMP JUMPDEST PUSH2 0xE18 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 DUP3 LT PUSH2 0xE3D JUMPI PUSH2 0xE32 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 SWAP1 POP PUSH2 0xE54 JUMP JUMPDEST PUSH2 0xE4D DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0xE84 PUSH2 0xE76 PUSH1 0x4 PUSH2 0xDBC PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST PUSH2 0xA83 DUP13 PUSH2 0xDBC DUP11 DUP16 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAE PUSH2 0xEA9 DUP3 PUSH2 0xE9D DUP7 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECF PUSH1 0x2 PUSH2 0xDBC PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 ISZERO PUSH2 0xEF0 JUMPI PUSH2 0xEE9 DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xF03 JUMP JUMPDEST PUSH2 0xF00 DUP4 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 ISZERO PUSH2 0xF20 JUMPI PUSH2 0xF13 DUP2 DUP4 PUSH2 0xD7D JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0xF2A JUMP JUMPDEST PUSH2 0xF13 DUP2 DUP4 PUSH2 0x10E7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF52 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFF7 DUP5 PUSH2 0xA83 DUP9 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1018 PUSH2 0x1012 DUP9 PUSH2 0xD9B DUP12 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP8 PUSH2 0x10E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1026 DUP6 DUP4 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH2 0x1048 DUP4 PUSH2 0xA83 DUP4 PUSH2 0xE9D PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1064 JUMPI POP PUSH1 0x0 PUSH2 0xAFF JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1071 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xBB3 JUMPI PUSH2 0xBB3 PUSH2 0xCFA PUSH1 0x1 DUP7 DUP7 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x109C JUMPI PUSH2 0x109C PUSH2 0xCFA PUSH1 0x3 DUP6 DUP6 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x10A7 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x2 DUP3 DIV ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10E1 JUMPI DUP1 SWAP2 POP PUSH1 0x2 DUP2 DUP3 DUP6 DUP2 PUSH2 0x10D0 JUMPI INVALID JUMPDEST DIV ADD DUP2 PUSH2 0x10D9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x10B9 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 PUSH2 0x1104 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x1118 DUP5 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1086 AND JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MUL DUP5 SUB DUP1 ISZERO PUSH2 0x1130 JUMPI POP PUSH1 0x1 ADD SWAP1 POP PUSH2 0xAFF JUMP JUMPDEST POP SWAP1 POP PUSH2 0xAFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1173 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1191 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBB3 DUP2 PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11B0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x11BB DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 DUP2 ADD CALLDATALOAD PUSH2 0x11CC DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x11F8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x120D PUSH2 0x1208 DUP4 PUSH2 0x149C JUMP JUMPDEST PUSH2 0x1475 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP12 LT ISZERO PUSH2 0x1229 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x124B JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x122D JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x126D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1278 DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1297 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12B0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xBB3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1313 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12F5 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x1323 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x134B JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xBB3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xF2A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x13FB JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14B2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x14DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x49 0xEF GT JUMP SHL 0xAD 0x4F 0x24 BLOCKHASH TIMESTAMP MLOAD 0xD5 PUSH30 0xE9A053DDCCF7704E0BD715E2005F6DCCBC145A6C6578706572696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "883:3780:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;883:3780:4;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063be5b12b414610051578063ca19ebd91461007c578063d442057b1461009c578063ef4a83f8146100bc575b600080fd5b61006461005f36600461119c565b6100cf565b604051610073939291906113b6565b60405180910390f35b61008f61008a36600461125b565b61059c565b604051610073919061146c565b6100af6100aa36600461119c565b610b05565b60405161007391906113a3565b61008f6100ca36600461125b565b610b0e565b60008060606100de8587610bba565b8351604080518281526020808402820101909152818015610109578160200160208202803883390190505b509150610114610c2d565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b815260040161014e929190611356565b60206040518083038186803b15801561016657600080fd5b505afa15801561017a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061019e9190810190611180565b925073ffffffffffffffffffffffffffffffffffffffff831615610355576001935060005b8181101561034f57600060608573ffffffffffffffffffffffffffffffffffffffff16620493e0600073ffffffffffffffffffffffffffffffffffffffff1663a2801e16905060e01b8a868151811061021857fe5b6020026020010151604051602401610230919061146c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516102b9919061131d565b6000604051808303818686fa925050503d80600081146102f5576040519150601f19603f3d011682016040523d82523d6000602084013e6102fa565b606091505b5090925090506000821561031f578180602001905161031c9190810190611286565b90505b8061032c5750505061034f565b8086858151811061033957fe5b60209081029190910101525050506001016101c3565b50610591565b61035d610c2d565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c687896040518363ffffffff1660e01b8152600401610397929190611356565b60206040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103e79190810190611180565b925073ffffffffffffffffffffffffffffffffffffffff831661040a5750610593565b60009350835b8181101561058f5785516000906060903090620493e0907fca19ebd9000000000000000000000000000000000000000000000000000000009089908c908890811061045757fe5b602002602001015160405160240161047092919061137d565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516104f9919061131d565b6000604051808303818686fa925050503d8060008114610535576040519150601f19603f3d011682016040523d82523d6000602084013e61053a565b606091505b5090925090506000821561055f578180602001905161055c9190810190611286565b90505b8061056c5750505061058f565b8086858151811061057957fe5b6020908102919091010152505050600101610410565b505b505b93509350939050565b6000806105a7611138565b8473ffffffffffffffffffffffffffffffffffffffff1663796da7af6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ed57600080fd5b505afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106259190810190611286565b8160000181815250508473ffffffffffffffffffffffffffffffffffffffff16637c9b8e896040518163ffffffff1660e01b815260040160206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506106ac9190810190611286565b8160400181815250508473ffffffffffffffffffffffffffffffffffffffff1663eab5d20e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106fb57600080fd5b505afa15801561070f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107339190810190611286565b8160200181815250508473ffffffffffffffffffffffffffffffffffffffff1663ec2fd46d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561078257600080fd5b505afa158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107ba9190810190611286565b60c0820152604080517fffa64225000000000000000000000000000000000000000000000000000000008152815173ffffffffffffffffffffffffffffffffffffffff88169263ffa642259260048082019391829003018186803b15801561082157600080fd5b505afa158015610835573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610859919081019061129e565b60808301526060820152604080517f17be952e000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff8716916317be952e916004808301926020929190829003018186803b1580156108c957600080fd5b505afa1580156108dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061090191908101906112c1565b60ff16600281111561090f57fe5b8160a00190600281111561091f57fe5b9081600281111561092c57fe5b90525060008160a00151600281111561094157fe5b1415610958576109518482610c45565b91506109ff565b60018160a00151600281111561096a57fe5b141561097a576109518482610ca0565b600061099782606001518360200151610ce190919063ffffffff16565b905060006109b683604001518460800151610ce190919063ffffffff16565b90508086116109d0576109c98684610d05565b93506109fc565b6109f96109ec6109e6888463ffffffff610ce116565b85610c45565b839063ffffffff610d3716565b93505b50505b6000610a88838773ffffffffffffffffffffffffffffffffffffffff1663c0ffa1786040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4b57600080fd5b505afa158015610a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a839190810190611286565b610d53565b90506000610ad6848873ffffffffffffffffffffffffffffffffffffffff1663ab44a7a36040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4b57600080fd5b9050610af882610aec868463ffffffff610ce116565b9063ffffffff610ce116565b9450505050505b92915050565b60609392505050565b6040517fa2801e1600000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff84169063a2801e1690610b6390859060040161146c565b60206040518083038186803b158015610b7b57600080fd5b505afa158015610b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610bb39190810190611286565b9392505050565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c209061140f565b60405180910390fd5b5050565b733a97247df274a17c59a3bd12735ea3fcdfb4995090565b600080610c8083606001518460600151610c74610c6e670de0b6b3a76400008860000151610d7d565b88610d53565b60008760c00151610da7565b6060840151909150610c98908263ffffffff610ce116565b949350505050565b600080610cc983606001518460200151610c74610c6e670de0b6b3a76400008860000151610d7d565b6020840151909150610c98908263ffffffff610ce116565b600082821115610cff57610cff610cfa60028585610f33565b610fd8565b50900390565b6000610bb38260800151610d26858560400151610d3790919063ffffffff16565b6040850151855160c0870151610fe0565b600082820183811015610bb357610bb3610cfa60008686610f33565b6000670de0b6b3a7640000610d6e848463ffffffff61105516565b81610d7557fe5b049392505050565b6000610bb382610d9b85670de0b6b3a764000063ffffffff61105516565b9063ffffffff61108616565b600080610dc886610d9b89610dbc878c610d53565b9063ffffffff61105516565b90506000610de7610c6e670de0b6b3a76400008663ffffffff610ce116565b905060018515610e0857610e01828863ffffffff610d3716565b9150610e1b565b610e18838863ffffffff610d3716565b92505b828210610e3d57610e32828463ffffffff610ce116565b915060019050610e54565b610e4d838363ffffffff610ce116565b9150600090505b6000610e84610e766004610dbc670de0b6b3a76400008a63ffffffff610ce116565b610a838c610dbc8a8f610d53565b9050610eae610ea982610e9d868063ffffffff61105516565b9063ffffffff610d3716565b6110b0565b90506000610ecf6002610dbc670de0b6b3a76400008a63ffffffff610ce116565b905060008315610ef057610ee9858463ffffffff610d3716565b9050610f03565b610f00838663ffffffff610ce116565b90505b8815610f2057610f138183610d7d565b9650505050505050610f2a565b610f1381836110e7565b95945050505050565b606063e946c1bb60e01b848484604051602401610f52939291906113ed565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600080610ff784610a83888863ffffffff610ce116565b9050600061101861101288610d9b8b8063ffffffff61105516565b876110e7565b905060006110268583610d53565b905061104883610a8383610e9d670de0b6b3a76400008a63ffffffff610ce116565b9998505050505050505050565b60008261106457506000610aff565b8282028284828161107157fe5b0414610bb357610bb3610cfa60018686610f33565b60008161109c5761109c610cfa60038585610f33565b60008284816110a757fe5b04949350505050565b80600160028204015b818110156110e1578091506002818285816110d057fe5b0401816110d957fe5b0490506110b9565b50919050565b6000610bb361110484670de0b6b3a764000063ffffffff61105516565b83600080611118848063ffffffff61108616565b90508281028403801561113057506001019050610aff565b509050610aff565b6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000600281111561117357fe5b8152602001600081525090565b600060208284031215611191578081fd5b8151610bb3816114bc565b6000806000606084860312156111b0578182fd5b83356111bb816114bc565b92506020848101356111cc816114bc565b9250604085013567ffffffffffffffff8111156111e7578283fd5b80860187601f8201126111f8578384fd5b8035915061120d6112088361149c565b611475565b82815283810190828501858502840186018b1015611229578687fd5b8693505b8484101561124b57803583526001939093019291850191850161122d565b5080955050505050509250925092565b6000806040838503121561126d578182fd5b8235611278816114bc565b946020939093013593505050565b600060208284031215611297578081fd5b5051919050565b600080604083850312156112b0578182fd5b505080516020909101519092909150565b6000602082840312156112d2578081fd5b815160ff81168114610bb3578182fd5b6000815180845260208401935060208301825b828110156113135781518652602095860195909101906001016112f5565b5093949350505050565b60008251815b8181101561133d5760208186018101518583015201611323565b8181111561134b5782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060208252610bb360208301846112e2565b6000841515825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610f2a60608301846112e2565b60608101600485106113fb57fe5b938152602081019290925260409091015290565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561149457600080fd5b604052919050565b600067ffffffffffffffff8211156114b2578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff811681146114de57600080fd5b5056fea365627a7a7231582049ef11561bad4f24404251d57de9a053ddccf7704e0bd715e2005f6dccbc145a6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0xCA19EBD9 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0xD442057B EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0xEF4A83F8 EQ PUSH2 0xBC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64 PUSH2 0x5F CALLDATASIZE PUSH1 0x4 PUSH2 0x119C JUMP JUMPDEST PUSH2 0xCF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13B6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x8F PUSH2 0x8A CALLDATASIZE PUSH1 0x4 PUSH2 0x125B JUMP JUMPDEST PUSH2 0x59C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP2 SWAP1 PUSH2 0x146C JUMP JUMPDEST PUSH2 0xAF PUSH2 0xAA CALLDATASIZE PUSH1 0x4 PUSH2 0x119C JUMP JUMPDEST PUSH2 0xB05 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x73 SWAP2 SWAP1 PUSH2 0x13A3 JUMP JUMPDEST PUSH2 0x8F PUSH2 0xCA CALLDATASIZE PUSH1 0x4 PUSH2 0x125B JUMP JUMPDEST PUSH2 0xB0E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xDE DUP6 DUP8 PUSH2 0xBBA JUMP JUMPDEST DUP4 MLOAD PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP1 DUP5 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP2 DUP1 ISZERO PUSH2 0x109 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x114 PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14E SWAP3 SWAP2 SWAP1 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x17A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x19E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO PUSH2 0x355 JUMPI PUSH1 0x1 SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x493E0 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xA2801E16 SWAP1 POP PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x218 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x146C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2FA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x31F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x31C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x32C JUMPI POP POP POP PUSH2 0x34F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x339 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1C3 JUMP JUMPDEST POP PUSH2 0x591 JUMP JUMPDEST PUSH2 0x35D PUSH2 0xC2D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP8 DUP10 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x397 SWAP3 SWAP2 SWAP1 PUSH2 0x1356 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x3E7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1180 JUMP JUMPDEST SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH2 0x40A JUMPI POP PUSH2 0x593 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x58F JUMPI DUP6 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH3 0x493E0 SWAP1 PUSH32 0xCA19EBD900000000000000000000000000000000000000000000000000000000 SWAP1 DUP10 SWAP1 DUP13 SWAP1 DUP9 SWAP1 DUP2 LT PUSH2 0x457 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x470 SWAP3 SWAP2 SWAP1 PUSH2 0x137D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x4F9 SWAP2 SWAP1 PUSH2 0x131D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x535 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x53A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x55F JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x55C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x56C JUMPI POP POP POP PUSH2 0x58F JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x579 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x410 JUMP JUMPDEST POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5A7 PUSH2 0x1138 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x796DA7AF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x601 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x625 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7C9B8E89 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x674 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x688 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x6AC SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x40 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEAB5D20E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x70F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x733 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP2 DUP2 MSTORE POP POP DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xEC2FD46D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x782 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x796 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x7BA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFA6422500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP3 PUSH4 0xFFA64225 SWAP3 PUSH1 0x4 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x835 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x859 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x129E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x17BE952E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP2 PUSH4 0x17BE952E SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x901 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C1 JUMP JUMPDEST PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x90F JUMPI INVALID JUMPDEST DUP2 PUSH1 0xA0 ADD SWAP1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x91F JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x92C JUMPI INVALID JUMPDEST SWAP1 MSTORE POP PUSH1 0x0 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x941 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x958 JUMPI PUSH2 0x951 DUP5 DUP3 PUSH2 0xC45 JUMP JUMPDEST SWAP2 POP PUSH2 0x9FF JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0xA0 ADD MLOAD PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x96A JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0x97A JUMPI PUSH2 0x951 DUP5 DUP3 PUSH2 0xCA0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x997 DUP3 PUSH1 0x60 ADD MLOAD DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0xCE1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9B6 DUP4 PUSH1 0x40 ADD MLOAD DUP5 PUSH1 0x80 ADD MLOAD PUSH2 0xCE1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 DUP7 GT PUSH2 0x9D0 JUMPI PUSH2 0x9C9 DUP7 DUP5 PUSH2 0xD05 JUMP JUMPDEST SWAP4 POP PUSH2 0x9FC JUMP JUMPDEST PUSH2 0x9F9 PUSH2 0x9EC PUSH2 0x9E6 DUP9 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST DUP6 PUSH2 0xC45 JUMP JUMPDEST DUP4 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP JUMPDEST PUSH1 0x0 PUSH2 0xA88 DUP4 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xC0FFA178 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA5F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xA83 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xAD6 DUP5 DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xAB44A7A3 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH2 0xAF8 DUP3 PUSH2 0xAEC DUP7 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH2 0xB63 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x146C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xBB3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1286 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xC29 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC20 SWAP1 PUSH2 0x140F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xC80 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x60 ADD MLOAD PUSH2 0xC74 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0xD7D JUMP JUMPDEST DUP9 PUSH2 0xD53 JUMP JUMPDEST PUSH1 0x0 DUP8 PUSH1 0xC0 ADD MLOAD PUSH2 0xDA7 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC98 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCC9 DUP4 PUSH1 0x60 ADD MLOAD DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0xC74 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP9 PUSH1 0x0 ADD MLOAD PUSH2 0xD7D JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP2 POP PUSH2 0xC98 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xCFF JUMPI PUSH2 0xCFF PUSH2 0xCFA PUSH1 0x2 DUP6 DUP6 PUSH2 0xF33 JUMP JUMPDEST PUSH2 0xFD8 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 DUP3 PUSH1 0x80 ADD MLOAD PUSH2 0xD26 DUP6 DUP6 PUSH1 0x40 ADD MLOAD PUSH2 0xD37 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP6 MLOAD PUSH1 0xC0 DUP8 ADD MLOAD PUSH2 0xFE0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xBB3 JUMPI PUSH2 0xBB3 PUSH2 0xCFA PUSH1 0x0 DUP7 DUP7 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0xD6E DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP2 PUSH2 0xD75 JUMPI INVALID JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 DUP3 PUSH2 0xD9B DUP6 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1086 AND JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDC8 DUP7 PUSH2 0xD9B DUP10 PUSH2 0xDBC DUP8 DUP13 PUSH2 0xD53 JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xDE7 PUSH2 0xC6E PUSH8 0xDE0B6B3A7640000 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP6 ISZERO PUSH2 0xE08 JUMPI PUSH2 0xE01 DUP3 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP2 POP PUSH2 0xE1B JUMP JUMPDEST PUSH2 0xE18 DUP4 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP3 POP JUMPDEST DUP3 DUP3 LT PUSH2 0xE3D JUMPI PUSH2 0xE32 DUP3 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 SWAP1 POP PUSH2 0xE54 JUMP JUMPDEST PUSH2 0xE4D DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST PUSH1 0x0 PUSH2 0xE84 PUSH2 0xE76 PUSH1 0x4 PUSH2 0xDBC PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST PUSH2 0xA83 DUP13 PUSH2 0xDBC DUP11 DUP16 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH2 0xEAE PUSH2 0xEA9 DUP3 PUSH2 0xE9D DUP7 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST PUSH2 0x10B0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECF PUSH1 0x2 PUSH2 0xDBC PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP4 ISZERO PUSH2 0xEF0 JUMPI PUSH2 0xEE9 DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xD37 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xF03 JUMP JUMPDEST PUSH2 0xF00 DUP4 DUP7 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP JUMPDEST DUP9 ISZERO PUSH2 0xF20 JUMPI PUSH2 0xF13 DUP2 DUP4 PUSH2 0xD7D JUMP JUMPDEST SWAP7 POP POP POP POP POP POP POP PUSH2 0xF2A JUMP JUMPDEST PUSH2 0xF13 DUP2 DUP4 PUSH2 0x10E7 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF52 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x13ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFF7 DUP5 PUSH2 0xA83 DUP9 DUP9 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1018 PUSH2 0x1012 DUP9 PUSH2 0xD9B DUP12 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP8 PUSH2 0x10E7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1026 DUP6 DUP4 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP PUSH2 0x1048 DUP4 PUSH2 0xA83 DUP4 PUSH2 0xE9D PUSH8 0xDE0B6B3A7640000 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xCE1 AND JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1064 JUMPI POP PUSH1 0x0 PUSH2 0xAFF JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1071 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xBB3 JUMPI PUSH2 0xBB3 PUSH2 0xCFA PUSH1 0x1 DUP7 DUP7 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x109C JUMPI PUSH2 0x109C PUSH2 0xCFA PUSH1 0x3 DUP6 DUP6 PUSH2 0xF33 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x10A7 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x2 DUP3 DIV ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10E1 JUMPI DUP1 SWAP2 POP PUSH1 0x2 DUP2 DUP3 DUP6 DUP2 PUSH2 0x10D0 JUMPI INVALID JUMPDEST DIV ADD DUP2 PUSH2 0x10D9 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH2 0x10B9 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBB3 PUSH2 0x1104 DUP5 PUSH8 0xDE0B6B3A7640000 PUSH4 0xFFFFFFFF PUSH2 0x1055 AND JUMP JUMPDEST DUP4 PUSH1 0x0 DUP1 PUSH2 0x1118 DUP5 DUP1 PUSH4 0xFFFFFFFF PUSH2 0x1086 AND JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MUL DUP5 SUB DUP1 ISZERO PUSH2 0x1130 JUMPI POP PUSH1 0x1 ADD SWAP1 POP PUSH2 0xAFF JUMP JUMPDEST POP SWAP1 POP PUSH2 0xAFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1173 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1191 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xBB3 DUP2 PUSH2 0x14BC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11B0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x11BB DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 DUP2 ADD CALLDATALOAD PUSH2 0x11CC DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E7 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP7 ADD DUP8 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x11F8 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0x120D PUSH2 0x1208 DUP4 PUSH2 0x149C JUMP JUMPDEST PUSH2 0x1475 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP12 LT ISZERO PUSH2 0x1229 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x124B JUMPI DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x122D JUMP JUMPDEST POP DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x126D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1278 DUP2 PUSH2 0x14BC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1297 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x12B0 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xBB3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1313 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12F5 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x133D JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x1323 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x134B JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0xBB3 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xF2A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x12E2 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x13FB JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x14B2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x14DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0x49 0xEF GT JUMP SHL 0xAD 0x4F 0x24 BLOCKHASH TIMESTAMP MLOAD 0xD5 PUSH30 0xE9A053DDCCF7704E0BD715E2005F6DCCBC145A6C6578706572696D656E74 PUSH2 0x6CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "883:3780:4:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;883:3780:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1425:2619;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;8550:2007:3;;;;;;;;;:::i;:::-;;;;;;;;4400:260:4;;;;;;;;;:::i;:::-;;;;;;;;7847:199:3;;;;;;;;;:::i;1425:2619:4:-;1605:13;1620:12;1634:34;1684:40;1701:10;1713;1684:16;:40::i;:::-;1755:24;;1809:25;;;;;;;;;;;;;;;;1755:24;1809:25;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1809:25:4;;1789:45;;1861:20;:18;:20::i;:::-;1852:38;;;1891:10;1903;1852:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1852:62:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1852:62:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1852:62:4;;;;;;;;;1845:69;-1:-1:-1;1985:18:4;;;;1981:2057;;2030:4;;-1:-1:-1;2053:9:4;2048:735;2072:10;2068:1;:14;2048:735;;;2108:15;2125:23;2172:4;:15;;1052:5;2290:1;2284:27;;;:36;;;;2350:17;2368:1;2350:20;;;;;;;;;;;;;;2232:164;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2232:164:4;;;49:4:-1;25:18;;61:17;;2232:164:4;182:15:-1;2232:164:4;;;;179:29:-1;;;;160:49;;;2172:225:4;;;;2232:164;2172:225;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;2107:290:4;;-1:-1:-1;2107:290:4;-1:-1:-1;2415:17:4;2454:102;;;;2515:10;2504:33;;;;;;;;;;;;;;2492:45;;2454:102;2657:14;2653:66;;2695:5;;;;;2653:66;2759:9;2736:17;2754:1;2736:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2084:3:4;;2048:735;;;;1981:2057;;;2829:20;:18;:20::i;:::-;2820:38;;;2859:10;2871;2820:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2820:62:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2820:62:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2820:62:4;;;;;;;;;2813:69;-1:-1:-1;2940:27:4;;;2936:108;;-1:-1:-1;2987:42:4;;2936:108;3068:5;;-1:-1:-1;3068:5:4;3152:876;3176:10;3172:1;:14;3152:876;;;3595:20;;3304:15;;3321:23;;3376:4;;1052:5;;3489:42;;3561:4;;3595:17;;3613:1;;3595:20;;;;;;;;;;;;3437:204;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3437:204:4;;;49:4:-1;25:18;;61:17;;3437:204:4;182:15:-1;3437:204:4;;;;179:29:-1;;;;160:49;;;3368:274:4;;;;3437:204;3368:274;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;3303:339:4;;-1:-1:-1;3303:339:4;-1:-1:-1;3660:17:4;3699:102;;;;3760:10;3749:33;;;;;;;;;;;;;;3737:45;;3699:102;3902:14;3898:66;;3940:5;;;;;3898:66;4004:9;3981:17;3999:1;3981:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;3188:3:4;;3152:876;;;;1981:2057;1425:2619;;;;;;;;;:::o;8550:2007:3:-;8678:7;8701:17;8794:22;;:::i;:::-;8878:4;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8878:21:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8878:21:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8878:21:3;;;;;;;;;8858:5;:17;;:41;;;;;8952:4;:20;;;:22;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8952:22:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8952:22:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8952:22:3;;;;;;;;;8942:5;:7;;:32;;;;;9026:4;:19;;;:21;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9026:21:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9026:21:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9026:21:3;;;;;;;;;9016:5;:7;;:31;;;;;9067:4;:8;;;:10;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9067:10:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9067:10:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9067:10:3;;;;;;;;;9057:7;;;:20;9299:24;;;;;;;;:22;;;;;;:24;;;;;;;;;;;:22;:24;;;5:2:-1;;;;30:1;27;20:12;5:2;9299:24:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9299:24:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9299:24:3;;;;;;;;;9278:17;;;9259:64;9260:16;;;9259:64;9471:17;;;;;;;;:15;;;;;;:17;;;;;-1:-1:-1;;9471:17:3;;;;;;;:15;:17;;;5:2:-1;;;;30:1;27;20:12;5:2;9471:17:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9471:17:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9471:17:3;;;;;;;;;9463:26;;;;;;;;;;9447:5;:13;;:42;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9634:11:3;9617:5;:13;;;:28;;;;;;;;;9613:672;;;9673:38;9693:10;9705:5;9673:19;:38::i;:::-;9661:50;;9613:672;;;9749:17;9732:5;:13;;;:34;;;;;;;;;9728:557;;;9794:40;9816:10;9828:5;9794:21;:40::i;9728:557::-;9865:19;9887:33;9903:5;:16;;;9887:5;:7;;;:15;;:33;;;;:::i;:::-;9865:55;;9934:20;9957:34;9983:5;:7;;;9957:5;:17;;;:25;;:34;;;;:::i;:::-;9934:57;;10023:12;10009:10;:26;10005:270;;10067:40;10089:10;10101:5;10067:21;:40::i;:::-;10055:52;;10005:270;;;10158:102;10199:60;10219:32;:10;10238:12;10219:32;:18;:32;:::i;:::-;10253:5;10199:19;:60::i;:::-;10158:11;;:102;:19;:102;:::i;:::-;10146:114;;10005:270;9728:557;;;10320:13;10336:48;10352:9;10363:4;:18;;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10363:20:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10363:20:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10363:20:3;;;;;;;;;10336:15;:48::i;:::-;10320:64;;10394:13;10410:48;10426:9;10437:4;:18;;;:20;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;10410:48:3;10394:64;-1:-1:-1;10511:39:3;10544:5;10511:24;:9;10394:64;10511:24;:17;:24;:::i;:::-;:32;:39;:32;:39;:::i;:::-;10504:46;;;;;;8550:2007;;;;;:::o;4400:260:4:-;4579:34;4400:260;;;;;:::o;7847:199:3:-;8004:35;;;;;7974:7;;8004:23;;;;;;:35;;8028:10;;8004:35;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8004:35:3;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8004:35:3;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;8004:35:3;;;;;;;;;7997:42;7847:199;-1:-1:-1;;;7847:199:3:o;1424:191:14:-;1556:10;1542:24;;:10;:24;;;;1534:74;;;;;;;;;;;;;;;;;;;;;;1424:191;;:::o;14011:122:48:-;3326:42;14011:122;:::o;10563:500:3:-;10679:24;10719:10;10732:279;10786:5;:16;;;10816:5;:16;;;10846:115;10879:44;7073:6;10905:5;:17;;;10879:20;:44::i;:::-;10941:6;10846:15;:115::i;:::-;10975:5;10994;:7;;;10732:40;:279::i;:::-;11028:16;;;;10719:292;;-1:-1:-1;11028:28:3;;10719:292;11028:28;:24;:28;:::i;:::-;11021:35;10563:500;-1:-1:-1;;;;10563:500:3:o;11069:505::-;11209:23;11248:10;11261:270;11315:5;:16;;;11345:5;:7;;;11366:115;11399:44;7073:6;11425:5;:17;;;11399:20;:44::i;11261:270::-;11548:7;;;;11248:283;;-1:-1:-1;11548:19:3;;11248:283;11548:19;:15;:19;:::i;965:364:53:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;:::-;1099:21;:191::i;:::-;-1:-1:-1;1317:5:53;;;965:364::o;11580:371:3:-;11720:24;11767:177;11807:5;:17;;;11838:23;11854:6;11838:5;:7;;;:15;;:23;;;;:::i;:::-;11875:7;;;;11896:17;;11927:7;;;;11767:26;:177::i;1335:383:53:-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;897:147:3:-;984:7;884:6;1014:17;:6;1029:1;1014:17;:14;:17;:::i;:::-;:23;;;;;;;897:147;-1:-1:-1;;;897:147:3:o;1050:159::-;1142:7;1172:30;1200:1;1172:19;:6;884;1172:19;:14;:19;:::i;:::-;:27;:30;:27;:30;:::i;3244:1535::-;3422:7;3521:14;3538:46;3581:2;3538:34;3569:2;3538:22;3554:1;3557:2;3538:15;:22::i;:::-;:30;:34;:30;:34;:::i;:46::-;3521:63;-1:-1:-1;3606:9:3;3618:35;3634:14;1789:6;3646:1;3634:14;:11;:14;:::i;3618:35::-;3606:47;-1:-1:-1;3691:4:3;3705:166;;;;3738:18;:1;3748:7;3738:18;:9;:18;:::i;:::-;3734:22;;3705:166;;;3816:23;:6;3831:7;3816:23;:14;:23;:::i;:::-;3807:32;;3705:166;3889:6;3884:1;:11;3880:176;;3915:17;:1;3925:6;3915:17;:9;:17;:::i;:::-;3911:21;;3958:4;3946:16;;3880:176;;;3997:17;:6;4012:1;3997:17;:14;:17;:::i;:::-;3993:21;;4040:5;4028:17;;3880:176;4092:18;4113:112;4142:25;4165:1;4142:14;1789:6;4154:1;4142:14;:11;:14;:::i;:25::-;4181:34;4212:2;4181:22;4197:1;4200:2;4181:15;:22::i;4113:112::-;4092:133;-1:-1:-1;4263:39:3;4269:32;4092:133;4269:12;4279:1;;4269:12;:9;:12;:::i;:::-;:20;:32;:20;:32;:::i;:::-;4263:5;:39::i;:::-;4250:52;-1:-1:-1;4360:19:3;4382:25;4405:1;4382:14;1789:6;4394:1;4382:14;:11;:14;:::i;:25::-;4360:47;;4427:17;4458:9;4454:137;;;4495:21;:1;4505:10;4495:21;:9;:21;:::i;:::-;4483:33;;4454:137;;;4559:21;:10;4578:1;4559:21;:18;:21;:::i;:::-;4547:33;;4454:137;4605:9;4601:172;;;4637:44;4658:9;4669:11;4637:20;:44::i;:::-;4630:51;;;;;;;;;;4601:172;4719:43;4739:9;4750:11;4719:19;:43::i;3244:1535::-;;;;;;;;:::o;731:322:54:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;919:127:54;;;49:4:-1;25:18;;61:17;;919:127:54;182:15:-1;919:127:54;;;;179:29:-1;;;;160:49;;;919:127:54;-1:-1:-1;731:322:54;;;;;:::o;1511:170:52:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;2234:504:3;2412:7;;2456:34;2472:1;2475:14;:2;2486;2475:14;:10;:14;:::i;2456:34::-;2435:55;-1:-1:-1;2511:16:3;2530:51;2550:26;2573:2;2550:14;2561:2;;2550:14;:10;:14;:::i;:26::-;2578:2;2530:19;:51::i;:::-;2511:70;;2591:15;2609:28;2625:1;2628:8;2609:15;:28::i;:::-;2591:46;-1:-1:-1;2671:60:3;2687:10;2699:31;2591:46;2699:14;1789:6;2711:1;2699:14;:11;:14;:::i;2671:60::-;2664:67;2234:504;-1:-1:-1;;;;;;;;;2234:504:3:o;122:448:53:-;208:7;235:6;231:45;;-1:-1:-1;264:1:53;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:53:o;1802:227:3:-;1912:1;1920;1916;1912:5;;:9;1946:77;1957:1;1953;:5;1946:77;;;1978:1;1974:5;;2011:1;2006;2002;1998;:5;;;;;;:9;1997:15;;;;;;1993:19;;1946:77;;;1802:227;;;;:::o;1215:160::-;1306:7;1336:32;1345:19;:6;884;1345:19;:14;:19;:::i;:::-;1366:1;1468:7;;1510:12;1520:1;;1510:12;:9;:12;:::i;:::-;1491:31;-1:-1:-1;1556:12:3;;;1552:16;;1582:13;;1578:109;;-1:-1:-1;1629:1:3;1618:12;;-1:-1:-1;1611:19:3;;1578:109;-1:-1:-1;1668:8:3;-1:-1:-1;1661:15:3;;883:3780:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1596:263:-1:-;;1711:2;1699:9;1690:7;1686:23;1682:32;1679:2;;;-1:-1;;1717:12;1679:2;226:6;220:13;238:33;265:5;238:33;;1866:627;;;;2029:2;2017:9;2008:7;2004:23;2000:32;1997:2;;;-1:-1;;2035:12;1997:2;85:6;72:20;97:33;124:5;97:33;;;2087:63;-1:-1;2187:2;2226:22;;;72:20;97:33;72:20;97:33;;;2195:63;-1:-1;2323:2;2308:18;;2295:32;2347:18;2336:30;;2333:2;;;-1:-1;;2369:12;2333:2;2460:6;2449:9;2445:22;418:3;411:4;403:6;399:17;395:27;385:2;;-1:-1;;426:12;385:2;473:6;460:20;446:34;;495:80;510:64;567:6;510:64;;;495:80;;;603:21;;;660:14;;;;635:17;;;749;;;740:27;;;;737:36;-1:-1;734:2;;;-1:-1;;776:12;734:2;-1:-1;802:10;;796:206;821:6;818:1;815:13;796:206;;;1248:20;;889:50;;843:1;836:9;;;;;953:14;;;;981;;796:206;;;800:14;2389:88;;;;;;;;1991:502;;;;;;2500:394;;;2635:2;2623:9;2614:7;2610:23;2606:32;2603:2;;;-1:-1;;2641:12;2603:2;1110:6;1097:20;1122:47;1163:5;1122:47;;;2693:77;2807:2;2846:22;;;;1248:20;;-1:-1;;;2597:297;2901:263;;3016:2;3004:9;2995:7;2991:23;2987:32;2984:2;;;-1:-1;;3022:12;2984:2;-1:-1;1396:13;;2978:186;-1:-1;2978:186;3171:399;;;3303:2;3291:9;3282:7;3278:23;3274:32;3271:2;;;-1:-1;;3309:12;3271:2;-1:-1;;1396:13;;3472:2;3522:22;;;1396:13;;;;;-1:-1;3265:305;3577:259;;3690:2;3678:9;3669:7;3665:23;3661:32;3658:2;;;-1:-1;;3696:12;3658:2;1541:6;1535:13;11483:4;12531:5;11472:16;12508:5;12505:33;12495:2;;-1:-1;;12542:12;4176:690;;4369:5;9954:12;10369:6;10364:3;10357:19;10406:4;10401:3;10397:14;4381:93;;10406:4;4545:5;9808:14;-1:-1;4584:260;4609:6;4606:1;4603:13;4584:260;;;4670:13;;5961:37;;10406:4;3997:14;;;;10212;;;;4631:1;4624:9;4584:260;;;-1:-1;4850:10;;4300:566;-1:-1;;;;4300:566;6130:262;;5145:5;9954:12;-1:-1;11726:101;11740:6;11737:1;11734:13;11726:101;;;5289:4;11807:11;;;;;11801:18;11788:11;;;11781:39;11755:10;11726:101;;;11842:6;11839:1;11836:13;11833:2;;;-1:-1;11898:6;11893:3;11889:16;11882:27;11833:2;-1:-1;5320:16;;;;;6255:137;-1:-1;;6255:137;6399:324;11278:42;11267:54;;;4096:37;;11267:54;;6709:2;6694:18;;4096:37;6545:2;6530:18;;6516:207;6730:324;11278:42;11267:54;;;;4096:37;;7040:2;7025:18;;5961:37;6876:2;6861:18;;6847:207;7061:361;;7229:2;7250:17;7243:47;7304:108;7229:2;7218:9;7214:18;7398:6;7304:108;;7429:571;;4966:5;10914:13;10907:21;4946:3;4939:34;11278:42;11271:5;11267:54;7805:2;7794:9;7790:18;4096:37;7647:2;7842;7831:9;7827:18;7820:48;7882:108;7647:2;7636:9;7632:18;7976:6;7882:108;;8007:471;8199:2;8184:18;;12019:1;12009:12;;11999:2;;12025:9;11999:2;5437:68;;;8381:2;8366:18;;5961:37;;;;8464:2;8449:18;;;5961:37;8170:308;;8485:407;8676:2;8690:47;;;5742:2;8661:18;;;10357:19;5778:34;10397:14;;;5758:55;5847:7;5833:12;;;5826:29;5874:12;;;8647:245;8899:213;5961:37;;;9017:2;9002:18;;8988:124;9119:256;9181:2;9175:9;9207:17;;;9282:18;9267:34;;9303:22;;;9264:62;9261:2;;;9339:1;;9329:12;9261:2;9181;9348:22;9159:216;;-1:-1;9159:216;9382:304;;9541:18;9533:6;9530:30;9527:2;;;-1:-1;;9563:12;9527:2;-1:-1;9608:4;9596:17;;;9661:15;;9464:222;12048:117;11278:42;12135:5;11267:54;12110:5;12107:35;12097:2;;12156:1;;12146:12;12097:2;12091:74;"
            }
        }
    },
    "sourceTreeHashHex": "0xef94bb632dc1f0d6a65b69df6bb9252473dd40909155f25b9cb19c62823387cf",
    "sources": {
        "./DODOSampler.sol": {
            "id": 4
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 48
        },
        "./DODOHelper.sol": {
            "id": 3
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 52
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 54
        },
        "./SamplerUtils.sol": {
            "id": 14
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 32
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 49
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 50
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 33
        }
    },
    "sourceCodes": {
        "./DODOSampler.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"./DODOHelper.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ncontract DODOSampler is\n    DODOHelper,\n    DeploymentConstants,\n    SamplerUtils\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(_getDODOZooAddress()).getDODO(takerToken, makerToken);\n        // If pool exists we have the correct Base/Quote\n        if (pool != address(0)) {\n            sellBase = true;\n            for (uint256 i = 0; i < numSamples; i++) {\n                (bool didSucceed, bytes memory resultData) =\n                    pool.staticcall.gas(DODO_CALL_GAS)(\n                        abi.encodeWithSelector(\n                            IDODO(0).querySellBaseToken.selector,\n                            takerTokenAmounts[i]\n                        ));\n                uint256 buyAmount = 0;\n                if (didSucceed) {\n                    buyAmount = abi.decode(resultData, (uint256));\n                }\n                // Exit early if the amount is too high for the source to serve\n                if (buyAmount == 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = buyAmount;\n            }\n        } else {\n            pool = IDODOZoo(_getDODOZooAddress()).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            sellBase = false;\n            // We are Selling the Quote, need to do some hackery\n            for (uint256 i = 0; i < numSamples; i++) {\n                //uint256 buyAmount = this.querySellQuoteToken(pool, takerTokenAmounts[i]);\n                (bool didSucceed, bytes memory resultData) =\n                    address(this).staticcall.gas(DODO_CALL_GAS)(\n                        abi.encodeWithSelector(\n                            DODOHelper(0).querySellQuoteToken.selector,\n                            pool,\n                            takerTokenAmounts[i]\n                        ));\n                uint256 buyAmount = 0;\n                if (didSucceed) {\n                    buyAmount = abi.decode(resultData, (uint256));\n                }\n                // Exit early if the amount is too high for the source to serve\n                if (buyAmount == 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = buyAmount;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return takerTokenAmounts;\n    }\n\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the KyberHintHandler contract.\n    address constant private KYBER_HINT_HANDLER_ADDRESS = 0xa1C0Fa73c39CFBcC11ec9Eb1Afc665aba9996E2C;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    /// @dev Mainnet address of the mStable mUSD contract.\n    address constant private MUSD_ADDRESS = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5;\n    /// @dev Mainnet address of the Mooniswap Registry contract\n    address constant private MOONISWAP_REGISTRY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\n    /// @dev Mainnet address of the DODO Zoo contract\n    address constant private DODO_ZOO = 0x3A97247DF274a17C59A3bd12735ea3FcDFb49950;\n\n    // // Ropsten addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xb344afeD348de15eb4a9e180205A2B0739628339;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0xC812AF3f3fBC62F76ea4262576EC0f49dB8B7f1c;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = 0x4E1000616990D83e56f4b5fC6CC8602DcfD20459;\n\n    // // Rinkeby addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x0d5371e5EE23dec7DF251A8957279629aa79E9C5;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xA2AA4bEFED748Fba27a3bE7Dfd2C4b2c6DB1F49B;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x46B5BC959e8A754c0256FFF73bF34A52Ad5CdfA9;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    // // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x3577552C1Fb7A44aD76BeEB7aB53251668A21F8D;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `KyberHintHandler` address.\n    /// @return kyberAddress The `IKyberHintHandler` address.\n    function _getKyberHintHandlerAddress()\n        internal\n        view\n        returns (address hintHandlerAddress)\n    {\n        return KYBER_HINT_HANDLER_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the mStable mUSD address.\n    /// @return musd The mStable mUSD address.\n    function _getMUsdAddress()\n        internal\n        view\n        returns (address musd)\n    {\n        return MUSD_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Mooniswap registry address.\n    /// @return registry The Mooniswap registry address.\n    function _getMooniswapAddress()\n        internal\n        view\n        returns (address)\n    {\n        return MOONISWAP_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Zoo registry address.\n    /// @return registry The DODO Zoo address.\n    function _getDODOZooAddress()\n        internal\n        view\n        returns (address)\n    {\n        return DODO_ZOO;\n    }\n}\n",
        "./DODOHelper.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\n\n\n// solhint-disable var-name-mixedcase\n// solhint-disable func-name-mixedcase\n// solhint-disable func-param-name-mixedcase\nlibrary DecimalMath {\n\n    using LibSafeMath for uint256;\n\n    uint256 internal constant ONE = 10**18;\n\n    function mul(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.safeMul(d) / ONE;\n    }\n\n    function divFloor(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return target.safeMul(ONE).safeDiv(d);\n    }\n\n    function divCeil(uint256 target, uint256 d)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _divCeil(target.safeMul(ONE), d);\n    }\n\n    function _divCeil(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotient = a.safeDiv(a);\n        uint256 remainder = a - quotient * b;\n        if (remainder > 0) {\n            return quotient + 1;\n        } else {\n            return quotient;\n        }\n    }\n}\n\n\nlibrary DODOMath {\n\n    using LibSafeMath for uint256;\n    uint256 internal constant ONE = 10**18;\n\n    function _Sqrt(uint256 x)\n        internal\n        pure\n        returns (uint256 y)\n    {\n        uint256 z = x / 2 + 1;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    /*\n        Integrate dodo curve fron V1 to V2\n        require V0>=V1>=V2>0\n        res = (1-k)i(V1-V2)+ikV0*V0(1/V2-1/V1)\n        let V1-V2=delta\n        res = i*delta*(1-k+k(V0^2/V1/V2))\n    */\n    function _GeneralIntegrate(\n        uint256 V0,\n        uint256 V1,\n        uint256 V2,\n        uint256 i,\n        uint256 k\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 fairAmount = DecimalMath.mul(i, V1.safeSub(V2)); // i*delta\n        uint256 V0V0V1V2 = DecimalMath.divCeil(V0.safeMul(V0).safeDiv(V1), V2);\n        uint256 penalty = DecimalMath.mul(k, V0V0V1V2); // k(V0^2/V1/V2)\n        return DecimalMath.mul(fairAmount, ONE.safeSub(k).safeAdd(penalty));\n    }\n\n    /*\n        The same with integration expression above, we have:\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n        Given Q1 and deltaB, solve Q2\n        This is a quadratic function and the standard version is\n        aQ2^2 + bQ2 + c = 0, where\n        a=1-k\n        -b=(1-k)Q1-kQ0^2/Q1+i*deltaB\n        c=-kQ0^2\n        and Q2=(-b+sqrt(b^2+4(1-k)kQ0^2))/2(1-k)\n        note: another root is negative, abondan\n        if deltaBSig=true, then Q2>Q1\n        if deltaBSig=false, then Q2<Q1\n    */\n    function _SolveQuadraticFunctionForTrade(\n        uint256 Q0,\n        uint256 Q1,\n        uint256 ideltaB,\n        bool deltaBSig,\n        uint256 k\n    ) internal pure returns (uint256) {\n        // calculate -b value and sig\n        // -b = (1-k)Q1-kQ0^2/Q1+i*deltaB\n        uint256 kQ02Q1 = DecimalMath.mul(k, Q0).safeMul(Q0).safeDiv(Q1); // kQ0^2/Q1\n        uint256 b = DecimalMath.mul(ONE.safeSub(k), Q1); // (1-k)Q1\n        bool minusbSig = true;\n        if (deltaBSig) {\n            b = b.safeAdd(ideltaB); // (1-k)Q1+i*deltaB\n        } else {\n            kQ02Q1 = kQ02Q1.safeAdd(ideltaB); // i*deltaB+kQ0^2/Q1\n        }\n        if (b >= kQ02Q1) {\n            b = b.safeSub(kQ02Q1);\n            minusbSig = true;\n        } else {\n            b = kQ02Q1.safeSub(b);\n            minusbSig = false;\n        }\n\n        // calculate sqrt\n        uint256 squareRoot = DecimalMath.mul(\n            ONE.safeSub(k).safeMul(4),\n            DecimalMath.mul(k, Q0).safeMul(Q0)\n        ); // 4(1-k)kQ0^2\n        squareRoot = _Sqrt(b.safeMul(b).safeAdd(squareRoot)); // sqrt(b*b+4(1-k)kQ0*Q0)\n\n        // final res\n        uint256 denominator = ONE.safeSub(k).safeMul(2); // 2(1-k)\n        uint256 numerator;\n        if (minusbSig) {\n            numerator = b.safeAdd(squareRoot);\n        } else {\n            numerator = squareRoot.safeSub(b);\n        }\n\n        if (deltaBSig) {\n            return DecimalMath.divFloor(numerator, denominator);\n        } else {\n            return DecimalMath.divCeil(numerator, denominator);\n        }\n    }\n\n    /*\n        Start from the integration function\n        i*deltaB = (Q2-Q1)*(1-k+kQ0^2/Q1/Q2)\n        Assume Q2=Q0, Given Q1 and deltaB, solve Q0\n        let fairAmount = i*deltaB\n    */\n    function _SolveQuadraticFunctionForTarget(\n        uint256 V1,\n        uint256 k,\n        uint256 fairAmount\n    )\n        internal\n        pure\n        returns (uint256 V0)\n    {\n        // V0 = V1+V1*(sqrt-1)/2k\n        uint256 sqrt = DecimalMath.divCeil(DecimalMath.mul(k, fairAmount).safeMul(4), V1);\n        sqrt = _Sqrt(sqrt.safeMul(ONE).safeMul(ONE));\n        uint256 premium = DecimalMath.divCeil(sqrt.safeSub(ONE), k.safeMul(2));\n        // V0 is greater than or equal to V1 according to the solution\n        return DecimalMath.mul(V1, ONE.safeAdd(premium));\n    }\n}\n\n\ninterface IDODO {\n\n    /// @dev Sells the Base token receiving the Quote token\n    function sellBaseToken(uint256 sellAmount, uint256 minReceiveQuote, bytes calldata data)\n        external\n        returns (uint256);\n\n    /// @dev Buys the Base token selling the Quote token\n    function buyBaseToken(uint256 amount, uint256 maxPayQuote, bytes calldata data)\n        external\n        returns (uint256);\n\n    /// @dev Returns the current status the DODO pool is in\n    function _R_STATUS_() external view returns (uint8);\n\n    /// @dev Returns the virtual Base token balance\n    function _BASE_BALANCE_() external view returns (uint256);\n    /// @dev Returns the virtual Quote token balance\n    function _QUOTE_BALANCE_() external view returns (uint256);\n\n    function _K_() external view returns (uint256);\n    function _MT_FEE_RATE_() external view returns (uint256);\n    function _LP_FEE_RATE_() external view returns (uint256);\n\n    /// @dev Returns the targets for the Base and Quote token\n    function getExpectedTarget() external view returns (uint256 baseTarget, uint256 quoteTarget);\n\n    /// @dev Returns the current oracle price for the pool\n    function getOraclePrice() external view returns (uint256);\n\n    /// @dev Returns the amount of quote bought when selling the base token\n    function querySellBaseToken(uint256 sellAmount) external view returns (uint256);\n}\n\n\ncontract DODOHelper {\n\n    using LibSafeMath for uint256;\n\n    enum RStatus {ONE, ABOVE_ONE, BELOW_ONE}\n\n    uint256 internal constant ONE = 10**18;\n\n    struct DODOState {\n        // The current oracle price\n        uint256 oraclePrice;\n        // Internal Base balance\n        uint256 B;\n        // Internal Quote balance\n        uint256 Q;\n        // Wanted Base balance\n        uint256 baseTarget;\n        // Wanted Quote balance\n        uint256 quoteTarget;\n        // Equal, Above or Below the target\n        RStatus rStatus;\n        uint256 K;\n    }\n\n    /// @dev Calculate the amount bought when the Base token\n    /// is requested to be sold. This is directly supported in DODO\n    /// and this is a convenience function.\n    /// @param dodo The address of the DODO pool\n    /// @param sellAmount the amount of the Base to sell\n    /// @return The amount bought of Quote token when selling Base token.\n    function querySellBaseToken(\n        IDODO dodo,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        return dodo.querySellBaseToken(sellAmount);\n    }\n\n    /// @dev Calculate the amount bought when the Quote token\n    /// is requested to be sold. This is not directly supported in DODO\n    /// so we perform the calculation and use the result to buyBase.\n    /// Note: This has a small amount of imprecision so there is a likelyhood\n    /// of change (in quote token).\n    /// @param dodo The address of the DODO pool\n    /// @param sellAmount the amount of the Quote to sell\n    /// @return The amount bought of Base token when selling Quote token.\n    function querySellQuoteToken(\n        IDODO dodo,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        uint256 buyAmount;\n        // Fetch all relevant state for the required calculations\n        DODOState memory state;\n        // Current Oracle price\n        state.oraclePrice = dodo.getOraclePrice();\n        // Virtual Quote balance\n        state.Q = dodo._QUOTE_BALANCE_();\n        // Virtual Base balance\n        state.B = dodo._BASE_BALANCE_();\n        state.K = dodo._K_();\n\n        // DODO can be in 3 states at any block. This is\n        // dependent on the oracle price and DODO wants to reach\n        // a target based of the latest updated.\n        (state.baseTarget, state.quoteTarget) = dodo.getExpectedTarget();\n        // It can be at the target (ONE), above the target (ABOVE_ONE)\n        // or below the target (BELOW ONE)\n        state.rStatus = RStatus(dodo._R_STATUS_());\n        // In each case there is a different calculation to perform\n        // to get there in the way DODO wants\n        if (state.rStatus == RStatus.ONE) {\n            buyAmount = _ROneSellQuoteToken(sellAmount, state);\n        } else if (state.rStatus == RStatus.ABOVE_ONE) {\n            buyAmount = _RAboveSellQuoteToken(sellAmount, state);\n        } else {\n            uint256 backOneBase = state.B.safeSub(state.baseTarget);\n            uint256 backOneQuote = state.quoteTarget.safeSub(state.Q);\n            if (sellAmount <= backOneQuote) {\n                buyAmount = _RBelowSellQuoteToken(sellAmount, state);\n            } else {\n                buyAmount = backOneBase.safeAdd(\n                    _ROneSellQuoteToken(sellAmount.safeSub(backOneQuote), state));\n            }\n        }\n        // Calculate fees\n        uint256 mtFee = DecimalMath.mul(buyAmount, dodo._MT_FEE_RATE_());\n        uint256 lpFee = DecimalMath.mul(buyAmount, dodo._LP_FEE_RATE_());\n        // Buy amount less the fees\n        return buyAmount.safeSub(lpFee).safeSub(mtFee);\n    }\n\n    function _ROneSellQuoteToken(uint256 amount, DODOState memory state)\n        internal\n        view\n        returns (uint256 receiveBaseToken)\n    {\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n            state.baseTarget,\n            state.baseTarget,\n            DecimalMath.mul(\n                DecimalMath.divFloor(ONE, state.oraclePrice),\n                amount\n            ),\n            false,\n            state.K\n        );\n        return state.baseTarget.safeSub(B2);\n    }\n\n    function _RAboveSellQuoteToken(\n        uint256 amount,\n        DODOState memory state\n    )\n        internal\n        view\n        returns (uint256 receieBaseToken)\n    {\n        uint256 B2 = DODOMath._SolveQuadraticFunctionForTrade(\n            state.baseTarget,\n            state.B,\n            DecimalMath.mul(\n                DecimalMath.divFloor(ONE, state.oraclePrice),\n                amount\n            ),\n            false,\n            state.K\n        );\n        return state.B.safeSub(B2);\n    }\n\n    function _RBelowSellQuoteToken(\n        uint256 amount,\n        DODOState memory state\n    )\n        internal\n        view\n        returns (uint256 receiveBaseToken)\n    {\n        return DODOMath._GeneralIntegrate(\n            state.quoteTarget,\n            state.Q.safeAdd(amount),\n            state.Q,\n            state.oraclePrice,\n            state.K\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "./SamplerUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20Token.decimals(tokenAddress);\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-exchange",
                "@0x/contracts-asset-proxy=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-asset-proxy"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
