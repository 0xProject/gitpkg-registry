{
    "schemaVersion": "2.0.0",
    "contractName": "TestNativeOrderSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "count",
                        "type": "uint256"
                    }
                ],
                "name": "createTokens",
                "outputs": [
                    {
                        "internalType": "contract TestNativeOrderSamplerToken[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    }
                ],
                "name": "getLimitOrderRelevantState",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "enum IExchange.OrderStatus",
                                "name": "status",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFilledAmount",
                                "type": "uint128"
                            }
                        ],
                        "internalType": "struct IExchange.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint128",
                        "name": "actualFillableTakerTokenAmount",
                        "type": "uint128"
                    },
                    {
                        "internalType": "bool",
                        "name": "isSignatureValid",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract TestNativeOrderSamplerToken",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "setTokenBalanceAndAllowance",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x2330 PUSH2 0x82 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x6FF MSTORE DUP1 PUSH2 0xABE MSTORE DUP1 PUSH2 0xC79 MSTORE POP PUSH2 0x2330 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E1F2BB8 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7E1F2BB8 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0xC662178C EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x241 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1022742B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x1FB09795 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x165 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x17E9 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x1E27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1A43 JUMP JUMPDEST PUSH2 0x412 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x1B60 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x184B JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x19E1 JUMP JUMPDEST PUSH2 0xBA8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x189B JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x3F7 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x308 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x379 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3CF JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x3EA JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2C0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41A PUSH2 0x14FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0xFF DUP6 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND EQ ISZERO PUSH2 0x48B JUMPI PUSH1 0x2 DUP4 PUSH1 0x20 ADD SWAP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x475 JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x482 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP PUSH2 0x4AF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 ADD SWAP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x49D JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4AA JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP JUMPDEST PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 DUP5 PUSH1 0x40 ADD CALLDATALOAD EQ SWAP1 POP DUP5 PUSH2 0x140 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x56C DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD50 JUMP JUMPDEST SWAP1 POP PUSH2 0x589 DUP2 PUSH2 0x584 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xD80 JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP PUSH2 0x5CA PUSH2 0x5C5 DUP3 DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBF JUMP JUMPDEST PUSH2 0xF14 JUMP JUMPDEST SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E1 DUP5 DUP5 DUP5 PUSH2 0x271 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ PUSH2 0x693 JUMPI PUSH2 0x67A DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x619 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x62D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x657 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBF JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x686 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x5E6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6EF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x7C5 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x740 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x79A JUMPI PUSH2 0x795 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF4C JUMP JUMPDEST PUSH2 0x79D JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x6F5 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x813 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x89B JUMPI PUSH1 0x40 MLOAD PUSH2 0x82D SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x849 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x856 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x819 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8AF JUMPI INVALID JUMPDEST DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8BF JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x8E5 JUMPI POP PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8D3 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8E3 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x906 JUMPI POP PUSH1 0x0 DUP5 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x927 JUMPI POP PUSH1 0x0 DUP5 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x93D PUSH2 0x14FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x97B SWAP3 SWAP2 SWAP1 PUSH2 0x1EAC JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x993 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CB SWAP2 SWAP1 PUSH2 0x1ACF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9DE JUMPI INVALID JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9EE JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x9F9 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0xA34 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xA45 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xA5E JUMP JUMPDEST DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAAE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0xBA1 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB63 JUMPI PUSH2 0xB5E DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB32 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x101E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xAB4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3C9DC74D DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC69 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xD48 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCBA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD20 JUMPI PUSH2 0xD1B DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x112C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD23 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xC6F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD77 DUP4 PUSH2 0xD69 DUP5 DUP8 PUSH2 0x123D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1287 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9E DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC0 SWAP3 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE10 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE99 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEB5 JUMPI DUP2 PUSH2 0xEB7 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0B DUP4 PUSH2 0xEFD PUSH2 0xEDC PUSH1 0x1 DUP8 PUSH2 0x12BE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xEEF DUP7 DUP10 PUSH2 0x123D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x12E8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1287 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP3 GT ISZERO PUSH2 0xF44 JUMPI PUSH2 0xF43 PUSH2 0xF3E PUSH1 0x3 DUP5 PUSH2 0x1317 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xFB0 SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1004 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1017 JUMPI PUSH2 0x1014 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1053 SWAP2 SWAP1 PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x10BD SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1111 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1121 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1163 SWAP3 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x11CD SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1208 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x120D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1221 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1234 JUMPI PUSH2 0x1231 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1250 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1261 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x127C JUMPI PUSH2 0x127B PUSH2 0x1276 PUSH1 0x1 DUP7 DUP7 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EQ ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A5 PUSH2 0x12A0 PUSH1 0x3 DUP6 DUP6 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x12B1 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12DD JUMPI PUSH2 0x12DC PUSH2 0x12D7 PUSH1 0x2 DUP6 DUP6 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x130D JUMPI PUSH2 0x130C PUSH2 0x1307 PUSH1 0x0 DUP7 DUP7 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1334 SWAP3 SWAP2 SWAP1 PUSH2 0x1E62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13AD DUP4 DUP4 PUSH2 0x143D JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1464 JUMPI PUSH2 0x1463 PUSH2 0x145E PUSH1 0x5 DUP6 MLOAD PUSH1 0x20 DUP7 ADD PUSH2 0x1476 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 DUP4 ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1495 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x151D JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2EE DUP1 PUSH2 0x200D DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1558 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x156E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1581 PUSH2 0x157C DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD DUP7 DUP3 DUP4 DUP7 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15D3 JUMPI DUP2 CALLDATALOAD PUSH2 0x15BA DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 DUP6 MSTORE POP DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x15A7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1601 PUSH2 0x15FC DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD PUSH1 0x80 DUP8 DUP4 DUP3 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x163B DUP10 DUP5 PUSH2 0x174D JUMP JUMPDEST DUP6 MSTORE DUP4 DUP6 ADD SWAP5 POP DUP2 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1629 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1671 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x167A DUP2 PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1687 DUP4 DUP4 PUSH2 0x1549 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1696 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x16A8 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x16BA DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x16CC DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x16DE DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x16F0 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1702 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1716 DUP5 DUP3 DUP6 ADD PUSH2 0x1549 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0x1736 DUP5 DUP3 DUP6 ADD PUSH2 0x17C7 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1768 PUSH1 0x80 PUSH2 0x1F77 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C1 DUP2 PUSH2 0x1FEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x17E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17FA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1805 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1820 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1836 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1842 DUP5 DUP3 DUP6 ADD PUSH2 0x155E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x185D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1873 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x187F DUP6 DUP3 DUP7 ADD PUSH2 0x155E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1890 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18AF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18C5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18D1 DUP7 DUP3 DUP8 ADD PUSH2 0x155E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x18E2 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x18F4 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1913 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x192A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x193D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1950 PUSH2 0x194B DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x1973 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x19A0 JUMPI PUSH2 0x1989 DUP14 DUP4 PUSH2 0x165E JUMP JUMPDEST DUP6 MSTORE DUP3 DUP6 ADD SWAP5 POP DUP1 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP9 ADD SWAP8 POP PUSH2 0x1977 JUMP JUMPDEST POP POP DUP2 SWAP9 POP DUP1 DUP11 ADD CALLDATALOAD SWAP6 POP POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x19BB JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x19C8 DUP7 DUP3 DUP8 ADD PUSH2 0x15DE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x19D8 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x1549 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x19F8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1A03 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1A15 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1A27 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x200 DUP2 SLT ISZERO PUSH2 0x1A57 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1A61 DUP6 DUP6 PUSH2 0x165E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 PUSH2 0x17F NOT DUP3 ADD SLT ISZERO PUSH2 0x1A75 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x180 DUP4 ADD SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A99 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AA3 DUP6 DUP6 PUSH2 0x165E JUMP JUMPDEST SWAP3 POP PUSH2 0x1AB3 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x174D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x1AC4 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1AE4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x1AF1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1AFC PUSH1 0x60 PUSH2 0x1F77 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x1B11 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x1B26 DUP2 PUSH2 0x1FEB JUMP JUMPDEST DUP1 PUSH1 0x40 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x1B3F DUP2 PUSH2 0x1FEB JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP5 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B55 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B71 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B8C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1BB0 DUP3 DUP3 MLOAD PUSH2 0x1B96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x1BC2 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x1BD5 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x1BE8 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x1BFB PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1C0E PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x1C21 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x1C34 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x1C48 DUP3 DUP6 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x1C69 DUP3 DUP6 ADD DUP3 PUSH2 0x1CC8 JUMP JUMPDEST POP POP PUSH2 0x160 DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1C86 DUP2 PUSH2 0x1FC7 JUMP JUMPDEST DUP1 DUP4 MSTORE POP PUSH1 0xFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1CFD JUMPI PUSH1 0x20 DUP2 DUP7 ADD ADD MLOAD DUP2 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CDF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1D0B JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP DUP1 DUP4 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP4 MSTORE DUP1 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DCD JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1DA4 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1E19 JUMPI DUP4 MLOAD DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1DF8 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 ISZERO ISZERO DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E4B DUP6 PUSH2 0x1FC7 JUMP JUMPDEST DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1E73 DUP5 PUSH2 0x1FC7 JUMP JUMPDEST DUP4 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH1 0x8 DUP6 LT PUSH2 0x1E95 JUMPI INVALID JUMPDEST DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP3 ADD SWAP1 POP PUSH2 0x1EBF DUP3 DUP6 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x1ECD PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x1C7B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0x1EE7 DUP3 DUP7 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x1EF5 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x200 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP5 MLOAD DUP3 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x1F27 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x40 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FBA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP4 MUL ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1FD1 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3C9DC74D EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x92 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x240 JUMP JUMPDEST PUSH2 0xC2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77 SWAP2 SWAP1 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x89 SWAP2 SWAP1 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA7 SWAP2 SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB9 SWAP2 SWAP1 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x204 DUP4 DUP4 PUSH2 0x1C9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x228 DUP5 DUP5 PUSH2 0x1C9 JUMP JUMPDEST SWAP2 POP PUSH2 0x237 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1C9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x255 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x25F DUP7 DUP7 PUSH2 0x1C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x26E DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x1C9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xF6 0xC7 MOD SWAP12 XOR 0xA6 0x25 0xD0 MUL 0xD5 0xDF KECCAK256 0x49 0xE2 0xE9 PUSH3 0x30DA2A PUSH29 0x9352DA82F7D623135F897464736F6C634300060C0033A2646970667358 0x22 SLT KECCAK256 SHR DUP6 SWAP3 CALLER SMOD 0xBA NUMBER SMOD 0xFC SWAP11 0x21 CALLDATASIZE SWAP3 SWAP14 0xAB 0x22 RETURN 0xED 0x4E DUP12 0xB5 NUMBER 0xD9 SELFDESTRUCT 0xDE PUSH5 0xFE4245AE7F 0x48 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1174:2934:40:-:0;;;896:42:25;826:113;;;;;;;;;;;1174:2934:40;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "8071": [
                        {
                            "length": 32,
                            "start": 1791
                        },
                        {
                            "length": 32,
                            "start": 2750
                        },
                        {
                            "length": 32,
                            "start": 3193
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637e1f2bb8116100665780637e1f2bb8146101955780639bf3ee35146101c5578063bd71ecf6146101f5578063c662178c14610225578063e78ac045146102415761009e565b80631022742b146100a357806316279055146100d35780631fb097951461010357806366a1ac6b14610135578063706e2f9b14610165575b600080fd5b6100bd60048036038101906100b891906118ff565b610271565b6040516100ca9190611ddb565b60405180910390f35b6100ed60048036038101906100e891906117e9565b6103ff565b6040516100fa9190611e27565b60405180910390f35b61011d60048036038101906101189190611a43565b610412565b60405161012c93929190611f0c565b60405180910390f35b61014f600480360381019061014a91906118ff565b6105d4565b60405161015c9190611ddb565b60405180910390f35b61017f600480360381019061017a919061180f565b6106a6565b60405161018c9190611ddb565b60405180910390f35b6101af60048036038101906101aa9190611b60565b6107cb565b6040516101bc9190611d87565b60405180910390f35b6101df60048036038101906101da9190611a84565b6108a1565b6040516101ec9190611f66565b60405180910390f35b61020f600480360381019061020a919061184b565b610a65565b60405161021c9190611ddb565b60405180910390f35b61023f600480360381019061023a91906119e1565b610ba8565b005b61025b6004803603810190610256919061189b565b610c20565b6040516102689190611ddb565b60405180910390f35b6060835167ffffffffffffffff8111801561028b57600080fd5b506040519080825280602002602001820160405280156102ba5781602001602082028036833780820191505090505b50905060005b845181146103f7573073ffffffffffffffffffffffffffffffffffffffff16639bf3ee3562030d408784815181106102f457fe5b602002602001015187858151811061030857fe5b6020026020010151876040518563ffffffff1660e01b815260040161032f93929190611ed4565b60206040518083038187803b15801561034757600080fd5b5086fa9350505050801561037957506040513d601f19601f820116820180604052508101906103769190611b7b565b60015b6103cf573d80600081146103a9576040519150601f19603f3d011682016040523d82523d6000602084013e6103ae565b606091505b5060008383815181106103bd57fe5b602002602001018181525050506103ea565b808383815181106103dc57fe5b602002602001018181525050505b80806001019150506102c0565b509392505050565b600080823b905060008111915050919050565b61041a6114fb565b6000808461016001516040516020016104339190611f66565b6040516020818303038152906040528051906020012083600001818152505060ff85610160015160ff16141561048b5760028360200190600481111561047557fe5b9081600481111561048257fe5b815250506104af565b60018360200190600481111561049d57fe5b908160048111156104aa57fe5b815250505b7f0100000000000000000000000000000000000000000000000000000000000000846040013514905084610140015167ffffffffffffffff1683604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff1681525050600061056c84604001518760600151036fffffffffffffffffffffffffffffffff1687606001516fffffffffffffffffffffffffffffffff1688604001516fffffffffffffffffffffffffffffffff16610d50565b90506105898161058488600001518960a00151610d80565b610ea6565b90506105ca6105c58288604001516fffffffffffffffffffffffffffffffff1689606001516fffffffffffffffffffffffffffffffff16610ebf565b610f14565b9250509250925092565b60606105e1848484610271565b905060005b845181101561069e5760008282815181106105fd57fe5b6020026020010151146106935761067a82828151811061061957fe5b602002602001015186838151811061062d57fe5b6020026020010151606001516fffffffffffffffffffffffffffffffff1687848151811061065757fe5b6020026020010151604001516fffffffffffffffffffffffffffffffff16610ebf565b82828151811061068657fe5b6020026020010181815250505b8060010190506105e6565b509392505050565b6060815167ffffffffffffffff811180156106c057600080fd5b506040519080825280602002602001820160405280156106ef5781602001602082028036833780820191505090505b50905060005b825181146107c5577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1683828151811061074057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461079a5761079583828151811061077257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16610f4c565b61079d565b60125b60ff168282815181106107ac57fe5b60200260200101818152505080806001019150506106f5565b50919050565b60608167ffffffffffffffff811180156107e457600080fd5b506040519080825280602002602001820160405280156108135781602001602082028036833780820191505090505b50905060005b8281101561089b5760405161082d9061153c565b604051809103906000f080158015610849573d6000803e3d6000fd5b5082828151811061085657fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050806001019050610819565b50919050565b60008060038111156108af57fe5b836000015160038111156108bf57fe5b14806108e55750600160038111156108d357fe5b836000015160038111156108e357fe5b145b806109065750600084604001516fffffffffffffffffffffffffffffffff16145b806109275750600084606001516fffffffffffffffffffffffffffffffff16145b156109355760009050610a5e565b61093d6114fb565b6000808473ffffffffffffffffffffffffffffffffffffffff16631fb0979588886040518363ffffffff1660e01b815260040161097b929190611eac565b60a06040518083038186803b15801561099357600080fd5b505afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb9190611acf565b925092509250600160048111156109de57fe5b836020015160048111156109ee57fe5b1415806109f9575080155b80610a345750600073ffffffffffffffffffffffffffffffffffffffff16876000015173ffffffffffffffffffffffffffffffffffffffff16145b15610a455760009350505050610a5e565b816fffffffffffffffffffffffffffffffff1693505050505b9392505050565b6060825167ffffffffffffffff81118015610a7f57600080fd5b50604051908082528060200260200182016040528015610aae5781602001602082028036833780820191505090505b50905060005b83518114610ba1577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16848281518110610aff57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610b6357610b5e83858381518110610b3257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661101e90919063ffffffff16565b610b7c565b8273ffffffffffffffffffffffffffffffffffffffff16315b828281518110610b8857fe5b6020026020010181815250508080600101915050610ab4565b5092915050565b8473ffffffffffffffffffffffffffffffffffffffff16633c9dc74d858585856040518563ffffffff1660e01b8152600401610be79493929190611d55565b600060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050505050505050565b6060835167ffffffffffffffff81118015610c3a57600080fd5b50604051908082528060200260200182016040528015610c695781602001602082028036833780820191505090505b50905060005b84518114610d48577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16858281518110610cba57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610d2057610d1b8484878481518110610cee57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1661112c9092919063ffffffff16565b610d23565b60005b828281518110610d2f57fe5b6020026020010181815250508080600101915050610c6f565b509392505050565b6000610d7783610d69848761123d90919063ffffffff16565b61128790919063ffffffff16565b90509392505050565b6000610e9e8373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401610dc0929190611d31565b60206040518083038186803b158015610dd857600080fd5b505afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e109190611b7b565b8473ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610e499190611d18565b60206040518083038186803b158015610e6157600080fd5b505afa158015610e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e999190611b7b565b610ea6565b905092915050565b6000818310610eb55781610eb7565b825b905092915050565b6000610f0b83610efd610edc6001876112be90919063ffffffff16565b610eef868961123d90919063ffffffff16565b6112e890919063ffffffff16565b61128790919063ffffffff16565b90509392505050565b60006fffffffffffffffffffffffffffffffff8016821115610f4457610f43610f3e600384611317565b611399565b5b819050919050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce56700000000000000000000000000000000000000000000000000000000815250604051610fb09190611cd9565b600060405180830381855afa9150503d8060008114610feb576040519150601f19603f3d011682016040523d82523d6000602084013e610ff0565b606091505b509150915081801561100457506020815110155b15611017576110148160006113a1565b92505b5050919050565b60008060608473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b856040516024016110539190611d18565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516110bd9190611cd9565b600060405180830381855afa9150503d80600081146110f8576040519150601f19603f3d011682016040523d82523d6000602084013e6110fd565b606091505b509150915081801561111157506020815110155b15611124576111218160006113a1565b92505b505092915050565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e60e01b8686604051602401611163929190611d31565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111cd9190611cd9565b600060405180830381855afa9150503d8060008114611208576040519150601f19603f3d011682016040523d82523d6000602084013e61120d565b606091505b509150915081801561122157506020815110155b15611234576112318160006113a1565b92505b50509392505050565b6000808314156112505760009050611281565b600082840290508284828161126157fe5b041461127c5761127b611276600186866113b8565b611399565b5b809150505b92915050565b6000808214156112a6576112a56112a0600385856113b8565b611399565b5b60008284816112b157fe5b0490508091505092915050565b6000828211156112dd576112dc6112d7600285856113b8565b611399565b5b818303905092915050565b60008082840190508381101561130d5761130c611307600086866113b8565b611399565b5b8091505092915050565b606063c996af7b60e01b8383604051602401611334929190611e62565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905092915050565b805160208201fd5b60006113ad838361143d565b60001c905092915050565b606063e946c1bb60e01b8484846040516024016113d793929190611e3a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b600060208201835110156114645761146361145e6005855160208601611476565b611399565b5b60208201915081830151905092915050565b6060632800659560e01b84848460405160240161149593929190611e83565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509392505050565b6040518060600160405280600080191681526020016000600481111561151d57fe5b815260200160006fffffffffffffffffffffffffffffffff1681525090565b6102ee8061200d83390190565b60008135905061155881611fd4565b92915050565b600082601f83011261156e578081fd5b813561158161157c82611fa4565b611f77565b91508181835260208084019150808501868283860288010111156115a457600080fd5b60005b848110156115d35781356115ba81611fd4565b80855250828401935082820191506001810190506115a7565b505050505092915050565b600082601f8301126115ee578081fd5b81356116016115fc82611fa4565b611f77565b9150818183526020808401915080850160808783828702890101111561162657600080fd5b60005b858110156116525761163b898461174d565b855283850194508183019250600181019050611629565b50505050505092915050565b6000610180808385031215611671578182fd5b61167a81611f77565b9150506116878383611549565b81526116968360208401611549565b60208201526116a883604084016117b2565b60408201526116ba83606084016117b2565b60608201526116cc83608084016117b2565b60808201526116de8360a08401611549565b60a08201526116f08360c08401611549565b60c08201526117028360e08401611549565b60e082015261010061171684828501611549565b8183015250610120808301358183015250610140611736848285016117c7565b818301525061016080830135818301525092915050565b60006080828403121561175e578081fd5b6117686080611f77565b905081356004811061177957600080fd5b80825250602082013560ff8116811461179157600080fd5b80602083015250604082013560408201526060820135606082015292915050565b6000813590506117c181611feb565b92915050565b60008135905067ffffffffffffffff811681146117e357600080fd5b92915050565b6000602082840312156117fa578081fd5b813561180581611fd4565b8091505092915050565b600060208284031215611820578081fd5b813567ffffffffffffffff811115611836578182fd5b6118428482850161155e565b91505092915050565b6000806040838503121561185d578081fd5b823567ffffffffffffffff811115611873578182fd5b61187f8582860161155e565b925050602083013561189081611fd4565b809150509250929050565b6000806000606084860312156118af578081fd5b833567ffffffffffffffff8111156118c5578182fd5b6118d18682870161155e565b93505060208401356118e281611fd4565b8092505060408401356118f481611fd4565b809150509250925092565b600080600060608486031215611913578081fd5b833567ffffffffffffffff8082111561192a578283fd5b818601915086601f83011261193d578283fd5b813561195061194b82611fa4565b611f77565b80828252602080830192508086016101808c838288028a01011115611973578889fd5b8897505b858810156119a0576119898d8361165e565b855282850194508082019150600188019750611977565b5050819850808a0135955050505050808211156119bb578283fd5b506119c8868287016115de565b9250506119d88560408601611549565b90509250925092565b600080600080600060a086880312156119f8578283fd5b8535611a0381611fd4565b809550506020860135611a1581611fd4565b809450506040860135611a2781611fd4565b8093505060608601359150608086013590509295509295909350565b600080828403610200811215611a57578283fd5b611a61858561165e565b9250608061017f1982011215611a75578182fd5b50610180830190509250929050565b60008060006102208486031215611a99578081fd5b611aa3858561165e565b9250611ab385610180860161174d565b9150610200840135611ac481611fd4565b809150509250925092565b600080600083850360a0811215611ae4578182fd5b6060811215611af1578182fd5b50611afc6060611f77565b84518152602085015160058110611b11578283fd5b806020830152506040850151611b2681611feb565b80604083015250809350506060840151611b3f81611feb565b8092505060808401518015158114611b55578182fd5b809150509250925092565b600060208284031215611b71578081fd5b8135905092915050565b600060208284031215611b8c578081fd5b8151905092915050565b60018060a01b03811682525050565b611bb0828251611b96565b6020810151611bc26020840182611b96565b506040810151611bd56040840182611caf565b506060810151611be86060840182611caf565b506080810151611bfb6080840182611caf565b5060a0810151611c0e60a0840182611b96565b5060c0810151611c2160c0840182611b96565b5060e0810151611c3460e0840182611b96565b5061010080820151611c4882850182611b96565b505061012080820151818401525061014080820151611c6982850182611cc8565b50506101608082015181840152505050565b8051611c8681611fc7565b8083525060ff602082015116602083015260408101516040830152606081015160608301525050565b6fffffffffffffffffffffffffffffffff811682525050565b67ffffffffffffffff811682525050565b60008251815b81811015611cfd576020818601015181850152602081019050611cdf565b81811115611d0b5782828501525b5080830191505092915050565b600060208201905060018060a01b038316825292915050565b600060408201905060018060a01b0380851683528084166020840152509392505050565b600060808201905060018060a01b03808716835280861660208401525083604083015282606083015295945050505050565b600060208083018184528085518083526040860191508387019250845b81811015611dcd5760018060a01b03845116835284830192508484019350600181019050611da4565b505080935050505092915050565b600060208083018184528085518083526040860191508387019250845b81811015611e19578351835284830192508484019350600181019050611df8565b505080935050505092915050565b6000602082019050821515825292915050565b6000606082019050611e4b85611fc7565b848252836020830152826040830152949350505050565b6000604082019050611e7384611fc7565b8382528260208301529392505050565b600060608201905060088510611e9557fe5b848252836020830152826040830152949350505050565b600061020082019050611ebf8285611ba5565b611ecd610180830184611c7b565b9392505050565b600061022082019050611ee78286611ba5565b611ef5610180830185611c7b565b60018060a01b038316610200830152949350505050565b600060a08201905084518252602085015160058110611f2757fe5b8060208401525060408501516fffffffffffffffffffffffffffffffff8082166040850152808616606085015250508215156080830152949350505050565b600060208201905082825292915050565b6000604051905081810181811067ffffffffffffffff82111715611f9a57600080fd5b8060405250919050565b600067ffffffffffffffff821115611fba578081fd5b6020808302019050919050565b60048110611fd157fe5b50565b60018060a01b0381168114611fe857600080fd5b50565b6fffffffffffffffffffffffffffffffff8116811461200957600080fd5b5056fe608060405234801561001057600080fd5b506102ce806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633c9dc74d1461004657806370a0823114610062578063dd62ed3e14610092575b600080fd5b610060600480360381019061005b9190610240565b6100c2565b005b61007c600480360381019061007791906101e9565b61018c565b6040516100899190610287565b60405180910390f35b6100ac60048036038101906100a7919061020c565b6101a4565b6040516100b99190610287565b60405180910390f35b816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050565b60006020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b60008135905060018060a01b03811681146101e357600080fd5b92915050565b6000602082840312156101fa578081fd5b61020483836101c9565b905092915050565b6000806040838503121561021e578081fd5b61022884846101c9565b915061023784602085016101c9565b90509250929050565b60008060008060808587031215610255578182fd5b61025f86866101c9565b935061026e86602087016101c9565b9250604085013591506060850135905092959194509250565b60006020820190508282529291505056fea2646970667358221220abf6c7069b18a625d002d5df2049e2e96230da2a7c9352da82f7d623135f897464736f6c634300060c0033a26469706673582212201c85923307ba4307fc9a2136929dab22f3ed4e8bb543d9ffde64fe4245ae7f4864736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7E1F2BB8 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0x7E1F2BB8 EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x1F5 JUMPI DUP1 PUSH4 0xC662178C EQ PUSH2 0x225 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x241 JUMPI PUSH2 0x9E JUMP JUMPDEST DUP1 PUSH4 0x1022742B EQ PUSH2 0xA3 JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0xD3 JUMPI DUP1 PUSH4 0x1FB09795 EQ PUSH2 0x103 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x165 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xB8 SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x271 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCA SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xED PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE8 SWAP2 SWAP1 PUSH2 0x17E9 JUMP JUMPDEST PUSH2 0x3FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFA SWAP2 SWAP1 PUSH2 0x1E27 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x118 SWAP2 SWAP1 PUSH2 0x1A43 JUMP JUMPDEST PUSH2 0x412 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x14A SWAP2 SWAP1 PUSH2 0x18FF JUMP JUMPDEST PUSH2 0x5D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x17A SWAP2 SWAP1 PUSH2 0x180F JUMP JUMPDEST PUSH2 0x6A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x1B60 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x1D87 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x1A84 JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EC SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x20A SWAP2 SWAP1 PUSH2 0x184B JUMP JUMPDEST PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21C SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x19E1 JUMP JUMPDEST PUSH2 0xBA8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x256 SWAP2 SWAP1 PUSH2 0x189B JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x268 SWAP2 SWAP1 PUSH2 0x1DDB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2BA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x3F7 JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x308 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ED4 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x347 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x379 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x376 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3CF JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x3EA JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x2C0 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 0x0 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x41A PUSH2 0x14FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH2 0x160 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x433 SWAP2 SWAP1 PUSH2 0x1F66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x0 ADD DUP2 DUP2 MSTORE POP POP PUSH1 0xFF DUP6 PUSH2 0x160 ADD MLOAD PUSH1 0xFF AND EQ ISZERO PUSH2 0x48B JUMPI PUSH1 0x2 DUP4 PUSH1 0x20 ADD SWAP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x475 JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x482 JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP PUSH2 0x4AF JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 ADD SWAP1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x49D JUMPI INVALID JUMPDEST SWAP1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x4AA JUMPI INVALID JUMPDEST DUP2 MSTORE POP POP JUMPDEST PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 DUP5 PUSH1 0x40 ADD CALLDATALOAD EQ SWAP1 POP DUP5 PUSH2 0x140 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 ADD SWAP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x56C DUP5 PUSH1 0x40 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD SUB PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD50 JUMP JUMPDEST SWAP1 POP PUSH2 0x589 DUP2 PUSH2 0x584 DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0xA0 ADD MLOAD PUSH2 0xD80 JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP PUSH2 0x5CA PUSH2 0x5C5 DUP3 DUP9 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBF JUMP JUMPDEST PUSH2 0xF14 JUMP JUMPDEST SWAP3 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5E1 DUP5 DUP5 DUP5 PUSH2 0x271 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x69E JUMPI PUSH1 0x0 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5FD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ PUSH2 0x693 JUMPI PUSH2 0x67A DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x619 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x62D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x657 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xEBF JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x686 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x5E6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x6C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6EF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x7C5 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x740 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x79A JUMPI PUSH2 0x795 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF4C JUMP JUMPDEST PUSH2 0x79D JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x6F5 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x7E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x813 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x89B JUMPI PUSH1 0x40 MLOAD PUSH2 0x82D SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x849 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x856 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x819 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8AF JUMPI INVALID JUMPDEST DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8BF JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x8E5 JUMPI POP PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8D3 JUMPI INVALID JUMPDEST DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x8E3 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x906 JUMPI POP PUSH1 0x0 DUP5 PUSH1 0x40 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST DUP1 PUSH2 0x927 JUMPI POP PUSH1 0x0 DUP5 PUSH1 0x60 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0x935 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0xA5E JUMP JUMPDEST PUSH2 0x93D PUSH2 0x14FB JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x97B SWAP3 SWAP2 SWAP1 PUSH2 0x1EAC JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x993 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9A7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9CB SWAP2 SWAP1 PUSH2 0x1ACF JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 0x1 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9DE JUMPI INVALID JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9EE JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x9F9 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0xA34 JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xA45 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xA5E JUMP JUMPDEST DUP2 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xA7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAAE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0xBA1 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xAFF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB63 JUMPI PUSH2 0xB5E DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB32 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x101E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xB7C JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB88 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xAB4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3C9DC74D DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBE7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D55 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xC15 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xC3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC69 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xD48 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCBA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD20 JUMPI PUSH2 0xD1B DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xCEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x112C SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xD23 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD2F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0xC6F JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD77 DUP4 PUSH2 0xD69 DUP5 DUP8 PUSH2 0x123D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1287 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE9E DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E DUP5 ADDRESS PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDC0 SWAP3 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDEC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE10 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE75 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE99 SWAP2 SWAP1 PUSH2 0x1B7B JUMP JUMPDEST PUSH2 0xEA6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEB5 JUMPI DUP2 PUSH2 0xEB7 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF0B DUP4 PUSH2 0xEFD PUSH2 0xEDC PUSH1 0x1 DUP8 PUSH2 0x12BE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0xEEF DUP7 DUP10 PUSH2 0x123D SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x12E8 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x1287 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 AND DUP3 GT ISZERO PUSH2 0xF44 JUMPI PUSH2 0xF43 PUSH2 0xF3E PUSH1 0x3 DUP5 PUSH2 0x1317 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0xFB0 SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xFEB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xFF0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1004 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1017 JUMPI PUSH2 0x1014 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1053 SWAP2 SWAP1 PUSH2 0x1D18 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x10BD SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x10F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x10FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1111 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1124 JUMPI PUSH2 0x1121 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1163 SWAP3 SWAP2 SWAP1 PUSH2 0x1D31 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x11CD SWAP2 SWAP1 PUSH2 0x1CD9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1208 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x120D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1221 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x1234 JUMPI PUSH2 0x1231 DUP2 PUSH1 0x0 PUSH2 0x13A1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 EQ ISZERO PUSH2 0x1250 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x1281 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x1261 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x127C JUMPI PUSH2 0x127B PUSH2 0x1276 PUSH1 0x1 DUP7 DUP7 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 EQ ISZERO PUSH2 0x12A6 JUMPI PUSH2 0x12A5 PUSH2 0x12A0 PUSH1 0x3 DUP6 DUP6 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x12B1 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x12DD JUMPI PUSH2 0x12DC PUSH2 0x12D7 PUSH1 0x2 DUP6 DUP6 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x130D JUMPI PUSH2 0x130C PUSH2 0x1307 PUSH1 0x0 DUP7 DUP7 PUSH2 0x13B8 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xC996AF7B PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1334 SWAP3 SWAP2 SWAP1 PUSH2 0x1E62 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 PUSH2 0x13AD DUP4 DUP4 PUSH2 0x143D JUMP JUMPDEST PUSH1 0x0 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x13D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E3A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1464 JUMPI PUSH2 0x1463 PUSH2 0x145E PUSH1 0x5 DUP6 MLOAD PUSH1 0x20 DUP7 ADD PUSH2 0x1476 JUMP JUMPDEST PUSH2 0x1399 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 DUP4 ADD MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1495 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1E83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x151D JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x2EE DUP1 PUSH2 0x200D DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1558 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x156E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1581 PUSH2 0x157C DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD DUP7 DUP3 DUP4 DUP7 MUL DUP9 ADD ADD GT ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x15D3 JUMPI DUP2 CALLDATALOAD PUSH2 0x15BA DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 DUP6 MSTORE POP DUP3 DUP5 ADD SWAP4 POP DUP3 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x15A7 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1601 PUSH2 0x15FC DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP1 DUP5 ADD SWAP2 POP DUP1 DUP6 ADD PUSH1 0x80 DUP8 DUP4 DUP3 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x1626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x163B DUP10 DUP5 PUSH2 0x174D JUMP JUMPDEST DUP6 MSTORE DUP4 DUP6 ADD SWAP5 POP DUP2 DUP4 ADD SWAP3 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1629 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1671 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x167A DUP2 PUSH2 0x1F77 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1687 DUP4 DUP4 PUSH2 0x1549 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x1696 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x16A8 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x16BA DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x16CC DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x17B2 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x16DE DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x16F0 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x1702 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x1716 DUP5 DUP3 DUP6 ADD PUSH2 0x1549 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 PUSH2 0x1736 DUP5 DUP3 DUP6 ADD PUSH2 0x17C7 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x175E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1768 PUSH1 0x80 PUSH2 0x1F77 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x1779 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP3 MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x1791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x17C1 DUP2 PUSH2 0x1FEB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x17E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x17FA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1805 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1820 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1836 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1842 DUP5 DUP3 DUP6 ADD PUSH2 0x155E JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x185D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1873 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x187F DUP6 DUP3 DUP7 ADD PUSH2 0x155E JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1890 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x18AF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x18C5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18D1 DUP7 DUP3 DUP8 ADD PUSH2 0x155E JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x18E2 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x18F4 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1913 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x192A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x193D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1950 PUSH2 0x194B DUP3 PUSH2 0x1FA4 JUMP JUMPDEST PUSH2 0x1F77 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0x1973 JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0x19A0 JUMPI PUSH2 0x1989 DUP14 DUP4 PUSH2 0x165E JUMP JUMPDEST DUP6 MSTORE DUP3 DUP6 ADD SWAP5 POP DUP1 DUP3 ADD SWAP2 POP PUSH1 0x1 DUP9 ADD SWAP8 POP PUSH2 0x1977 JUMP JUMPDEST POP POP DUP2 SWAP9 POP DUP1 DUP11 ADD CALLDATALOAD SWAP6 POP POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x19BB JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x19C8 DUP7 DUP3 DUP8 ADD PUSH2 0x15DE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x19D8 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x1549 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x19F8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1A03 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1A15 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x1A27 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH2 0x200 DUP2 SLT ISZERO PUSH2 0x1A57 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1A61 DUP6 DUP6 PUSH2 0x165E JUMP JUMPDEST SWAP3 POP PUSH1 0x80 PUSH2 0x17F NOT DUP3 ADD SLT ISZERO PUSH2 0x1A75 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x180 DUP4 ADD SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1A99 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1AA3 DUP6 DUP6 PUSH2 0x165E JUMP JUMPDEST SWAP3 POP PUSH2 0x1AB3 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x174D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x1AC4 DUP2 PUSH2 0x1FD4 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x1AE4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x1AF1 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x1AFC PUSH1 0x60 PUSH2 0x1F77 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x1B11 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0x1B26 DUP2 PUSH2 0x1FEB JUMP JUMPDEST DUP1 PUSH1 0x40 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x1B3F DUP2 PUSH2 0x1FEB JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x80 DUP5 ADD MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1B55 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B71 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B8C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1BB0 DUP3 DUP3 MLOAD PUSH2 0x1B96 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0x1BC2 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0x1BD5 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0x1BE8 PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0x1BFB PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0x1CAF JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0x1C0E PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0x1C21 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0x1C34 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0x1C48 DUP3 DUP6 ADD DUP3 PUSH2 0x1B96 JUMP JUMPDEST POP POP PUSH2 0x120 DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0x1C69 DUP3 DUP6 ADD DUP3 PUSH2 0x1CC8 JUMP JUMPDEST POP POP PUSH2 0x160 DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x1C86 DUP2 PUSH2 0x1FC7 JUMP JUMPDEST DUP1 DUP4 MSTORE POP PUSH1 0xFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1CFD JUMPI PUSH1 0x20 DUP2 DUP7 ADD ADD MLOAD DUP2 DUP6 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1CDF JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x1D0B JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP DUP1 DUP4 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND DUP4 MSTORE DUP1 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 PUSH1 0x40 DUP4 ADD MSTORE DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1DCD JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 MLOAD AND DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1DA4 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 ADD DUP2 DUP5 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 POP DUP4 DUP8 ADD SWAP3 POP DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1E19 JUMPI DUP4 MLOAD DUP4 MSTORE DUP5 DUP4 ADD SWAP3 POP DUP5 DUP5 ADD SWAP4 POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1DF8 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 ISZERO ISZERO DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1E4B DUP6 PUSH2 0x1FC7 JUMP JUMPDEST DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1E73 DUP5 PUSH2 0x1FC7 JUMP JUMPDEST DUP4 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH1 0x8 DUP6 LT PUSH2 0x1E95 JUMPI INVALID JUMPDEST DUP5 DUP3 MSTORE DUP4 PUSH1 0x20 DUP4 ADD MSTORE DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x200 DUP3 ADD SWAP1 POP PUSH2 0x1EBF DUP3 DUP6 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x1ECD PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0x1C7B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x220 DUP3 ADD SWAP1 POP PUSH2 0x1EE7 DUP3 DUP7 PUSH2 0x1BA5 JUMP JUMPDEST PUSH2 0x1EF5 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0x1C7B JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x200 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP5 MLOAD DUP3 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x1F27 JUMPI INVALID JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x40 DUP6 ADD MLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE DUP1 DUP7 AND PUSH1 0x60 DUP6 ADD MSTORE POP POP DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1FBA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP4 MUL ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x1FD1 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1FE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2009 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2CE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3C9DC74D EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x62 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x92 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x240 JUMP JUMPDEST PUSH2 0xC2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x77 SWAP2 SWAP1 PUSH2 0x1E9 JUMP JUMPDEST PUSH2 0x18C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x89 SWAP2 SWAP1 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xAC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA7 SWAP2 SWAP1 PUSH2 0x20C JUMP JUMPDEST PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB9 SWAP2 SWAP1 PUSH2 0x287 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST DUP2 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x1 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x204 DUP4 DUP4 PUSH2 0x1C9 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x228 DUP5 DUP5 PUSH2 0x1C9 JUMP JUMPDEST SWAP2 POP PUSH2 0x237 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x1C9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x255 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x25F DUP7 DUP7 PUSH2 0x1C9 JUMP JUMPDEST SWAP4 POP PUSH2 0x26E DUP7 PUSH1 0x20 DUP8 ADD PUSH2 0x1C9 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP3 MSTORE SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB 0xF6 0xC7 MOD SWAP12 XOR 0xA6 0x25 0xD0 MUL 0xD5 0xDF KECCAK256 0x49 0xE2 0xE9 PUSH3 0x30DA2A PUSH29 0x9352DA82F7D623135F897464736F6C634300060C0033A2646970667358 0x22 SLT KECCAK256 SHR DUP6 SWAP3 CALLER SMOD 0xBA NUMBER SMOD 0xFC SWAP11 0x21 CALLDATASIZE SWAP3 SWAP14 0xAB 0x22 RETURN 0xED 0x4E DUP12 0xB5 NUMBER 0xD9 SELFDESTRUCT 0xDE PUSH5 0xFE4245AE7F 0x48 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1174:2934:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4230:977:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2195:196:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2066:1736:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;5648:955:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;946:381:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1419:301:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6743:1029:17;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1333:415:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1726:288:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1754:435:25;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4230:977:17;4457:47;4567:6;:13;4553:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;:37;;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;;;;;;4591:610;;;;4230:977;;;;;:::o;2195:196:25:-;2277:4;2297:12;2350:7;2338:20;2330:28;;2383:1;2376:4;:8;2369:15;;;2195:196;;;:::o;2066:1736:40:-;2259:36;;:::i;:::-;2309:38;2361:21;2499:5;:10;;;2488:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;2478:33;;;;;;2456:9;:19;;:55;;;;;2546:4;2531:5;:10;;;2525:25;;;2521:183;;;2585:28;2566:9;:16;;:47;;;;;;;;;;;;;;;;;;;;;;;2521:183;;;2663:30;2644:9;:16;;:49;;;;;;;;;;;;;;;;;;;;;;;2521:183;1396:16;2733:9;:11;;;:35;2714:54;;2887:5;:12;;;2879:21;;2844:9;:32;;:56;;;;;;;;;;;2998:32;3033:243;3140:9;:32;;;3104:5;:17;;;:68;3079:107;;3208:5;:17;;;3200:26;;3248:5;:17;;;3240:26;;3033:32;:243::i;:::-;2998:278;;3393:141;3428:24;3466:58;3494:5;:16;;;3512:5;:11;;;3466:27;:58::i;:::-;3393:21;:141::i;:::-;3366:168;;3612:183;:159;3657:24;3703:5;:17;;;3695:26;;3743:5;:17;;;3735:26;;3612:31;:159::i;:::-;:181;:183::i;:::-;3579:216;;2066:1736;;;;;;:::o;5648:955:17:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6325:1;6288:30;6319:1;6288:33;;;;;;;;;;;;;;:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;6382:190;;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;6382:190;;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;;;;6226:371;;;;5648:955;;;;;:::o;946:381:25:-;1049:25;1115:6;:13;1101:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;1212:32;;:6;1219:1;1212:9;;;;;;;;;;;;;;:32;;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;:24;;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;:112;;;;;1179:3;;;;;;;1139:182;;;;946:381;;;:::o;1419:301:40:-;1490:43;1592:5;1558:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1549:49;;1613:9;1608:106;1632:5;1628:1;:9;1608:106;;;1670:33;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;1658:6;1665:1;1658:9;;;;;;;;;;;;;:45;;;;;;;;;;;1639:3;;;;;1608:106;;;;1419:301;;;:::o;6743:1029:17:-;6969:27;7043:31;7016:58;;;;;;;;:9;:23;;;:58;;;;;;;;;:132;;;;7117:31;7090:58;;;;;;;;:9;:23;;;:58;;;;;;;;;7016:132;:170;;;;7185:1;7164:5;:17;;;:22;;;7016:170;:208;;;;7223:1;7202:5;:17;;;:22;;;7016:208;7012:255;;;7255:1;7248:8;;;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;:35;;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;;;;;7528:30;7508:50;;;;;;;;:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;;7646:1;7611:37;;:5;:16;;;:37;;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;7736:28;7728:37;;7706:59;;6743:1029;;;;;;;;;:::o;1333:415:25:-;1449:25;1515:6;:13;1501:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;1612:32;;:6;1619:1;1612:9;;;;;;;;;;;;;;:32;;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;:25;;;;:34;;;;:::i;:::-;1612:119;;;1663:7;:15;;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;:133;;;;;1579:3;;;;;;;1539:203;;;;1333:415;;;;:::o;1726:288:40:-;1943:5;:28;;;1972:5;1979:7;1988;1997:9;1943:64;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1726:288;;;;;:::o;1754:435:25:-;1889:27;1959:6;:13;1945:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;2058:32;;:6;2065:1;2058:9;;;;;;;;;;;;;;:32;;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;:25;;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;:130;;;;;2023:3;;;;;;;1983:200;;;;1754:435;;;;;:::o;3247:300:44:-;3411:21;3464:46;3498:11;3464:25;3482:6;3464:9;:17;;:25;;;;:::i;:::-;:33;;:46;;;;:::i;:::-;3448:62;;3247:300;;;;;:::o;3808:298:40:-;3951:7;3981:118;4016:5;:15;;;4032:5;4047:4;4016:37;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4067:5;:15;;;4083:5;4067:22;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3981:21;:118::i;:::-;3974:125;;3808:298;;;;:::o;2544:135:45:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;2667:1;2659:13;2652:20;;2544:135;;;;:::o;3834:545:44:-;3997:21;4237:104;4329:11;4237:70;4284:22;4304:1;4284:11;:19;;:22;;;;:::i;:::-;4237:25;4255:6;4237:9;:17;;:25;;;;:::i;:::-;:46;;:70;;;;:::i;:::-;:91;;:104;;;;:::i;:::-;4221:120;;3834:545;;;;;:::o;4618:401:45:-;4707:7;4738:17;4734:21;;:1;:21;4730:256;;;4771:204;4796:178;4859:82;4959:1;4796:45;:178::i;:::-;4771:24;:204::i;:::-;4730:256;5010:1;4995:17;;4618:401;;;:::o;3886:391:42:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;4087:25;;4113:18;;;;;;;;;;;;;;;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;5401:467::-;5510:15;5542;5559:23;5594:5;5586:25;;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5586:150;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;:::-;5803:48;;5746:116;5401:467;;;;;;:::o;4623:515::-;4749:18;4784:15;4801:23;4836:5;4828:25;;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4828:175;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;:::-;5070:51;;5013:119;4623:515;;;;;;;:::o;764:457:45:-;850:7;882:1;877;:6;873:45;;;906:1;899:8;;;;873:45;927:9;943:1;939;:5;927:17;;967:1;962;958;:5;;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;:::-;984:24;:202::i;:::-;954:243;1213:1;1206:8;;;764:457;;;;;:::o;1227:392::-;1313:7;1345:1;1340;:6;1336:232;;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;:::-;1362:24;:195::i;:::-;1336:232;1577:9;1593:1;1589;:5;;;;;;1577:17;;1611:1;1604:8;;;1227:392;;;;:::o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;1734:236;1990:1;1986;:5;1979:12;;1625:373;;;;:::o;2004:392::-;2090:7;2113:9;2129:1;2125;:5;2113:17;;2148:1;2144;:5;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;:::-;2165:24;:196::i;:::-;2140:232;2388:1;2381:8;;;2004:392;;;;:::o;1729:297:49:-;1869:12;966:10;1940:31;;1985:9;2008:1;1904:115;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1897:122;;1729:297;;;;:::o;1531:170:48:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;16122:220:43;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;:::-;16282:30;;16273:39;;16122:220;;;;:::o;1401:322:49:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1582:134;;1401:322;;;;;:::o;14301:688:43:-;14422:14;14475:2;14467:5;:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14730:2;14722:5;:10;14518:47;:228::i;:::-;14493:24;:254::i;:::-;14452:306;14838:2;14829:11;;;;14943:5;14940:1;14936:13;14930:20;14920:30;;14301:688;;;;:::o;1334:378:46:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1550:155;;1334:378;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;5:130::-;;85:6;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;57:78;;;;:::o;176:779::-;;317:3;310:4;302:6;298:17;294:27;284:2;;-1:-1;;325:12;284:2;372:6;359:20;394:104;409:88;490:6;409:88;:::i;:::-;394:104;:::i;:::-;385:113;;504:16;540:6;533:5;526:21;570:4;;587:3;583:14;576:21;;570:4;562:6;558:17;692:3;570:4;;676:6;672:17;562:6;663:27;;660:36;657:2;;;709:1;;699:12;657:2;734:1;719:230;744:6;741:1;738:13;719:230;;;3154:6;3141:20;3166:57;3217:5;3166:57;:::i;:::-;824:61;819:3;812:74;;570:4;904:3;900:14;893:21;;570:4;932:3;928:14;921:21;;766:1;763;759:9;754:14;;719:230;;;723:14;;;;;277:678;;;;:::o;1841:788::-;;1985:3;1978:4;1970:6;1966:17;1962:27;1952:2;;-1:-1;;1993:12;1952:2;2040:6;2027:20;2062:107;2077:91;2161:6;2077:91;:::i;:::-;2062:107;:::i;:::-;2053:116;;2175:16;2211:6;2204:5;2197:21;2241:4;;2258:3;2254:14;2247:21;;2241:4;2233:6;2229:17;2355:4;2363:3;2241:4;2355;2347:6;2343:17;2233:6;2334:27;;2331:36;2328:2;;;2380:1;;2370:12;2328:2;2405:1;2390:233;2415:6;2412:1;2409:13;2390:233;;;2495:64;2555:3;2543:10;2495:64;:::i;:::-;2490:3;2483:77;2241:4;2578:3;2574:14;2567:21;;2355:4;2606:3;2602:14;2595:21;;2437:1;2434;2430:9;2425:14;;2390:233;;;2394:14;;;;;;1945:684;;;;:::o;3997:2032::-;;4114:6;;4102:9;4097:3;4093:19;4089:32;4086:2;;;-1:-1;;4124:12;4086:2;4152:22;4114:6;4152:22;:::i;:::-;4143:31;;;4262:73;4331:3;4307:22;4262:73;:::i;:::-;4244:16;4237:99;4436:73;4505:3;4403:2;4485:9;4481:22;4436:73;:::i;:::-;4403:2;4422:5;4418:16;4411:99;4611:49;4656:3;4578:2;4636:9;4632:22;4611:49;:::i;:::-;4578:2;4597:5;4593:16;4586:75;4762:49;4807:3;4729:2;4787:9;4783:22;4762:49;:::i;:::-;4729:2;4748:5;4744:16;4737:75;4922:49;4967:3;4888;4947:9;4943:22;4922:49;:::i;:::-;4888:3;4908:5;4904:16;4897:75;5068:49;5113:3;5034;5093:9;5089:22;5068:49;:::i;:::-;5034:3;5054:5;5050:16;5043:75;5214:49;5259:3;5180;5239:9;5235:22;5214:49;:::i;:::-;5180:3;5200:5;5196:16;5189:75;5361:49;5406:3;5327;5386:9;5382:22;5361:49;:::i;:::-;5327:3;5347:5;5343:16;5336:75;5480:3;5516:49;5561:3;5480;5541:9;5537:22;5516:49;:::i;:::-;5480:3;5500:5;5496:18;5489:77;;5627:3;;5688:9;5684:22;2839:20;5627:3;5647:5;5643:18;5636:77;;5776:3;5812:48;5856:3;5776;5836:9;5832:22;5812:48;:::i;:::-;5776:3;5796:5;5792:18;5785:76;;5922:3;;5983:9;5979:22;8135:20;5922:3;5942:5;5938:18;5931:77;;4080:1949;;;;:::o;7010:773::-;;7126:4;7114:9;7109:3;7105:19;7101:30;7098:2;;;-1:-1;;7134:12;7098:2;7162:20;7126:4;7162:20;:::i;:::-;7153:29;;3888:6;3875:20;37780:1;37773:5;37770:12;37760:2;;37796:1;;37786:12;37760:2;7273:67;7255:16;7248:93;;7399:2;7455:9;7451:22;8546:20;34025:4;38265:5;34014:16;38242:5;38239:33;38229:2;;-1:-1;;38276:12;38229:2;7432:47;7399:2;7418:5;7414:16;7407:73;;7538:2;7596:9;7592:22;2839:20;7538:2;7557:5;7553:16;7546:75;7679:2;7737:9;7733:22;2839:20;7679:2;7698:5;7694:16;7687:75;7092:691;;;;:::o;7790:130::-;;7870:6;7857:20;7848:29;;7882:33;7909:5;7882:33;:::i;:::-;7842:78;;;;:::o;8346:128::-;;8425:6;8412:20;8403:29;;33923:18;38145:5;33912:30;38121:5;38118:34;38108:2;;38166:1;;38156:12;38108:2;8397:77;;;;:::o;8614:241::-;;8718:2;8706:9;8697:7;8693:23;8689:32;8686:2;;;-1:-1;;8724:12;8686:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;8776:63;;;;8680:175;;;;:::o;8862:425::-;;9015:2;9003:9;8994:7;8990:23;8986:32;8983:2;;;-1:-1;;9021:12;8983:2;9079:17;9066:31;9117:18;9109:6;9106:30;9103:2;;;-1:-1;;9139:12;9103:2;9169:102;9263:7;9254:6;9243:9;9239:22;9169:102;:::i;:::-;9159:112;;;8977:310;;;;:::o;9294:550::-;;;9464:2;9452:9;9443:7;9439:23;9435:32;9432:2;;;-1:-1;;9470:12;9432:2;9528:17;9515:31;9566:18;9558:6;9555:30;9552:2;;;-1:-1;;9588:12;9552:2;9618:102;9712:7;9703:6;9692:9;9688:22;9618:102;:::i;:::-;9608:112;;;9757:2;9800:9;9796:22;72:20;97:33;124:5;97:33;:::i;:::-;9765:63;;;;9426:418;;;;;:::o;9851:675::-;;;;10038:2;10026:9;10017:7;10013:23;10009:32;10006:2;;;-1:-1;;10044:12;10006:2;10102:17;10089:31;10140:18;10132:6;10129:30;10126:2;;;-1:-1;;10162:12;10126:2;10192:102;10286:7;10277:6;10266:9;10262:22;10192:102;:::i;:::-;10182:112;;;10331:2;10374:9;10370:22;72:20;97:33;124:5;97:33;:::i;:::-;10339:63;;;;10439:2;10482:9;10478:22;72:20;97:33;124:5;97:33;:::i;:::-;10447:63;;;;10000:526;;;;;:::o;10533:909::-;;;;10794:2;10782:9;10773:7;10769:23;10765:32;10762:2;;;-1:-1;;10800:12;10762:2;10858:17;10845:31;10896:18;;10888:6;10885:30;10882:2;;;-1:-1;;10918:12;10882:2;11037:6;11026:9;11022:22;;;1146:3;1139:4;1131:6;1127:17;1123:27;1113:2;;-1:-1;;1154:12;1113:2;1201:6;1188:20;1223:108;1238:92;1323:6;1238:92;:::i;:::-;1223:108;:::i;:::-;1337:16;1373:6;1366:5;1359:21;1403:4;;1420:3;1416:14;1409:21;;1403:4;1395:6;1391:17;1517:6;1527:3;1403:4;1517:6;1509;1505:19;1395:6;1496:29;;1493:38;1490:2;;;-1:-1;;1534:12;1490:2;-1:-1;1560:10;;1554:236;1579:6;1576:1;1573:13;1554:236;;;1659:65;1720:3;1708:10;1659:65;:::i;:::-;1654:3;1647:78;1403:4;1743:3;1739:14;1732:21;;1517:6;1771:3;1767:16;1760:23;;1601:1;1598;1594:9;1589:14;;1554:236;;;1558:14;;10938:116;;;1403:4;11108:9;11104:18;11091:32;11077:46;;;;;;10896:18;11135:6;11132:30;11129:2;;;-1:-1;;11165:12;11129:2;;11195:105;11292:7;11283:6;11272:9;11268:22;11195:105;:::i;:::-;11185:115;;;11355:71;11418:7;11337:2;11398:9;11394:22;11355:71;:::i;:::-;11345:81;;10756:686;;;;;:::o;11449:815::-;;;;;;11657:3;11645:9;11636:7;11632:23;11628:33;11625:2;;;-1:-1;;11664:12;11625:2;3524:6;3511:20;3536:69;3599:5;3536:69;:::i;:::-;11716:99;;;;11852:2;11895:9;11891:22;72:20;97:33;124:5;97:33;:::i;:::-;11860:63;;;;11960:2;12003:9;11999:22;72:20;97:33;124:5;97:33;:::i;:::-;11968:63;;;;12068:2;12111:9;12107:22;8135:20;12076:63;;12176:3;12220:9;12216:22;8135:20;12185:63;;11619:645;;;;;;;;:::o;12271:482::-;;;12437:9;12428:7;12424:23;12449:3;12424:23;12420:33;12417:2;;;-1:-1;;12456:12;12417:2;12518:81;12591:7;12567:22;12518:81;:::i;:::-;12508:91;;6922:3;6904:16;;;;6900:26;6897:2;;;-1:-1;;6929:12;6897:2;;12636:3;12709:9;12705:22;12645:92;;12411:342;;;;;:::o;12760:640::-;;;;12971:3;12959:9;12950:7;12946:23;12942:33;12939:2;;;-1:-1;;12978:12;12939:2;13040:81;13113:7;13089:22;13040:81;:::i;:::-;13030:91;;13177:80;13249:7;13158:3;13229:9;13225:22;13177:80;:::i;:::-;13167:90;;13294:3;13356:9;13352:22;3320:20;3345:51;3390:5;3345:51;:::i;:::-;13303:81;;;;12933:467;;;;;:::o;13407:585::-;;;;13568:9;13559:7;13555:23;13580:3;13555:23;13551:33;13548:2;;;-1:-1;;13587:12;13548:2;6196:4;6175:19;6171:30;6168:2;;;-1:-1;;6204:12;6168:2;;6232:20;6196:4;6232:20;:::i;:::-;2993:6;2987:13;6321:16;6314:86;6463:2;6548:9;6544:22;3711:13;37661:1;37654:5;37651:12;37641:2;;-1:-1;;37667:12;37641:2;6496:76;6463:2;6482:5;6478:16;6471:102;;6652:2;6721:9;6717:22;8005:13;8023:33;8050:5;8023:33;:::i;:::-;6685:60;6652:2;6671:5;6667:16;6660:86;;13639:101;;;;6196:4;13831:9;13827:22;8005:13;8023:33;8050:5;8023:33;:::i;:::-;13785:74;;;;13896:3;13948:9;13944:22;2712:13;36887:5;32252:13;32245:21;36865:5;36862:32;36852:2;;-1:-1;;36898:12;36852:2;13905:71;;;;13542:450;;;;;:::o;13999:241::-;;14103:2;14091:9;14082:7;14078:23;14074:32;14071:2;;;-1:-1;;14109:12;14071:2;8148:6;8135:20;14161:63;;14065:175;;;;:::o;14247:263::-;;14362:2;14350:9;14341:7;14337:23;14333:32;14330:2;;;-1:-1;;14368:12;14330:2;8289:6;8283:13;14420:74;;14324:186;;;;:::o;14953:103::-;33923:18;;33717:42;;;32168:5;33706:54;15021:3;15014:37;15008:48;;:::o;18889:2141::-;19141:87;19213:14;19118:16;19112:23;19141:87;:::i;:::-;19313:4;19306:5;19302:16;19296:23;19325:87;19313:4;19401:3;19397:14;19383:12;19325:87;:::i;:::-;;19498:4;19491:5;19487:16;19481:23;19510:63;19498:4;19562:3;19558:14;19544:12;19510:63;:::i;:::-;;19659:4;19652:5;19648:16;19642:23;19671:63;19659:4;19723:3;19719:14;19705:12;19671:63;:::i;:::-;;19828:4;19821:5;19817:16;19811:23;19840:63;19828:4;19892:3;19888:14;19874:12;19840:63;:::i;:::-;;19983:4;19976:5;19972:16;19966:23;19995:63;19983:4;20047:3;20043:14;20029:12;19995:63;:::i;:::-;;20138:4;20131:5;20127:16;20121:23;20150:63;20138:4;20202:3;20198:14;20184:12;20150:63;:::i;:::-;;20294:4;20287:5;20283:16;20277:23;20306:63;20294:4;20358:3;20354:14;20340:12;20306:63;:::i;:::-;;20456:6;;20449:5;20445:18;20439:25;20470:65;20456:6;20522:3;20518:16;20504:12;20470:65;:::i;:::-;;;20614:6;;20607:5;20603:18;20597:25;20614:6;20680:3;20676:16;17022:37;;20774:6;;20767:5;20763:18;20757:25;20788:63;20774:6;20838:3;20834:16;20820:12;20788:63;:::i;:::-;;;20930:6;;20923:5;20919:18;20913:25;20930:6;20996:3;20992:16;17022:37;;19011:2019;;:::o;21843:800::-;22071:16;22065:23;32818:54;32866:5;32818:54;:::i;:::-;35746:42;18753:3;18746:66;;34025:4;22249;22242:5;22238:16;22232:23;34014:16;22249:4;22309:3;22305:14;23274:35;22396:4;22389:5;22385:16;22379:23;22396:4;22460:3;22456:14;17022:37;22547:4;22540:5;22536:16;22530:23;22547:4;22611:3;22607:14;17022:37;21963:680;;:::o;22650:103::-;33597:34;22741:5;33586:46;22718:3;22711:37;22705:48;;:::o;23110:100::-;33923:18;23198:5;33912:30;23176:3;23169:36;23163:47;;:::o;23321:271::-;;17231:5;30982:12;-1:-1;35873:101;35887:6;35884:1;35881:13;35873:101;;;17375:4;35963:1;17368:5;35954:11;;35948:18;35944:1;35939:3;35935:11;35928:39;17375:4;35906:1;35902:10;35897:15;;35873:101;;;35989:6;35986:1;35983:13;35980:2;;;-1:-1;36045:6;36040:3;36036:16;36029:27;35980:2;;17415:6;17410:3;17406:16;23577:10;;;23455:137;;;;:::o;23599:222::-;;23726:2;23715:9;23711:18;23703:26;;33923:18;;33717:42;;;15044:5;33706:54;15021:3;15014:37;23697:124;;;;:::o;23828:333::-;;23983:2;23972:9;23968:18;23960:26;;33923:18;;33717:42;;;;15044:5;33706:54;15021:3;15014:37;33717:42;15044:5;33706:54;24147:2;24136:9;24132:18;15014:37;;23954:207;;;;;:::o;24168:556::-;;24379:3;24368:9;24364:19;24356:27;;33923:18;;33717:42;;;;15044:5;33706:54;15021:3;15014:37;33717:42;15044:5;33706:54;24544:2;24533:9;24529:18;15014:37;;17052:5;24627:2;24616:9;24612:18;17022:37;17052:5;24710:2;24699:9;24695:18;17022:37;24350:374;;;;;;;:::o;24731:442::-;;24944:2;;24933:9;24929:18;24944:2;24965:17;24958:47;25019:144;15508:5;30982:12;31692:6;31687:3;31680:19;31720:14;24933:9;31720:14;15520:93;;24944:2;15720:5;30642:14;15732:21;;-1:-1;15759:332;15784:6;15781:1;15778:13;15759:332;;;33923:18;;33717:42;;;15851:6;15845:13;33706:54;17526:3;17519:74;24944:2;14747:3;14743:14;15865:106;;24944:2;16077:6;31420:14;15978:106;;15806:1;15803;15799:9;15794:14;;15759:332;;;15763:14;;25011:152;;;;;;24915:258;;;;:::o;25180:370::-;;25357:2;;25346:9;25342:18;25357:2;25378:17;25371:47;25432:108;16345:5;30982:12;31692:6;31687:3;31680:19;31720:14;25346:9;31720:14;16357:93;;25357:2;16521:5;30642:14;16533:21;;-1:-1;16560:260;16585:6;16582:1;16579:13;16560:260;;;16652:6;16646:13;17029:3;17022:37;25357:2;14929:3;14925:14;16666:70;;25357:2;16806:6;31420:14;16743:70;;16607:1;16604;16600:9;16595:14;;16560:260;;;16564:14;;25424:116;;;;;;25328:222;;;;:::o;25557:210::-;;25678:2;25667:9;25663:18;25655:26;;16942:5;32252:13;32245:21;16922:3;16915:34;25649:118;;;;:::o;25774:482::-;;25976:2;25965:9;25961:18;25953:26;;32818:54;32866:5;32818:54;:::i;:::-;35103:45;18066:3;18059:69;17052:5;26159:2;26148:9;26144:18;17022:37;17052:5;26242:2;26231:9;26227:18;17022:37;25947:309;;;;;;:::o;26263:377::-;;26440:2;26429:9;26425:18;26417:26;;32818:54;32866:5;32818:54;:::i;:::-;35261:48;18240:3;18233:72;17052:5;26626:2;26615:9;26611:18;17022:37;26411:229;;;;;:::o;26647:512::-;;26864:2;26853:9;26849:18;26841:26;;36423:1;36416:5;36413:12;36403:2;;36429:9;36403:2;35434:60;18429:3;18422:84;17052:5;27062:2;27051:9;27047:18;17022:37;17052:5;27145:2;27134:9;27130:18;17022:37;26835:324;;;;;;:::o;27166:555::-;;27431:3;27420:9;27416:19;27408:27;;27446:127;27555:17;27546:6;27446:127;:::i;:::-;27584;27706:3;27695:9;27691:19;27682:6;27584:127;:::i;:::-;27402:319;;;;;:::o;27728:703::-;;28039:3;28028:9;28024:19;28016:27;;28054:127;28163:17;28154:6;28054:127;:::i;:::-;28192;28314:3;28303:9;28299:19;28290:6;28192:127;:::i;:::-;33923:18;;33717:42;;;17586:5;33706:54;28416:3;28405:9;28401:19;17519:74;28010:421;;;;;;:::o;28438:542::-;;28669:3;28658:9;28654:19;28646:27;;21324:16;21318:23;17029:3;17022:37;21491:4;21484:5;21480:16;21474:23;36537:1;36530:5;36527:12;36517:2;;36543:9;36517:2;35599:40;21491:4;21569:3;21565:14;18593:64;;21677:4;21670:5;21666:16;21660:23;33597:34;;22741:5;33586:46;21677:4;21741:3;21737:14;22711:37;33597:34;22741:5;33586:46;28888:2;28877:9;28873:18;22711:37;;;16942:5;32252:13;32245:21;28965:3;28954:9;28950:19;16915:34;28640:340;;;;;;:::o;28987:222::-;;29114:2;29103:9;29099:18;29091:26;;17052:5;17029:3;17022:37;29085:124;;;;:::o;29216:256::-;;29278:2;29272:9;29262:19;;29316:4;29308:6;29304:17;29415:6;29403:10;29400:22;29379:18;29367:10;29364:34;29361:62;29358:2;;;29436:1;;29426:12;29358:2;29456:10;29278:2;29445:22;;29256:216;;;:::o;29479:328::-;;29662:18;29654:6;29651:30;29648:2;;;-1:-1;;29684:12;29648:2;29729:4;;29721:6;29717:17;29782:15;29774:23;;29585:222;;;:::o;36077:112::-;36167:1;36160:5;36157:12;36147:2;;36173:9;36147:2;36141:48;:::o;36682:117::-;33923:18;;33717:42;;;36769:5;33706:54;36744:5;36741:35;36731:2;;36790:1;;36780:12;36731:2;36725:74;:::o;37812:117::-;33597:34;37899:5;33586:46;37874:5;37871:35;37861:2;;37920:1;;37910:12;37861:2;37855:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0xcf1a9d803fcf8f1ef550313f5c2dd4abd8d91420a3f9b4b51bcd5eacb3e62e22",
    "sources": {
        "./TestNativeOrderSampler.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/NativeOrderSampler.sol\";\nimport \"../src/UtilitySampler.sol\";\n\n\ncontract TestNativeOrderSamplerToken {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping(address => uint256)) public allowance;\n\n    function setBalanceAndAllowance(\n        address owner,\n        address spender,\n        uint256 balance,\n        uint256 allowance_\n    )\n        external\n    {\n        balanceOf[owner] = balance;\n        allowance[owner][spender] = allowance_;\n    }\n}\n\ncontract TestNativeOrderSampler is\n    NativeOrderSampler,\n    UtilitySampler\n{\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n    bytes32 private constant VALID_SIGNATURE_HASH = bytes32(hex\"01\");\n\n    function createTokens(uint256 count)\n        external\n        returns (TestNativeOrderSamplerToken[] memory tokens)\n    {\n        tokens = new TestNativeOrderSamplerToken[](count);\n        for (uint256 i = 0; i < count; ++i) {\n            tokens[i] = new TestNativeOrderSamplerToken();\n        }\n    }\n\n    function setTokenBalanceAndAllowance(\n        TestNativeOrderSamplerToken token,\n        address owner,\n        address spender,\n        uint256 balance,\n        uint256 allowance\n    )\n        external\n    {\n        token.setBalanceAndAllowance(owner, spender, balance, allowance);\n    }\n\n    // IExchange.getLimitOrderRelevantState()\n    function getLimitOrderRelevantState(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        // The order salt determines everything.\n        orderInfo.orderHash = keccak256(abi.encode(order.salt));\n        if (uint8(order.salt) == 0xFF) {\n            orderInfo.status = IExchange.OrderStatus.FILLED;\n        } else {\n            orderInfo.status = IExchange.OrderStatus.FILLABLE;\n        }\n\n        isSignatureValid = signature.r == VALID_SIGNATURE_HASH;\n\n        // The expiration time is the filled taker asset amount.\n        orderInfo.takerTokenFilledAmount = uint128(order.expiry);\n\n        // Calculate how much is fillable in maker terms given the filled taker amount\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\n            uint256(\n                order.takerAmount\n                - orderInfo.takerTokenFilledAmount\n            ),\n            uint256(order.takerAmount),\n            uint256(order.makerAmount)\n        );\n\n        // Take the min of the balance/allowance and the fillable maker amount\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\n            fillableMakerTokenAmount,\n            _getSpendableERC20BalanceOf(order.makerToken, order.maker)\n        );\n\n        // Convert to taker terms\n        actualFillableTakerTokenAmount = LibMathV06.getPartialAmountCeil(\n            fillableMakerTokenAmount,\n            uint256(order.makerAmount),\n            uint256(order.takerAmount)\n        ).safeDowncastToUint128();\n    }\n\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n"
        },
        "../src/NativeOrderSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "../src/UtilitySampler.sol": {
            "id": 25,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
        }
    },
    "sourceCodes": {
        "./TestNativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"../src/NativeOrderSampler.sol\";\nimport \"../src/UtilitySampler.sol\";\n\n\ncontract TestNativeOrderSamplerToken {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping(address => uint256)) public allowance;\n\n    function setBalanceAndAllowance(\n        address owner,\n        address spender,\n        uint256 balance,\n        uint256 allowance_\n    )\n        external\n    {\n        balanceOf[owner] = balance;\n        allowance[owner][spender] = allowance_;\n    }\n}\n\ncontract TestNativeOrderSampler is\n    NativeOrderSampler,\n    UtilitySampler\n{\n    uint8 private constant MAX_ORDER_STATUS = uint8(IExchange.OrderStatus.CANCELLED) + 1;\n    bytes32 private constant VALID_SIGNATURE_HASH = bytes32(hex\"01\");\n\n    function createTokens(uint256 count)\n        external\n        returns (TestNativeOrderSamplerToken[] memory tokens)\n    {\n        tokens = new TestNativeOrderSamplerToken[](count);\n        for (uint256 i = 0; i < count; ++i) {\n            tokens[i] = new TestNativeOrderSamplerToken();\n        }\n    }\n\n    function setTokenBalanceAndAllowance(\n        TestNativeOrderSamplerToken token,\n        address owner,\n        address spender,\n        uint256 balance,\n        uint256 allowance\n    )\n        external\n    {\n        token.setBalanceAndAllowance(owner, spender, balance, allowance);\n    }\n\n    // IExchange.getLimitOrderRelevantState()\n    function getLimitOrderRelevantState(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature calldata signature\n    )\n        external\n        view\n        returns (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        )\n    {\n        // The order salt determines everything.\n        orderInfo.orderHash = keccak256(abi.encode(order.salt));\n        if (uint8(order.salt) == 0xFF) {\n            orderInfo.status = IExchange.OrderStatus.FILLED;\n        } else {\n            orderInfo.status = IExchange.OrderStatus.FILLABLE;\n        }\n\n        isSignatureValid = signature.r == VALID_SIGNATURE_HASH;\n\n        // The expiration time is the filled taker asset amount.\n        orderInfo.takerTokenFilledAmount = uint128(order.expiry);\n\n        // Calculate how much is fillable in maker terms given the filled taker amount\n        uint256 fillableMakerTokenAmount = LibMathV06.getPartialAmountFloor(\n            uint256(\n                order.takerAmount\n                - orderInfo.takerTokenFilledAmount\n            ),\n            uint256(order.takerAmount),\n            uint256(order.makerAmount)\n        );\n\n        // Take the min of the balance/allowance and the fillable maker amount\n        fillableMakerTokenAmount = LibSafeMathV06.min256(\n            fillableMakerTokenAmount,\n            _getSpendableERC20BalanceOf(order.makerToken, order.maker)\n        );\n\n        // Convert to taker terms\n        actualFillableTakerTokenAmount = LibMathV06.getPartialAmountCeil(\n            fillableMakerTokenAmount,\n            uint256(order.makerAmount),\n            uint256(order.takerAmount)\n        ).safeDowncastToUint128();\n    }\n\n    function _getSpendableERC20BalanceOf(\n        IERC20TokenV06 token,\n        address owner\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        return LibSafeMathV06.min256(\n            token.allowance(owner, address(this)),\n            token.balanceOf(owner)\n        );\n    }\n}\n",
        "../src/NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "../src/UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/kim/Development/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": false,
                "runs": 200,
                "details": {
                    "yul": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
