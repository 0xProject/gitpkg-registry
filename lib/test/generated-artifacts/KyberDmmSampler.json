{
    "schemaVersion": "2.0.0",
    "contractName": "KyberDmmSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256)": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                }
            },
            "stateVariables": {
                "KYBER_DMM_CALL_GAS": {
                    "details": "Gas limit for KyberDmm calls."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1E2C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27BE69E EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0xC9 JUMPI PUSH2 0x4A JUMP JUMPDEST CALLDATASIZE PUSH2 0x4A JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xF6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x1713 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1713 JUMP JUMPDEST PUSH2 0x5F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x16AC JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0x1D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x128 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x153 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A1 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1D1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FC JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x22B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x259 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST EQ PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2CF SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1BD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x36A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3C0 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3EC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x42A SWAP2 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x46C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4E8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4E5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4F1 JUMPI PUSH2 0x4F6 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x504 JUMPI PUSH2 0x504 DUP2 PUSH2 0x7A0 JUMP JUMPDEST PUSH2 0x521 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x51B SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST DUP5 PUSH2 0x7A8 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x53C DUP7 DUP7 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x54D JUMPI PUSH2 0x5EA JUMP JUMPDEST PUSH2 0x5E4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x568 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x58E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x602 DUP7 DUP7 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x613 JUMPI PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x62C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x656 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x6AB JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x68B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x65C JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x6B8 DUP9 DUP4 PUSH2 0x7B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x77A PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x726 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP5 DUP4 DUP6 PUSH2 0x1015 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9AE JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x8B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x92A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x927 SWAP2 DUP2 ADD SWAP1 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x978 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x95D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x9B1 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x985 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x87A JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB9F JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x27BE69E PUSH3 0x1E8480 DUP8 PUSH1 0x60 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH1 0xE0 SHL DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xA94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B06 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xB7F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0xB27 DUP2 PUSH1 0x0 PUSH2 0x11AF JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB63 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB79 JUMPI POP PUSH2 0xB9F JUMP JUMPDEST POP PUSH2 0xB97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C90 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA45 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC2F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xC41 JUMPI PUSH2 0x100E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC99 PUSH2 0x14AD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xCF7 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xD62 DUP2 DUP5 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xD8D JUMPI POP POP POP PUSH2 0x100E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD99 DUP4 DUP6 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDC5 JUMPI POP POP POP POP PUSH2 0x100E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1008 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH2 0xE25 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xDEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11F9 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE32 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xE60 JUMPI PUSH2 0xF81 JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE9F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEB4 JUMPI PUSH2 0xF81 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEC0 DUP8 DUP10 PUSH2 0x9B7 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEE8 JUMPI POP PUSH2 0xF81 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEF7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xF78 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xF3E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xF64 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xF76 JUMPI POP POP PUSH2 0xF81 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xDD6 JUMP JUMPDEST POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xFE8 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFF4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xDC8 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x102F SWAP2 SWAP1 PUSH2 0x1639 JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1CC5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x107D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C0A JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1097 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1B76 JUMP JUMPDEST PUSH2 0x10F7 DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1251 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x1131 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1187 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x17DB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1199 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x40 EQ PUSH2 0x11DA JUMPI DUP3 ISZERO PUSH2 0x11CF JUMPI PUSH2 0x11CA DUP5 PUSH2 0x7A0 JUMP JUMPDEST PUSH2 0x11DA JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x100E JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x11EE SWAP2 SWAP1 PUSH2 0x1908 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1206 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x120F JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x121C JUMPI POP PUSH1 0x0 PUSH2 0x11A8 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1229 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1239 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11A8 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1247 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1281 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D1 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST LT ISZERO PUSH2 0x12E4 JUMPI PUSH2 0x12E4 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x12E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1306 SWAP3 SWAP2 SWAP1 PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1344 DUP5 DUP3 PUSH2 0x134A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1366 SWAP2 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x13BE JUMPI POP PUSH2 0x13BE DUP2 PUSH2 0x13D7 JUMP JUMPDEST ISZERO PUSH2 0x13CA JUMPI POP POP PUSH2 0x13D3 JUMP JUMPDEST PUSH2 0x1344 DUP2 PUSH2 0x7A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x13EB JUMPI POP PUSH1 0x1 PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1418 JUMPI PUSH1 0x0 PUSH2 0x1401 DUP4 PUSH1 0x0 PUSH2 0x141D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1416 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1418 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A8 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x144A JUMPI PUSH2 0x144A PUSH2 0x1445 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1453 JUMP JUMPDEST PUSH2 0x7A0 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1472 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B54 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9B1 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14F0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1503 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x1D6D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x154C JUMPI DUP2 MLOAD PUSH2 0x153A DUP2 PUSH2 0x1DDE JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1567 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1575 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x154C JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1599 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15C5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15ED PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1D6D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11A8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x164D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x1658 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1674 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1680 DUP8 DUP4 DUP9 ADD PUSH2 0x14E0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1695 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x14E0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16C1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16CC DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16DC DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16F6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1702 DUP8 DUP3 DUP9 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1727 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1732 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x174E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1761 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x176F PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x178B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x17B5 JUMPI PUSH2 0x17A1 DUP13 DUP3 PUSH2 0x14D5 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x178F JUMP JUMPDEST POP SWAP7 POP POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x17CD JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17ED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1802 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1812 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1820 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x183C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x185E JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1840 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1881 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1898 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x18A8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x18D2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18DE DUP9 DUP3 DUP10 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1901 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x191A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1963 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x193E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1963 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1981 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19B5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1DB2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19DB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1DB2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A58 SWAP1 DUP4 ADD DUP6 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AB1 SWAP1 DUP4 ADD DUP6 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1AC3 DUP2 DUP6 PUSH2 0x192B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1AE0 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1AF2 DUP2 DUP7 PUSH2 0x196E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1AC3 DUP2 DUP6 PUSH2 0x196E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B42 SWAP1 DUP4 ADD DUP6 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1B62 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F6620627579546F6B656E206D7573742062652030000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F206D696E74206F72206465706F7369742073656C6C546F PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x35B2B7 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1D3C PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1D4E DUP2 DUP8 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1DA8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DCD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DB5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1344 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xA6 PUSH31 0x9489604F745FD79F55C5A76C85BB1DDE585DB43E1116FB4582DAA735486473 PUSH16 0x6C634300060C00330000000000000000 ",
                "sourceMap": "968:4298:10:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x43 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x27BE69E EQ PUSH2 0x4F JUMPI DUP1 PUSH4 0x496D5DC EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0xA9 JUMPI DUP1 PUSH4 0x7A82DCB9 EQ PUSH2 0xC9 JUMPI PUSH2 0x4A JUMP JUMPDEST CALLDATASIZE PUSH2 0x4A JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x186A JUMP JUMPDEST PUSH2 0xF6 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x1713 JUMP JUMPDEST PUSH2 0x52D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1ACD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0xC4 CALLDATASIZE PUSH1 0x4 PUSH2 0x1713 JUMP JUMPDEST PUSH2 0x5F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0xE4 CALLDATASIZE PUSH1 0x4 PUSH2 0x16AC JUMP JUMPDEST PUSH2 0x78A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0x1D14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x128 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x153 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1A1 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1D1 SWAP1 ADDRESS SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1FC JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE DUP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x22B SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x245 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x259 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27D SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST EQ PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C4D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2CF SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x321 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST ISZERO PUSH2 0x33E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1BD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 DUP4 DUP2 DUP2 DUP2 DUP6 DUP3 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x36A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3C0 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 DUP11 DUP11 DUP11 DUP11 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3EC SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x42A SWAP2 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x467 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x46C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x4E8 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4E5 SWAP2 DUP2 ADD SWAP1 PUSH2 0x18F0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4F1 JUMPI PUSH2 0x4F6 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x504 JUMPI PUSH2 0x504 DUP2 PUSH2 0x7A0 JUMP JUMPDEST PUSH2 0x521 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x51B SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST DUP5 PUSH2 0x7A8 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x53C DUP7 DUP7 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x54D JUMPI PUSH2 0x5EA JUMP JUMPDEST PUSH2 0x5E4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x568 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP8 PUSH1 0x1 DUP10 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x58E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP7 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5B9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP6 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x602 DUP7 DUP7 PUSH2 0x7B9 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x613 JUMPI PUSH2 0x5EA JUMP JUMPDEST PUSH1 0x60 DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x62C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x656 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x6AB JUMPI DUP7 PUSH1 0x1 DUP3 DUP10 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x68B JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x65C JUMP JUMPDEST POP PUSH1 0x60 PUSH2 0x6B8 DUP9 DUP4 PUSH2 0x7B9 JUMP JUMPDEST SWAP1 POP PUSH2 0x77A PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x726 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP5 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x7A82DCB9 OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP8 PUSH2 0xBA7 JUMP JUMPDEST SWAP1 SWAP5 POP SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x797 DUP5 DUP4 DUP6 PUSH2 0x1015 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP3 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7FF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x83D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x851 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x875 SWAP2 SWAP1 PUSH2 0x161D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x9AE JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x65DA9289 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x8B9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8E1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A69 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x92A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x927 SWAP2 DUP2 ADD SWAP1 PUSH2 0x161D JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x978 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x958 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x95D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP3 POP PUSH2 0x9B1 SWAP2 POP POP JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x985 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x87A JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9FB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA3F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB9F JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x27BE69E PUSH3 0x1E8480 DUP8 PUSH1 0x60 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND SWAP1 POP PUSH1 0xE0 SHL DUP9 PUSH1 0x0 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0xA94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xABC SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B06 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xAE8 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0xB7F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xB16 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0xB27 DUP2 PUSH1 0x0 PUSH2 0x11AF JUMP JUMPDEST DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xB33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xB46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB63 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB79 JUMPI POP PUSH2 0xB9F JUMP JUMPDEST POP PUSH2 0xB97 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C90 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA45 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xBEB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC2F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xC41 JUMPI PUSH2 0x100E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xC85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC99 PUSH2 0x14AD JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0xCF7 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0xD62 DUP2 DUP5 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xD75 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xD8D JUMPI POP POP POP PUSH2 0x100E JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD99 DUP4 DUP6 PUSH2 0x9B7 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xDAC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xDC5 JUMPI POP POP POP POP PUSH2 0x100E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1008 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xF81 JUMPI PUSH2 0xE25 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xDEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11F9 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE32 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE4B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xE60 JUMPI PUSH2 0xF81 JUMP JUMPDEST PUSH2 0xE79 PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE9F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEB4 JUMPI PUSH2 0xF81 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xEC0 DUP8 DUP10 PUSH2 0x9B7 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP DUP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0xED2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEE8 JUMPI POP PUSH2 0xF81 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEF7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0xF78 JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xF27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0xF3E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0xF64 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0xF76 JUMPI POP POP PUSH2 0xF81 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xDD6 JUMP JUMPDEST POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xF8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFA3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xFE8 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFD3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xE18 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xFF4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0xDC8 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x102F SWAP2 SWAP1 PUSH2 0x1639 JUMP JUMPDEST DUP2 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x1 GT ISZERO PUSH2 0x1059 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1CC5 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 ADD DUP2 MLOAD EQ PUSH2 0x107D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1C0A JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1097 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x10C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x29A SWAP1 PUSH2 0x1B76 JUMP JUMPDEST PUSH2 0x10F7 DUP4 DUP8 DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x10D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1251 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCEB757D5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xCEB757D5 SWAP1 PUSH2 0x1131 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x114B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1187 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x17DB JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 DUP3 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x1199 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x40 EQ PUSH2 0x11DA JUMPI DUP3 ISZERO PUSH2 0x11CF JUMPI PUSH2 0x11CA DUP5 PUSH2 0x7A0 JUMP JUMPDEST PUSH2 0x11DA JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x100E JUMP JUMPDEST DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x11EE SWAP2 SWAP1 PUSH2 0x1908 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1206 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x120F JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x121C JUMPI POP PUSH1 0x0 PUSH2 0x11A8 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1229 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1239 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x11A8 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1247 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1281 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x1A12 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12D1 SWAP2 SWAP1 PUSH2 0x18F0 JUMP JUMPDEST LT ISZERO PUSH2 0x12E4 JUMPI PUSH2 0x12E4 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x12E9 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1306 SWAP3 SWAP2 SWAP1 PUSH2 0x19F9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1344 DUP5 DUP3 PUSH2 0x134A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1366 SWAP2 SWAP1 PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x13A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x13A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x13BE JUMPI POP PUSH2 0x13BE DUP2 PUSH2 0x13D7 JUMP JUMPDEST ISZERO PUSH2 0x13CA JUMPI POP POP PUSH2 0x13D3 JUMP JUMPDEST PUSH2 0x1344 DUP2 PUSH2 0x7A0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x13EB JUMPI POP PUSH1 0x1 PUSH2 0x1418 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1418 JUMPI PUSH1 0x0 PUSH2 0x1401 DUP4 PUSH1 0x0 PUSH2 0x141D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1416 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1418 JUMP JUMPDEST POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A8 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x144A JUMPI PUSH2 0x144A PUSH2 0x1445 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1453 JUMP JUMPDEST PUSH2 0x7A0 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1472 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1B54 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x9B1 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x14F0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1503 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x1D6D JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x154C JUMPI DUP2 MLOAD PUSH2 0x153A DUP2 PUSH2 0x1DDE JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1527 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1567 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1575 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x154C JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1599 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x15C5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x15DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x15ED PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD PUSH2 0x1D6D JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1604 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x162E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11A8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x164D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x1658 DUP2 PUSH2 0x1DDE JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1674 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1680 DUP8 DUP4 DUP9 ADD PUSH2 0x14E0 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1695 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x14E0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x16C1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x16CC DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x16DC DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x16F6 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1702 DUP8 DUP3 DUP9 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1727 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1732 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 DUP2 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x174E JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1761 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x176F PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP13 LT ISZERO PUSH2 0x178B JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x17B5 JUMPI PUSH2 0x17A1 DUP13 DUP3 PUSH2 0x14D5 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x178F JUMP JUMPDEST POP SWAP7 POP POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x17CD JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP PUSH2 0x16A2 DUP7 DUP3 DUP8 ADD PUSH2 0x1557 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x17ED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1802 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1812 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x1820 PUSH2 0x14FE DUP3 PUSH2 0x1D93 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x183C JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x185E JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x1840 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1881 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x1898 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x18A8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x18B8 DUP2 PUSH2 0x1DDE JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x18D2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x18DE DUP9 DUP3 DUP10 ADD PUSH2 0x15B5 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1901 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x191A JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1963 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x193E JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1963 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1981 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x19B5 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1DB2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x19DB DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1DB2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1A58 SWAP1 DUP4 ADD DUP6 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1AB1 SWAP1 DUP4 ADD DUP6 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1AC3 DUP2 DUP6 PUSH2 0x192B JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x1AE0 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1AF2 DUP2 DUP7 PUSH2 0x196E JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1AC3 DUP2 DUP6 PUSH2 0x196E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1B42 SWAP1 DUP4 ADD DUP6 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1B62 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F4C4153545F454C454D454E545F4F465F5041 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54485F4D5553545F4D415443485F4F55545055545F544F4B454E000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x42616C616E6365206F6620627579546F6B656E206D7573742062652030000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F41525241595F4C454E4754485F4D49534D41 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0xA8869 PUSH1 0xEB SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x4661696C656420746F206D696E74206F72206465706F7369742073656C6C546F PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x35B2B7 PUSH1 0xE9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2F SWAP1 DUP3 ADD MSTORE PUSH32 0x4D6978696E4B79626572446D6D2F504F4F4C535F4C454E4754485F4D5553545F PUSH1 0x40 DUP3 ADD MSTORE PUSH15 0x42455F41545F4C454153545F4F4E45 PUSH1 0x88 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP3 MSTORE DUP7 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1D3C PUSH1 0xC0 DUP4 ADD DUP8 PUSH2 0x192B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x1D4E DUP2 DUP8 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 SWAP1 SWAP6 AND PUSH1 0x80 DUP5 ADD MSTORE POP POP PUSH1 0xA0 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1DA8 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DCD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DB5 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1344 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1DF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xA6 PUSH31 0x9489604F745FD79F55C5A76C85BB1DDE585DB43E1116FB4582DAA735486473 PUSH16 0x6C634300060C00330000000000000000 ",
                "sourceMap": "968:4298:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2588:1888:19;;;;;;;;;;-1:-1:-1;2588:1888:19;;;;;:::i;:::-;;:::i;:::-;;1981:836:10;;;;;;;;;;-1:-1:-1;1981:836:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;3298:1192;;;;;;;;;;-1:-1:-1;3298:1192:10;;;;;:::i;:::-;;:::i;1152:345::-;;;;;;;;;;-1:-1:-1;1152:345:10;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2588:1888:19:-;2975:52;;-1:-1:-1;;;2975:52:19;;2837:9;;2907:8;;-1:-1:-1;;;;;2975:27:19;;;;;:52;;3011:4;;3018:8;;2975:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2959:90;3098:9;-1:-1:-1;;;;;3075:42:19;;3126:8;3075:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3059:101;3237:44;;-1:-1:-1;;;3237:44:19;;-1:-1:-1;;;;;3237:26:19;;;;;:44;;3272:4;;3279:1;;3237:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3221:82;3321:40;;-1:-1:-1;;;3321:40:19;;3365:8;;-1:-1:-1;;;;;3321:25:19;;;;;:40;;3355:4;;3321:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:52;3313:100;;;;-1:-1:-1;;;3313:100:19;;;;;;;:::i;:::-;;;;;;;;;3431:39;;-1:-1:-1;;;3431:39:19;;-1:-1:-1;;;;;3431:24:19;;;;;:39;;3464:4;;3431:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;3423:86;;;;-1:-1:-1;;;3423:86:19;;;;;;;:::i;:::-;3610:42;;3618:1;;3630:21;3610:42;;;;;3618:1;3610:42;3618:1;3610:42;3630:21;3618:1;3610:42;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;3720:39:19;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3704:79;3819:15;3837:9;3819:27;;3885:12;3899:17;3928:4;-1:-1:-1;;;;;3920:18:19;3975:8;3985:9;3996:8;4006:10;4018:8;3952:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3952:75:19;;;;;;;;;;;;;;-1:-1:-1;;;;;3952:75:19;-1:-1:-1;;;;;;3952:75:19;;;;;;;;;;3920:117;;;;3952:75;3920:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3884:153;;;;4067:9;4057:7;:19;4047:29;;-1:-1:-1;;;;;;;;;;4148:34:19;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4148:36:19;;;;;;;;-1:-1:-1;;4148:36:19;;;;;;;;;;;;:::i;:::-;;;4132:169;;;;;4259:21;;;;4132:169;4316:7;4311:53;;4339:14;:4;:12;:14::i;:::-;4414:55;4443:4;4432:27;;;;;;;;;;;;:::i;:::-;4461:7;4414:17;:55::i;:::-;2588:1888;;;;;;;;;;:::o;1981:836:10:-;2164:22;2200:24;2238:34;2305:31;2323:6;2331:4;2305:17;:31::i;:::-;2297:39;;2350:5;:12;2366:1;2350:17;2346:90;;;2383:42;;2346:90;2477:333;2514:255;;;;;;;;2570:4;2575:1;2570:7;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:10;;;;;2605:4;2624:1;2610:4;:11;:15;2605:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2514:255:10;;;;;2667:6;2675:5;2682:4;2656:31;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2656:31:10;;;;;;;;;2514:255;;;2727:4;2656:31;2514:255;;;2727:27;2514:255;;;;;;;2783:17;2477:23;:333::i;:::-;2446:364;;-1:-1:-1;2446:364:10;-1:-1:-1;1981:836:10;;;;;;;;:::o;3298:1192::-;3480:22;3516:24;3554:34;3621:31;3639:6;3647:4;3621:17;:31::i;:::-;3613:39;;3666:5;:12;3682:1;3666:17;3662:90;;;3699:42;;3662:90;3762:29;3808:4;:11;-1:-1:-1;;;;;3794:26:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3794:26:10;;3762:58;;3835:9;3830:110;3854:4;:11;3850:1;:15;3830:110;;;3904:4;3927:1;3923;3909:4;:11;:15;:19;3904:25;;;;;;;;;;;;;;3886:12;3899:1;3886:15;;;;;;;;-1:-1:-1;;;;;3886:43:10;;;:15;;;;;;;;;;;:43;3867:3;;3830:110;;;;3949:30;3982:39;4000:6;4008:12;3982:17;:39::i;:::-;3949:72;;4062:421;4102:340;;;;;;;;4161:4;4166:1;4161:7;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:10;;;;;4196:4;4215:1;4201:4;:11;:15;4196:21;;;;;;;;;;;;;;-1:-1:-1;;;;;4102:340:10;;;;;4261:6;4269:5;4276:4;4250:31;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4102:340;;;;4324:6;4332:13;4347:12;4313:47;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4313:47:10;;;;;;;;;4102:340;;;4400:4;4313:47;4102:340;;;4400:27;4102:340;;;;;;;4456:17;4062:26;:421::i;:::-;4031:452;;-1:-1:-1;4031:452:10;-1:-1:-1;;;3298:1192:10;;;;;;;:::o;1152:345::-;1344:7;1374:116;1417:8;1440:16;1470:10;1374:14;:116::i;:::-;1367:123;1152:345;-1:-1:-1;;;;;1152:345:10:o;1531:170:37:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;5791:325:19;5993:4;5987:11;6023:6;6018:3;6011:19;6064:7;6059:2;6054:3;6050:12;6043:29;6097:2;6092:3;6085:15;4496:768:10;4630:22;4704:1;4690:4;:11;:15;-1:-1:-1;;;;;4676:30:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4676:30:10;;4668:38;;4716:24;4776:6;-1:-1:-1;;;;;4760:31:10;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4716:78;;4809:9;4804:454;4828:5;:12;4824:1;:16;4804:454;;;4956:7;-1:-1:-1;;;;;4956:22:10;;1132:5;5046:4;5051:1;5046:7;;;;;;;;;;;;;;5055:4;5060:1;5064;5060:5;5055:11;;;;;;;;;;;;;;5068:1;4956:114;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4956:114:10;;;;;;;;-1:-1:-1;;4956:114:10;;;;;;;;;;;;:::i;:::-;;;4936:312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5217:16:10;;;5231:1;5217:16;;;;;;;;;-1:-1:-1;5210:23:10;;-1:-1:-1;;5210:23:10;4936:312;5151:4;5140:5;5146:1;5140:8;;;;;;;;;;;;;:15;-1:-1:-1;;;;;5140:15:10;;;-1:-1:-1;;;;;5140:15:10;;;;;5087:83;4842:3;;4804:454;;;;4496:768;;;;;;:::o;4482:1303:19:-;4639:24;4665:27;4735:9;:16;-1:-1:-1;;;;;4721:31:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4721:31:19;;4708:44;;4786:9;:16;-1:-1:-1;;;;;4772:31:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4772:31:19;;4762:41;;4819:9;4814:965;4838:9;:16;4834:1;:20;4814:965;;;4895:4;-1:-1:-1;;;;;4895:20:19;;4921:3;4947:4;:25;;;;;;;;;;;:34;;;;5003:4;:14;;;5039:4;:13;;;5074:4;:15;;;5111:9;5121:1;5111:12;;;;;;;;;;;;;;4895:246;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4875:894;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5492:39;5517:6;5525:5;5492:24;:39::i;:::-;5463:10;5474:1;5463:13;;;;;;;;;;;;;5478:7;5486:1;5478:10;;;;;;;;;;;;;5462:69;;;;;;;;;;5689:10;5700:1;5689:13;;;;;;;;;;;;;;5706:1;5689:18;5685:70;;;5731:5;;;5685:70;5238:531;4875:894;;;5172:50;;-1:-1:-1;;;5172:50:19;;;;;;;:::i;:::-;4856:3;;4814:965;;;;4482:1303;;;;;:::o;7258:3814::-;7429:24;7455:34;7539:17;:24;-1:-1:-1;;;;;7525:39:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7525:39:19;;7505:59;;7598:17;:24;-1:-1:-1;;;;;7584:39:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7584:39:19;;7574:49;;7637:17;:24;7665:1;7637:29;7633:95;;;7682:35;;7633:95;7769:16;;;7783:1;7769:16;;;;;;;;;7738:28;;7769:16;;;;;;;;;;;-1:-1:-1;7769:16:19;7738:47;;7812:17;7830:1;7812:20;;;;;;;;;;;;;;7795:11;7807:1;7795:14;;;;;;;;;;;;;:37;;;;;7843:42;;:::i;:::-;-1:-1:-1;7888:219:19;;;;;;;;;7940:14;;-1:-1:-1;;;;;7888:219:19;;;;;;7978:13;;;;7888:219;;;;;;;8017:18;;;;7888:219;;;;8071:25;;;-1:-1:-1;;;;;8071:25:19;;;7888:219;;;8071:25;;;;7888:219;;;;;;;;8118:41;;:::i;:::-;8162:218;;;;;;;;8214:4;:13;;;-1:-1:-1;;;;;8162:218:19;;;;;8251:4;:14;;;-1:-1:-1;;;;;8162:218:19;;;;;8291:4;:17;;;8162:218;;;;8344:4;:25;;;;;;;;;;;8162:218;;;;;;;;;;;8118:262;;8479:45;8503:7;8512:11;8479:23;:45::i;:::-;8461:63;;;;;;8538:11;8550:1;8538:14;;;;;;;;;;;;;;8556:1;8538:19;8534:85;;;8573:35;;;;;8534:85;8629:27;8760:46;8784:8;8794:11;8760:23;:46::i;:::-;8743:63;;;;;;8821:10;8832:1;8821:13;;;;;;;;;;;;;;8838:1;8821:18;8817:84;;;8855:35;;;;;;8817:84;8916:9;8911:2155;8935:17;:24;8931:1;:28;8911:2155;;;8980:25;9024:12;9019:1588;7250:1;9042:4;:37;9019:1588;;;9219:157;9267:17;9285:1;9267:20;;;;;;;;;;;;;;9309:10;9320:1;9309:13;;;;;;;;;;;;;;9344:11;9356:1;9344:14;;;;;;;;;;;;;;9219:26;:157::i;:::-;9202:11;9214:1;9202:14;;;;;;;;;;;;;:174;;;;;9398:11;9410:1;9398:14;;;;;;;;;;;;;;9416:1;9398:19;9394:71;;;9441:5;;9394:71;9499:207;7103:8;6945:3;9548:59;6945:3;9674:11;9686:1;9674:14;;;;;;;9499:207;9482:11;9494:1;9482:14;;;;;;;;;;;;;:224;;;;;9728:11;9740:1;9728:14;;;;;;;;;;;;;;9746:1;9728:19;9724:71;;;9771:5;;9724:71;9812:28;9884:46;9908:8;9918:11;9884:23;:46::i;:::-;9952:14;;9858:72;;-1:-1:-1;9858:72:19;-1:-1:-1;9858:72:19;;9964:1;;9952:14;;;;;;;;;;9970:1;9952:19;9948:71;;;9995:5;;;9948:71;10153:11;10140:24;;10260:17;10278:1;10260:20;;;;;;;;;;;;;;10243:10;10254:1;10243:13;;;;;;;;;;;;;;:37;10239:354;;10304:11;10432:17;10450:1;10432:20;;;;;;;;;;;;;;6945:3;10359:17;10377:1;10359:20;;;;;;;;;;;;;;10343:10;10354:1;10343:13;;;;;;;;;;;;;;:36;10342:63;:110;;;;;;10304:148;;7103:8;10478:3;:41;10474:101;;10547:5;;;;10474:101;10239:354;;-1:-1:-1;9081:6:19;;9019:1588;;;;10633:8;10642:1;10633:11;;;;;;;;;;;;;;10620:7;10628:1;10620:10;;;;;;;;;;;;;:24;;;;;10914:141;10958:17;10976:1;10958:20;;;;;;;;;;;;;;10996:10;11007:1;10996:13;;;;;;;;;;;;;;11027:11;11039:1;11027:14;;;;;;;10914:141;10891:17;10909:1;10891:20;;;;;;;;;;;;;;;;;:164;-1:-1:-1;8961:3:19;;8911:2155;;;;7258:3814;;;;;;;;;;:::o;2270:1332:47:-;2428:20;2464:14;2488:22;2520:21;2586:10;2575:55;;;;;;;;;;;;:::i;:::-;2649:12;;2551:79;;-1:-1:-1;2551:79:47;;-1:-1:-1;2551:79:47;-1:-1:-1;2665:1:47;-1:-1:-1;2649:17:47;2641:77;;;;-1:-1:-1;;;2641:77:47;;;;;;;:::i;:::-;2751:5;:12;2766:1;2751:16;2736:4;:11;:31;2728:79;;;;-1:-1:-1;;;2728:79:47;;;;;;;:::i;:::-;2873:8;-1:-1:-1;;;;;2840:42:47;:4;2859:1;2845:4;:11;:15;2840:21;;;;;;;;;;;;;;-1:-1:-1;;;;;2840:42:47;;2818:150;;;;-1:-1:-1;;;2818:150:47;;;;;;;:::i;:::-;3053:67;3100:6;3109:10;3068:4;3073:1;3068:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3053:38:47;;;:67;;;;;:::i;:::-;3155:398;;-1:-1:-1;;;3155:398:47;;3131:21;;-1:-1:-1;;;;;3155:48:47;;;;;:398;;3258:10;;3318:1;;3333:5;;3406:4;;3468;;3528:15;;3155:398;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3155:398:47;;;;;;;;;;;;:::i;:::-;3131:422;;3570:7;3593:1;3578:7;:14;:16;3570:25;;;;;;;;;;;;;;3563:32;;;;;;2270:1332;;;;;;:::o;6484:405:19:-;6628:7;6637;6664:6;:13;6681:2;6664:19;6660:168;;6703:13;6699:119;;;6736:16;:6;:14;:16::i;:::-;6699:119;;;-1:-1:-1;6799:1:19;;-1:-1:-1;6799:1:19;6791:12;;6699:119;6855:6;6844:38;;;;;;;;;;;;:::i;:::-;6837:45;;;;6484:405;;;;;:::o;11078:417::-;11247:21;11288:14;;;:29;;-1:-1:-1;11306:11:19;;11288:29;:49;;;-1:-1:-1;11321:16:19;;11288:49;11284:63;;;-1:-1:-1;11346:1:19;11339:8;;11284:63;11369:18;;;11381:6;11369:9;:18;:9;11401:13;;;;;:23;11397:37;;11433:1;11426:8;;;;;11397:37;11477:11;11471:1;11457:11;:15;11452:1;:21;11451:37;;;;;;;11078:417;-1:-1:-1;;;;;11078:417:19:o;1987:267:31:-;2131:39;;-1:-1:-1;;;2131:39:31;;2173:6;;-1:-1:-1;;;;;2131:15:31;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:31;:42::i;:::-;1987:267;;;:::o;1217:351::-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1383:112:31;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:112:31;-1:-1:-1;;;;;;1383:112:31;;;;;;;;;;;-1:-1:-1;1505:56:31;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;6923:340::-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:31;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:31;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;6555:61;6443:183;;6237:395;;;:::o;16122:220:32:-;16243:14;16290:21;16302:1;16305:5;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;:::-;14493:24;:254::i;:::-;-1:-1:-1;14936:13:32;14838:2;14936:13;14930:20;;14301:688::o;1334:378:35:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:35;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:35;-1:-1:-1;;;;;;1557:148:35;;;;;;;;;;;-1:-1:-1;1334:378:35;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;1191:722::-;;1319:3;1312:4;1304:6;1300:17;1296:27;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;:::-;1389:80;:::i;:::-;1497:21;;;1380:89;-1:-1;1541:4;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;1680:1;;1670:12;1628:2;1705:1;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1858:14;;;;1886;;;;1737:1;1730:9;1690:217;;;1694:14;;;;;1279:634;;;;:::o;1939:707::-;;2056:3;2049:4;2041:6;2037:17;2033:27;2023:2;;-1:-1;;2064:12;2023:2;2111:6;2098:20;2133:80;2148:64;2205:6;2148:64;:::i;2133:80::-;2241:21;;;2124:89;-1:-1;2285:4;2298:14;;;;2273:17;;;2387;;;2378:27;;;;2375:36;-1:-1;2372:2;;;2424:1;;2414:12;2372:2;2449:1;2434:206;2459:6;2456:1;2453:13;2434:206;;;4053:20;;2527:50;;2591:14;;;;2619;;;;2481:1;2474:9;2434:206;;3538:440;;3639:3;3632:4;3624:6;3620:17;3616:27;3606:2;;-1:-1;;3647:12;3606:2;3694:6;3681:20;-1:-1;;;;;25616:6;25613:30;25610:2;;;-1:-1;;25646:12;25610:2;3716:64;25719:9;25700:17;;-1:-1;;25696:33;25787:4;25777:15;3716:64;:::i;:::-;3707:73;;3800:6;3793:5;3786:21;3904:3;25787:4;3895:6;3828;3886:16;;3883:25;3880:2;;;3921:1;;3911:12;3880:2;29276:6;25787:4;3828:6;3824:17;25787:4;3862:5;3858:16;29253:30;29332:1;29314:16;;;25787:4;29314:16;29307:27;3862:5;3599:379;-1:-1;;3599:379::o;4264:263::-;;4379:2;4367:9;4358:7;4354:23;4350:32;4347:2;;;-1:-1;;4385:12;4347:2;226:6;220:13;238:33;265:5;238:33;:::i;4534:809::-;;;;4741:2;4729:9;4720:7;4716:23;4712:32;4709:2;;;-1:-1;;4747:12;4709:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;4939:2;4924:18;;4918:25;4799:82;;-1:-1;;;;;;4952:30;;;4949:2;;;-1:-1;;4985:12;4949:2;5015:89;5096:7;5087:6;5076:9;5072:22;5015:89;:::i;:::-;5005:99;;5162:2;5151:9;5147:18;5141:25;5127:39;;4963:18;5178:6;5175:30;5172:2;;;-1:-1;;5208:12;5172:2;;5238:89;5319:7;5310:6;5299:9;5295:22;5238:89;:::i;:::-;5228:99;;;4703:640;;;;;:::o;5350:721::-;;;;;5514:3;5502:9;5493:7;5489:23;5485:33;5482:2;;;-1:-1;;5521:12;5482:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;5573:63;-1:-1;5673:2;5712:22;;72:20;97:33;72:20;97:33;:::i;:::-;5681:63;-1:-1;5809:2;5794:18;;5781:32;-1:-1;;;;;5822:30;;5819:2;;;-1:-1;;5855:12;5819:2;5885:62;5939:7;5930:6;5919:9;5915:22;5885:62;:::i;:::-;5476:595;;;;-1:-1;5875:72;;5984:2;6023:22;4053:20;;-1:-1;;;5476:595::o;6078:763::-;;;;6266:2;6254:9;6245:7;6241:23;6237:32;6234:2;;;-1:-1;;6272:12;6234:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;6324:63;-1:-1;6452:2;6437:18;;;6424:32;-1:-1;;;;;6465:30;;;6462:2;;;-1:-1;;6498:12;6462:2;6589:6;6578:9;6574:22;;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;652:80::-;760:21;;;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;-1:-1;;933:12;891:2;-1:-1;959:10;;953:206;978:6;975:1;972:13;953:206;;;1058:37;1091:3;1079:10;1058:37;:::i;:::-;1046:50;;1000:1;993:9;;;;;1110:14;;;;1138;;953:206;;;-1:-1;6518:88;-1:-1;;;6671:2;6656:18;;6643:32;;-1:-1;6684:30;;;6681:2;;;-1:-1;;6717:12;6681:2;;;6747:78;6817:7;6808:6;6797:9;6793:22;6747:78;:::i;6848:392::-;;6988:2;;6976:9;6967:7;6963:23;6959:32;6956:2;;;-1:-1;;6994:12;6956:2;7045:17;7039:24;-1:-1;;;;;7075:6;7072:30;7069:2;;;-1:-1;;7105:12;7069:2;7192:22;;2793:4;2781:17;;2777:27;-1:-1;2767:2;;-1:-1;;2808:12;2767:2;2848:6;2842:13;2870:80;2885:64;2942:6;2885:64;:::i;2870:80::-;2978:21;;;3035:14;;;;3010:17;;;3124;;;3115:27;;;;3112:36;-1:-1;3109:2;;;-1:-1;;3151:12;3109:2;-1:-1;3177:10;;3171:217;3196:6;3193:1;3190:13;3171:217;;;4201:13;;3264:61;;3218:1;3211:9;;;;;3339:14;;;;3367;;3171:217;;;-1:-1;7125:99;6950:290;-1:-1;;;;;;;6950:290::o;7247:845::-;;;;;;7427:3;7415:9;7406:7;7402:23;7398:33;7395:2;;;-1:-1;;7434:12;7395:2;3468:20;;-1:-1;;;;;;27906:78;;30185:34;;30175:2;;-1:-1;;30223:12;30175:2;7486:62;-1:-1;7585:2;7624:22;;72:20;97:33;72:20;97:33;:::i;:::-;7593:63;-1:-1;7693:2;7732:22;;72:20;97:33;72:20;97:33;:::i;:::-;7701:63;-1:-1;7829:2;7814:18;;7801:32;-1:-1;;;;;7842:30;;7839:2;;;-1:-1;;7875:12;7839:2;7905:62;7959:7;7950:6;7939:9;7935:22;7905:62;:::i;:::-;7389:703;;;;-1:-1;7389:703;;8004:3;8044:22;4053:20;;7389:703;-1:-1;;;7389:703::o;8099:263::-;;8214:2;8202:9;8193:7;8189:23;8185:32;8182:2;;;-1:-1;;8220:12;8182:2;-1:-1;4201:13;;8176:186;-1:-1;8176:186::o;8369:399::-;;;8501:2;8489:9;8480:7;8476:23;8472:32;8469:2;;;-1:-1;;8507:12;8469:2;-1:-1;;4201:13;;8670:2;8720:22;;;4201:13;;;;;-1:-1;8463:305::o;9549:690::-;;9742:5;26228:12;26902:6;26897:3;26890:19;26939:4;;26934:3;26930:14;9754:93;;26939:4;9918:5;25924:14;-1:-1;9957:260;9982:6;9979:1;9976:13;9957:260;;;10043:13;;-1:-1;;;;;28241:54;9349:37;;8929:14;;;;26630;;;;25624:18;9997:9;9957:260;;;-1:-1;10223:10;;9673:566;-1:-1;;;;;9673:566::o;10278:690::-;;10471:5;26228:12;26902:6;26897:3;26890:19;26939:4;;26934:3;26930:14;10483:93;;26939:4;10647:5;25924:14;-1:-1;10686:260;10711:6;10708:1;10705:13;10686:260;;;10772:13;;14602:37;;9111:14;;;;26630;;;;10733:1;10726:9;10686:260;;11093:343;;11235:5;26228:12;26902:6;26897:3;26890:19;11328:52;11373:6;26939:4;26934:3;26930:14;26939:4;11354:5;11350:16;11328:52;:::i;:::-;25719:9;29693:14;-1:-1;;29689:28;11392:39;;;;26939:4;11392:39;;11183:253;-1:-1;;11183:253::o;14771:271::-;;11603:5;26228:12;11714:52;11759:6;11754:3;11747:4;11740:5;11736:16;11714:52;:::i;:::-;11778:16;;;;;14905:137;-1:-1;;14905:137::o;15049:238::-;-1:-1;;;;;28241:54;;;;9218:58;;15184:2;15169:18;;15155:132::o;15294:365::-;-1:-1;;;;;28241:54;;;;9218:58;;15645:2;15630:18;;12084:58;15465:2;15450:18;;15436:223::o;16022:333::-;-1:-1;;;;;28241:54;;;9349:37;;28241:54;;16341:2;16326:18;;9349:37;16177:2;16162:18;;16148:207::o;16362:640::-;-1:-1;;;;;28241:54;;;9349:37;;28241:54;;16756:2;16741:18;;9349:37;16591:3;16793:2;16778:18;;16771:48;;;16362:640;;16833:76;;16576:19;;16895:6;16833:76;:::i;:::-;16825:84;;14632:5;16988:2;16977:9;16973:18;14602:37;16562:440;;;;;;;:::o;17009:460::-;-1:-1;;;;;28241:54;;;9349:37;;28241:54;;;;17364:2;17349:18;;9349:37;17455:2;17440:18;;12084:58;;;;17200:2;17185:18;;17171:298::o;17476:740::-;-1:-1;;;;;28241:54;;9349:37;;17759:2;17877;17862:18;;17855:48;;;17476:740;;17917:108;;17744:18;;18011:6;17917:108;:::i;:::-;18073:9;18067:4;18063:20;18058:2;18047:9;18043:18;18036:48;18098:108;18201:4;18192:6;18098:108;:::i;:::-;18090:116;17730:486;-1:-1;;;;;;17730:486::o;18563:888::-;;18896:2;18917:17;18910:47;18971:108;18896:2;18885:9;18881:18;19065:6;18971:108;:::i;:::-;19127:9;19121:4;19117:20;19112:2;19101:9;19097:18;19090:48;19152:108;19255:4;19246:6;19152:108;:::i;:::-;19144:116;;19308:9;19302:4;19298:20;19293:2;19282:9;19278:18;19271:48;19333:108;19436:4;19427:6;19333:108;:::i;19458:748::-;-1:-1;;;;;;27906:78;;11045:36;;-1:-1;;;;;28241:54;;;19876:2;19861:18;;9349:37;28241:54;;19959:2;19944:18;;9349:37;28252:42;19996:2;19981:18;;19974:48;;;19458:748;;20036:76;;19698:19;;20098:6;20036:76;:::i;:::-;20028:84;;14632:5;20191:3;20180:9;20176:19;14602:37;19684:522;;;;;;;;:::o;20213:510::-;20429:2;20414:18;;29834:1;29824:12;;29814:2;;29840:9;29814:2;11910:83;;;20626:2;20611:18;;14602:37;;;;20709:2;20694:18;;;14602:37;20400:323;:::o;20730:416::-;20930:2;20944:47;;;12528:2;20915:18;;;26890:19;12564:34;26930:14;;;12544:55;12633:28;12619:12;;;12612:50;12681:12;;;20901:245::o;21153:416::-;21353:2;21367:47;;;12932:2;21338:18;;;26890:19;12968:31;26930:14;;;12948:52;13019:12;;;21324:245::o;21576:416::-;21776:2;21790:47;;;13270:2;21761:18;;;26890:19;13306:34;26930:14;;;13286:55;-1:-1;;;13361:12;;;13354:27;13400:12;;;21747:245::o;21999:416::-;22199:2;22213:47;;;13651:2;22184:18;;;26890:19;13687:34;26930:14;;;13667:55;-1:-1;;;13742:12;;;13735:27;13781:12;;;22170:245::o;22422:416::-;22622:2;22636:47;;;22607:18;;;26890:19;14068:34;26930:14;;;14048:55;14122:12;;;22593:245::o;22845:416::-;23045:2;23059:47;;;14373:2;23030:18;;;26890:19;14409:34;26930:14;;;14389:55;-1:-1;;;14464:12;;;14457:39;14515:12;;;23016:245::o;23268:222::-;14602:37;;;23395:2;23380:18;;23366:124::o;23497:1092::-;;14632:5;14609:3;14602:37;28792:24;24045:2;24034:9;24030:18;12084:58;23872:3;24082:2;24071:9;24067:18;24060:48;24122:108;23872:3;23861:9;23857:19;24216:6;24122:108;:::i;:::-;24278:9;24272:4;24268:20;24263:2;24252:9;24248:18;24241:48;24303:108;24406:4;24397:6;24303:108;:::i;:::-;-1:-1;;;;;28241:54;;;;24490:3;24475:19;;9349:37;-1:-1;;28252:42;24559:19;14602:37;24295:116;23843:746;-1:-1;;;;23843:746::o;24596:256::-;24658:2;24652:9;24684:17;;;-1:-1;;;;;24744:34;;24780:22;;;24741:62;24738:2;;;24816:1;;24806:12;24738:2;24658;24825:22;24636:216;;-1:-1;24636:216::o;24859:304::-;;-1:-1;;;;;25010:6;25007:30;25004:2;;;-1:-1;;25040:12;25004:2;-1:-1;25085:4;25073:17;;;25138:15;;24941:222::o;29349:268::-;29414:1;29421:101;29435:6;29432:1;29429:13;29421:101;;;29502:11;;;29496:18;29483:11;;;29476:39;29457:2;29450:10;29421:101;;;29537:6;29534:1;29531:13;29528:2;;;-1:-1;;29414:1;29584:16;;29577:27;29398:219::o;29863:117::-;-1:-1;;;;;28241:54;;29922:35;;29912:2;;29971:1;;29961:12;29912:2;29906:74;:::o"
            }
        }
    },
    "sourceTreeHashHex": "0x1aa67bd87b7caefd4845c698bb4f8e6eed1e663bd36030d897861d379df3144c",
    "sources": {
        "./KyberDmmSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 19,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./HackedERC20.sol\";\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        HackedERC20 hackedSellToken = HackedERC20(payable(sellToken));\n        HackedERC20 hackedBuyToken = HackedERC20(payable(buyToken));\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Ensure the balance of the buyToken is 0\n        try\n            hackedBuyToken._setBalance(address(this), 0)\n        { } catch { }\n\n        require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        amountsOut = new uint256[](amountsIn.length);\n        gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._mintCallRevert{gas: 2e6}(\n                    opts.getSwapQuoteCallback.selector,\n                    opts.sellToken,\n                    opts.buyToken,\n                    opts.bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                // Flip the second parameter during development to raise the underlying revert\n                // if one exists\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSwapSample(reason, false);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function _revertSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @param revertOnError  whether to return 0 or revert if invalid\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSwapSample(\n        bytes memory reason,\n        bool revertOnError\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            if (revertOnError) {\n                reason.rrevert();\n            } else {\n                return (0,0);\n            }\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            gasUsed[i] = _gasUsed[0];\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil2(\n                makerTokenAmounts[i],\n                buyAmounts[0],\n                sellAmounts[0]\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}"
        },
        "./HackedERC20.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"./GasOverhead.sol\";\n\ncontract HackedERC20 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct ShadowedAmount {\n        bool isShadowed;\n        uint256 lastTrueAmount;\n        uint256 shadowedAmount;\n    }\n\n    struct Storage {\n        mapping(address=>ShadowedAmount) shadowedBalances;\n        mapping(address=>mapping(address=>ShadowedAmount)) shadowedAllowances;\n    }\n\n    bytes32 private constant STORAGE_SLOT = 0x64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    receive() external payable {}\n\n    fallback() payable external {\n        bytes memory r = _forwardCallToImpl();\n        assembly { return(add(r, 32), mload(r)) }\n    }\n\n    function balanceOf(address owner)\n        external\n        /* view */\n        returns (uint256 balance)\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        return sBal.shadowedAmount;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        /* view */\n        returns (uint256 allowance_)\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedAllowance(owner, spender);\n        return sBal.shadowedAmount;\n    }\n\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        returns (bool success)\n    {\n        _updateAllowance(from, amount);\n        success = _transferFromInternal(from, to, amount);\n    }\n\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool success)\n    {\n        success = _transferFromInternal(msg.sender, to, amount);\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool)\n    {\n        (\n            ShadowedAmount memory sAllowance,\n            uint256 gasOverhead\n        ) = _getSyncedAllowance(msg.sender, spender);\n\n        sAllowance.shadowedAmount = amount;\n        _writeSyncedAllowance(msg.sender, spender, sAllowance);\n\n        // Update the global gas overhead from a approval sync\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n        return true;\n    }\n\n    function _setBalance(address owner, uint256 amount)\n        public\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        sBal.shadowedAmount = amount;\n        _writeSyncedBalance(owner, sBal);\n    }\n\n    function _getSyncedAllowance(address owner, address spender)\n        private\n        /* view */\n        returns (ShadowedAmount memory sAllowance, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.allowance.selector,\n                owner,\n                spender\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sAllowance = _getStorage().shadowedAllowances[owner][spender];\n        _syncShadowedAmount(sAllowance, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _getSyncedBalance(address owner)\n        private\n        returns (ShadowedAmount memory sBal, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.balanceOf.selector,\n                owner\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sBal = _getStorage().shadowedBalances[owner];\n        _syncShadowedAmount(sBal, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _syncShadowedAmount(ShadowedAmount memory sAmount, uint256 trueAmount)\n        private\n        pure\n    {\n        if (!sAmount.isShadowed) {\n            sAmount.isShadowed = true;\n            sAmount.shadowedAmount = trueAmount;\n        } else {\n            // Detect balance changes that can occur from outside of ERC20\n            // functions.\n            if (sAmount.lastTrueAmount > trueAmount) {\n                sAmount.shadowedAmount = _sub(\n                    sAmount.lastTrueAmount,\n                    sAmount.lastTrueAmount - trueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_UNDERFLOW'\n                );\n            } else if (sAmount.lastTrueAmount < trueAmount) {\n                sAmount.shadowedAmount = _add(\n                    sAmount.lastTrueAmount,\n                    trueAmount - sAmount.lastTrueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_OVERFLOW'\n                );\n            }\n        }\n        sAmount.lastTrueAmount = trueAmount;\n    }\n\n    function _writeSyncedBalance(address owner, ShadowedAmount memory sBal)\n        private\n    {\n        _getStorage().shadowedBalances[owner] = sBal;\n    }\n\n    function _writeSyncedAllowance(\n        address owner,\n        address spender,\n        ShadowedAmount memory sAllowance\n    )\n        private\n    {\n        _getStorage().shadowedAllowances[owner][spender] = sAllowance;\n    }\n\n    function _getStorage() private pure returns (Storage storage st) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly { st_slot := slot }\n    }\n\n    function _getOriginalImplementationAddress()\n        private\n        view\n        returns (address impl)\n    {\n        return address(uint160(address(this)) + 1);\n    }\n\n    function _forwardCallToImpl()\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(msg.data);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _forwardCallToImpl(bytes memory callData)\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(callData);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _transferFromInternal(address from, address to, uint256 amount)\n        internal\n        returns (bool)\n    {\n        ShadowedAmount memory sFromBal;\n        ShadowedAmount memory sToBal;\n        uint256 gasOverhead;\n        uint256 _gasOverhead;\n\n        (sFromBal, _gasOverhead) = _getSyncedBalance(from);\n        gasOverhead += _gasOverhead;\n        sFromBal.shadowedAmount = _sub(\n            sFromBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_UNDERFLOW'\n        );\n        _writeSyncedBalance(from, sFromBal);\n\n        (sToBal, _gasOverhead) = _getSyncedBalance(to);\n        gasOverhead += _gasOverhead;\n        sToBal.shadowedAmount = _add(\n            sToBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_OVERFLOW'\n        );\n        _writeSyncedBalance(to, sToBal);\n\n        // Update the global gas overhead from a transfer call\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n\n        return true;\n    }\n\n    function _updateAllowance(address from, uint256 amount)\n        internal\n    {\n        (ShadowedAmount memory sAllowance, uint256 gasOverhead) = _getSyncedAllowance(from, msg.sender);\n        if (from != msg.sender && sAllowance.shadowedAmount != uint256(-1)) {\n            sAllowance.shadowedAmount = _sub(\n                sAllowance.shadowedAmount,\n                amount,\n                'HackedERC20/ALLOWANCE_UNDERFLOW'\n            );\n            // Assume a NON MAX_UINT results in allowance update SSTORE\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n        } else {\n            // Assume a MAX_UINT results in no allowance update SSTORE\n            uint256 gasBefore = gasleft();\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n            gasOverhead = gasOverhead + (gasBefore - gasleft());\n        }\n        // Update the global gas overhead from a allowance check\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n    }\n\n    function _add(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, errMsg);\n    }\n\n    function _sub(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a - b;\n        require(c <= a, errMsg);\n    }\n}\n"
        },
        "./GasOverhead.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 0;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 0;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        }
    },
    "sourceCodes": {
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol\";\nimport \"./SwapRevertSampler.sol\";\ninterface IKyberDmmFactory {\n\n    function getPoolAtIndex(address token0, address token1, uint256 index)\n        external\n        view\n        returns (address);\n}\n\n\ncontract KyberDmmSampler is\n    MixinKyberDmm,\n    SwapRevertSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    function sampleSwapFromKyberDmm(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeKyberDmm(\n            IERC20TokenV06(buyToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, makerTokenAmounts);\n        }\n\n        (gasUsed, makerTokenAmounts) = _sampleSwapQuotesRevert(\n            SwapRevertSamplerQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                bridgeData: abi.encode(router, pools, path),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            takerTokenAmounts\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            address[] memory pools,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, gasUsed, takerTokenAmounts);\n        }\n\n        address[] memory reversedPath = new address[](path.length);\n        for (uint256 i = 0; i < path.length; ++i) {\n            reversedPath[i] = path[path.length - i - 1];\n        }\n        address[] memory reversedPools = _getKyberDmmPools(router, reversedPath);\n        (gasUsed, takerTokenAmounts) = _sampleSwapApproximateBuys(\n            SwapRevertSamplerBuyQuoteOpts({\n                sellToken: path[0],\n                buyToken: path[path.length - 1],\n                sellTokenData: abi.encode(router, pools, path),\n                buyTokenData: abi.encode(router, reversedPools, reversedPath),\n                getSwapQuoteCallback: this.sampleSwapFromKyberDmm\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        pools = new address[](path.length - 1);\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        for (uint256 i = 0; i < pools.length; i++) {\n            // Currently only supporting the first pool found at the index\n            try\n                factory.getPoolAtIndex\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1], 0)\n                returns (address pool)\n            {\n                pools[i] = pool;\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinKyberDmm.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\n/*\n    KyberDmm Router\n*/\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param pools An array of pool addresses. pools.length must be >= 1.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata pools,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n\ncontract MixinKyberDmm {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeKyberDmm(\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        address router;\n        address[] memory pools;\n        address[] memory path;\n        (router, pools, path) = abi.decode(bridgeData, (address, address[], address[]));\n\n        require(pools.length >= 1, \"MixinKyberDmm/POOLS_LENGTH_MUST_BE_AT_LEAST_ONE\");\n        require(path.length == pools.length + 1, \"MixinKyberDmm/ARRAY_LENGTH_MISMATCH\");\n         require(\n             path[path.length - 1] == address(buyToken),\n             \"MixinKyberDmm/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\"\n         );\n        // Grant the KyberDmm router an allowance to sell the first token.\n        IERC20TokenV06(path[0]).approveIfBelow(address(router), sellAmount);\n\n        uint[] memory amounts = IKyberDmmRouter(router).swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            sellAmount,\n             // Minimum buy amount.\n            1,\n            pools,\n            // Convert to `buyToken` along this path.\n            path,\n            // Recipient is `this`.\n            address(this),\n            // Expires after this block.\n            block.timestamp\n        );\n        return amounts[amounts.length-1];\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./HackedERC20.sol\";\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        HackedERC20 hackedSellToken = HackedERC20(payable(sellToken));\n        HackedERC20 hackedBuyToken = HackedERC20(payable(buyToken));\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // Ensure the balance of the buyToken is 0\n        try\n            hackedBuyToken._setBalance(address(this), 0)\n        { } catch { }\n\n        require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        address(0).transfer(address(this).balance);\n\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        amountsOut = new uint256[](amountsIn.length);\n        gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._mintCallRevert{gas: 2e6}(\n                    opts.getSwapQuoteCallback.selector,\n                    opts.sellToken,\n                    opts.buyToken,\n                    opts.bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                // Flip the second parameter during development to raise the underlying revert\n                // if one exists\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSwapSample(reason, false);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n    }\n\n    function _revertSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @param revertOnError  whether to return 0 or revert if invalid\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSwapSample(\n        bytes memory reason,\n        bool revertOnError\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            if (revertOnError) {\n                reason.rrevert();\n            } else {\n                return (0,0);\n            }\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil2(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            gasUsed[i] = _gasUsed[0];\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil2(\n                makerTokenAmounts[i],\n                buyAmounts[0],\n                sellAmounts[0]\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil2(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}",
        "./HackedERC20.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"./GasOverhead.sol\";\n\ncontract HackedERC20 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    struct ShadowedAmount {\n        bool isShadowed;\n        uint256 lastTrueAmount;\n        uint256 shadowedAmount;\n    }\n\n    struct Storage {\n        mapping(address=>ShadowedAmount) shadowedBalances;\n        mapping(address=>mapping(address=>ShadowedAmount)) shadowedAllowances;\n    }\n\n    bytes32 private constant STORAGE_SLOT = 0x64fd48372774b9637ace5c8c7a951f04ea13c793935207f2eada5382a0ec82cb;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    receive() external payable {}\n\n    fallback() payable external {\n        bytes memory r = _forwardCallToImpl();\n        assembly { return(add(r, 32), mload(r)) }\n    }\n\n    function balanceOf(address owner)\n        external\n        /* view */\n        returns (uint256 balance)\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        return sBal.shadowedAmount;\n    }\n\n    function allowance(address owner, address spender)\n        external\n        /* view */\n        returns (uint256 allowance_)\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedAllowance(owner, spender);\n        return sBal.shadowedAmount;\n    }\n\n    function transferFrom(address from, address to, uint256 amount)\n        public\n        returns (bool success)\n    {\n        _updateAllowance(from, amount);\n        success = _transferFromInternal(from, to, amount);\n    }\n\n\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool success)\n    {\n        success = _transferFromInternal(msg.sender, to, amount);\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        returns (bool)\n    {\n        (\n            ShadowedAmount memory sAllowance,\n            uint256 gasOverhead\n        ) = _getSyncedAllowance(msg.sender, spender);\n\n        sAllowance.shadowedAmount = amount;\n        _writeSyncedAllowance(msg.sender, spender, sAllowance);\n\n        // Update the global gas overhead from a approval sync\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n        return true;\n    }\n\n    function _setBalance(address owner, uint256 amount)\n        public\n    {\n        (ShadowedAmount memory sBal,) = _getSyncedBalance(owner);\n        sBal.shadowedAmount = amount;\n        _writeSyncedBalance(owner, sBal);\n    }\n\n    function _getSyncedAllowance(address owner, address spender)\n        private\n        /* view */\n        returns (ShadowedAmount memory sAllowance, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.allowance.selector,\n                owner,\n                spender\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sAllowance = _getStorage().shadowedAllowances[owner][spender];\n        _syncShadowedAmount(sAllowance, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _getSyncedBalance(address owner)\n        private\n        returns (ShadowedAmount memory sBal, uint256 gasOverhead)\n    {\n        uint256 trueAmount = abi.decode(\n            _forwardCallToImpl(abi.encodeWithSelector(\n                IERC20TokenV06.balanceOf.selector,\n                owner\n            )),\n            (uint256)\n        );\n        // We only want to measure the cost of the underlying token storage lookup\n        // Not including the excess overhead of our shadow lookup\n        uint256 gasBefore = gasleft();\n        sBal = _getStorage().shadowedBalances[owner];\n        _syncShadowedAmount(sBal, trueAmount);\n        gasOverhead = gasBefore - gasleft();\n    }\n\n    function _syncShadowedAmount(ShadowedAmount memory sAmount, uint256 trueAmount)\n        private\n        pure\n    {\n        if (!sAmount.isShadowed) {\n            sAmount.isShadowed = true;\n            sAmount.shadowedAmount = trueAmount;\n        } else {\n            // Detect balance changes that can occur from outside of ERC20\n            // functions.\n            if (sAmount.lastTrueAmount > trueAmount) {\n                sAmount.shadowedAmount = _sub(\n                    sAmount.lastTrueAmount,\n                    sAmount.lastTrueAmount - trueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_UNDERFLOW'\n                );\n            } else if (sAmount.lastTrueAmount < trueAmount) {\n                sAmount.shadowedAmount = _add(\n                    sAmount.lastTrueAmount,\n                    trueAmount - sAmount.lastTrueAmount,\n                    'HackedERC20/SHADOW_ADJUSTMENT_OVERFLOW'\n                );\n            }\n        }\n        sAmount.lastTrueAmount = trueAmount;\n    }\n\n    function _writeSyncedBalance(address owner, ShadowedAmount memory sBal)\n        private\n    {\n        _getStorage().shadowedBalances[owner] = sBal;\n    }\n\n    function _writeSyncedAllowance(\n        address owner,\n        address spender,\n        ShadowedAmount memory sAllowance\n    )\n        private\n    {\n        _getStorage().shadowedAllowances[owner][spender] = sAllowance;\n    }\n\n    function _getStorage() private pure returns (Storage storage st) {\n        bytes32 slot = STORAGE_SLOT;\n        assembly { st_slot := slot }\n    }\n\n    function _getOriginalImplementationAddress()\n        private\n        view\n        returns (address impl)\n    {\n        return address(uint160(address(this)) + 1);\n    }\n\n    function _forwardCallToImpl()\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(msg.data);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _forwardCallToImpl(bytes memory callData)\n        private\n        returns (bytes memory resultData)\n    {\n        bool success;\n        (success, resultData) =\n            _getOriginalImplementationAddress().delegatecall(callData);\n        if (!success) {\n            assembly { revert(add(resultData, 32), mload(resultData)) }\n        }\n    }\n\n    function _transferFromInternal(address from, address to, uint256 amount)\n        internal\n        returns (bool)\n    {\n        ShadowedAmount memory sFromBal;\n        ShadowedAmount memory sToBal;\n        uint256 gasOverhead;\n        uint256 _gasOverhead;\n\n        (sFromBal, _gasOverhead) = _getSyncedBalance(from);\n        gasOverhead += _gasOverhead;\n        sFromBal.shadowedAmount = _sub(\n            sFromBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_UNDERFLOW'\n        );\n        _writeSyncedBalance(from, sFromBal);\n\n        (sToBal, _gasOverhead) = _getSyncedBalance(to);\n        gasOverhead += _gasOverhead;\n        sToBal.shadowedAmount = _add(\n            sToBal.shadowedAmount,\n            amount,\n            'HackedERC20/BALANCE_OVERFLOW'\n        );\n        _writeSyncedBalance(to, sToBal);\n\n        // Update the global gas overhead from a transfer call\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n\n        return true;\n    }\n\n    function _updateAllowance(address from, uint256 amount)\n        internal\n    {\n        (ShadowedAmount memory sAllowance, uint256 gasOverhead) = _getSyncedAllowance(from, msg.sender);\n        if (from != msg.sender && sAllowance.shadowedAmount != uint256(-1)) {\n            sAllowance.shadowedAmount = _sub(\n                sAllowance.shadowedAmount,\n                amount,\n                'HackedERC20/ALLOWANCE_UNDERFLOW'\n            );\n            // Assume a NON MAX_UINT results in allowance update SSTORE\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n        } else {\n            // Assume a MAX_UINT results in no allowance update SSTORE\n            uint256 gasBefore = gasleft();\n            _writeSyncedAllowance(from, msg.sender, sAllowance);\n            gasOverhead = gasOverhead + (gasBefore - gasleft());\n        }\n        // Update the global gas overhead from a allowance check\n        try\n            GasOverhead(GAS_OVERHEAD).addOverhead(gasOverhead, gasleft())\n        { } catch { }\n    }\n\n    function _add(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a + b;\n        require(c >= a, errMsg);\n    }\n\n    function _sub(uint256 a, uint256 b, string memory errMsg)\n        private\n        pure\n        returns (uint256 c)\n    {\n        c = a - b;\n        require(c <= a, errMsg);\n    }\n}\n",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 0;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 0;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
