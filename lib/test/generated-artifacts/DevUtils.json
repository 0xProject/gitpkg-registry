{
    "schemaVersion": "2.0.0",
    "contractName": "DevUtils",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "exchange_",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "chaiBridge_",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "dydxBridge_",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "EIP712_EXCHANGE_DOMAIN_HASH",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "chaiBridgeAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeAssetProxyId",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeERC1155AssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "tokenIds",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "tokenValues",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes",
                        "name": "callbackData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeERC20AssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeERC20BridgeAssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "bridgeAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeERC721AssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeMultiAssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "nestedAssetData",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeStaticCallAssetData",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "assetProxyId",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "staticCallTargetAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "staticCallData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "expectedReturnDataHash",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "transactionData",
                        "type": "bytes"
                    }
                ],
                "name": "decodeZeroExTransactionData",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "functionName",
                        "type": "string"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "dydxBridgeAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "tokenIds",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "tokenValues",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes",
                        "name": "callbackData",
                        "type": "bytes"
                    }
                ],
                "name": "encodeERC1155AssetData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "name": "encodeERC20AssetData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "tokenId",
                        "type": "uint256"
                    }
                ],
                "name": "encodeERC721AssetData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "amounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "nestedAssetData",
                        "type": "bytes[]"
                    }
                ],
                "name": "encodeMultiAssetData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "staticCallTargetAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "staticCallData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "expectedReturnDataHash",
                        "type": "bytes32"
                    }
                ],
                "name": "encodeStaticCallAssetData",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "erc1155ProxyAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "erc20ProxyAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "erc721ProxyAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "exchangeAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "getAssetProxyAllowance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "getBalance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "getBalanceAndAssetProxyAllowance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "assetData",
                        "type": "bytes[]"
                    }
                ],
                "name": "getBatchAssetProxyAllowances",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "assetData",
                        "type": "bytes[]"
                    }
                ],
                "name": "getBatchBalances",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "assetData",
                        "type": "bytes[]"
                    }
                ],
                "name": "getBatchBalancesAndAssetProxyAllowances",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "address[]",
                        "name": "addresses",
                        "type": "address[]"
                    }
                ],
                "name": "getEthBalances",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "chainId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "orderHash",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    }
                ],
                "name": "getOrderRelevantState",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "enum LibOrder.OrderStatus",
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibOrder.OrderInfo",
                        "name": "orderInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAssetAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "isValidSignature",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "getOrderRelevantStates",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "enum LibOrder.OrderStatus",
                                "name": "orderStatus",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "orderHash",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint256",
                                "name": "orderTakerAssetFilledAmount",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct LibOrder.OrderInfo[]",
                        "name": "ordersInfo",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "fillableTakerAssetAmounts",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "bool[]",
                        "name": "isValidSignature",
                        "type": "bool[]"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    }
                ],
                "name": "getSimulatedOrderMakerTransferResults",
                "outputs": [
                    {
                        "internalType": "enum LibOrderTransferSimulation.OrderTransferResults",
                        "name": "orderTransferResults",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    }
                ],
                "name": "getSimulatedOrderTransferResults",
                "outputs": [
                    {
                        "internalType": "enum LibOrderTransferSimulation.OrderTransferResults",
                        "name": "orderTransferResults",
                        "type": "uint8"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "address[]",
                        "name": "takerAddresses",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerAssetFillAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "getSimulatedOrdersTransferResults",
                "outputs": [
                    {
                        "internalType": "enum LibOrderTransferSimulation.OrderTransferResults[]",
                        "name": "orderTransferResults",
                        "type": "uint8[]"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "gasPrice",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "signerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibZeroExTransaction.ZeroExTransaction",
                        "name": "transaction",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "chainId",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getTransactionHash",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "transactionHash",
                        "type": "bytes32"
                    }
                ],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "ownerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "getTransferableAssetAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "transferableAssetAmount",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "assetData",
                        "type": "bytes"
                    }
                ],
                "name": "revertIfInvalidAssetData",
                "outputs": [],
                "payable": false,
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "staticCallProxyAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "decodeAssetProxyId(bytes)": {
                    "details": "Decode AssetProxy identifier",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset."
                    },
                    "return": "The AssetProxy identifier"
                },
                "decodeERC1155AssetData(bytes)": {
                    "details": "Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing an ERC-1155 set of assets."
                    },
                    "return": "The ERC-1155 AssetProxy identifier, the address of the ERC-1155 contract hosting the assets, an array of the identifiers of the assets to be traded, an array of asset amounts to be traded, and callback data.  Each element of the arrays corresponds to the same-indexed element of the other array.  Return values specified as `memory` are returned as pointers to locations within the memory of the input parameter `assetData`."
                },
                "decodeERC20AssetData(bytes)": {
                    "details": "Decode ERC-20 asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing an ERC-20 asset."
                    },
                    "return": "The AssetProxy identifier, and the address of the ERC-20 contract hosting this asset."
                },
                "decodeERC20BridgeAssetData(bytes)": {
                    "details": "Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing an ERC20Bridge asset"
                    },
                    "return": "The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address of the bridge contract, and extra data to be passed to the bridge contract."
                },
                "decodeERC721AssetData(bytes)": {
                    "details": "Decode ERC-721 asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing an ERC-721 asset."
                    },
                    "return": "The ERC-721 AssetProxy identifier, the address of the ERC-721 contract hosting this asset, and the identifier of the specific asset to be traded."
                },
                "decodeMultiAssetData(bytes)": {
                    "details": "Decode multi-asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant data describing a multi-asset basket."
                    },
                    "return": "The Multi-Asset AssetProxy identifier, an array of the amounts of the assets to be traded, and an array of the AssetProxy-compliant data describing each asset to be traded.  Each element of the arrays corresponds to the same-indexed element of the other array."
                },
                "decodeStaticCallAssetData(bytes)": {
                    "details": "Decode StaticCall asset data from the format described in the AssetProxy contract specification.",
                    "params": {
                        "assetData": "AssetProxy-compliant asset data describing a StaticCall asset"
                    },
                    "return": "The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be passed to the target address, and the expected Keccak-256 hash of the static call return data."
                },
                "decodeZeroExTransactionData(bytes)": {
                    "details": "Decodes the call data for an Exchange contract method call.",
                    "params": {
                        "transactionData": "ABI-encoded calldata for an Exchange     contract method call."
                    },
                    "return": "The name of the function called, and the parameters it was     given.  For single-order fills and cancels, the arrays will have     just one element."
                },
                "encodeERC1155AssetData(address,uint256[],uint256[],bytes)": {
                    "details": "Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.",
                    "params": {
                        "callbackData": "Data to be passed to receiving contracts when a transfer is performed.",
                        "tokenAddress": "The address of the ERC-1155 contract hosting the asset(s) to be traded.",
                        "tokenIds": "The identifiers of the specific assets to be traded.",
                        "tokenValues": "The amounts of each asset to be traded."
                    },
                    "return": "AssetProxy-compliant asset data describing the set of assets."
                },
                "encodeERC20AssetData(address)": {
                    "details": "Encode ERC-20 asset data into the format described in the AssetProxy contract specification.",
                    "params": {
                        "tokenAddress": "The address of the ERC-20 contract hosting the asset to be traded."
                    },
                    "return": "AssetProxy-compliant data describing the asset."
                },
                "encodeERC721AssetData(address,uint256)": {
                    "details": "Encode ERC-721 asset data into the format described in the AssetProxy specification.",
                    "params": {
                        "tokenAddress": "The address of the ERC-721 contract hosting the asset to be traded.",
                        "tokenId": "The identifier of the specific asset to be traded."
                    },
                    "return": "AssetProxy-compliant asset data describing the asset."
                },
                "encodeMultiAssetData(uint256[],bytes[])": {
                    "details": "Encode data for multiple assets, per the AssetProxy contract specification.",
                    "params": {
                        "amounts": "The amounts of each asset to be traded.",
                        "nestedAssetData": "AssetProxy-compliant data describing each asset to be traded."
                    },
                    "return": "AssetProxy-compliant data describing the set of assets."
                },
                "encodeStaticCallAssetData(address,bytes,bytes32)": {
                    "details": "Encode StaticCall asset data into the format described in the AssetProxy contract specification.",
                    "params": {
                        "expectedReturnDataHash": "Expected Keccak-256 hash of the StaticCall return data.",
                        "staticCallData": "Data that will be passed to staticCallTargetAddress in the StaticCall.",
                        "staticCallTargetAddress": "Target address of StaticCall."
                    },
                    "return": "AssetProxy-compliant asset data describing the set of assets."
                },
                "getAssetProxyAllowance(address,bytes)": {
                    "details": "Returns the number of asset(s) (described by assetData) that the corresponding AssetProxy contract is authorized to spend.  When the asset data contains multiple assets (eg for Multi-Asset), the return value indicates how many complete \"baskets\" of those assets may be spent by all of the corresponding AssetProxy contracts.",
                    "params": {
                        "assetData": "Details of asset, encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend."
                },
                "getBalance(address,bytes)": {
                    "details": "Returns the owner's balance of the assets(s) specified in assetData.  When the asset data contains multiple assets (eg in ERC1155 or Multi-Asset), the return value indicates how many complete \"baskets\" of those assets are owned by owner.",
                    "params": {
                        "assetData": "Details of asset, encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "Number of assets (or asset baskets) held by owner."
                },
                "getBalanceAndAssetProxyAllowance(address,bytes)": {
                    "details": "Calls getBalance() and getAllowance() for assetData.",
                    "params": {
                        "assetData": "Details of asset, encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "Number of assets (or asset baskets) held by owner, and number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend."
                },
                "getBatchAssetProxyAllowances(address,bytes[])": {
                    "details": "Calls getAssetProxyAllowance() for each element of assetData.",
                    "params": {
                        "assetData": "Array of asset details, each encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "An array of asset allowances from getAllowance(), with each element corresponding to the same-indexed element in the assetData input."
                },
                "getBatchBalances(address,bytes[])": {
                    "details": "Calls getBalance() for each element of assetData.",
                    "params": {
                        "assetData": "Array of asset details, each encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "Array of asset balances from getBalance(), with each element corresponding to the same-indexed element in the assetData input."
                },
                "getBatchBalancesAndAssetProxyAllowances(address,bytes[])": {
                    "details": "Calls getBatchBalances() and getBatchAllowances() for each element of assetData.",
                    "params": {
                        "assetData": "Array of asset details, each encoded per the AssetProxy contract specification.",
                        "ownerAddress": "Owner of the assets specified by assetData."
                    },
                    "return": "An array of asset balances from getBalance(), and an array of asset allowances from getAllowance(), with each element corresponding to the same-indexed element in the assetData input."
                },
                "getEthBalances(address[])": {
                    "details": "Batch fetches ETH balances",
                    "params": {
                        "addresses": "Array of addresses."
                    },
                    "return": "Array of ETH balances."
                },
                "getOrderRelevantState((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes)": {
                    "details": "Fetches all order-relevant information needed to validate if the supplied order is fillable.",
                    "params": {
                        "order": "The order structure.",
                        "signature": "Signature provided by maker that proves the order's authenticity. `0x01` can always be provided if the signature does not need to be validated."
                    },
                    "return": "The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order), fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state), and isValidSignature (validity of the provided signature). NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final amount of each asset that can be filled."
                },
                "getOrderRelevantStates((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[])": {
                    "details": "Fetches all order-relevant information needed to validate if the supplied orders are fillable.",
                    "params": {
                        "orders": "Array of order structures.",
                        "signatures": "Array of signatures provided by makers that prove the authenticity of the orders. `0x01` can always be provided if a signature does not need to be validated."
                    },
                    "return": "The ordersInfo (array of the hash, status, and `takerAssetAmount` already filled for each order), fillableTakerAssetAmounts (array of amounts for each order's `takerAssetAmount` that is fillable given all on-chain state), and isValidSignature (array containing the validity of each provided signature). NOTE: If the `takerAssetData` encodes data for multiple assets, each element of `fillableTakerAssetAmounts` will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final amount of each asset that can be filled."
                },
                "getSimulatedOrderMakerTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)": {
                    "details": "Simulates the maker transfers within an order and returns the index of the first failed transfer.",
                    "params": {
                        "order": "The order to simulate transfers for.",
                        "takerAddress": "The address of the taker that will fill the order.",
                        "takerAssetFillAmount": "The amount of takerAsset that the taker wished to fill."
                    },
                    "return": "The index of the first failed transfer (or 4 if all transfers are successful)."
                },
                "getSimulatedOrderTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),address,uint256)": {
                    "details": "Simulates all of the transfers within an order and returns the index of the first failed transfer.",
                    "params": {
                        "order": "The order to simulate transfers for.",
                        "takerAddress": "The address of the taker that will fill the order.",
                        "takerAssetFillAmount": "The amount of takerAsset that the taker wished to fill."
                    },
                    "return": "The index of the first failed transfer (or 4 if all transfers are successful)."
                },
                "getSimulatedOrdersTransferResults((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],address[],uint256[])": {
                    "details": "Simulates all of the transfers for each given order and returns the indices of each first failed transfer.",
                    "params": {
                        "orders": "Array of orders to individually simulate transfers for.",
                        "takerAddresses": "Array of addresses of takers that will fill each order.",
                        "takerAssetFillAmounts": "Array of amounts of takerAsset that will be filled for each order."
                    },
                    "return": "The indices of the first failed transfer (or 4 if all transfers are successful) for each order."
                },
                "getTransferableAssetAmount(address,bytes)": {
                    "details": "Gets the amount of an asset transferable by the maker of an order.",
                    "params": {
                        "assetData": "Description of tokens, per the AssetProxy contract specification.",
                        "ownerAddress": "Address of the owner of the asset."
                    },
                    "return": "The amount of the asset tranferable by the owner. NOTE: If the `assetData` encodes data for multiple assets, the `transferableAssetAmount` will represent the amount of times the entire `assetData` can be transferred. To calculate the total individual transferable amounts, this scaled `transferableAmount` must be multiplied by the individual asset amounts located within the `assetData`."
                },
                "revertIfInvalidAssetData(bytes)": {
                    "details": "Reverts if assetData is not of a valid format for its given proxy id.",
                    "params": {
                        "assetData": "AssetProxy compliant asset data."
                    }
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibAssetData.sol": {
                        "LibAssetData": [
                            {
                                "length": 20,
                                "start": 2685
                            },
                            {
                                "length": 20,
                                "start": 2945
                            },
                            {
                                "length": 20,
                                "start": 3211
                            },
                            {
                                "length": 20,
                                "start": 3386
                            },
                            {
                                "length": 20,
                                "start": 3691
                            },
                            {
                                "length": 20,
                                "start": 4300
                            },
                            {
                                "length": 20,
                                "start": 4839
                            },
                            {
                                "length": 20,
                                "start": 5812
                            },
                            {
                                "length": 20,
                                "start": 6109
                            },
                            {
                                "length": 20,
                                "start": 6434
                            },
                            {
                                "length": 20,
                                "start": 6616
                            },
                            {
                                "length": 20,
                                "start": 7250
                            },
                            {
                                "length": 20,
                                "start": 7441
                            },
                            {
                                "length": 20,
                                "start": 7587
                            },
                            {
                                "length": 20,
                                "start": 7754
                            },
                            {
                                "length": 20,
                                "start": 8077
                            },
                            {
                                "length": 20,
                                "start": 8535
                            },
                            {
                                "length": 20,
                                "start": 9421
                            },
                            {
                                "length": 20,
                                "start": 9994
                            },
                            {
                                "length": 20,
                                "start": 10585
                            },
                            {
                                "length": 20,
                                "start": 10670
                            },
                            {
                                "length": 20,
                                "start": 14114
                            },
                            {
                                "length": 20,
                                "start": 14763
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibDydxBalance.sol": {
                        "LibDydxBalance": [
                            {
                                "length": 20,
                                "start": 10288
                            },
                            {
                                "length": 20,
                                "start": 14268
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibOrderTransferSimulation.sol": {
                        "LibOrderTransferSimulation": [
                            {
                                "length": 20,
                                "start": 3872
                            },
                            {
                                "length": 20,
                                "start": 7067
                            },
                            {
                                "length": 20,
                                "start": 10488
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibTransactionDecoder.sol": {
                        "LibTransactionDecoder": [
                            {
                                "length": 20,
                                "start": 3530
                            }
                        ]
                    }
                },
                "object": "0x60806040523480156200001157600080fd5b50604051620054ca380380620054ca8339810160408190526200003491620003f5565b600080546001600160a01b03199081166001600160a01b0386811691821784556005805484168783161790556006805490931690851617909155604051630c0e082160e31b81528291869186918691636070410890620000a090630f47261b60e41b9060040162000448565b60206040518083038186803b158015620000b957600080fd5b505afa158015620000ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620000f49190810190620003c5565b600180546001600160a01b0319166001600160a01b03928316179055604051630c0e082160e31b8152908416906360704108906200013e9063012b8bc960e11b9060040162000448565b60206040518083038186803b1580156200015757600080fd5b505afa1580156200016c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620001929190810190620003c5565b600280546001600160a01b0319166001600160a01b03928316179055604051630c0e082160e31b815290841690636070410890620001dc9063a7cb5fb760e01b9060040162000448565b60206040518083038186803b158015620001f557600080fd5b505afa1580156200020a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002309190810190620003c5565b600380546001600160a01b0319166001600160a01b03928316179055604051630c0e082160e31b8152908416906360704108906200027a9063619ce88560e11b9060040162000448565b60206040518083038186803b1580156200029357600080fd5b505afa158015620002a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620002ce9190810190620003c5565b600480546001600160a01b0319166001600160a01b03928316179055600093508416159150620003019050578162000303565b305b90506200035e6040518060400160405280600b81526020016a0c1e08141c9bdd1bd8dbdb60aa1b815250604051806040016040528060058152602001640332e302e360dc1b81525085846200036e60201b620029a31760201c565b6007555062000476945050505050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600060208284031215620003d7578081fd5b81516001600160a01b0381168114620003ee578182fd5b9392505050565b6000806000606084860312156200040a578182fd5b835162000417816200045d565b60208501519093506200042a816200045d565b60408501519092506200043d816200045d565b809150509250925092565b6001600160e01b031991909116815260200190565b6001600160a01b03811681146200047357600080fd5b50565b61504480620004866000396000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063a5cd62ba11610160578063d186037f116100d8578063e4e6e7da1161008c578063ee18599711610071578063ee185997146105d8578063ef3bb097146105e0578063ff84e7cc146105e857610277565b8063e4e6e7da14610595578063e77286eb146105b657610277565b8063d3d862d1116100bd578063d3d862d114610540578063d469502814610553578063e25cabf71461057357610277565b8063d186037f1461051a578063d36379051461052d57610277565b8063bbb2dcf61161012f578063c82037ef11610114578063c82037ef146104dc578063ca49f47c146104e4578063d001c5dc1461050757610277565b8063bbb2dcf6146104b2578063c26cfecd146104d457610277565b8063a5cd62ba14610464578063a6627e9f14610484578063a7530f1214610497578063b43cffe11461049f57610277565b80637982653e116101f35780639baf2705116101c25780639eadc835116101a75780639eadc8351461041a578063a070cac81461043e578063a0901e511461045157610277565b80639baf2705146103fd5780639cd016051461041257610277565b80637982653e1461039657806379c9c426146103b65780637d727512146103c95780638f4ce479146103dc57610277565b80634dfdac201161024a57806363eb39921161022f57806363eb39921461033d5780636f83188e14610350578063750bdb301461037357610277565b80634dfdac20146102fd578063590aa8751461031d57610277565b806304a5618a1461027c5780630d7b7d76146102a75780632322cf76146102c857806346eb65cb146102e8575b600080fd5b61028f61028a3660046142ab565b6105f0565b60405161029e93929190614d24565b60405180910390f35b6102ba6102b5366004613d6f565b610689565b60405161029e929190614f2d565b6102db6102d6366004613d6f565b6106ab565b60405161029e9190614c01565b6102fb6102f63660046142ab565b6106d3565b005b61031061030b366004613c8a565b610757565b60405161029e9190614b59565b61033061032b366004613c6e565b6107da565b60405161029e9190614d84565b61033061034b366004613db3565b610889565b61036361035e3660046142ab565b61093c565b60405161029e9493929190614e19565b6103866103813660046142ab565b6109dc565b60405161029e9493929190614c42565b6103a96103a4366004614481565b610a6e565b60405161029e9190614e05565b6102db6103c4366004614589565b610b20565b6102db6103d7366004613d6f565b610ba1565b6103ef6103ea3660046142ab565b611497565b60405161029e929190614c1f565b61040561152a565b60405161029e9190614888565b610405611539565b61042d6104283660046142ab565b611548565b60405161029e959493929190614c7e565b6102db61044c366004614530565b6115ed565b61031061045f366004613e35565b61166e565b610477610472366004613f03565b6116e7565b60405161029e9190614a71565b610330610492366004613e0a565b6117a1565b610405611851565b6103306104ad366004613cd8565b611860565b6104c56104c03660046142ab565b611916565b60405161029e93929190614d4f565b6102db6119a6565b6104056119ac565b6104f76104f23660046142ab565b6119bb565b60405161029e9493929190614ce1565b610310610515366004613c8a565b611a4d565b6102db610528366004613d6f565b611abb565b6103a961053b366004614481565b612446565b61033061054e366004613fde565b6124a8565b6105666105613660046142ab565b6124fd565b60405161029e9190614c0a565b610586610581366004613f87565b6125a0565b60405161029e93929190614abe565b6105a86105a3366004613c8a565b6126d8565b60405161029e929190614bdc565b6105c96105c43660046144d9565b6126f1565b60405161029e93929190614ea6565b610405612960565b61040561296f565b61040561297e565b600080600073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a856040518263ffffffff1660e01b815260040161062c9190614d84565b60606040518083038186803b15801561064457600080fd5b505af4158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061067c9190810190614201565b9250925092509193909250565b6000806106968484610ba1565b91506106a28484611abb565b90509250929050565b60008060006106ba8585610689565b915091506106c8828261298d565b925050505b92915050565b6040517f46eb65cb00000000000000000000000000000000000000000000000000000000815273__$a2317ed4aecd4fd151d12b4b79c9600dfe$__906346eb65cb90610723908490600401614d84565b60006040518083038186803b15801561073b57600080fd5b505af415801561074f573d6000803e3d6000fd5b505050505b50565b606060008251905080604051908082528060200260200182016040528015610789578160200160208202803883390190505b50915060005b8181146107d2576107b3858583815181106107a657fe5b6020026020010151611abb565b8382815181106107bf57fe5b602090810291909101015260010161078f565b505092915050565b6040517f590aa87500000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063590aa8759061082d908590600401614888565b60006040518083038186803b15801561084557600080fd5b505af4158015610859573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088191908101906142de565b90505b919050565b6040517f63eb399200000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__906363eb3992906108e0908790879087906004016149f1565b60006040518083038186803b1580156108f857600080fd5b505af415801561090c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093491908101906142de565b949350505050565b60608060608073__$2c940629c908ac1511eec301572a689fa1$__636f83188e866040518263ffffffff1660e01b81526004016109799190614d84565b60006040518083038186803b15801561099157600080fd5b505af41580156109a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd919081019061434c565b93509350935093509193509193565b6000806000606073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b8152600401610a1a9190614d84565b60006040518083038186803b158015610a3257600080fd5b505af4158015610a46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd9190810190614085565b600080546040517f9caa023b00000000000000000000000000000000000000000000000000000000815273__$35bb14ffe56b1143d5360c9efbaa220574$__91639caa023b91610ad0916001600160a01b031690889088908890600401614a23565b60206040518083038186803b158015610ae857600080fd5b505af4158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610934919081019061432d565b600061093484610b9c6040518060400160405280600b81526020017f30782050726f746f636f6c0000000000000000000000000000000000000000008152506040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525087876129a3565b6129fa565b600080610bb4838263ffffffff612a0e16565b90506001600160e01b031981167ff47261b0000000000000000000000000000000000000000000000000000000001415610c0f576000610bfb84601063ffffffff612a4716565b9050610c078186612a7a565b925050611490565b6001600160e01b031981167f02571792000000000000000000000000000000000000000000000000000000001415610e285760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a866040518263ffffffff1660e01b8152600401610c7b9190614d84565b60606040518083038186803b158015610c9357600080fd5b505af4158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ccb9190810190614201565b6040519194509250606091507f6352211e0000000000000000000000000000000000000000000000000000000090610d07908490602401614c01565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060846001600160a01b031683604051610d82919061486c565b600060405180830381855afa9150503d8060008114610dbd576040519150601f19603f3d011682016040523d82523d6000602084013e610dc2565b606091505b50915091506000828015610dd7575081516020145b610de2576000610df3565b610df382600c63ffffffff612a4716565b9050896001600160a01b0316816001600160a01b031614610e15576000610e18565b60015b60ff169750505050505050611490565b6001600160e01b031981167fa7cb5fb70000000000000000000000000000000000000000000000000000000014156110c457600060608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__639eadc835876040518263ffffffff1660e01b8152600401610e969190614d84565b60006040518083038186803b158015610eae57600080fd5b505af4158015610ec2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eea91908101906140ef565b5081519296509094509250905060005b8181146110ba57828181518110610f0d57fe5b602002602001015160001415610f22576110b2565b83516060907efdd58e00000000000000000000000000000000000000000000000000000000908b90879085908110610f5657fe5b6020026020010151604051602401610f6f929190614a58565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060876001600160a01b031683604051610fea919061486c565b600060405180830381855afa9150503d8060008114611025576040519150601f19603f3d011682016040523d82523d6000602084013e61102a565b606091505b5091509150600082801561103f575081516020145b61104a57600061105b565b61105b82600063ffffffff612b7216565b9050600087868151811061106b57fe5b6020026020010151828161107b57fe5b049050806110975760009b5050505050505050505050506106cd565b8b8110806110a357508b155b156110ac57809b505b50505050505b600101610efa565b5050505050611490565b6001600160e01b031981167fc339d10a0000000000000000000000000000000000000000000000000000000014156111f7576040516060907fa85e59e4000000000000000000000000000000000000000000000000000000009061113390869060009081908190602401614d97565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199094169390931790925260045491519092506000916001600160a01b03169061119a90849061486c565b600060405180830381855afa9150503d80600081146111d5576040519150601f19603f3d011682016040523d82523d6000602084013e6111da565b606091505b50509050806111ea5760006111ee565b6000195b93505050611490565b6001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156113205760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b81526004016112639190614d84565b60006040518083038186803b15801561127b57600080fd5b505af415801561128f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112b79190810190614085565b5092509250506112c5612b7e565b6001600160a01b0316826001600160a01b03161480156112f257506005546001600160a01b038281169116145b1561131957600061130a611304612b96565b88612a7a565b905061131581612bae565b9450505b5050611490565b6001600160e01b031981167f94cfcdd70000000000000000000000000000000000000000000000000000000014156114905760608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6866040518263ffffffff1660e01b815260040161138c9190614d84565b60006040518083038186803b1580156113a457600080fd5b505af41580156113b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e09190810190614241565b80519194509250905060005b81811461148b578381815181106113ff57fe5b60200260200101516000141561141457611483565b60006114338985848151811061142657fe5b6020026020010151610ba1565b9050600085838151811061144357fe5b6020026020010151828161145357fe5b0490508061146b5760009750505050505050506106cd565b87811080611477575087155b15611480578097505b50505b6001016113ec565b505050505b5092915050565b60008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__638f4ce479846040518263ffffffff1660e01b81526004016114d19190614d84565b604080518083038186803b1580156114e857600080fd5b505af41580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611520919081019061404e565b915091505b915091565b6004546001600160a01b031681565b6000546001600160a01b031681565b600080606080606073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__639eadc835876040518263ffffffff1660e01b81526004016115879190614d84565b60006040518083038186803b15801561159f57600080fd5b505af41580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db91908101906140ef565b939a9299509097509550909350915050565b6000610934846116696040518060400160405280600b81526020017f30782050726f746f636f6c0000000000000000000000000000000000000000008152506040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525087876129a3565b612dac565b606080825160405190808252806020026020018201604052801561169c578160200160208202803883390190505b50905060005b83518114611490578381815181106116b657fe5b60200260200101516001600160a01b0316318282815181106116d457fe5b60209081029190910101526001016116a2565b6000546040517f02cffc4500000000000000000000000000000000000000000000000000000000815260609173__$35bb14ffe56b1143d5360c9efbaa220574$__916302cffc459161174d916001600160a01b03909116908890889088906004016148d9565b60006040518083038186803b15801561176557600080fd5b505af4158015611779573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109349190810190613e68565b6040517fa6627e9f00000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063a6627e9f906117f69086908690600401614a58565b60006040518083038186803b15801561180e57600080fd5b505af4158015611822573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261184a91908101906142de565b9392505050565b6006546001600160a01b031681565b6040517fb43cffe100000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063b43cffe1906118b990889088908890889060040161499f565b60006040518083038186803b1580156118d157600080fd5b505af41580156118e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261190d91908101906142de565b95945050505050565b600060608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6856040518263ffffffff1660e01b81526004016119529190614d84565b60006040518083038186803b15801561196a57600080fd5b505af415801561197e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067c9190810190614241565b60075481565b6005546001600160a01b031681565b6000806060600073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63ca49f47c866040518263ffffffff1660e01b81526004016119f99190614d84565b60006040518083038186803b158015611a1157600080fd5b505af4158015611a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd9190810190614199565b606060008251905080604051908082528060200260200182016040528015611a7f578160200160208202803883390190505b50915060005b8181146107d257611a9c8585838151811061142657fe5b838281518110611aa857fe5b6020908102919091010152600101611a85565b600080611ace838263ffffffff612a0e16565b90506001600160e01b031981167f94cfcdd7000000000000000000000000000000000000000000000000000000001415611c395760608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6866040518263ffffffff1660e01b8152600401611b3c9190614d84565b60006040518083038186803b158015611b5457600080fd5b505af4158015611b68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b909190810190614241565b80519194509250905060005b818114611c2e57838181518110611baf57fe5b602002602001015160001415611bc457611c26565b6000611bd6898584815181106107a657fe5b90506000858381518110611be657fe5b60200260200101518281611bf657fe5b04905080611c0e5760009750505050505050506106cd565b87811080611c1a575087155b15611c23578097505b50505b600101611b9c565b506106cd9350505050565b6001600160e01b031981167ff47261b0000000000000000000000000000000000000000000000000000000001415611c9a576000611c7e84601063ffffffff612a4716565b600154909150610c0790829087906001600160a01b0316612dbb565b6001600160e01b031981167f02571792000000000000000000000000000000000000000000000000000000001415611fea5760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a866040518263ffffffff1660e01b8152600401611d069190614d84565b60606040518083038186803b158015611d1e57600080fd5b505af4158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d569190810190614201565b600254604051929550909350606092507fe985e9c50000000000000000000000000000000000000000000000000000000091611da2918a916001600160a01b039091169060240161489c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060846001600160a01b031683604051611e1d919061486c565b600060405180830381855afa9150503d8060008114611e58576040519150601f19603f3d011682016040523d82523d6000602084013e611e5d565b606091505b5091509150811580611e7157508051602014155b80611e8d5750611e8881600063ffffffff612b7216565b600114155b15611fdb576040516060907f081812fc0000000000000000000000000000000000000000000000000000000090611ec8908790602401614c01565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050856001600160a01b031681604051611f3f919061486c565b600060405180830381855afa9150503d8060008114611f7a576040519150601f19603f3d011682016040523d82523d6000602084013e611f7f565b606091505b509093509150828015611f93575081516020145b8015611fc257506002546001600160a01b0316611fb783600c63ffffffff612a4716565b6001600160a01b0316145b611fcd576000611fd0565b60015b60ff169750506110ba565b60001996505050505050611490565b6001600160e01b031981167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415612211576040517f9eadc83500000000000000000000000000000000000000000000000000000000815260009073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__90639eadc8359061206f908790600401614d84565b60006040518083038186803b15801561208757600080fd5b505af415801561209b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120c391908101906140ef565b5050600354604051929450606093507fe985e9c5000000000000000000000000000000000000000000000000000000009261210d925089916001600160a01b03169060240161489c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060836001600160a01b031683604051612188919061486c565b600060405180830381855afa9150503d80600081146121c3576040519150601f19603f3d011682016040523d82523d6000602084013e6121c8565b606091505b50915091508180156121db575080516020145b80156121f757506121f381600063ffffffff612b7216565b6001145b612202576000612206565b6000195b955050505050611490565b6001600160e01b031981167fc339d10a00000000000000000000000000000000000000000000000000000000141561224d576000199150611490565b6001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156114905760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b81526004016122b99190614d84565b60006040518083038186803b1580156122d157600080fd5b505af41580156122e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230d9190810190614085565b50925092505061231b612b7e565b6001600160a01b0316826001600160a01b031614801561234857506005546001600160a01b038281169116145b1561239257600061236d61235a612b96565b60055489906001600160a01b0316612dbb565b905060001981146123865761238181612bae565b61238a565b6000195b94505061243d565b6006546001600160a01b038281169116141561243d5773__$9b2d7ef2247de471c5cb1425c931cdd0e4$__630e70a03387836123cc612ec5565b6040518463ffffffff1660e01b81526004016123ea939291906148b6565b60206040518083038186803b15801561240257600080fd5b505af4158015612416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061243a9190810190614641565b93505b50505092915050565b600080546040517f8dccde0400000000000000000000000000000000000000000000000000000000815273__$35bb14ffe56b1143d5360c9efbaa220574$__91638dccde0491610ad0916001600160a01b031690889088908890600401614a23565b6040517fd3d862d100000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063d3d862d1906117f69086908690600401614b6c565b6040517fd469502800000000000000000000000000000000000000000000000000000000815260009073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063d469502890612550908590600401614d84565b60206040518083038186803b15801561256857600080fd5b505af415801561257c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108819190810190614033565b6060806060600085519050806040519080825280602002602001820160405280156125e557816020015b6125d26136a6565b8152602001906001900390816125ca5790505b50935080604051908082528060200260200182016040528015612612578160200160208202803883390190505b5092508060405190808252806020026020018201604052801561263f578160200160208202803883390190505b50915060005b8181146126cf5761267c87828151811061265b57fe5b602002602001015187838151811061266f57fe5b60200260200101516126f1565b875188908590811061268a57fe5b6020026020010187858151811061269d57fe5b602002602001018786815181106126b057fe5b9315156020948502919091019093019290925291905252600101612645565b50509250925092565b6060806126e58484611a4d565b91506106a28484610757565b6126f96136a6565b600080546040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815282916001600160a01b031690639d3fa4b990612743908890600401614eca565b60606040518083038186803b15801561275b57600080fd5b505afa15801561276f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127939190810190614439565b85516000546040517fa12dcc6f00000000000000000000000000000000000000000000000000000000815292955090916001600160a01b039091169063a12dcc6f906127e59089908990600401614f08565b60206040518083038186803b1580156127fd57600080fd5b505afa158015612811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128359190810190614013565b9150600061284287612edd565b90506000612863886101800151896101400151612f0990919063ffffffff16565b1561289857612891826128878a60c001518b60800151612f2e90919063ffffffff16565b8a60a00151612f4a565b9050612905565b60c08801516128b4576128918289608001518a60a00151612f4a565b60006128c5848a61018001516106ab565b905060006128dc848b608001518c60a00151612f4a565b905060006128f3838c60c001518d60a00151612f4a565b90506128ff828261298d565b93505050505b61292961292387604001518a60a00151612f6c90919063ffffffff16565b8261298d565b945061293488612f8b565b61293d57600094505b60038651600681111561294c57fe5b1461295657600094505b5050509250925092565b6001546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b600081831061299c578161184a565b5090919050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600061184a82612a0985612ff2565b61306d565b60008160040183511015612a3457612a34612a2f60038551856004016130a7565b613116565b5001602001516001600160e01b03191690565b60008160140183511015612a6857612a68612a2f60048551856014016130a7565b5001601401516001600160a01b031690565b60405160009081906060906001600160a01b038616907f70a082310000000000000000000000000000000000000000000000000000000090612ac0908790602401614888565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612b13919061486c565b600060405180830381855afa9150503d8060008114612b4e576040519150601f19603f3d011682016040523d82523d6000602084013e612b53565b606091505b5091509150818015612b66575080516020145b156107d2576106c88160005b600061184a838361311e565b736b175474e89094c44da98b954eedeac495271d0f90565b7306af07097c9eeb7fd685c692751d5c66db49c21590565b600080612bb9612b96565b6001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612bf357600080fd5b505af1158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c2b9190810190614311565b90506000816001600160a01b03166320aba08b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ca29190810190614641565b4211612d2057816001600160a01b031663c92aecc46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d1b9190810190614641565b612d93565b816001600160a01b0316639f678cca6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612d5b57600080fd5b505af1158015612d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d939190810190614641565b9050610934816b033b2e3c9fd0803ce800000086612f4a565b600061184a82612a0985613148565b60405160009081906060906001600160a01b038716907fdd62ed3e0000000000000000000000000000000000000000000000000000000090612e03908890889060240161489c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612e56919061486c565b600060405180830381855afa9150503d8060008114612e91576040519150601f19603f3d011682016040523d82523d6000602084013e612e96565b606091505b5091509150818015612ea9575080516020145b15612ebc57612eb9816000612b72565b92505b50509392505050565b731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e90565b6000806000612eeb84613201565b91509150612ef9828261298d565b925061093483856080015161298d565b60008151835114801561184a5750508051602091820120825192909101919091201490565b60008282018381101561184a5761184a612a2f60008686613414565b600061093483612f60868563ffffffff61343316565b9063ffffffff61346416565b600082821115612f8557612f85612a2f60028585613414565b50900390565b6000612f9b82610140015161348e565b8015612fbc575060c08201511580612fbc5750612fbc82610180015161348e565b8015612fd15750612fd182610160015161348e565b8015610881575060e082015115806108815750610881826101a0015161348e565b608081810151825160208085015160408087015160609788015186519685019690962082517fec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc7154150881529485019590955290830191909152948101949094526001600160a01b039091169183019190915260a082015260c0902090565b6040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6060632800659560e01b8484846040516024016130c693929190614df7565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6000816020018351101561313f5761313f612a2f60058551856020016130a7565b50016020015190565b6101408101516101608201516101808301516101a08401516000937ff80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a75349390929091602087101561319457fe5b601f1987018051610140890180516101608b0180516101808d0180516101a08f0180519d89528c5160209d8e012087528b519b8d019b909b2084528951998c01999099208152875197909a019690962088526101e085209390945290529190529252919091529050919050565b600080600483610140015151101561321e57506000905080611525565b610140830151600090613237908263ffffffff612a0e16565b90506001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156133e4576101408401516040517f750bdb3000000000000000000000000000000000000000000000000000000000815260009173__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9163750bdb30916132c291600401614d84565b60006040518083038186803b1580156132da57600080fd5b505af41580156132ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133169190810190614085565b506006549093506001600160a01b038085169116141591506133e290505773__$9b2d7ef2247de471c5cb1425c931cdd0e4$__63d12a796086613357612ec5565b6040518363ffffffff1660e01b8152600401613374929190614edd565b60206040518083038186803b15801561338c57600080fd5b505af41580156133a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133c49190810190614641565b6133d78660000151876101400151611abb565b935093505050611525565b505b6133f78460000151856101400151610ba1565b61340a8560000151866101400151611abb565b9250925050915091565b606063e946c1bb60e01b8484846040516024016130c693929190614dd5565b600082613442575060006106cd565b8282028284828161344f57fe5b041461184a5761184a612a2f60018686613414565b60008161347a5761347a612a2f60038585613414565b600082848161348557fe5b04949350505050565b6000602082518161349b57fe5b066004146134ab57506000610884565b60006134bd838263ffffffff612a0e16565b90506001600160e01b031981167f94cfcdd700000000000000000000000000000000000000000000000000000000146134fa576001915050610884565b6040517fbbb2dcf600000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063bbb2dcf69061354d908790600401614d84565b60006040518083038186803b15801561356557600080fd5b505af4158015613579573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135a19190810190614241565b80519093509150600090505b8181146136375760006135dd60008584815181106135c757fe5b6020026020010151612a0e90919063ffffffff16565b90506001600160e01b031981167f0257179200000000000000000000000000000000000000000000000000000000141561362e5761361b8483613643565b1561362e57600095505050505050610884565b506001016135ad565b50600195945050505050565b8151600090600183015b818110156107d25761368e85828151811061366457fe5b602002602001015186868151811061367857fe5b6020026020010151612f0990919063ffffffff16565b1561369e576001925050506106cd565b60010161364d565b6040805160608101909152806000815260006020820181905260409091015290565b80356106cd81614fd6565b80516106cd81614fd6565b600082601f8301126136ee578081fd5b81356137016136fc82614f62565b614f3b565b81815291506020808301908481018184028601820187101561372257600080fd5b60005b8481101561148b57813561373881614fd6565b84529282019290820190600101613725565b600082601f83011261375a578081fd5b81356137686136fc82614f62565b8181529150602080830190840160005b838110156137a5576137908760208435890101613939565b83526020928301929190910190600101613778565b5050505092915050565b600082601f8301126137bf578081fd5b81516137cd6136fc82614f62565b8181529150602080830190840160005b838110156137a5576137f58760208451890101613987565b835260209283019291909101906001016137dd565b600082601f83011261381a578081fd5b81356138286136fc82614f62565b8181529150602080830190840160005b838110156137a55761385087602084358901016139dc565b83526020928301929190910190600101613838565b600082601f830112613875578081fd5b81356138836136fc82614f62565b8181529150602080830190848101818402860182018710156138a457600080fd5b60005b8481101561148b578135845292820192908201906001016138a7565b600082601f8301126138d3578081fd5b81516138e16136fc82614f62565b81815291506020808301908481018184028601820187101561390257600080fd5b60005b8481101561148b57815184529282019290820190600101613905565b80516001600160e01b0319811681146106cd57600080fd5b600082601f830112613949578081fd5b81356139576136fc82614f82565b915080825283602082850101111561396e57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112613997578081fd5b81516139a56136fc82614f82565b91508082528360208285010111156139bc57600080fd5b611490816020840160208601614fa6565b8051600581106106cd57600080fd5b60006101c08083850312156139ef578182fd5b6139f881614f3b565b915050613a0583836136c8565b8152613a1483602084016136c8565b6020820152613a2683604084016136c8565b6040820152613a3883606084016136c8565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff80821115613a9a57600080fd5b613aa686838701613939565b83850152610160925082850135915080821115613ac257600080fd5b613ace86838701613939565b83850152610180925082850135915080821115613aea57600080fd5b613af686838701613939565b838501526101a0925082850135915080821115613b1257600080fd5b50613b1f85828601613939565b82840152505092915050565b60006101c0808385031215613b3e578182fd5b613b4781614f3b565b915050613b5483836136d3565b8152613b6383602084016136d3565b6020820152613b7583604084016136d3565b6040820152613b8783606084016136d3565b60608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015167ffffffffffffffff80821115613be957600080fd5b613bf586838701613987565b83850152610160925082850151915080821115613c1157600080fd5b613c1d86838701613987565b83850152610180925082850151915080821115613c3957600080fd5b613c4586838701613987565b838501526101a0925082850151915080821115613c6157600080fd5b50613b1f85828601613987565b600060208284031215613c7f578081fd5b813561184a81614fd6565b60008060408385031215613c9c578081fd5b8235613ca781614fd6565b9150602083013567ffffffffffffffff811115613cc2578182fd5b613cce8582860161374a565b9150509250929050565b60008060008060808587031215613ced578182fd5b8435613cf881614fd6565b9350602085013567ffffffffffffffff80821115613d14578384fd5b613d2088838901613865565b94506040870135915080821115613d35578384fd5b613d4188838901613865565b93506060870135915080821115613d56578283fd5b50613d6387828801613939565b91505092959194509250565b60008060408385031215613d81578182fd5b8235613d8c81614fd6565b9150602083013567ffffffffffffffff811115613da7578182fd5b613cce85828601613939565b600080600060608486031215613dc7578081fd5b8335613dd281614fd6565b9250602084013567ffffffffffffffff811115613ded578182fd5b613df986828701613939565b925050604084013590509250925092565b60008060408385031215613e1c578182fd5b8235613e2781614fd6565b946020939093013593505050565b600060208284031215613e46578081fd5b813567ffffffffffffffff811115613e5c578182fd5b610934848285016136de565b60006020808385031215613e7a578182fd5b825167ffffffffffffffff811115613e90578283fd5b80840185601f820112613ea1578384fd5b80519150613eb16136fc83614f62565b8281528381019082850185850284018601891015613ecd578687fd5b8693505b84841015613ef757613ee389826139cd565b835260019390930192918501918501613ed1565b50979650505050505050565b600080600060608486031215613f17578081fd5b833567ffffffffffffffff80821115613f2e578283fd5b613f3a8783880161380a565b94506020860135915080821115613f4f578283fd5b613f5b878388016136de565b93506040860135915080821115613f70578283fd5b50613f7d86828701613865565b9150509250925092565b60008060408385031215613f99578182fd5b823567ffffffffffffffff80821115613fb0578384fd5b613fbc8683870161380a565b93506020850135915080821115613fd1578283fd5b50613cce8582860161374a565b60008060408385031215613ff0578182fd5b823567ffffffffffffffff80821115614007578384fd5b613fbc86838701613865565b600060208284031215614024578081fd5b8151801515811461184a578182fd5b600060208284031215614044578081fd5b61184a8383613921565b60008060408385031215614060578182fd5b61406a8484613921565b9150602083015161407a81614fd6565b809150509250929050565b6000806000806080858703121561409a578182fd5b84516140a581614feb565b60208601519094506140b681614fd6565b60408601519093506140c781614fd6565b606086015190925067ffffffffffffffff8111156140e3578182fd5b613d6387828801613987565b600080600080600060a08688031215614106578283fd5b6141108787613921565b9450602086015161412081614fd6565b604087015190945067ffffffffffffffff8082111561413d578485fd5b61414989838a016138c3565b9450606088015191508082111561415e578283fd5b61416a89838a016138c3565b9350608088015191508082111561417f578283fd5b5061418c88828901613987565b9150509295509295909350565b600080600080608085870312156141ae578182fd5b6141b88686613921565b935060208501516141c881614fd6565b604086015190935067ffffffffffffffff8111156141e4578283fd5b6141f087828801613987565b606096909601519497939650505050565b600080600060608486031215614215578081fd5b61421f8585613921565b9250602084015161422f81614fd6565b80925050604084015190509250925092565b600080600060608486031215614255578081fd5b835161426081614feb565b602085015190935067ffffffffffffffff8082111561427d578283fd5b614289878388016138c3565b9350604086015191508082111561429e578283fd5b50613f7d868287016137af565b6000602082840312156142bc578081fd5b813567ffffffffffffffff8111156142d2578182fd5b61093484828501613939565b6000602082840312156142ef578081fd5b815167ffffffffffffffff811115614305578182fd5b61093484828501613987565b600060208284031215614322578081fd5b815161184a81614fd6565b60006020828403121561433e578081fd5b81516005811061184a578182fd5b60008060008060808587031215614361578182fd5b845167ffffffffffffffff80821115614378578384fd5b61438488838901613987565b955060209150818701518181111561439a578485fd5b80880189601f8201126143ab578586fd5b805191506143bb6136fc83614f62565b82815284810190828601885b858110156143f0576143de8e898451880101613b2b565b845292870192908701906001016143c7565b505060408b015190985094505050508082111561440b578384fd5b614417888389016138c3565b9350606087015191508082111561442c578283fd5b50613d63878288016137af565b60006060828403121561444a578081fd5b6144546060614f3b565b825160078110614462578283fd5b8152602083810151908201526040928301519281019290925250919050565b600080600060608486031215614495578081fd5b833567ffffffffffffffff8111156144ab578182fd5b6144b7868287016139dc565b93505060208401356144c881614fd6565b929592945050506040919091013590565b600080604083850312156144eb578182fd5b823567ffffffffffffffff80821115614502578384fd5b61450e868387016139dc565b93506020850135915080821115614523578283fd5b50613cce85828601613939565b600080600060608486031215614544578081fd5b833567ffffffffffffffff81111561455a578182fd5b614566868287016139dc565b93505060208401359150604084013561457e81614fd6565b809150509250925092565b60008060006060848603121561459d578081fd5b833567ffffffffffffffff808211156145b4578283fd5b81860160a081890312156145c6578384fd5b6145d060a0614f3b565b92508035835260208101356020840152604081013560408401526145f788606083016136c8565b606084015260808101358281111561460d578485fd5b61461989828401613939565b60808501525091945050506020840135915061463885604086016136c8565b90509250925092565b600060208284031215614652578081fd5b5051919050565b6001600160a01b0316815260200190565b60006146768383614748565b505060600190565b6001600160a01b03169052565b60008282518085526020808601955080818302840101818601855b848110156146d457601f198684030189526146c283835161471c565b988401989250908301906001016146a6565b5090979650505050505050565b6000815180845260208401935060208301825b828110156147125781518652602095860195909101906001016146f4565b5093949350505050565b60008151808452614734816020860160208601614fa6565b601f01601f19169290920160200192915050565b80516007811061475457fe5b825260208181015190830152604090810151910152565b60006101c061477b84845161467e565b602083015161478d602086018261467e565b5060408301516147a0604086018261467e565b5060608301516147b3606086018261467e565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261480c8387018261471c565b91505061016091508184015185820383870152614829828261471c565b925050506101808084015185830382870152614845838261471c565b9150506101a091508184015185820383870152614862828261471c565b9695505050505050565b6000825161487e818460208701614fa6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000608082016001600160a01b038716835260206080818501528187516149008185614c01565b91508193508281028201838a01865b8381101561493957868303855261492783835161476b565b9486019492509085019060010161490f565b50508681036040880152809450885192506149548382614c01565b94505050818701845b8281101561497e57614970858351614659565b94509083019060010161495d565b50505050828103606084015261499481856146e1565b979650505050505050565b60006001600160a01b0386168252608060208301526149c160808301866146e1565b82810360408401526149d381866146e1565b83810360608501526149e5818661471c565b98975050505050505050565b60006001600160a01b038516825260606020830152614a13606083018561471c565b9050826040830152949350505050565b60006001600160a01b03808716835260806020840152614a46608084018761476b565b94166040830152506060015292915050565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000918401906040840190835b81811015614ab357835160058110614a9f57fe5b835260209384019390920191600101614a8b565b509095945050505050565b60006060820160608352808651614ad58184614c01565b915060209250828801845b82811015614b0157614af384835161466a565b935090840190600101614ae0565b50505083810382850152614b1581876146e1565b84810360408601528551808252908301915082860190845b81811015614b4b578251151584529284019291840191600101614b2d565b509198975050505050505050565b60006020825261184a60208301846146e1565b600060408252614b7f60408301856146e1565b602083820381850152818551808452828401915082838202850101838801865b83811015614bcd57601f19878403018552614bbb83835161471c565b94860194925090850190600101614b9f565b50909998505050505050505050565b600060408252614bef60408301856146e1565b828103602084015261190d81856146e1565b90815260200190565b6001600160e01b031991909116815260200190565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b60006001600160e01b0319861682526001600160a01b03808616602084015280851660408401525060806060830152614862608083018461471c565b60006001600160e01b0319871682526001600160a01b038616602083015260a06040830152614cb060a08301866146e1565b8281036060840152614cc281866146e1565b8381036080850152614cd4818661471c565b9998505050505050505050565b60006001600160e01b0319861682526001600160a01b038516602083015260806040830152614d13608083018561471c565b905082606083015295945050505050565b6001600160e01b03199390931683526001600160a01b03919091166020830152604082015260600190565b60006001600160e01b03198516825260606020830152614d7260608301856146e1565b8281036040840152614862818561468b565b60006020825261184a602083018461471c565b600060808252614daa608083018761471c565b6001600160a01b03958616602084015293909416604082015260ff9190911660609091015292915050565b6060810160048510614de357fe5b938152602081019290925260409091015290565b6060810160088510614de357fe5b6020810160058310614e1357fe5b91905290565b600060808252614e2c608083018761471c565b602083820381850152818751808452828401915082838202850101838a01865b83811015614e7a57601f19878403018552614e6883835161476b565b94860194925090850190600101614e4c565b50508681036040880152614e8e818a6146e1565b9450505050508281036060840152614994818561468b565b60a08101614eb48286614748565b8360608301528215156080830152949350505050565b60006020825261184a602083018461476b565b600060408252614ef0604083018561476b565b90506001600160a01b03831660208301529392505050565b600060408252614f1b604083018561476b565b828103602084015261190d818561471c565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715614f5a57600080fd5b604052919050565b600067ffffffffffffffff821115614f78578081fd5b5060209081020190565b600067ffffffffffffffff821115614f98578081fd5b50601f01601f191660200190565b60005b83811015614fc1578181015183820152602001614fa9565b83811115614fd0576000848401525b50505050565b6001600160a01b038116811461075457600080fd5b6001600160e01b03198116811461075457600080fdfea365627a7a72315820ae89253a8fdbd41c2ab0ddfd225232c891fe07cd92b002434d7a8204adf1f62b6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x54CA CODESIZE SUB DUP1 PUSH3 0x54CA DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x3F5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x5 DUP1 SLOAD DUP5 AND DUP8 DUP4 AND OR SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP1 SWAP4 AND SWAP1 DUP6 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC0E0821 PUSH1 0xE3 SHL DUP2 MSTORE DUP3 SWAP2 DUP7 SWAP2 DUP7 SWAP2 DUP7 SWAP2 PUSH4 0x60704108 SWAP1 PUSH3 0xA0 SWAP1 PUSH4 0xF47261B PUSH1 0xE4 SHL SWAP1 PUSH1 0x4 ADD PUSH3 0x448 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0xCE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0xF4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3C5 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC0E0821 PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 DUP5 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x13E SWAP1 PUSH4 0x12B8BC9 PUSH1 0xE1 SHL SWAP1 PUSH1 0x4 ADD PUSH3 0x448 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x16C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x192 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3C5 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC0E0821 PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 DUP5 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x1DC SWAP1 PUSH4 0xA7CB5FB7 PUSH1 0xE0 SHL SWAP1 PUSH1 0x4 ADD PUSH3 0x448 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x20A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x230 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3C5 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0xC0E0821 PUSH1 0xE3 SHL DUP2 MSTORE SWAP1 DUP5 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH3 0x27A SWAP1 PUSH4 0x619CE885 PUSH1 0xE1 SHL SWAP1 PUSH1 0x4 ADD PUSH3 0x448 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x293 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 0x2A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH3 0x2CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x3C5 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 0x0 SWAP4 POP DUP5 AND ISZERO SWAP2 POP PUSH3 0x301 SWAP1 POP JUMPI DUP2 PUSH3 0x303 JUMP JUMPDEST ADDRESS JUMPDEST SWAP1 POP PUSH3 0x35E PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH11 0xC1E08141C9BDD1BD8DBDB PUSH1 0xAA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x332E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP6 DUP5 PUSH3 0x36E PUSH1 0x20 SHL PUSH3 0x29A3 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x7 SSTORE POP PUSH3 0x476 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 SWAP5 DUP6 ADD KECCAK256 DUP4 MLOAD SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 MSTORE SWAP6 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x3D7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x3EE JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x40A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x417 DUP2 PUSH3 0x45D JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x42A DUP2 PUSH3 0x45D JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x43D DUP2 PUSH3 0x45D JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x473 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x5044 DUP1 PUSH3 0x486 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x277 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA5CD62BA GT PUSH2 0x160 JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xE4E6E7DA GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEE185997 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEE185997 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xEF3BB097 EQ PUSH2 0x5E0 JUMPI DUP1 PUSH4 0xFF84E7CC EQ PUSH2 0x5E8 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xE77286EB EQ PUSH2 0x5B6 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xD3D862D1 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xD4695028 EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xE25CABF7 EQ PUSH2 0x573 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xD186037F EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xD3637905 EQ PUSH2 0x52D JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0xC82037EF GT PUSH2 0x114 JUMPI DUP1 PUSH4 0xC82037EF EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xCA49F47C EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x507 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xC26CFECD EQ PUSH2 0x4D4 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xA5CD62BA EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x484 JUMPI DUP1 PUSH4 0xA7530F12 EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x49F JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x7982653E GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x9BAF2705 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x9EADC835 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xA070CAC8 EQ PUSH2 0x43E JUMPI DUP1 PUSH4 0xA0901E51 EQ PUSH2 0x451 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x9BAF2705 EQ PUSH2 0x3FD JUMPI DUP1 PUSH4 0x9CD01605 EQ PUSH2 0x412 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x7982653E EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x79C9C426 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x3DC JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4DFDAC20 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x63EB3992 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x63EB3992 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x6F83188E EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x750BDB30 EQ PUSH2 0x373 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x590AA875 EQ PUSH2 0x31D JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x2322CF76 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x46EB65CB EQ PUSH2 0x2E8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x5F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BA PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4F2D JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4C01 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x6D3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x757 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4B59 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x3C6E JUMP JUMPDEST PUSH2 0x7DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x34B CALLDATASIZE PUSH1 0x4 PUSH2 0x3DB3 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH2 0x363 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x93C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E19 JUMP JUMPDEST PUSH2 0x386 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C42 JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4481 JUMP JUMPDEST PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4E05 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4589 JUMP JUMPDEST PUSH2 0xB20 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x3D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4C1F JUMP JUMPDEST PUSH2 0x405 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4888 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x1539 JUMP JUMPDEST PUSH2 0x42D PUSH2 0x428 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C7E JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x44C CALLDATASIZE PUSH1 0x4 PUSH2 0x4530 JUMP JUMPDEST PUSH2 0x15ED JUMP JUMPDEST PUSH2 0x310 PUSH2 0x45F CALLDATASIZE PUSH1 0x4 PUSH2 0x3E35 JUMP JUMPDEST PUSH2 0x166E JUMP JUMPDEST PUSH2 0x477 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F03 JUMP JUMPDEST PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4A71 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x492 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E0A JUMP JUMPDEST PUSH2 0x17A1 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x1851 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x4AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD8 JUMP JUMPDEST PUSH2 0x1860 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D4F JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x19AC JUMP JUMPDEST PUSH2 0x4F7 PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x19BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x310 PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x1A4D JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x4481 JUMP JUMPDEST PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x3FDE JUMP JUMPDEST PUSH2 0x24A8 JUMP JUMPDEST PUSH2 0x566 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4C0A JUMP JUMPDEST PUSH2 0x586 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F87 JUMP JUMPDEST PUSH2 0x25A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4ABE JUMP JUMPDEST PUSH2 0x5A8 PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x26D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4BDC JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x5C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D9 JUMP JUMPDEST PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA6 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x2960 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x296F JUMP JUMPDEST PUSH2 0x405 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x4A5618A DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x67C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x696 DUP5 DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x6A2 DUP5 DUP5 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6BA DUP6 DUP6 PUSH2 0x689 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6C8 DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x46EB65CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x46EB65CB SWAP1 PUSH2 0x723 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x789 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH2 0x7B3 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7BF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x78F JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x590AA87500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x590AA875 SWAP1 PUSH2 0x82D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4888 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x845 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x881 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x63EB399200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x63EB3992 SWAP1 PUSH2 0x8E0 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x90C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0x6F83188E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x979 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x9A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x434C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA1A SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9CAA023B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x9CAA023B SWAP2 PUSH2 0xAD0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xAFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x432D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP5 PUSH2 0xB9C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP8 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x29FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBB4 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xC0F JUMPI PUSH1 0x0 PUSH2 0xBFB DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xC07 DUP2 DUP7 PUSH2 0x2A7A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x4A5618A DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC7B SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xCCB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x60 SWAP2 POP PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xD07 SWAP1 DUP5 SWAP1 PUSH1 0x24 ADD PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDBD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0xDD7 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0xDE2 JUMPI PUSH1 0x0 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xDF3 DUP3 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE15 JUMPI PUSH1 0x0 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x10C4 JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0x9EADC835 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE96 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xEC2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xEEA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x10BA JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xF0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF22 JUMPI PUSH2 0x10B2 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x60 SWAP1 PUSH31 0xFDD58E00000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xF56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF6F SWAP3 SWAP2 SWAP1 PUSH2 0x4A58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xFEA SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x102A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x103F JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x104A JUMPI PUSH1 0x0 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x105B DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x106B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x107B JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x1097 JUMPI PUSH1 0x0 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP12 DUP2 LT DUP1 PUSH2 0x10A3 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0x10AC JUMPI DUP1 SWAP12 POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xEFA JUMP JUMPDEST POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xC339D10A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1133 SWAP1 DUP7 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x4D97 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x4 SLOAD SWAP2 MLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x119A SWAP1 DUP5 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x11EA JUMPI PUSH1 0x0 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP4 POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1320 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1263 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x128F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x12B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP POP PUSH2 0x12C5 PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x12F2 JUMPI POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 PUSH2 0x130A PUSH2 0x1304 PUSH2 0x2B96 JUMP JUMPDEST DUP9 PUSH2 0x2A7A JUMP JUMPDEST SWAP1 POP PUSH2 0x1315 DUP2 PUSH2 0x2BAE JUMP JUMPDEST SWAP5 POP POP JUMPDEST POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x13E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x148B JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x13FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1414 JUMPI PUSH2 0x1483 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1433 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1426 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1443 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1453 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x146B JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP8 DUP2 LT DUP1 PUSH2 0x1477 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x1480 JUMPI DUP1 SWAP8 POP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x13EC JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x8F4CE479 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1520 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x404E JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH20 0x0 PUSH4 0x9EADC835 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1587 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x159F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15DB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP1 SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP5 PUSH2 0x1669 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP8 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x169C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1490 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x16B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x16D4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2CFFC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x2CFFC45 SWAP2 PUSH2 0x174D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x48D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1779 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3E68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA6627E9F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA6627E9F SWAP1 PUSH2 0x17F6 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x180E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1822 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x184A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB43CFFE100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xB43CFFE1 SWAP1 PUSH2 0x18B9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x499F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x18E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x190D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1952 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x196A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x197E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x67C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH20 0x0 PUSH4 0xCA49F47C DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F9 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1A25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4199 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A7F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH2 0x1A9C DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1426 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AA8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ACE DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1B68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B90 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1C2E JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1BAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BC4 JUMPI PUSH2 0x1C26 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD6 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7A6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1BF6 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x1C0E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP8 DUP2 LT DUP1 PUSH2 0x1C1A JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x1C23 JUMPI DUP1 SWAP8 POP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B9C JUMP JUMPDEST POP PUSH2 0x6CD SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1C9A JUMPI PUSH1 0x0 PUSH2 0x1C7E DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH2 0xC07 SWAP1 DUP3 SWAP1 DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x4A5618A DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D06 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D32 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D56 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x1DA2 SWAP2 DUP11 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E1D SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E58 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x1E71 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x1E8D JUMPI POP PUSH2 0x1E88 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x81812FC00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1EC8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x1F3F SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F7A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x1F93 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1FC2 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FB7 DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1FCD JUMPI PUSH1 0x0 PUSH2 0x1FD0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x0 NOT SWAP7 POP POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9EADC83500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x9EADC835 SWAP1 PUSH2 0x206F SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x209B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20C3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x210D SWAP3 POP DUP10 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2188 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x21DB JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x21F7 JUMPI POP PUSH2 0x21F3 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x2202 JUMPI PUSH1 0x0 PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xC339D10A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x224D JUMPI PUSH1 0x0 NOT SWAP2 POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B9 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x230D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP POP PUSH2 0x231B PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x2348 JUMPI POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 PUSH2 0x236D PUSH2 0x235A PUSH2 0x2B96 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DBB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2386 JUMPI PUSH2 0x2381 DUP2 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x238A JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP5 POP POP PUSH2 0x243D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x243D JUMPI PUSH20 0x0 PUSH4 0xE70A033 DUP8 DUP4 PUSH2 0x23CC PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23EA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x48B6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2416 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x243A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8DCCDE0400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x8DCCDE04 SWAP2 PUSH2 0xAD0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD3D862D100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD3D862D1 SWAP1 PUSH2 0x17F6 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4B6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD469502800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD4695028 SWAP1 PUSH2 0x2550 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x257C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x881 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4033 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25E5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x25D2 PUSH2 0x36A6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x25CA JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2612 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x263F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x26CF JUMPI PUSH2 0x267C DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x265B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x266F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x26F1 JUMP JUMPDEST DUP8 MLOAD DUP9 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x268A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x269D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x26B0 JUMPI INVALID JUMPDEST SWAP4 ISZERO ISZERO PUSH1 0x20 SWAP5 DUP6 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE PUSH1 0x1 ADD PUSH2 0x2645 JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x26E5 DUP5 DUP5 PUSH2 0x1A4D JUMP JUMPDEST SWAP2 POP PUSH2 0x6A2 DUP5 DUP5 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x26F9 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x2743 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4ECA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x275B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x276F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2793 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4439 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA12DCC6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP6 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA12DCC6F SWAP1 PUSH2 0x27E5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2811 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2835 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4013 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2842 DUP8 PUSH2 0x2EDD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2863 DUP9 PUSH2 0x180 ADD MLOAD DUP10 PUSH2 0x140 ADD MLOAD PUSH2 0x2F09 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2898 JUMPI PUSH2 0x2891 DUP3 PUSH2 0x2887 DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH2 0x2F2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x28B4 JUMPI PUSH2 0x2891 DUP3 DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C5 DUP5 DUP11 PUSH2 0x180 ADD MLOAD PUSH2 0x6AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28DC DUP5 DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28F3 DUP4 DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH2 0x28FF DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST PUSH2 0x2929 PUSH2 0x2923 DUP8 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP5 POP PUSH2 0x2934 DUP9 PUSH2 0x2F8B JUMP JUMPDEST PUSH2 0x293D JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST PUSH1 0x3 DUP7 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x294C JUMPI INVALID JUMPDEST EQ PUSH2 0x2956 JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x299C JUMPI DUP2 PUSH2 0x184A JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 SWAP5 DUP6 ADD KECCAK256 DUP4 MLOAD SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 MSTORE SWAP6 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP3 PUSH2 0x2A09 DUP6 PUSH2 0x2FF2 JUMP JUMPDEST PUSH2 0x306D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2A34 JUMPI PUSH2 0x2A34 PUSH2 0x2A2F PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x30A7 JUMP JUMPDEST PUSH2 0x3116 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2A68 JUMPI PUSH2 0x2A68 PUSH2 0x2A2F PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x30A7 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2AC0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4888 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B13 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B4E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2B66 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x6C8 DUP2 PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP4 DUP4 PUSH2 0x311E JUMP JUMPDEST PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F SWAP1 JUMP JUMPDEST PUSH20 0x6AF07097C9EEB7FD685C692751D5C66DB49C215 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BB9 PUSH2 0x2B96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4BA2363A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2C2B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4311 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x20ABA08B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2CA2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x2D20 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC92AECC4 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2CF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2D1B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST PUSH2 0x2D93 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9F678CCA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2D93 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST SWAP1 POP PUSH2 0x934 DUP2 PUSH12 0x33B2E3C9FD0803CE8000000 DUP7 PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP3 PUSH2 0x2A09 DUP6 PUSH2 0x3148 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2E03 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E56 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E91 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E96 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2EA9 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2EBC JUMPI PUSH2 0x2EB9 DUP2 PUSH1 0x0 PUSH2 0x2B72 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0x1E0447B19BB6ECFDAE1E4AE1694B0C3659614E4E SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2EEB DUP5 PUSH2 0x3201 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2EF9 DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP3 POP PUSH2 0x934 DUP4 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x298D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x184A JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x184A JUMPI PUSH2 0x184A PUSH2 0x2A2F PUSH1 0x0 DUP7 DUP7 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP4 PUSH2 0x2F60 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x3433 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3464 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2F85 JUMPI PUSH2 0x2F85 PUSH2 0x2A2F PUSH1 0x2 DUP6 DUP6 PUSH2 0x3414 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F9B DUP3 PUSH2 0x140 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FBC JUMPI POP PUSH1 0xC0 DUP3 ADD MLOAD ISZERO DUP1 PUSH2 0x2FBC JUMPI POP PUSH2 0x2FBC DUP3 PUSH2 0x180 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD1 JUMPI POP PUSH2 0x2FD1 DUP3 PUSH2 0x160 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x881 JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD ISZERO DUP1 PUSH2 0x881 JUMPI POP PUSH2 0x881 DUP3 PUSH2 0x1A0 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 ADD MLOAD DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD PUSH1 0x60 SWAP8 DUP9 ADD MLOAD DUP7 MLOAD SWAP7 DUP6 ADD SWAP7 SWAP1 SWAP7 KECCAK256 DUP3 MLOAD PUSH32 0xEC69816980A3A3CA4554410E60253953E9FF375BA4536A98ADFA15CC71541508 DUP2 MSTORE SWAP5 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x30C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DF7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x313F JUMPI PUSH2 0x313F PUSH2 0x2A2F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x30A7 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x160 DUP3 ADD MLOAD PUSH2 0x180 DUP4 ADD MLOAD PUSH2 0x1A0 DUP5 ADD MLOAD PUSH1 0x0 SWAP4 PUSH32 0xF80322EB8376AAFB64EADF8F0D7623F22130FD9491A221E902B713CB984A7534 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP8 LT ISZERO PUSH2 0x3194 JUMPI INVALID JUMPDEST PUSH1 0x1F NOT DUP8 ADD DUP1 MLOAD PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x160 DUP12 ADD DUP1 MLOAD PUSH2 0x180 DUP14 ADD DUP1 MLOAD PUSH2 0x1A0 DUP16 ADD DUP1 MLOAD SWAP14 DUP10 MSTORE DUP13 MLOAD PUSH1 0x20 SWAP14 DUP15 ADD KECCAK256 DUP8 MSTORE DUP12 MLOAD SWAP12 DUP14 ADD SWAP12 SWAP1 SWAP12 KECCAK256 DUP5 MSTORE DUP10 MLOAD SWAP10 DUP13 ADD SWAP10 SWAP1 SWAP10 KECCAK256 DUP2 MSTORE DUP8 MLOAD SWAP8 SWAP1 SWAP11 ADD SWAP7 SWAP1 SWAP7 KECCAK256 DUP9 MSTORE PUSH2 0x1E0 DUP6 KECCAK256 SWAP4 SWAP1 SWAP5 MSTORE SWAP1 MSTORE SWAP2 SWAP1 MSTORE SWAP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH2 0x140 ADD MLOAD MLOAD LT ISZERO PUSH2 0x321E JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1525 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3237 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x33E4 JUMPI PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x750BDB3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x750BDB30 SWAP2 PUSH2 0x32C2 SWAP2 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x32EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3316 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP PUSH1 0x6 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 AND EQ ISZERO SWAP2 POP PUSH2 0x33E2 SWAP1 POP JUMPI PUSH20 0x0 PUSH4 0xD12A7960 DUP7 PUSH2 0x3357 PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3374 SWAP3 SWAP2 SWAP1 PUSH2 0x4EDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x338C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x33A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x33C4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST PUSH2 0x33D7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x1525 JUMP JUMPDEST POP JUMPDEST PUSH2 0x33F7 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x140 ADD MLOAD PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x340A DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x30C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3442 JUMPI POP PUSH1 0x0 PUSH2 0x6CD JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x344F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x184A JUMPI PUSH2 0x184A PUSH2 0x2A2F PUSH1 0x1 DUP7 DUP7 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x347A JUMPI PUSH2 0x347A PUSH2 0x2A2F PUSH1 0x3 DUP6 DUP6 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3485 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD DUP2 PUSH2 0x349B JUMPI INVALID JUMPDEST MOD PUSH1 0x4 EQ PUSH2 0x34AB JUMPI POP PUSH1 0x0 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34BD DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x34FA JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBBB2DCF600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xBBB2DCF6 SWAP1 PUSH2 0x354D SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x3579 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x35A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP2 DUP2 EQ PUSH2 0x3637 JUMPI PUSH1 0x0 PUSH2 0x35DD PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x35C7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A0E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x362E JUMPI PUSH2 0x361B DUP5 DUP4 PUSH2 0x3643 JUMP JUMPDEST ISZERO PUSH2 0x362E JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x884 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x35AD JUMP JUMPDEST POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x368E DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3664 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3678 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2F09 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x369E JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x6CD JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x364D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x6CD DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x6CD DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3701 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST PUSH2 0x4F3B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 CALLDATALOAD PUSH2 0x3738 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3725 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x375A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3768 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x3790 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3778 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x37CD PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x37F5 DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x381A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3828 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x3850 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x39DC JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3875 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3883 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x38A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38A7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x38E1 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3905 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3949 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3957 PUSH2 0x36FC DUP3 PUSH2 0x4F82 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x396E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3997 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x39A5 PUSH2 0x36FC DUP3 PUSH2 0x4F82 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x39BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1490 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4FA6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39EF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x39F8 DUP2 PUSH2 0x4F3B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3A05 DUP4 DUP4 PUSH2 0x36C8 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3A14 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3A26 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3A38 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AA6 DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ACE DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AF6 DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1F DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B3E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3B47 DUP2 PUSH2 0x4F3B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3B54 DUP4 DUP4 PUSH2 0x36D3 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3B63 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3B75 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3B87 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3BE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BF5 DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C1D DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C45 DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1F DUP6 DUP3 DUP7 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x184A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C9C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3CA7 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CC2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x374A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3CED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3CF8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D14 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D20 DUP9 DUP4 DUP10 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D35 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D41 DUP9 DUP4 DUP10 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D56 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3939 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D81 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3D8C DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DA7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3DC7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3DD2 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DED JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3DF9 DUP7 DUP3 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E27 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E46 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E5C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x36DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E90 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3EA1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x3EB1 PUSH2 0x36FC DUP4 PUSH2 0x4F62 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x3ECD JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x3EF7 JUMPI PUSH2 0x3EE3 DUP10 DUP3 PUSH2 0x39CD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x3ED1 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F17 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3F2E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F3A DUP8 DUP4 DUP9 ADD PUSH2 0x380A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3F4F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F5B DUP8 DUP4 DUP9 ADD PUSH2 0x36DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3F70 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3F7D DUP7 DUP3 DUP8 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F99 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FB0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3FBC DUP7 DUP4 DUP8 ADD PUSH2 0x380A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3FD1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x374A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3FF0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4007 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3FBC DUP7 DUP4 DUP8 ADD PUSH2 0x3865 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4024 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x184A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4044 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x184A DUP4 DUP4 PUSH2 0x3921 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4060 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x406A DUP5 DUP5 PUSH2 0x3921 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x407A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x409A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x40A5 DUP2 PUSH2 0x4FEB JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x40B6 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x40C7 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40E3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4106 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4110 DUP8 DUP8 PUSH2 0x3921 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x4120 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x413D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4149 DUP10 DUP4 DUP11 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x415E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x416A DUP10 DUP4 DUP11 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x417F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x418C DUP9 DUP3 DUP10 ADD PUSH2 0x3987 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x41AE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x41B8 DUP7 DUP7 PUSH2 0x3921 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x41C8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41E4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x41F0 DUP8 DUP3 DUP9 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP4 SWAP7 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4215 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x421F DUP6 DUP6 PUSH2 0x3921 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x422F DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4255 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4260 DUP2 PUSH2 0x4FEB JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x427D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4289 DUP8 DUP4 DUP9 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x429E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3F7D DUP7 DUP3 DUP8 ADD PUSH2 0x37AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42BC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42D2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4305 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4322 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x184A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x433E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x184A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4361 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4378 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4384 DUP9 DUP4 DUP10 ADD PUSH2 0x3987 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x439A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP9 ADD DUP10 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x43AB JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x43BB PUSH2 0x36FC DUP4 PUSH2 0x4F62 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x43F0 JUMPI PUSH2 0x43DE DUP15 DUP10 DUP5 MLOAD DUP9 ADD ADD PUSH2 0x3B2B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x43C7 JUMP JUMPDEST POP POP PUSH1 0x40 DUP12 ADD MLOAD SWAP1 SWAP9 POP SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x440B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4417 DUP9 DUP4 DUP10 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x442C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x37AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x444A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4454 PUSH1 0x60 PUSH2 0x4F3B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x4462 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4495 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44AB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x44B7 DUP7 DUP3 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44EB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4502 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x450E DUP7 DUP4 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4523 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4544 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x455A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4566 DUP7 DUP3 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x457E DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x459D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45B4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD PUSH1 0xA0 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x45C6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x45D0 PUSH1 0xA0 PUSH2 0x4F3B JUMP JUMPDEST SWAP3 POP DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x45F7 DUP9 PUSH1 0x60 DUP4 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x460D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4619 DUP10 DUP3 DUP5 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE POP SWAP2 SWAP5 POP POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4638 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x36C8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4652 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4676 DUP4 DUP4 PUSH2 0x4748 JUMP JUMPDEST POP POP PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP DUP1 DUP2 DUP4 MUL DUP5 ADD ADD DUP2 DUP7 ADD DUP6 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x46D4 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP10 MSTORE PUSH2 0x46C2 DUP4 DUP4 MLOAD PUSH2 0x471C JUMP JUMPDEST SWAP9 DUP5 ADD SWAP9 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46A6 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4712 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46F4 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4734 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4FA6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x4754 JUMPI INVALID JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x477B DUP5 DUP5 MLOAD PUSH2 0x467E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x478D PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x47A0 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x47B3 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x480C DUP4 DUP8 ADD DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x4829 DUP3 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x4845 DUP4 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x4862 DUP3 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x487E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4FA6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 MSTORE PUSH1 0x20 PUSH1 0x80 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x4900 DUP2 DUP6 PUSH2 0x4C01 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4939 JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x4927 DUP4 DUP4 MLOAD PUSH2 0x476B JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x490F JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x4954 DUP4 DUP3 PUSH2 0x4C01 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x497E JUMPI PUSH2 0x4970 DUP6 DUP4 MLOAD PUSH2 0x4659 JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x495D JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4994 DUP2 DUP6 PUSH2 0x46E1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x49C1 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x49D3 DUP2 DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x49E5 DUP2 DUP7 PUSH2 0x471C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4A13 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE PUSH1 0x80 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4A46 PUSH1 0x80 DUP5 ADD DUP8 PUSH2 0x476B JUMP JUMPDEST SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4AB3 JUMPI DUP4 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4A9F JUMPI INVALID JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4A8B JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD PUSH2 0x4AD5 DUP2 DUP5 PUSH2 0x4C01 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP3 POP DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B01 JUMPI PUSH2 0x4AF3 DUP5 DUP4 MLOAD PUSH2 0x466A JUMP JUMPDEST SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4AE0 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x4B15 DUP2 DUP8 PUSH2 0x46E1 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP4 ADD SWAP2 POP DUP3 DUP7 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4B4B JUMPI DUP3 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B2D JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x46E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4B7F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4BCD JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4BBB DUP4 DUP4 MLOAD PUSH2 0x471C JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4B9F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4BEF PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190D DUP2 DUP6 PUSH2 0x46E1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4862 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4CB0 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4CC2 DUP2 DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x4CD4 DUP2 DUP7 PUSH2 0x471C JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4D13 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4D72 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4862 DUP2 DUP6 PUSH2 0x468B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x4DAA PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x4DE3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x4DE3 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x4E13 JUMPI INVALID JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x4E2C PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E7A JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4E68 DUP4 DUP4 MLOAD PUSH2 0x476B JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E4C JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x4E8E DUP2 DUP11 PUSH2 0x46E1 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4994 DUP2 DUP6 PUSH2 0x468B JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x4EB4 DUP3 DUP7 PUSH2 0x4748 JUMP JUMPDEST DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x476B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4EF0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x476B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4F1B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x476B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190D DUP2 DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4F5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4F78 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4F98 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4FC1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4FA9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xAE DUP10 0x25 GASPRICE DUP16 0xDB 0xD4 SHR 0x2A 0xB0 0xDD REVERT 0x22 MSTORE ORIGIN 0xC8 SWAP2 INVALID SMOD 0xCD SWAP3 0xB0 MUL NUMBER 0x4D PUSH27 0x8204ADF1F62B6C6578706572696D656E74616CF564736F6C634300 SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1145:1317:2:-;;;1287:333;8:9:-1;5:2;;;30:1;27;20:12;5:2;1287:333:2;;;;;;;;;;;;;;;;;;;;;1547:1;1351:27:0;;-1:-1:-1;;;;;;1351:27:0;;;-1:-1:-1;;;;;1351:27:0;;;;;;;;1388:17;:31;;;;;;;;;;1429:17;:31;;;;;;;;;;;;1490:78;;-1:-1:-1;;;1490:78:0;;1547:1:2;;1351:27:0;;1388:31;;1429;;1490:34;;:78;;-1:-1:-1;;;1525:42:0;1490:78;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1490:78:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1490:78:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1490:78:0;;;;;;;;;1470:17;:98;;-1:-1:-1;;;;;;1470:98:0;-1:-1:-1;;;;;1470:98:0;;;;;;1599:79;;-1:-1:-1;;;1599:79:0;;:34;;;;;;:79;;-1:-1:-1;;;1634:43:0;1599:79;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1599:79:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1599:79:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1599:79:0;;;;;;;;;1578:18;:100;;-1:-1:-1;;;;;;1578:100:0;-1:-1:-1;;;;;1578:100:0;;;;;;1710:81;;-1:-1:-1;;;1710:81:0;;:34;;;;;;:81;;-1:-1:-1;;;1745:45:0;1710:81;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1710:81:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1710:81:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1710:81:0;;;;;;;;;1688:19;:103;;-1:-1:-1;;;;;;1688:103:0;-1:-1:-1;;;;;1688:103:0;;;;;;1826:78;;-1:-1:-1;;;1826:78:0;;:34;;;;;;:78;;-1:-1:-1;;;1861:42:0;1826:78;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1826:78:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1826:78:0;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1826:78:0;;;;;;;;;1801:22;:103;;-1:-1:-1;;;;;;1801:103:0;-1:-1:-1;;;;;1801:103:0;;;;;;-1:-1:-1;;;1512:46:22;;;;-1:-1:-1;1512:97:22;;-1:-1:-1;1512:97:22;1577:32;1512:97;;;1569:4;1512:97;1477:132;;1649:182;1689:28;;;;;;;;;;;;;-1:-1:-1;;;1689:28:22;;;1731:31;;;;;;;;;;;;;-1:-1:-1;;;1731:31:22;;;1776:7;1797:24;1649:26;;;;;:182;;:::i;:::-;1619:27;:212;-1:-1:-1;1145:1317:2;;-1:-1:-1;;;;;1145:1317:2;1285:1263:43;1997:11;;1992:2;1982:13;;;1972:37;2069:14;;2051:16;;;2041:43;;;;2158:2;2152:9;;962:66;2213:26;;2259:15;;;2252:33;;;;2305:15;;;2298:36;;;;2366:2;2354:15;;2347:32;2411:3;2399:16;;2392:43;2505:3;2487:22;;;1285:1263::o;146:263:-1:-;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;1602:54;;1727:35;;1717:2;;-1:-1;;1766:12;1717:2;319:74;223:186;-1:-1;;;223:186;416:535;;;;565:2;553:9;544:7;540:23;536:32;533:2;;;-1:-1;;571:12;533:2;89:6;83:13;101:33;128:5;101:33;;;734:2;784:22;;83:13;623:74;;-1:-1;101:33;83:13;101:33;;;853:2;903:22;;83:13;742:74;;-1:-1;101:33;83:13;101:33;;;861:74;;;;527:424;;;;;;1075:209;-1:-1;;;;;;1450:78;;;;1027:36;;1191:2;1176:18;;1162:122;1668:117;-1:-1;;;;;1602:54;;1727:35;;1717:2;;1776:1;;1766:12;1717:2;1711:74;;;1145:1317:2;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibAssetData.sol": {
                        "LibAssetData": [
                            {
                                "length": 20,
                                "start": 1527
                            },
                            {
                                "length": 20,
                                "start": 1787
                            },
                            {
                                "length": 20,
                                "start": 2053
                            },
                            {
                                "length": 20,
                                "start": 2228
                            },
                            {
                                "length": 20,
                                "start": 2533
                            },
                            {
                                "length": 20,
                                "start": 3142
                            },
                            {
                                "length": 20,
                                "start": 3681
                            },
                            {
                                "length": 20,
                                "start": 4654
                            },
                            {
                                "length": 20,
                                "start": 4951
                            },
                            {
                                "length": 20,
                                "start": 5276
                            },
                            {
                                "length": 20,
                                "start": 5458
                            },
                            {
                                "length": 20,
                                "start": 6092
                            },
                            {
                                "length": 20,
                                "start": 6283
                            },
                            {
                                "length": 20,
                                "start": 6429
                            },
                            {
                                "length": 20,
                                "start": 6596
                            },
                            {
                                "length": 20,
                                "start": 6919
                            },
                            {
                                "length": 20,
                                "start": 7377
                            },
                            {
                                "length": 20,
                                "start": 8263
                            },
                            {
                                "length": 20,
                                "start": 8836
                            },
                            {
                                "length": 20,
                                "start": 9427
                            },
                            {
                                "length": 20,
                                "start": 9512
                            },
                            {
                                "length": 20,
                                "start": 12956
                            },
                            {
                                "length": 20,
                                "start": 13605
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibDydxBalance.sol": {
                        "LibDydxBalance": [
                            {
                                "length": 20,
                                "start": 9130
                            },
                            {
                                "length": 20,
                                "start": 13110
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibOrderTransferSimulation.sol": {
                        "LibOrderTransferSimulation": [
                            {
                                "length": 20,
                                "start": 2714
                            },
                            {
                                "length": 20,
                                "start": 5909
                            },
                            {
                                "length": 20,
                                "start": 9330
                            }
                        ]
                    },
                    "/Users/rickmorty/Documents/projects/0x/0x-monorepo/contracts/dev-utils/contracts/src/LibTransactionDecoder.sol": {
                        "LibTransactionDecoder": [
                            {
                                "length": 20,
                                "start": 2372
                            }
                        ]
                    }
                },
                "object": "0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063a5cd62ba11610160578063d186037f116100d8578063e4e6e7da1161008c578063ee18599711610071578063ee185997146105d8578063ef3bb097146105e0578063ff84e7cc146105e857610277565b8063e4e6e7da14610595578063e77286eb146105b657610277565b8063d3d862d1116100bd578063d3d862d114610540578063d469502814610553578063e25cabf71461057357610277565b8063d186037f1461051a578063d36379051461052d57610277565b8063bbb2dcf61161012f578063c82037ef11610114578063c82037ef146104dc578063ca49f47c146104e4578063d001c5dc1461050757610277565b8063bbb2dcf6146104b2578063c26cfecd146104d457610277565b8063a5cd62ba14610464578063a6627e9f14610484578063a7530f1214610497578063b43cffe11461049f57610277565b80637982653e116101f35780639baf2705116101c25780639eadc835116101a75780639eadc8351461041a578063a070cac81461043e578063a0901e511461045157610277565b80639baf2705146103fd5780639cd016051461041257610277565b80637982653e1461039657806379c9c426146103b65780637d727512146103c95780638f4ce479146103dc57610277565b80634dfdac201161024a57806363eb39921161022f57806363eb39921461033d5780636f83188e14610350578063750bdb301461037357610277565b80634dfdac20146102fd578063590aa8751461031d57610277565b806304a5618a1461027c5780630d7b7d76146102a75780632322cf76146102c857806346eb65cb146102e8575b600080fd5b61028f61028a3660046142ab565b6105f0565b60405161029e93929190614d24565b60405180910390f35b6102ba6102b5366004613d6f565b610689565b60405161029e929190614f2d565b6102db6102d6366004613d6f565b6106ab565b60405161029e9190614c01565b6102fb6102f63660046142ab565b6106d3565b005b61031061030b366004613c8a565b610757565b60405161029e9190614b59565b61033061032b366004613c6e565b6107da565b60405161029e9190614d84565b61033061034b366004613db3565b610889565b61036361035e3660046142ab565b61093c565b60405161029e9493929190614e19565b6103866103813660046142ab565b6109dc565b60405161029e9493929190614c42565b6103a96103a4366004614481565b610a6e565b60405161029e9190614e05565b6102db6103c4366004614589565b610b20565b6102db6103d7366004613d6f565b610ba1565b6103ef6103ea3660046142ab565b611497565b60405161029e929190614c1f565b61040561152a565b60405161029e9190614888565b610405611539565b61042d6104283660046142ab565b611548565b60405161029e959493929190614c7e565b6102db61044c366004614530565b6115ed565b61031061045f366004613e35565b61166e565b610477610472366004613f03565b6116e7565b60405161029e9190614a71565b610330610492366004613e0a565b6117a1565b610405611851565b6103306104ad366004613cd8565b611860565b6104c56104c03660046142ab565b611916565b60405161029e93929190614d4f565b6102db6119a6565b6104056119ac565b6104f76104f23660046142ab565b6119bb565b60405161029e9493929190614ce1565b610310610515366004613c8a565b611a4d565b6102db610528366004613d6f565b611abb565b6103a961053b366004614481565b612446565b61033061054e366004613fde565b6124a8565b6105666105613660046142ab565b6124fd565b60405161029e9190614c0a565b610586610581366004613f87565b6125a0565b60405161029e93929190614abe565b6105a86105a3366004613c8a565b6126d8565b60405161029e929190614bdc565b6105c96105c43660046144d9565b6126f1565b60405161029e93929190614ea6565b610405612960565b61040561296f565b61040561297e565b600080600073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a856040518263ffffffff1660e01b815260040161062c9190614d84565b60606040518083038186803b15801561064457600080fd5b505af4158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061067c9190810190614201565b9250925092509193909250565b6000806106968484610ba1565b91506106a28484611abb565b90509250929050565b60008060006106ba8585610689565b915091506106c8828261298d565b925050505b92915050565b6040517f46eb65cb00000000000000000000000000000000000000000000000000000000815273__$a2317ed4aecd4fd151d12b4b79c9600dfe$__906346eb65cb90610723908490600401614d84565b60006040518083038186803b15801561073b57600080fd5b505af415801561074f573d6000803e3d6000fd5b505050505b50565b606060008251905080604051908082528060200260200182016040528015610789578160200160208202803883390190505b50915060005b8181146107d2576107b3858583815181106107a657fe5b6020026020010151611abb565b8382815181106107bf57fe5b602090810291909101015260010161078f565b505092915050565b6040517f590aa87500000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063590aa8759061082d908590600401614888565b60006040518083038186803b15801561084557600080fd5b505af4158015610859573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088191908101906142de565b90505b919050565b6040517f63eb399200000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__906363eb3992906108e0908790879087906004016149f1565b60006040518083038186803b1580156108f857600080fd5b505af415801561090c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261093491908101906142de565b949350505050565b60608060608073__$2c940629c908ac1511eec301572a689fa1$__636f83188e866040518263ffffffff1660e01b81526004016109799190614d84565b60006040518083038186803b15801561099157600080fd5b505af41580156109a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd919081019061434c565b93509350935093509193509193565b6000806000606073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b8152600401610a1a9190614d84565b60006040518083038186803b158015610a3257600080fd5b505af4158015610a46573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd9190810190614085565b600080546040517f9caa023b00000000000000000000000000000000000000000000000000000000815273__$35bb14ffe56b1143d5360c9efbaa220574$__91639caa023b91610ad0916001600160a01b031690889088908890600401614a23565b60206040518083038186803b158015610ae857600080fd5b505af4158015610afc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610934919081019061432d565b600061093484610b9c6040518060400160405280600b81526020017f30782050726f746f636f6c0000000000000000000000000000000000000000008152506040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525087876129a3565b6129fa565b600080610bb4838263ffffffff612a0e16565b90506001600160e01b031981167ff47261b0000000000000000000000000000000000000000000000000000000001415610c0f576000610bfb84601063ffffffff612a4716565b9050610c078186612a7a565b925050611490565b6001600160e01b031981167f02571792000000000000000000000000000000000000000000000000000000001415610e285760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a866040518263ffffffff1660e01b8152600401610c7b9190614d84565b60606040518083038186803b158015610c9357600080fd5b505af4158015610ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ccb9190810190614201565b6040519194509250606091507f6352211e0000000000000000000000000000000000000000000000000000000090610d07908490602401614c01565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060846001600160a01b031683604051610d82919061486c565b600060405180830381855afa9150503d8060008114610dbd576040519150601f19603f3d011682016040523d82523d6000602084013e610dc2565b606091505b50915091506000828015610dd7575081516020145b610de2576000610df3565b610df382600c63ffffffff612a4716565b9050896001600160a01b0316816001600160a01b031614610e15576000610e18565b60015b60ff169750505050505050611490565b6001600160e01b031981167fa7cb5fb70000000000000000000000000000000000000000000000000000000014156110c457600060608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__639eadc835876040518263ffffffff1660e01b8152600401610e969190614d84565b60006040518083038186803b158015610eae57600080fd5b505af4158015610ec2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610eea91908101906140ef565b5081519296509094509250905060005b8181146110ba57828181518110610f0d57fe5b602002602001015160001415610f22576110b2565b83516060907efdd58e00000000000000000000000000000000000000000000000000000000908b90879085908110610f5657fe5b6020026020010151604051602401610f6f929190614a58565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060876001600160a01b031683604051610fea919061486c565b600060405180830381855afa9150503d8060008114611025576040519150601f19603f3d011682016040523d82523d6000602084013e61102a565b606091505b5091509150600082801561103f575081516020145b61104a57600061105b565b61105b82600063ffffffff612b7216565b9050600087868151811061106b57fe5b6020026020010151828161107b57fe5b049050806110975760009b5050505050505050505050506106cd565b8b8110806110a357508b155b156110ac57809b505b50505050505b600101610efa565b5050505050611490565b6001600160e01b031981167fc339d10a0000000000000000000000000000000000000000000000000000000014156111f7576040516060907fa85e59e4000000000000000000000000000000000000000000000000000000009061113390869060009081908190602401614d97565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199094169390931790925260045491519092506000916001600160a01b03169061119a90849061486c565b600060405180830381855afa9150503d80600081146111d5576040519150601f19603f3d011682016040523d82523d6000602084013e6111da565b606091505b50509050806111ea5760006111ee565b6000195b93505050611490565b6001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156113205760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b81526004016112639190614d84565b60006040518083038186803b15801561127b57600080fd5b505af415801561128f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112b79190810190614085565b5092509250506112c5612b7e565b6001600160a01b0316826001600160a01b03161480156112f257506005546001600160a01b038281169116145b1561131957600061130a611304612b96565b88612a7a565b905061131581612bae565b9450505b5050611490565b6001600160e01b031981167f94cfcdd70000000000000000000000000000000000000000000000000000000014156114905760608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6866040518263ffffffff1660e01b815260040161138c9190614d84565b60006040518083038186803b1580156113a457600080fd5b505af41580156113b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e09190810190614241565b80519194509250905060005b81811461148b578381815181106113ff57fe5b60200260200101516000141561141457611483565b60006114338985848151811061142657fe5b6020026020010151610ba1565b9050600085838151811061144357fe5b6020026020010151828161145357fe5b0490508061146b5760009750505050505050506106cd565b87811080611477575087155b15611480578097505b50505b6001016113ec565b505050505b5092915050565b60008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__638f4ce479846040518263ffffffff1660e01b81526004016114d19190614d84565b604080518083038186803b1580156114e857600080fd5b505af41580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611520919081019061404e565b915091505b915091565b6004546001600160a01b031681565b6000546001600160a01b031681565b600080606080606073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__639eadc835876040518263ffffffff1660e01b81526004016115879190614d84565b60006040518083038186803b15801561159f57600080fd5b505af41580156115b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115db91908101906140ef565b939a9299509097509550909350915050565b6000610934846116696040518060400160405280600b81526020017f30782050726f746f636f6c0000000000000000000000000000000000000000008152506040518060400160405280600581526020017f332e302e3000000000000000000000000000000000000000000000000000000081525087876129a3565b612dac565b606080825160405190808252806020026020018201604052801561169c578160200160208202803883390190505b50905060005b83518114611490578381815181106116b657fe5b60200260200101516001600160a01b0316318282815181106116d457fe5b60209081029190910101526001016116a2565b6000546040517f02cffc4500000000000000000000000000000000000000000000000000000000815260609173__$35bb14ffe56b1143d5360c9efbaa220574$__916302cffc459161174d916001600160a01b03909116908890889088906004016148d9565b60006040518083038186803b15801561176557600080fd5b505af4158015611779573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109349190810190613e68565b6040517fa6627e9f00000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063a6627e9f906117f69086908690600401614a58565b60006040518083038186803b15801561180e57600080fd5b505af4158015611822573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261184a91908101906142de565b9392505050565b6006546001600160a01b031681565b6040517fb43cffe100000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063b43cffe1906118b990889088908890889060040161499f565b60006040518083038186803b1580156118d157600080fd5b505af41580156118e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261190d91908101906142de565b95945050505050565b600060608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6856040518263ffffffff1660e01b81526004016119529190614d84565b60006040518083038186803b15801561196a57600080fd5b505af415801561197e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067c9190810190614241565b60075481565b6005546001600160a01b031681565b6000806060600073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63ca49f47c866040518263ffffffff1660e01b81526004016119f99190614d84565b60006040518083038186803b158015611a1157600080fd5b505af4158015611a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cd9190810190614199565b606060008251905080604051908082528060200260200182016040528015611a7f578160200160208202803883390190505b50915060005b8181146107d257611a9c8585838151811061142657fe5b838281518110611aa857fe5b6020908102919091010152600101611a85565b600080611ace838263ffffffff612a0e16565b90506001600160e01b031981167f94cfcdd7000000000000000000000000000000000000000000000000000000001415611c395760608073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63bbb2dcf6866040518263ffffffff1660e01b8152600401611b3c9190614d84565b60006040518083038186803b158015611b5457600080fd5b505af4158015611b68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b909190810190614241565b80519194509250905060005b818114611c2e57838181518110611baf57fe5b602002602001015160001415611bc457611c26565b6000611bd6898584815181106107a657fe5b90506000858381518110611be657fe5b60200260200101518281611bf657fe5b04905080611c0e5760009750505050505050506106cd565b87811080611c1a575087155b15611c23578097505b50505b600101611b9c565b506106cd9350505050565b6001600160e01b031981167ff47261b0000000000000000000000000000000000000000000000000000000001415611c9a576000611c7e84601063ffffffff612a4716565b600154909150610c0790829087906001600160a01b0316612dbb565b6001600160e01b031981167f02571792000000000000000000000000000000000000000000000000000000001415611fea5760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__6304a5618a866040518263ffffffff1660e01b8152600401611d069190614d84565b60606040518083038186803b158015611d1e57600080fd5b505af4158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d569190810190614201565b600254604051929550909350606092507fe985e9c50000000000000000000000000000000000000000000000000000000091611da2918a916001600160a01b039091169060240161489c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060846001600160a01b031683604051611e1d919061486c565b600060405180830381855afa9150503d8060008114611e58576040519150601f19603f3d011682016040523d82523d6000602084013e611e5d565b606091505b5091509150811580611e7157508051602014155b80611e8d5750611e8881600063ffffffff612b7216565b600114155b15611fdb576040516060907f081812fc0000000000000000000000000000000000000000000000000000000090611ec8908790602401614c01565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050856001600160a01b031681604051611f3f919061486c565b600060405180830381855afa9150503d8060008114611f7a576040519150601f19603f3d011682016040523d82523d6000602084013e611f7f565b606091505b509093509150828015611f93575081516020145b8015611fc257506002546001600160a01b0316611fb783600c63ffffffff612a4716565b6001600160a01b0316145b611fcd576000611fd0565b60015b60ff169750506110ba565b60001996505050505050611490565b6001600160e01b031981167fa7cb5fb7000000000000000000000000000000000000000000000000000000001415612211576040517f9eadc83500000000000000000000000000000000000000000000000000000000815260009073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__90639eadc8359061206f908790600401614d84565b60006040518083038186803b15801561208757600080fd5b505af415801561209b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120c391908101906140ef565b5050600354604051929450606093507fe985e9c5000000000000000000000000000000000000000000000000000000009261210d925089916001600160a01b03169060240161489c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060006060836001600160a01b031683604051612188919061486c565b600060405180830381855afa9150503d80600081146121c3576040519150601f19603f3d011682016040523d82523d6000602084013e6121c8565b606091505b50915091508180156121db575080516020145b80156121f757506121f381600063ffffffff612b7216565b6001145b612202576000612206565b6000195b955050505050611490565b6001600160e01b031981167fc339d10a00000000000000000000000000000000000000000000000000000000141561224d576000199150611490565b6001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156114905760008073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__63750bdb30866040518263ffffffff1660e01b81526004016122b99190614d84565b60006040518083038186803b1580156122d157600080fd5b505af41580156122e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230d9190810190614085565b50925092505061231b612b7e565b6001600160a01b0316826001600160a01b031614801561234857506005546001600160a01b038281169116145b1561239257600061236d61235a612b96565b60055489906001600160a01b0316612dbb565b905060001981146123865761238181612bae565b61238a565b6000195b94505061243d565b6006546001600160a01b038281169116141561243d5773__$9b2d7ef2247de471c5cb1425c931cdd0e4$__630e70a03387836123cc612ec5565b6040518463ffffffff1660e01b81526004016123ea939291906148b6565b60206040518083038186803b15801561240257600080fd5b505af4158015612416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061243a9190810190614641565b93505b50505092915050565b600080546040517f8dccde0400000000000000000000000000000000000000000000000000000000815273__$35bb14ffe56b1143d5360c9efbaa220574$__91638dccde0491610ad0916001600160a01b031690889088908890600401614a23565b6040517fd3d862d100000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063d3d862d1906117f69086908690600401614b6c565b6040517fd469502800000000000000000000000000000000000000000000000000000000815260009073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063d469502890612550908590600401614d84565b60206040518083038186803b15801561256857600080fd5b505af415801561257c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506108819190810190614033565b6060806060600085519050806040519080825280602002602001820160405280156125e557816020015b6125d26136a6565b8152602001906001900390816125ca5790505b50935080604051908082528060200260200182016040528015612612578160200160208202803883390190505b5092508060405190808252806020026020018201604052801561263f578160200160208202803883390190505b50915060005b8181146126cf5761267c87828151811061265b57fe5b602002602001015187838151811061266f57fe5b60200260200101516126f1565b875188908590811061268a57fe5b6020026020010187858151811061269d57fe5b602002602001018786815181106126b057fe5b9315156020948502919091019093019290925291905252600101612645565b50509250925092565b6060806126e58484611a4d565b91506106a28484610757565b6126f96136a6565b600080546040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815282916001600160a01b031690639d3fa4b990612743908890600401614eca565b60606040518083038186803b15801561275b57600080fd5b505afa15801561276f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506127939190810190614439565b85516000546040517fa12dcc6f00000000000000000000000000000000000000000000000000000000815292955090916001600160a01b039091169063a12dcc6f906127e59089908990600401614f08565b60206040518083038186803b1580156127fd57600080fd5b505afa158015612811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128359190810190614013565b9150600061284287612edd565b90506000612863886101800151896101400151612f0990919063ffffffff16565b1561289857612891826128878a60c001518b60800151612f2e90919063ffffffff16565b8a60a00151612f4a565b9050612905565b60c08801516128b4576128918289608001518a60a00151612f4a565b60006128c5848a61018001516106ab565b905060006128dc848b608001518c60a00151612f4a565b905060006128f3838c60c001518d60a00151612f4a565b90506128ff828261298d565b93505050505b61292961292387604001518a60a00151612f6c90919063ffffffff16565b8261298d565b945061293488612f8b565b61293d57600094505b60038651600681111561294c57fe5b1461295657600094505b5050509250925092565b6001546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b600081831061299c578161184a565b5090919050565b8351602094850120835193850193909320604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815295860194909452928401929092526060830152608082015260a0902090565b600061184a82612a0985612ff2565b61306d565b60008160040183511015612a3457612a34612a2f60038551856004016130a7565b613116565b5001602001516001600160e01b03191690565b60008160140183511015612a6857612a68612a2f60048551856014016130a7565b5001601401516001600160a01b031690565b60405160009081906060906001600160a01b038616907f70a082310000000000000000000000000000000000000000000000000000000090612ac0908790602401614888565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612b13919061486c565b600060405180830381855afa9150503d8060008114612b4e576040519150601f19603f3d011682016040523d82523d6000602084013e612b53565b606091505b5091509150818015612b66575080516020145b156107d2576106c88160005b600061184a838361311e565b736b175474e89094c44da98b954eedeac495271d0f90565b7306af07097c9eeb7fd685c692751d5c66db49c21590565b600080612bb9612b96565b6001600160a01b0316634ba2363a6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612bf357600080fd5b505af1158015612c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612c2b9190810190614311565b90506000816001600160a01b03166320aba08b6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c6a57600080fd5b505af1158015612c7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ca29190810190614641565b4211612d2057816001600160a01b031663c92aecc46040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d1b9190810190614641565b612d93565b816001600160a01b0316639f678cca6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612d5b57600080fd5b505af1158015612d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d939190810190614641565b9050610934816b033b2e3c9fd0803ce800000086612f4a565b600061184a82612a0985613148565b60405160009081906060906001600160a01b038716907fdd62ed3e0000000000000000000000000000000000000000000000000000000090612e03908890889060240161489c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612e56919061486c565b600060405180830381855afa9150503d8060008114612e91576040519150601f19603f3d011682016040523d82523d6000602084013e612e96565b606091505b5091509150818015612ea9575080516020145b15612ebc57612eb9816000612b72565b92505b50509392505050565b731e0447b19bb6ecfdae1e4ae1694b0c3659614e4e90565b6000806000612eeb84613201565b91509150612ef9828261298d565b925061093483856080015161298d565b60008151835114801561184a5750508051602091820120825192909101919091201490565b60008282018381101561184a5761184a612a2f60008686613414565b600061093483612f60868563ffffffff61343316565b9063ffffffff61346416565b600082821115612f8557612f85612a2f60028585613414565b50900390565b6000612f9b82610140015161348e565b8015612fbc575060c08201511580612fbc5750612fbc82610180015161348e565b8015612fd15750612fd182610160015161348e565b8015610881575060e082015115806108815750610881826101a0015161348e565b608081810151825160208085015160408087015160609788015186519685019690962082517fec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc7154150881529485019590955290830191909152948101949094526001600160a01b039091169183019190915260a082015260c0902090565b6040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6060632800659560e01b8484846040516024016130c693929190614df7565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6000816020018351101561313f5761313f612a2f60058551856020016130a7565b50016020015190565b6101408101516101608201516101808301516101a08401516000937ff80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a75349390929091602087101561319457fe5b601f1987018051610140890180516101608b0180516101808d0180516101a08f0180519d89528c5160209d8e012087528b519b8d019b909b2084528951998c01999099208152875197909a019690962088526101e085209390945290529190529252919091529050919050565b600080600483610140015151101561321e57506000905080611525565b610140830151600090613237908263ffffffff612a0e16565b90506001600160e01b031981167fdc1600f30000000000000000000000000000000000000000000000000000000014156133e4576101408401516040517f750bdb3000000000000000000000000000000000000000000000000000000000815260009173__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9163750bdb30916132c291600401614d84565b60006040518083038186803b1580156132da57600080fd5b505af41580156132ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526133169190810190614085565b506006549093506001600160a01b038085169116141591506133e290505773__$9b2d7ef2247de471c5cb1425c931cdd0e4$__63d12a796086613357612ec5565b6040518363ffffffff1660e01b8152600401613374929190614edd565b60206040518083038186803b15801561338c57600080fd5b505af41580156133a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506133c49190810190614641565b6133d78660000151876101400151611abb565b935093505050611525565b505b6133f78460000151856101400151610ba1565b61340a8560000151866101400151611abb565b9250925050915091565b606063e946c1bb60e01b8484846040516024016130c693929190614dd5565b600082613442575060006106cd565b8282028284828161344f57fe5b041461184a5761184a612a2f60018686613414565b60008161347a5761347a612a2f60038585613414565b600082848161348557fe5b04949350505050565b6000602082518161349b57fe5b066004146134ab57506000610884565b60006134bd838263ffffffff612a0e16565b90506001600160e01b031981167f94cfcdd700000000000000000000000000000000000000000000000000000000146134fa576001915050610884565b6040517fbbb2dcf600000000000000000000000000000000000000000000000000000000815260609073__$a2317ed4aecd4fd151d12b4b79c9600dfe$__9063bbb2dcf69061354d908790600401614d84565b60006040518083038186803b15801561356557600080fd5b505af4158015613579573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526135a19190810190614241565b80519093509150600090505b8181146136375760006135dd60008584815181106135c757fe5b6020026020010151612a0e90919063ffffffff16565b90506001600160e01b031981167f0257179200000000000000000000000000000000000000000000000000000000141561362e5761361b8483613643565b1561362e57600095505050505050610884565b506001016135ad565b50600195945050505050565b8151600090600183015b818110156107d25761368e85828151811061366457fe5b602002602001015186868151811061367857fe5b6020026020010151612f0990919063ffffffff16565b1561369e576001925050506106cd565b60010161364d565b6040805160608101909152806000815260006020820181905260409091015290565b80356106cd81614fd6565b80516106cd81614fd6565b600082601f8301126136ee578081fd5b81356137016136fc82614f62565b614f3b565b81815291506020808301908481018184028601820187101561372257600080fd5b60005b8481101561148b57813561373881614fd6565b84529282019290820190600101613725565b600082601f83011261375a578081fd5b81356137686136fc82614f62565b8181529150602080830190840160005b838110156137a5576137908760208435890101613939565b83526020928301929190910190600101613778565b5050505092915050565b600082601f8301126137bf578081fd5b81516137cd6136fc82614f62565b8181529150602080830190840160005b838110156137a5576137f58760208451890101613987565b835260209283019291909101906001016137dd565b600082601f83011261381a578081fd5b81356138286136fc82614f62565b8181529150602080830190840160005b838110156137a55761385087602084358901016139dc565b83526020928301929190910190600101613838565b600082601f830112613875578081fd5b81356138836136fc82614f62565b8181529150602080830190848101818402860182018710156138a457600080fd5b60005b8481101561148b578135845292820192908201906001016138a7565b600082601f8301126138d3578081fd5b81516138e16136fc82614f62565b81815291506020808301908481018184028601820187101561390257600080fd5b60005b8481101561148b57815184529282019290820190600101613905565b80516001600160e01b0319811681146106cd57600080fd5b600082601f830112613949578081fd5b81356139576136fc82614f82565b915080825283602082850101111561396e57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112613997578081fd5b81516139a56136fc82614f82565b91508082528360208285010111156139bc57600080fd5b611490816020840160208601614fa6565b8051600581106106cd57600080fd5b60006101c08083850312156139ef578182fd5b6139f881614f3b565b915050613a0583836136c8565b8152613a1483602084016136c8565b6020820152613a2683604084016136c8565b6040820152613a3883606084016136c8565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff80821115613a9a57600080fd5b613aa686838701613939565b83850152610160925082850135915080821115613ac257600080fd5b613ace86838701613939565b83850152610180925082850135915080821115613aea57600080fd5b613af686838701613939565b838501526101a0925082850135915080821115613b1257600080fd5b50613b1f85828601613939565b82840152505092915050565b60006101c0808385031215613b3e578182fd5b613b4781614f3b565b915050613b5483836136d3565b8152613b6383602084016136d3565b6020820152613b7583604084016136d3565b6040820152613b8783606084016136d3565b60608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015167ffffffffffffffff80821115613be957600080fd5b613bf586838701613987565b83850152610160925082850151915080821115613c1157600080fd5b613c1d86838701613987565b83850152610180925082850151915080821115613c3957600080fd5b613c4586838701613987565b838501526101a0925082850151915080821115613c6157600080fd5b50613b1f85828601613987565b600060208284031215613c7f578081fd5b813561184a81614fd6565b60008060408385031215613c9c578081fd5b8235613ca781614fd6565b9150602083013567ffffffffffffffff811115613cc2578182fd5b613cce8582860161374a565b9150509250929050565b60008060008060808587031215613ced578182fd5b8435613cf881614fd6565b9350602085013567ffffffffffffffff80821115613d14578384fd5b613d2088838901613865565b94506040870135915080821115613d35578384fd5b613d4188838901613865565b93506060870135915080821115613d56578283fd5b50613d6387828801613939565b91505092959194509250565b60008060408385031215613d81578182fd5b8235613d8c81614fd6565b9150602083013567ffffffffffffffff811115613da7578182fd5b613cce85828601613939565b600080600060608486031215613dc7578081fd5b8335613dd281614fd6565b9250602084013567ffffffffffffffff811115613ded578182fd5b613df986828701613939565b925050604084013590509250925092565b60008060408385031215613e1c578182fd5b8235613e2781614fd6565b946020939093013593505050565b600060208284031215613e46578081fd5b813567ffffffffffffffff811115613e5c578182fd5b610934848285016136de565b60006020808385031215613e7a578182fd5b825167ffffffffffffffff811115613e90578283fd5b80840185601f820112613ea1578384fd5b80519150613eb16136fc83614f62565b8281528381019082850185850284018601891015613ecd578687fd5b8693505b84841015613ef757613ee389826139cd565b835260019390930192918501918501613ed1565b50979650505050505050565b600080600060608486031215613f17578081fd5b833567ffffffffffffffff80821115613f2e578283fd5b613f3a8783880161380a565b94506020860135915080821115613f4f578283fd5b613f5b878388016136de565b93506040860135915080821115613f70578283fd5b50613f7d86828701613865565b9150509250925092565b60008060408385031215613f99578182fd5b823567ffffffffffffffff80821115613fb0578384fd5b613fbc8683870161380a565b93506020850135915080821115613fd1578283fd5b50613cce8582860161374a565b60008060408385031215613ff0578182fd5b823567ffffffffffffffff80821115614007578384fd5b613fbc86838701613865565b600060208284031215614024578081fd5b8151801515811461184a578182fd5b600060208284031215614044578081fd5b61184a8383613921565b60008060408385031215614060578182fd5b61406a8484613921565b9150602083015161407a81614fd6565b809150509250929050565b6000806000806080858703121561409a578182fd5b84516140a581614feb565b60208601519094506140b681614fd6565b60408601519093506140c781614fd6565b606086015190925067ffffffffffffffff8111156140e3578182fd5b613d6387828801613987565b600080600080600060a08688031215614106578283fd5b6141108787613921565b9450602086015161412081614fd6565b604087015190945067ffffffffffffffff8082111561413d578485fd5b61414989838a016138c3565b9450606088015191508082111561415e578283fd5b61416a89838a016138c3565b9350608088015191508082111561417f578283fd5b5061418c88828901613987565b9150509295509295909350565b600080600080608085870312156141ae578182fd5b6141b88686613921565b935060208501516141c881614fd6565b604086015190935067ffffffffffffffff8111156141e4578283fd5b6141f087828801613987565b606096909601519497939650505050565b600080600060608486031215614215578081fd5b61421f8585613921565b9250602084015161422f81614fd6565b80925050604084015190509250925092565b600080600060608486031215614255578081fd5b835161426081614feb565b602085015190935067ffffffffffffffff8082111561427d578283fd5b614289878388016138c3565b9350604086015191508082111561429e578283fd5b50613f7d868287016137af565b6000602082840312156142bc578081fd5b813567ffffffffffffffff8111156142d2578182fd5b61093484828501613939565b6000602082840312156142ef578081fd5b815167ffffffffffffffff811115614305578182fd5b61093484828501613987565b600060208284031215614322578081fd5b815161184a81614fd6565b60006020828403121561433e578081fd5b81516005811061184a578182fd5b60008060008060808587031215614361578182fd5b845167ffffffffffffffff80821115614378578384fd5b61438488838901613987565b955060209150818701518181111561439a578485fd5b80880189601f8201126143ab578586fd5b805191506143bb6136fc83614f62565b82815284810190828601885b858110156143f0576143de8e898451880101613b2b565b845292870192908701906001016143c7565b505060408b015190985094505050508082111561440b578384fd5b614417888389016138c3565b9350606087015191508082111561442c578283fd5b50613d63878288016137af565b60006060828403121561444a578081fd5b6144546060614f3b565b825160078110614462578283fd5b8152602083810151908201526040928301519281019290925250919050565b600080600060608486031215614495578081fd5b833567ffffffffffffffff8111156144ab578182fd5b6144b7868287016139dc565b93505060208401356144c881614fd6565b929592945050506040919091013590565b600080604083850312156144eb578182fd5b823567ffffffffffffffff80821115614502578384fd5b61450e868387016139dc565b93506020850135915080821115614523578283fd5b50613cce85828601613939565b600080600060608486031215614544578081fd5b833567ffffffffffffffff81111561455a578182fd5b614566868287016139dc565b93505060208401359150604084013561457e81614fd6565b809150509250925092565b60008060006060848603121561459d578081fd5b833567ffffffffffffffff808211156145b4578283fd5b81860160a081890312156145c6578384fd5b6145d060a0614f3b565b92508035835260208101356020840152604081013560408401526145f788606083016136c8565b606084015260808101358281111561460d578485fd5b61461989828401613939565b60808501525091945050506020840135915061463885604086016136c8565b90509250925092565b600060208284031215614652578081fd5b5051919050565b6001600160a01b0316815260200190565b60006146768383614748565b505060600190565b6001600160a01b03169052565b60008282518085526020808601955080818302840101818601855b848110156146d457601f198684030189526146c283835161471c565b988401989250908301906001016146a6565b5090979650505050505050565b6000815180845260208401935060208301825b828110156147125781518652602095860195909101906001016146f4565b5093949350505050565b60008151808452614734816020860160208601614fa6565b601f01601f19169290920160200192915050565b80516007811061475457fe5b825260208181015190830152604090810151910152565b60006101c061477b84845161467e565b602083015161478d602086018261467e565b5060408301516147a0604086018261467e565b5060608301516147b3606086018261467e565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261480c8387018261471c565b91505061016091508184015185820383870152614829828261471c565b925050506101808084015185830382870152614845838261471c565b9150506101a091508184015185820383870152614862828261471c565b9695505050505050565b6000825161487e818460208701614fa6565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6000608082016001600160a01b038716835260206080818501528187516149008185614c01565b91508193508281028201838a01865b8381101561493957868303855261492783835161476b565b9486019492509085019060010161490f565b50508681036040880152809450885192506149548382614c01565b94505050818701845b8281101561497e57614970858351614659565b94509083019060010161495d565b50505050828103606084015261499481856146e1565b979650505050505050565b60006001600160a01b0386168252608060208301526149c160808301866146e1565b82810360408401526149d381866146e1565b83810360608501526149e5818661471c565b98975050505050505050565b60006001600160a01b038516825260606020830152614a13606083018561471c565b9050826040830152949350505050565b60006001600160a01b03808716835260806020840152614a46608084018761476b565b94166040830152506060015292915050565b6001600160a01b03929092168252602082015260400190565b602080825282518282018190526000918401906040840190835b81811015614ab357835160058110614a9f57fe5b835260209384019390920191600101614a8b565b509095945050505050565b60006060820160608352808651614ad58184614c01565b915060209250828801845b82811015614b0157614af384835161466a565b935090840190600101614ae0565b50505083810382850152614b1581876146e1565b84810360408601528551808252908301915082860190845b81811015614b4b578251151584529284019291840191600101614b2d565b509198975050505050505050565b60006020825261184a60208301846146e1565b600060408252614b7f60408301856146e1565b602083820381850152818551808452828401915082838202850101838801865b83811015614bcd57601f19878403018552614bbb83835161471c565b94860194925090850190600101614b9f565b50909998505050505050505050565b600060408252614bef60408301856146e1565b828103602084015261190d81856146e1565b90815260200190565b6001600160e01b031991909116815260200190565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b60006001600160e01b0319861682526001600160a01b03808616602084015280851660408401525060806060830152614862608083018461471c565b60006001600160e01b0319871682526001600160a01b038616602083015260a06040830152614cb060a08301866146e1565b8281036060840152614cc281866146e1565b8381036080850152614cd4818661471c565b9998505050505050505050565b60006001600160e01b0319861682526001600160a01b038516602083015260806040830152614d13608083018561471c565b905082606083015295945050505050565b6001600160e01b03199390931683526001600160a01b03919091166020830152604082015260600190565b60006001600160e01b03198516825260606020830152614d7260608301856146e1565b8281036040840152614862818561468b565b60006020825261184a602083018461471c565b600060808252614daa608083018761471c565b6001600160a01b03958616602084015293909416604082015260ff9190911660609091015292915050565b6060810160048510614de357fe5b938152602081019290925260409091015290565b6060810160088510614de357fe5b6020810160058310614e1357fe5b91905290565b600060808252614e2c608083018761471c565b602083820381850152818751808452828401915082838202850101838a01865b83811015614e7a57601f19878403018552614e6883835161476b565b94860194925090850190600101614e4c565b50508681036040880152614e8e818a6146e1565b9450505050508281036060840152614994818561468b565b60a08101614eb48286614748565b8360608301528215156080830152949350505050565b60006020825261184a602083018461476b565b600060408252614ef0604083018561476b565b90506001600160a01b03831660208301529392505050565b600060408252614f1b604083018561476b565b828103602084015261190d818561471c565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715614f5a57600080fd5b604052919050565b600067ffffffffffffffff821115614f78578081fd5b5060209081020190565b600067ffffffffffffffff821115614f98578081fd5b50601f01601f191660200190565b60005b83811015614fc1578181015183820152602001614fa9565b83811115614fd0576000848401525b50505050565b6001600160a01b038116811461075457600080fd5b6001600160e01b03198116811461075457600080fdfea365627a7a72315820ae89253a8fdbd41c2ab0ddfd225232c891fe07cd92b002434d7a8204adf1f62b6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x277 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA5CD62BA GT PUSH2 0x160 JUMPI DUP1 PUSH4 0xD186037F GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xE4E6E7DA GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEE185997 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xEE185997 EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xEF3BB097 EQ PUSH2 0x5E0 JUMPI DUP1 PUSH4 0xFF84E7CC EQ PUSH2 0x5E8 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xE4E6E7DA EQ PUSH2 0x595 JUMPI DUP1 PUSH4 0xE77286EB EQ PUSH2 0x5B6 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xD3D862D1 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD3D862D1 EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0xD4695028 EQ PUSH2 0x553 JUMPI DUP1 PUSH4 0xE25CABF7 EQ PUSH2 0x573 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xD186037F EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xD3637905 EQ PUSH2 0x52D JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0xC82037EF GT PUSH2 0x114 JUMPI DUP1 PUSH4 0xC82037EF EQ PUSH2 0x4DC JUMPI DUP1 PUSH4 0xCA49F47C EQ PUSH2 0x4E4 JUMPI DUP1 PUSH4 0xD001C5DC EQ PUSH2 0x507 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xBBB2DCF6 EQ PUSH2 0x4B2 JUMPI DUP1 PUSH4 0xC26CFECD EQ PUSH2 0x4D4 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0xA5CD62BA EQ PUSH2 0x464 JUMPI DUP1 PUSH4 0xA6627E9F EQ PUSH2 0x484 JUMPI DUP1 PUSH4 0xA7530F12 EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0xB43CFFE1 EQ PUSH2 0x49F JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x7982653E GT PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x9BAF2705 GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x9EADC835 GT PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x9EADC835 EQ PUSH2 0x41A JUMPI DUP1 PUSH4 0xA070CAC8 EQ PUSH2 0x43E JUMPI DUP1 PUSH4 0xA0901E51 EQ PUSH2 0x451 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x9BAF2705 EQ PUSH2 0x3FD JUMPI DUP1 PUSH4 0x9CD01605 EQ PUSH2 0x412 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x7982653E EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0x79C9C426 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x7D727512 EQ PUSH2 0x3C9 JUMPI DUP1 PUSH4 0x8F4CE479 EQ PUSH2 0x3DC JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4DFDAC20 GT PUSH2 0x24A JUMPI DUP1 PUSH4 0x63EB3992 GT PUSH2 0x22F JUMPI DUP1 PUSH4 0x63EB3992 EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x6F83188E EQ PUSH2 0x350 JUMPI DUP1 PUSH4 0x750BDB30 EQ PUSH2 0x373 JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4DFDAC20 EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x590AA875 EQ PUSH2 0x31D JUMPI PUSH2 0x277 JUMP JUMPDEST DUP1 PUSH4 0x4A5618A EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0xD7B7D76 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0x2322CF76 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x46EB65CB EQ PUSH2 0x2E8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x28F PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x5F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D24 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2BA PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x689 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4F2D JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x6AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4C01 JUMP JUMPDEST PUSH2 0x2FB PUSH2 0x2F6 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x6D3 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x310 PUSH2 0x30B CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x757 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4B59 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x3C6E JUMP JUMPDEST PUSH2 0x7DA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x34B CALLDATASIZE PUSH1 0x4 PUSH2 0x3DB3 JUMP JUMPDEST PUSH2 0x889 JUMP JUMPDEST PUSH2 0x363 PUSH2 0x35E CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x93C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4E19 JUMP JUMPDEST PUSH2 0x386 PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x9DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C42 JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x3A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4481 JUMP JUMPDEST PUSH2 0xA6E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4E05 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x3C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x4589 JUMP JUMPDEST PUSH2 0xB20 JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x3D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x3EF PUSH2 0x3EA CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1497 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4C1F JUMP JUMPDEST PUSH2 0x405 PUSH2 0x152A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4888 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x1539 JUMP JUMPDEST PUSH2 0x42D PUSH2 0x428 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1548 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4C7E JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x44C CALLDATASIZE PUSH1 0x4 PUSH2 0x4530 JUMP JUMPDEST PUSH2 0x15ED JUMP JUMPDEST PUSH2 0x310 PUSH2 0x45F CALLDATASIZE PUSH1 0x4 PUSH2 0x3E35 JUMP JUMPDEST PUSH2 0x166E JUMP JUMPDEST PUSH2 0x477 PUSH2 0x472 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F03 JUMP JUMPDEST PUSH2 0x16E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4A71 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x492 CALLDATASIZE PUSH1 0x4 PUSH2 0x3E0A JUMP JUMPDEST PUSH2 0x17A1 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x1851 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x4AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3CD8 JUMP JUMPDEST PUSH2 0x1860 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x4C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x1916 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4D4F JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x19A6 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x19AC JUMP JUMPDEST PUSH2 0x4F7 PUSH2 0x4F2 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x19BB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4CE1 JUMP JUMPDEST PUSH2 0x310 PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x1A4D JUMP JUMPDEST PUSH2 0x2DB PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x3D6F JUMP JUMPDEST PUSH2 0x1ABB JUMP JUMPDEST PUSH2 0x3A9 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x4481 JUMP JUMPDEST PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x54E CALLDATASIZE PUSH1 0x4 PUSH2 0x3FDE JUMP JUMPDEST PUSH2 0x24A8 JUMP JUMPDEST PUSH2 0x566 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x42AB JUMP JUMPDEST PUSH2 0x24FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP2 SWAP1 PUSH2 0x4C0A JUMP JUMPDEST PUSH2 0x586 PUSH2 0x581 CALLDATASIZE PUSH1 0x4 PUSH2 0x3F87 JUMP JUMPDEST PUSH2 0x25A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4ABE JUMP JUMPDEST PUSH2 0x5A8 PUSH2 0x5A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x26D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP3 SWAP2 SWAP1 PUSH2 0x4BDC JUMP JUMPDEST PUSH2 0x5C9 PUSH2 0x5C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x44D9 JUMP JUMPDEST PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x29E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4EA6 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x2960 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x296F JUMP JUMPDEST PUSH2 0x405 PUSH2 0x297E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH20 0x0 PUSH4 0x4A5618A DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x67C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x696 DUP5 DUP5 PUSH2 0xBA1 JUMP JUMPDEST SWAP2 POP PUSH2 0x6A2 DUP5 DUP5 PUSH2 0x1ABB JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x6BA DUP6 DUP6 PUSH2 0x689 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6C8 DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x46EB65CB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x46EB65CB SWAP1 PUSH2 0x723 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x73B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x74F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x789 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH2 0x7B3 DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7BF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x78F JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x590AA87500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x590AA875 SWAP1 PUSH2 0x82D SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4888 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x845 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x859 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x881 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x63EB399200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x63EB3992 SWAP1 PUSH2 0x8E0 SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x49F1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x90C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0x6F83188E DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x979 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x991 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x9A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x434C JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA1A SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xA46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9CAA023B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x9CAA023B SWAP2 PUSH2 0xAD0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A23 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAE8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xAFC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x432D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP5 PUSH2 0xB9C PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP8 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x29FA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBB4 DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xC0F JUMPI PUSH1 0x0 PUSH2 0xBFB DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST SWAP1 POP PUSH2 0xC07 DUP2 DUP7 PUSH2 0x2A7A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x4A5618A DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC7B SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xCA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xCCB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x60 SWAP2 POP PUSH32 0x6352211E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xD07 SWAP1 DUP5 SWAP1 PUSH1 0x24 ADD PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xDBD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDC2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0xDD7 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0xDE2 JUMPI PUSH1 0x0 PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0xDF3 DUP3 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xE15 JUMPI PUSH1 0x0 PUSH2 0xE18 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x10C4 JUMPI PUSH1 0x0 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0x9EADC835 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE96 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xEC2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xEEA SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST POP DUP2 MLOAD SWAP3 SWAP7 POP SWAP1 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x10BA JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xF0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF22 JUMPI PUSH2 0x10B2 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x60 SWAP1 PUSH31 0xFDD58E00000000000000000000000000000000000000000000000000000000 SWAP1 DUP12 SWAP1 DUP8 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0xF56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xF6F SWAP3 SWAP2 SWAP1 PUSH2 0x4A58 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xFEA SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x102A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 DUP1 ISZERO PUSH2 0x103F JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST PUSH2 0x104A JUMPI PUSH1 0x0 PUSH2 0x105B JUMP JUMPDEST PUSH2 0x105B DUP3 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x106B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x107B JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x1097 JUMPI PUSH1 0x0 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP12 DUP2 LT DUP1 PUSH2 0x10A3 JUMPI POP DUP12 ISZERO JUMPDEST ISZERO PUSH2 0x10AC JUMPI DUP1 SWAP12 POP JUMPDEST POP POP POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xEFA JUMP JUMPDEST POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xC339D10A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x11F7 JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA85E59E400000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1133 SWAP1 DUP7 SWAP1 PUSH1 0x0 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 0x24 ADD PUSH2 0x4D97 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE PUSH1 0x4 SLOAD SWAP2 MLOAD SWAP1 SWAP3 POP PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x119A SWAP1 DUP5 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x11D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x11DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x11EA JUMPI PUSH1 0x0 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP4 POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1320 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1263 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x127B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x128F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x12B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP POP PUSH2 0x12C5 PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x12F2 JUMPI POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x1319 JUMPI PUSH1 0x0 PUSH2 0x130A PUSH2 0x1304 PUSH2 0x2B96 JUMP JUMPDEST DUP9 PUSH2 0x2A7A JUMP JUMPDEST SWAP1 POP PUSH2 0x1315 DUP2 PUSH2 0x2BAE JUMP JUMPDEST SWAP5 POP POP JUMPDEST POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x138C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x13E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x148B JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x13FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1414 JUMPI PUSH2 0x1483 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1433 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1426 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xBA1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1443 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1453 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x146B JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP8 DUP2 LT DUP1 PUSH2 0x1477 JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x1480 JUMPI DUP1 SWAP8 POP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x13EC JUMP JUMPDEST POP POP POP POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x8F4CE479 DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14D1 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14FC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1520 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x404E JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP1 PUSH1 0x60 PUSH20 0x0 PUSH4 0x9EADC835 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1587 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x159F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x15DB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST SWAP4 SWAP11 SWAP3 SWAP10 POP SWAP1 SWAP8 POP SWAP6 POP SWAP1 SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP5 PUSH2 0x1669 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xB DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x30782050726F746F636F6C000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x332E302E30000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP8 DUP8 PUSH2 0x29A3 JUMP JUMPDEST PUSH2 0x2DAC JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x169C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1490 JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x16B6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x16D4 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x16A2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x2CFFC4500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x2CFFC45 SWAP2 PUSH2 0x174D SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x48D9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1779 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x934 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x3E68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA6627E9F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xA6627E9F SWAP1 PUSH2 0x17F6 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A58 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x180E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1822 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x184A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xB43CFFE100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xB43CFFE1 SWAP1 PUSH2 0x18B9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x499F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x18E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x190D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x42DE JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1952 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x196A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x197E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x67C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH1 0x0 PUSH20 0x0 PUSH4 0xCA49F47C DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x19F9 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1A25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x9CD SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4199 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP3 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A7F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x7D2 JUMPI PUSH2 0x1A9C DUP6 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1426 JUMPI INVALID JUMPDEST DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1AA8 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1A85 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1ACE DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x60 DUP1 PUSH20 0x0 PUSH4 0xBBB2DCF6 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B3C SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1B68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1B90 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1C2E JUMPI DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1BAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BC4 JUMPI PUSH2 0x1C26 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1BD6 DUP10 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7A6 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1BE6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP2 PUSH2 0x1BF6 JUMPI INVALID JUMPDEST DIV SWAP1 POP DUP1 PUSH2 0x1C0E JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6CD JUMP JUMPDEST DUP8 DUP2 LT DUP1 PUSH2 0x1C1A JUMPI POP DUP8 ISZERO JUMPDEST ISZERO PUSH2 0x1C23 JUMPI DUP1 SWAP8 POP JUMPDEST POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B9C JUMP JUMPDEST POP PUSH2 0x6CD SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1C9A JUMPI PUSH1 0x0 PUSH2 0x1C7E DUP5 PUSH1 0x10 PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP2 POP PUSH2 0xC07 SWAP1 DUP3 SWAP1 DUP8 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1FEA JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x4A5618A DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D06 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D32 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1D56 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4201 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP6 POP SWAP1 SWAP4 POP PUSH1 0x60 SWAP3 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP2 PUSH2 0x1DA2 SWAP2 DUP11 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1E1D SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E58 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E5D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO DUP1 PUSH2 0x1E71 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ ISZERO JUMPDEST DUP1 PUSH2 0x1E8D JUMPI POP PUSH2 0x1E88 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST PUSH1 0x1 EQ ISZERO JUMPDEST ISZERO PUSH2 0x1FDB JUMPI PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x81812FC00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x1EC8 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4C01 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x40 MLOAD PUSH2 0x1F3F SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F7A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F7F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP4 POP SWAP2 POP DUP3 DUP1 ISZERO PUSH2 0x1F93 JUMPI POP DUP2 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x1FC2 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1FB7 DUP4 PUSH1 0xC PUSH4 0xFFFFFFFF PUSH2 0x2A47 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ JUMPDEST PUSH2 0x1FCD JUMPI PUSH1 0x0 PUSH2 0x1FD0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND SWAP8 POP POP PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x0 NOT SWAP7 POP POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xA7CB5FB700000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x2211 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9EADC83500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x9EADC835 SWAP1 PUSH2 0x206F SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2087 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x209B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x20C3 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x40EF JUMP JUMPDEST POP POP PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP3 SWAP5 POP PUSH1 0x60 SWAP4 POP PUSH32 0xE985E9C500000000000000000000000000000000000000000000000000000000 SWAP3 PUSH2 0x210D SWAP3 POP DUP10 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2188 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x21C3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21C8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x21DB JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST DUP1 ISZERO PUSH2 0x21F7 JUMPI POP PUSH2 0x21F3 DUP2 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x2B72 AND JUMP JUMPDEST PUSH1 0x1 EQ JUMPDEST PUSH2 0x2202 JUMPI PUSH1 0x0 PUSH2 0x2206 JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP6 POP POP POP POP POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xC339D10A00000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x224D JUMPI PUSH1 0x0 NOT SWAP2 POP PUSH2 0x1490 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x1490 JUMPI PUSH1 0x0 DUP1 PUSH20 0x0 PUSH4 0x750BDB30 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x22B9 SWAP2 SWAP1 PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x230D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP SWAP3 POP SWAP3 POP POP PUSH2 0x231B PUSH2 0x2B7E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 ISZERO PUSH2 0x2348 JUMPI POP PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2392 JUMPI PUSH1 0x0 PUSH2 0x236D PUSH2 0x235A PUSH2 0x2B96 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP10 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2DBB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x2386 JUMPI PUSH2 0x2381 DUP2 PUSH2 0x2BAE JUMP JUMPDEST PUSH2 0x238A JUMP JUMPDEST PUSH1 0x0 NOT JUMPDEST SWAP5 POP POP PUSH2 0x243D JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x243D JUMPI PUSH20 0x0 PUSH4 0xE70A033 DUP8 DUP4 PUSH2 0x23CC PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x23EA SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x48B6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2416 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x243A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST SWAP4 POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x8DCCDE0400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x8DCCDE04 SWAP2 PUSH2 0xAD0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4A23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD3D862D100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD3D862D1 SWAP1 PUSH2 0x17F6 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x4B6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD469502800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xD4695028 SWAP1 PUSH2 0x2550 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x257C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x881 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4033 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH1 0x0 DUP6 MLOAD SWAP1 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25E5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x25D2 PUSH2 0x36A6 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x25CA JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2612 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP1 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x263F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x26CF JUMPI PUSH2 0x267C DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x265B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x266F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x26F1 JUMP JUMPDEST DUP8 MLOAD DUP9 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 0x268A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x269D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x26B0 JUMPI INVALID JUMPDEST SWAP4 ISZERO ISZERO PUSH1 0x20 SWAP5 DUP6 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 SWAP1 MSTORE MSTORE PUSH1 0x1 ADD PUSH2 0x2645 JUMP JUMPDEST POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x26E5 DUP5 DUP5 PUSH2 0x1A4D JUMP JUMPDEST SWAP2 POP PUSH2 0x6A2 DUP5 DUP5 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x26F9 PUSH2 0x36A6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0x2743 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x4ECA JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x275B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x276F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2793 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4439 JUMP JUMPDEST DUP6 MLOAD PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA12DCC6F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP6 POP SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xA12DCC6F SWAP1 PUSH2 0x27E5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x4F08 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2811 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2835 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4013 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x2842 DUP8 PUSH2 0x2EDD JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2863 DUP9 PUSH2 0x180 ADD MLOAD DUP10 PUSH2 0x140 ADD MLOAD PUSH2 0x2F09 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x2898 JUMPI PUSH2 0x2891 DUP3 PUSH2 0x2887 DUP11 PUSH1 0xC0 ADD MLOAD DUP12 PUSH1 0x80 ADD MLOAD PUSH2 0x2F2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xC0 DUP9 ADD MLOAD PUSH2 0x28B4 JUMPI PUSH2 0x2891 DUP3 DUP10 PUSH1 0x80 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28C5 DUP5 DUP11 PUSH2 0x180 ADD MLOAD PUSH2 0x6AB JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28DC DUP5 DUP12 PUSH1 0x80 ADD MLOAD DUP13 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x28F3 DUP4 DUP13 PUSH1 0xC0 ADD MLOAD DUP14 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F4A JUMP JUMPDEST SWAP1 POP PUSH2 0x28FF DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST PUSH2 0x2929 PUSH2 0x2923 DUP8 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x2F6C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP5 POP PUSH2 0x2934 DUP9 PUSH2 0x2F8B JUMP JUMPDEST PUSH2 0x293D JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST PUSH1 0x3 DUP7 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x294C JUMPI INVALID JUMPDEST EQ PUSH2 0x2956 JUMPI PUSH1 0x0 SWAP5 POP JUMPDEST POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x299C JUMPI DUP2 PUSH2 0x184A JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST DUP4 MLOAD PUSH1 0x20 SWAP5 DUP6 ADD KECCAK256 DUP4 MLOAD SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 KECCAK256 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F DUP2 MSTORE SWAP6 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP3 PUSH2 0x2A09 DUP6 PUSH2 0x2FF2 JUMP JUMPDEST PUSH2 0x306D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2A34 JUMPI PUSH2 0x2A34 PUSH2 0x2A2F PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x30A7 JUMP JUMPDEST PUSH2 0x3116 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x2A68 JUMPI PUSH2 0x2A68 PUSH2 0x2A2F PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x30A7 JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2AC0 SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x4888 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B13 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2B4E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2B53 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2B66 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x6C8 DUP2 PUSH1 0x0 JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP4 DUP4 PUSH2 0x311E JUMP JUMPDEST PUSH20 0x6B175474E89094C44DA98B954EEDEAC495271D0F SWAP1 JUMP JUMPDEST PUSH20 0x6AF07097C9EEB7FD685C692751D5C66DB49C215 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BB9 PUSH2 0x2B96 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x4BA2363A PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2BF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C07 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2C2B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4311 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x20ABA08B PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2C7E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2CA2 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST TIMESTAMP GT PUSH2 0x2D20 JUMPI DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC92AECC4 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2CE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2CF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2D1B SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST PUSH2 0x2D93 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9F678CCA PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D5B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2D6F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x2D93 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST SWAP1 POP PUSH2 0x934 DUP2 PUSH12 0x33B2E3C9FD0803CE8000000 DUP7 PUSH2 0x2F4A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x184A DUP3 PUSH2 0x2A09 DUP6 PUSH2 0x3148 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x2E03 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x24 ADD PUSH2 0x489C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2E56 SWAP2 SWAP1 PUSH2 0x486C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E91 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E96 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x2EA9 JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x2EBC JUMPI PUSH2 0x2EB9 DUP2 PUSH1 0x0 PUSH2 0x2B72 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0x1E0447B19BB6ECFDAE1E4AE1694B0C3659614E4E SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2EEB DUP5 PUSH2 0x3201 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2EF9 DUP3 DUP3 PUSH2 0x298D JUMP JUMPDEST SWAP3 POP PUSH2 0x934 DUP4 DUP6 PUSH1 0x80 ADD MLOAD PUSH2 0x298D JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MLOAD EQ DUP1 ISZERO PUSH2 0x184A JUMPI POP POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP3 MLOAD SWAP3 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x184A JUMPI PUSH2 0x184A PUSH2 0x2A2F PUSH1 0x0 DUP7 DUP7 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x934 DUP4 PUSH2 0x2F60 DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x3433 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x3464 AND JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x2F85 JUMPI PUSH2 0x2F85 PUSH2 0x2A2F PUSH1 0x2 DUP6 DUP6 PUSH2 0x3414 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F9B DUP3 PUSH2 0x140 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FBC JUMPI POP PUSH1 0xC0 DUP3 ADD MLOAD ISZERO DUP1 PUSH2 0x2FBC JUMPI POP PUSH2 0x2FBC DUP3 PUSH2 0x180 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2FD1 JUMPI POP PUSH2 0x2FD1 DUP3 PUSH2 0x160 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST DUP1 ISZERO PUSH2 0x881 JUMPI POP PUSH1 0xE0 DUP3 ADD MLOAD ISZERO DUP1 PUSH2 0x881 JUMPI POP PUSH2 0x881 DUP3 PUSH2 0x1A0 ADD MLOAD PUSH2 0x348E JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 ADD MLOAD DUP3 MLOAD PUSH1 0x20 DUP1 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD PUSH1 0x60 SWAP8 DUP9 ADD MLOAD DUP7 MLOAD SWAP7 DUP6 ADD SWAP7 SWAP1 SWAP7 KECCAK256 DUP3 MLOAD PUSH32 0xEC69816980A3A3CA4554410E60253953E9FF375BA4536A98ADFA15CC71541508 DUP2 MSTORE SWAP5 DUP6 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x30C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DF7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x313F JUMPI PUSH2 0x313F PUSH2 0x2A2F PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x30A7 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x140 DUP2 ADD MLOAD PUSH2 0x160 DUP3 ADD MLOAD PUSH2 0x180 DUP4 ADD MLOAD PUSH2 0x1A0 DUP5 ADD MLOAD PUSH1 0x0 SWAP4 PUSH32 0xF80322EB8376AAFB64EADF8F0D7623F22130FD9491A221E902B713CB984A7534 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 0x20 DUP8 LT ISZERO PUSH2 0x3194 JUMPI INVALID JUMPDEST PUSH1 0x1F NOT DUP8 ADD DUP1 MLOAD PUSH2 0x140 DUP10 ADD DUP1 MLOAD PUSH2 0x160 DUP12 ADD DUP1 MLOAD PUSH2 0x180 DUP14 ADD DUP1 MLOAD PUSH2 0x1A0 DUP16 ADD DUP1 MLOAD SWAP14 DUP10 MSTORE DUP13 MLOAD PUSH1 0x20 SWAP14 DUP15 ADD KECCAK256 DUP8 MSTORE DUP12 MLOAD SWAP12 DUP14 ADD SWAP12 SWAP1 SWAP12 KECCAK256 DUP5 MSTORE DUP10 MLOAD SWAP10 DUP13 ADD SWAP10 SWAP1 SWAP10 KECCAK256 DUP2 MSTORE DUP8 MLOAD SWAP8 SWAP1 SWAP11 ADD SWAP7 SWAP1 SWAP7 KECCAK256 DUP9 MSTORE PUSH2 0x1E0 DUP6 KECCAK256 SWAP4 SWAP1 SWAP5 MSTORE SWAP1 MSTORE SWAP2 SWAP1 MSTORE SWAP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP4 PUSH2 0x140 ADD MLOAD MLOAD LT ISZERO PUSH2 0x321E JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0x1525 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MLOAD PUSH1 0x0 SWAP1 PUSH2 0x3237 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x33E4 JUMPI PUSH2 0x140 DUP5 ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0x750BDB3000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH20 0x0 SWAP2 PUSH4 0x750BDB30 SWAP2 PUSH2 0x32C2 SWAP2 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x32EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3316 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4085 JUMP JUMPDEST POP PUSH1 0x6 SLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND SWAP2 AND EQ ISZERO SWAP2 POP PUSH2 0x33E2 SWAP1 POP JUMPI PUSH20 0x0 PUSH4 0xD12A7960 DUP7 PUSH2 0x3357 PUSH2 0x2EC5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3374 SWAP3 SWAP2 SWAP1 PUSH2 0x4EDD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x338C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x33A0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x33C4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4641 JUMP JUMPDEST PUSH2 0x33D7 DUP7 PUSH1 0x0 ADD MLOAD DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST SWAP4 POP SWAP4 POP POP POP PUSH2 0x1525 JUMP JUMPDEST POP JUMPDEST PUSH2 0x33F7 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x140 ADD MLOAD PUSH2 0xBA1 JUMP JUMPDEST PUSH2 0x340A DUP6 PUSH1 0x0 ADD MLOAD DUP7 PUSH2 0x140 ADD MLOAD PUSH2 0x1ABB JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x30C6 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4DD5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3442 JUMPI POP PUSH1 0x0 PUSH2 0x6CD JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x344F JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x184A JUMPI PUSH2 0x184A PUSH2 0x2A2F PUSH1 0x1 DUP7 DUP7 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x347A JUMPI PUSH2 0x347A PUSH2 0x2A2F PUSH1 0x3 DUP6 DUP6 PUSH2 0x3414 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x3485 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MLOAD DUP2 PUSH2 0x349B JUMPI INVALID JUMPDEST MOD PUSH1 0x4 EQ PUSH2 0x34AB JUMPI POP PUSH1 0x0 PUSH2 0x884 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x34BD DUP4 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x2A0E AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x94CFCDD700000000000000000000000000000000000000000000000000000000 EQ PUSH2 0x34FA JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBBB2DCF600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x60 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xBBB2DCF6 SWAP1 PUSH2 0x354D SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x4D84 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x3579 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x35A1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x4241 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST DUP2 DUP2 EQ PUSH2 0x3637 JUMPI PUSH1 0x0 PUSH2 0x35DD PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x35C7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2A0E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH32 0x257179200000000000000000000000000000000000000000000000000000000 EQ ISZERO PUSH2 0x362E JUMPI PUSH2 0x361B DUP5 DUP4 PUSH2 0x3643 JUMP JUMPDEST ISZERO PUSH2 0x362E JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x884 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x35AD JUMP JUMPDEST POP PUSH1 0x1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 DUP4 ADD JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7D2 JUMPI PUSH2 0x368E DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3664 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3678 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2F09 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST ISZERO PUSH2 0x369E JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x6CD JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x364D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x6CD DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x6CD DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x36EE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3701 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST PUSH2 0x4F3B JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3722 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 CALLDATALOAD PUSH2 0x3738 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3725 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x375A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3768 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x3790 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3778 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x37BF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x37CD PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x37F5 DUP8 PUSH1 0x20 DUP5 MLOAD DUP10 ADD ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x37DD JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x381A JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3828 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37A5 JUMPI PUSH2 0x3850 DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x39DC JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3838 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3875 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3883 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x38A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x38A7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x38D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x38E1 PUSH2 0x36FC DUP3 PUSH2 0x4F62 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x3902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x148B JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x3905 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3949 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x3957 PUSH2 0x36FC DUP3 PUSH2 0x4F82 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x396E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x3997 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x39A5 PUSH2 0x36FC DUP3 PUSH2 0x4F82 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x39BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1490 DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4FA6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x6CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x39EF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x39F8 DUP2 PUSH2 0x4F3B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3A05 DUP4 DUP4 PUSH2 0x36C8 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3A14 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3A26 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3A38 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3A9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AA6 DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3ACE DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3AF6 DUP7 DUP4 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3B12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1F DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B3E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3B47 DUP2 PUSH2 0x4F3B JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3B54 DUP4 DUP4 PUSH2 0x36D3 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x3B63 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x3B75 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3B87 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x36D3 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD MLOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3BE9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BF5 DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C1D DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3C45 DUP7 DUP4 DUP8 ADD PUSH2 0x3987 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3C61 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3B1F DUP6 DUP3 DUP7 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x184A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3C9C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3CA7 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CC2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x374A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x3CED JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x3CF8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3D14 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D20 DUP9 DUP4 DUP10 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D35 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3D41 DUP9 DUP4 DUP10 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3D56 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3939 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3D81 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3D8C DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DA7 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3DC7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x3DD2 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3DED JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3DF9 DUP7 DUP3 DUP8 ADD PUSH2 0x3939 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E1C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x3E27 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E46 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E5C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x36DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3E7A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3E90 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3EA1 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x3EB1 PUSH2 0x36FC DUP4 PUSH2 0x4F62 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x3ECD JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0x3EF7 JUMPI PUSH2 0x3EE3 DUP10 DUP3 PUSH2 0x39CD JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x3ED1 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3F17 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3F2E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F3A DUP8 DUP4 DUP9 ADD PUSH2 0x380A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3F4F JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3F5B DUP8 DUP4 DUP9 ADD PUSH2 0x36DE JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3F70 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3F7D DUP7 DUP3 DUP8 ADD PUSH2 0x3865 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3F99 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3FB0 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3FBC DUP7 DUP4 DUP8 ADD PUSH2 0x380A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3FD1 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x374A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3FF0 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4007 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3FBC DUP7 DUP4 DUP8 ADD PUSH2 0x3865 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4024 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x184A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4044 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x184A DUP4 DUP4 PUSH2 0x3921 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x4060 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x406A DUP5 DUP5 PUSH2 0x3921 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x407A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x409A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x40A5 DUP2 PUSH2 0x4FEB JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x40B6 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x40C7 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x40E3 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x4106 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4110 DUP8 DUP8 PUSH2 0x3921 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD PUSH2 0x4120 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x413D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4149 DUP10 DUP4 DUP11 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x415E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x416A DUP10 DUP4 DUP11 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x417F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x418C DUP9 DUP3 DUP10 ADD PUSH2 0x3987 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x41AE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x41B8 DUP7 DUP7 PUSH2 0x3921 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD PUSH2 0x41C8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x41E4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x41F0 DUP8 DUP3 DUP9 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x60 SWAP7 SWAP1 SWAP7 ADD MLOAD SWAP5 SWAP8 SWAP4 SWAP7 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4215 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x421F DUP6 DUP6 PUSH2 0x3921 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x422F DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4255 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x4260 DUP2 PUSH2 0x4FEB JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x427D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4289 DUP8 DUP4 DUP9 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x429E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3F7D DUP7 DUP3 DUP8 ADD PUSH2 0x37AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42BC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x42D2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x42EF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x4305 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x934 DUP5 DUP3 DUP6 ADD PUSH2 0x3987 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4322 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x184A DUP2 PUSH2 0x4FD6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x433E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x184A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x4361 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4378 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4384 DUP9 DUP4 DUP10 ADD PUSH2 0x3987 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 SWAP2 POP DUP2 DUP8 ADD MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x439A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 DUP9 ADD DUP10 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x43AB JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0x43BB PUSH2 0x36FC DUP4 PUSH2 0x4F62 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP3 DUP7 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x43F0 JUMPI PUSH2 0x43DE DUP15 DUP10 DUP5 MLOAD DUP9 ADD ADD PUSH2 0x3B2B JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP8 ADD SWAP3 SWAP1 DUP8 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x43C7 JUMP JUMPDEST POP POP PUSH1 0x40 DUP12 ADD MLOAD SWAP1 SWAP9 POP SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x440B JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x4417 DUP9 DUP4 DUP10 ADD PUSH2 0x38C3 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x442C JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3D63 DUP8 DUP3 DUP9 ADD PUSH2 0x37AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x444A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x4454 PUSH1 0x60 PUSH2 0x4F3B JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x4462 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4495 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x44AB JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x44B7 DUP7 DUP3 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x44C8 DUP2 PUSH2 0x4FD6 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x44EB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x4502 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x450E DUP7 DUP4 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x4523 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3CCE DUP6 DUP3 DUP7 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x4544 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x455A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x4566 DUP7 DUP3 DUP8 ADD PUSH2 0x39DC JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x457E DUP2 PUSH2 0x4FD6 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x459D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x45B4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD PUSH1 0xA0 DUP2 DUP10 SUB SLT ISZERO PUSH2 0x45C6 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x45D0 PUSH1 0xA0 PUSH2 0x4F3B JUMP JUMPDEST SWAP3 POP DUP1 CALLDATALOAD DUP4 MSTORE PUSH1 0x20 DUP2 ADD CALLDATALOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP2 ADD CALLDATALOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x45F7 DUP9 PUSH1 0x60 DUP4 ADD PUSH2 0x36C8 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP2 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x460D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x4619 DUP10 DUP3 DUP5 ADD PUSH2 0x3939 JUMP JUMPDEST PUSH1 0x80 DUP6 ADD MSTORE POP SWAP2 SWAP5 POP POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x4638 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x36C8 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4652 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4676 DUP4 DUP4 PUSH2 0x4748 JUMP JUMPDEST POP POP PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MLOAD DUP1 DUP6 MSTORE PUSH1 0x20 DUP1 DUP7 ADD SWAP6 POP DUP1 DUP2 DUP4 MUL DUP5 ADD ADD DUP2 DUP7 ADD DUP6 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x46D4 JUMPI PUSH1 0x1F NOT DUP7 DUP5 SUB ADD DUP10 MSTORE PUSH2 0x46C2 DUP4 DUP4 MLOAD PUSH2 0x471C JUMP JUMPDEST SWAP9 DUP5 ADD SWAP9 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46A6 JUMP JUMPDEST POP SWAP1 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD DUP3 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4712 JUMPI DUP2 MLOAD DUP7 MSTORE PUSH1 0x20 SWAP6 DUP7 ADD SWAP6 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x46F4 JUMP JUMPDEST POP SWAP4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x4734 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x4FA6 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x4754 JUMPI INVALID JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x477B DUP5 DUP5 MLOAD PUSH2 0x467E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x478D PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x47A0 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x47B3 PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x467E JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x480C DUP4 DUP8 ADD DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x4829 DUP3 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x4845 DUP4 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x4862 DUP3 DUP3 PUSH2 0x471C JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x487E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x4FA6 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 MSTORE PUSH1 0x20 PUSH1 0x80 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x4900 DUP2 DUP6 PUSH2 0x4C01 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4939 JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x4927 DUP4 DUP4 MLOAD PUSH2 0x476B JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x490F JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x4954 DUP4 DUP3 PUSH2 0x4C01 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x497E JUMPI PUSH2 0x4970 DUP6 DUP4 MLOAD PUSH2 0x4659 JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x495D JUMP JUMPDEST POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4994 DUP2 DUP6 PUSH2 0x46E1 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x80 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x49C1 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x49D3 DUP2 DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x49E5 DUP2 DUP7 PUSH2 0x471C JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4A13 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND DUP4 MSTORE PUSH1 0x80 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x4A46 PUSH1 0x80 DUP5 ADD DUP8 PUSH2 0x476B JUMP JUMPDEST SWAP5 AND PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4AB3 JUMPI DUP4 MLOAD PUSH1 0x5 DUP2 LT PUSH2 0x4A9F JUMPI INVALID JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4A8B JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD PUSH2 0x4AD5 DUP2 DUP5 PUSH2 0x4C01 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 SWAP3 POP DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4B01 JUMPI PUSH2 0x4AF3 DUP5 DUP4 MLOAD PUSH2 0x466A JUMP JUMPDEST SWAP4 POP SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4AE0 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x4B15 DUP2 DUP8 PUSH2 0x46E1 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x40 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE SWAP1 DUP4 ADD SWAP2 POP DUP3 DUP7 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4B4B JUMPI DUP3 MLOAD ISZERO ISZERO DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x4B2D JUMP JUMPDEST POP SWAP2 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x46E1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4B7F PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP6 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP9 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4BCD JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4BBB DUP4 DUP4 MLOAD PUSH2 0x471C JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4B9F JUMP JUMPDEST POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4BEF PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190D DUP2 DUP6 PUSH2 0x46E1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x4862 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP8 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4CB0 PUSH1 0xA0 DUP4 ADD DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4CC2 DUP2 DUP7 PUSH2 0x46E1 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x4CD4 DUP2 DUP7 PUSH2 0x471C JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x4D13 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x4D72 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x46E1 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x4862 DUP2 DUP6 PUSH2 0x468B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x4DAA PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x4DE3 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x4DE3 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x5 DUP4 LT PUSH2 0x4E13 JUMPI INVALID JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x4E2C PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x471C JUMP JUMPDEST PUSH1 0x20 DUP4 DUP3 SUB DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE DUP3 DUP5 ADD SWAP2 POP DUP3 DUP4 DUP3 MUL DUP6 ADD ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4E7A JUMPI PUSH1 0x1F NOT DUP8 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x4E68 DUP4 DUP4 MLOAD PUSH2 0x476B JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x4E4C JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE PUSH2 0x4E8E DUP2 DUP11 PUSH2 0x46E1 JUMP JUMPDEST SWAP5 POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x4994 DUP2 DUP6 PUSH2 0x468B JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x4EB4 DUP3 DUP7 PUSH2 0x4748 JUMP JUMPDEST DUP4 PUSH1 0x60 DUP4 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x80 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x184A PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x476B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4EF0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x476B JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x4F1B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x476B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x190D DUP2 DUP6 PUSH2 0x471C JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x4F5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4F78 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x4F98 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4FC1 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4FA9 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x4FD0 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x754 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 0xAE DUP10 0x25 GASPRICE DUP16 0xDB 0xD4 SHR 0x2A 0xB0 0xDD REVERT 0x22 MSTORE ORIGIN 0xC8 SWAP2 INVALID SMOD 0xCD SWAP3 0xB0 MUL NUMBER 0x4D PUSH27 0x8204ADF1F62B6C6578706572696D656E74616CF564736F6C634300 SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1145:1317:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1145:1317:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3961:279:4;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;14863:350:1;;;;;;;;;:::i;:::-;;;;;;;;;8450:412:10;;;;;;;;;:::i;:::-;;;;;;;;10125:162:4;;;;;;;;;:::i;:::-;;14042:410:1;;;;;;;;;:::i;:::-;;;;;;;;2265:196:4;;;;;;;;;:::i;:::-;;;;;;;;8079:405;;;;;;;;;:::i;1186:390::-;;;;;;;;;:::i;:::-;;;;;;;;;;;9646:332;;;;;;;;;:::i;:::-;;;;;;;;;;;10728:470;;;;;;;;;:::i;:::-;;;;;;;;2016:444:2;;;;;;;;;:::i;1909:5250:1:-;;;;;;;;;:::i;2768:248:4:-;;;;;;;;;:::i;:::-;;;;;;;;;1098:37:0;;;:::i;:::-;;;;;;;;945:30;;;:::i;5890:372:4:-;;;;;;;;;:::i;:::-;;;;;;;;;;;;1626:384:2;;;;;;;;;:::i;765:336:3:-;;;;;;;;;:::i;12606:499:4:-;;;;;;;;;:::i;:::-;;;;;;;;3360:224;;;;;;;;;:::i;1179:32:0:-;;;:::i;4775:417:4:-;;;;;;;;;:::i;7325:296::-;;;;;;;;;:::i;:::-;;;;;;;;;;1066:42:22;;;:::i;1141:32:0:-;;;:::i;8897:354:4:-;;;;;;;;;:::i;:::-;;;;;;;;;;;7556:378:1;;;;;;;;;:::i;8586:5040::-;;;;;;;;;:::i;11640:460:4:-;;;;;;;;;:::i;6585:244::-;;;;;;;;;:::i;1784:210::-;;;;;;;;;:::i;:::-;;;;;;;;6966:807:10;;;;;;;;;:::i;:::-;;;;;;;;;;15706:395:1;;;;;;;;;:::i;:::-;;;;;;;;;2069:3889:10;;;;;;;;;:::i;:::-;;;;;;;;;;981:32:0;;;:::i;1019:33::-;;;:::i;1058:34::-;;;:::i;3961:279:4:-;4074:19;4107:20;4141:15;4188:12;:34;4223:9;4188:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4188:45:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4188:45:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;4188:45:4;;;;;;;;;4181:52;;;;;;3961:279;;;;;:::o;14863:350:1:-;15005:15;15022:17;15065:35;15076:12;15090:9;15065:10;:35::i;:::-;15055:45;;15122:47;15145:12;15159:9;15122:22;:47::i;:::-;15110:59;-1:-1:-1;14863:350:1;;;;;:::o;8450:412:10:-;8564:31;8612:15;8629:17;8650:91;8696:12;8722:9;8650:32;:91::i;:::-;8611:130;;;;8777:38;8796:7;8805:9;8777:18;:38::i;:::-;8751:64;-1:-1:-1;;;8450:412:10;;;;;:::o;10125:162:4:-;10232:48;;;;;:12;;:37;;:48;;10270:9;;10232:48;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10232:48:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10232:48:4;;;;10125:162;;:::o;14042:410:1:-;14160:27;14203:14;14220:9;:16;14203:33;;14273:6;14259:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;14259:21:1;-1:-1:-1;14246:34:1;-1:-1:-1;14295:9:1;14290:129;14315:6;14310:1;:11;14290:129;;14358:50;14381:12;14395:9;14405:1;14395:12;;;;;;;;;;;;;;14358:22;:50::i;:::-;14342:10;14353:1;14342:13;;;;;;;;;;;;;;;;;:66;14323:3;;14290:129;;;-1:-1:-1;;14042:410:1;;;;:::o;2265:196:4:-;2407:47;;;;;2362:22;;2407:12;;:33;;:47;;2441:12;;2407:47;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2407:47:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2407:47:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;2407:47:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;2407:47:4;;;;;;;;;2400:54;;2265:196;;;;:::o;8079:405::-;8328:149;;;;;8283:22;;8328:12;;:38;;:149;;8380:23;;8417:14;;8445:22;;8328:149;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8328:149:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8328:149:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;8328:149:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;8328:149:4;;;;;;;;;8321:156;8079:405;-1:-1:-1;;;;8079:405:4:o;1186:390::-;1310:26;1350:30;1394:38;1446:25;1503:21;:49;1553:15;1503:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1503:66:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1503:66:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;1503:66:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;1503:66:4;;;;;;;;;1496:73;;;;;;;;1186:390;;;;;:::o;9646:332::-;9764:19;9797:20;9831:21;9866:23;9921:12;:39;9961:9;9921:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9921:50:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9921:50:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;9921:50:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;9921:50:4;;;;;;;;10728:470;10918:68;11087:15;;11009:182;;;;;:26;;:64;;:182;;-1:-1:-1;;;;;11087:15:4;;11116:5;;11135:12;;11161:20;;11009:182;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11009:182:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11009:182:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;11009:182:4;;;;;;;;2016:444:2;2213:23;2259:194;2310:11;2335:108;2362:28;;;;;;;;;;;;;;;;;2392:31;;;;;;;;;;;;;;;;;2425:7;2434:8;2335:26;:108::i;:::-;2259:37;:194::i;1909:5250:1:-;2007:15;;2101:23;:9;2007:15;2101:23;:20;:23;:::i;:::-;2079:45;-1:-1:-1;;;;;;;2139:58:1;;2155:42;2139:58;2135:4937;;;2252:20;2275:25;:9;2297:2;2275:25;:21;:25;:::i;:::-;2252:48;;2324:51;2348:12;2362;2324:23;:51::i;:::-;2314:61;;2135:4937;;;;-1:-1:-1;;;;;;2397:59:1;;2413:43;2397:59;2393:4679;;;2522:20;2544:15;2563:12;:34;2598:9;2563:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2563:45:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2563:45:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2563:45:1;;;;;;;;;2706:120;;2519:89;;-1:-1:-1;2519:89:1;-1:-1:-1;2675:28:1;;-1:-1:-1;2746:41:1;;2706:120;;2519:89;;2706:120;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2706:120:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;2706:120:1;2675:151;;2842:12;2856:23;2883:12;-1:-1:-1;;;;;2883:23:1;2907:15;2883:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2841:82:1;;;;2937:27;2968:7;:34;;;;;2979:10;:17;3000:2;2979:23;2968:34;2967:78;;3043:1;2967:78;;;3006:26;:10;3029:2;3006:26;:22;:26;:::i;:::-;2937:108;;3092:12;-1:-1:-1;;;;;3069:35:1;:19;-1:-1:-1;;;;;3069:35:1;;:43;;3111:1;3069:43;;;3107:1;3069:43;3059:53;;;;2393:4679;;;;;;;;;-1:-1:-1;;;;;;3134:61:1;;3150:45;3134:61;3130:3942;;;3290:20;3312:25;3339:28;3372:12;:35;3408:9;3372:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3372:46:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3372:46:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3372:46:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3372:46:1;;;;;;;;;-1:-1:-1;3450:15:1;;3287:131;;-1:-1:-1;3287:131:1;;-1:-1:-1;3287:131:1;-1:-1:-1;3450:15:1;-1:-1:-1;3433:14:1;3479:1112;3504:6;3499:1;:11;3479:1112;;3611:11;3623:1;3611:14;;;;;;;;;;;;;;3629:1;3611:19;3607:74;;;3654:8;;3607:74;3940:11;;3772:26;;3845:39;;3906:12;;3940:8;;3949:1;;3940:11;;;;;;;;;;;;3801:168;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;3801:168:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;3801:168:1;3772:197;;4022:12;4036:23;4063:12;-1:-1:-1;;;;;4063:23:1;4087:13;4063:38;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4021:80:1;;;;4119:20;4142:7;:34;;;;;4153:10;:17;4174:2;4153:23;4142:34;:66;;4207:1;4142:66;;;4179:25;:10;4202:1;4179:25;:22;:25;:::i;:::-;4119:89;;4307:21;4346:11;4358:1;4346:14;;;;;;;;;;;;;;4331:12;:29;;;;;;;-1:-1:-1;4382:18:1;4378:73;;4431:1;4424:8;;;;;;;;;;;;;;;4378:73;4488:7;4472:13;:23;:39;;;-1:-1:-1;4499:12:1;;4472:39;4468:109;;;4545:13;4535:23;;4468:109;3479:1112;;;;;;3512:3;;3479:1112;;;;3130:3942;;;;;;;-1:-1:-1;;;;;;4612:58:1;;4628:42;4612:58;4608:2464;;;4795:296;;4763:29;;4835:45;;4795:296;;4898:9;;4855:1;;;;;;4795:296;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;4795:296:1;;;49:4:-1;25:18;;61:17;;4795:296:1;182:15:-1;-1:-1;;;;;;4795:296:1;;;179:29:-1;;;;160:49;;;5179:22:1;;:51;;4795:296;;-1:-1:-1;;;;;;;;5179:22:1;;:51;;4795:296;;5179:51;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5161:69:1;;;5345:7;:26;;5370:1;5345:26;;;-1:-1:-1;;5345:26:1;5335:36;;4608:2464;;;;;-1:-1:-1;;;;;;5393:59:1;;5409:43;5393:59;5389:1683;;;5533:20;5555:21;5582:12;:39;5622:9;5582:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5582:50:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5582:50:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;5582:50:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;5582:50:1;;;;;;;;;5530:102;;;;;;5666:16;:14;:16::i;:::-;-1:-1:-1;;;;;5650:32:1;:12;-1:-1:-1;;;;;5650:32:1;;:70;;;;-1:-1:-1;5703:17:1;;-1:-1:-1;;;;;5686:34:1;;;5703:17;;5686:34;5650:70;5646:292;;;5740:19;5762:56;5786:17;:15;:17::i;:::-;5805:12;5762:23;:56::i;:::-;5740:78;;5887:36;5911:11;5887:23;:36::i;:::-;5877:46;;5646:292;;5389:1683;;;;;-1:-1:-1;;;;;;6019:58:1;;6035:42;6019:58;6015:1057;;;6155:29;6186:30;6220:12;:33;6254:9;6220:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6220:44:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6220:44:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;6220:44:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;6220:44:1;;;;;;;;;6296:22;;6152:112;;-1:-1:-1;6152:112:1;-1:-1:-1;6296:22:1;-1:-1:-1;6279:14:1;6332:730;6357:6;6352:1;:11;6332:730;;6465:12;6478:1;6465:15;;;;;;;;;;;;;;6484:1;6465:20;6461:75;;;6509:8;;6461:75;6611:20;6634:44;6645:12;6659:15;6675:1;6659:18;;;;;;;;;;;;;;6634:10;:44::i;:::-;6611:67;;6777:21;6816:12;6829:1;6816:15;;;;;;;;;;;;;;6801:12;:30;;;;;;;-1:-1:-1;6853:18:1;6849:73;;6902:1;6895:8;;;;;;;;;;;6849:73;6959:7;6943:13;:23;:39;;;-1:-1:-1;6970:12:1;;6943:39;6939:109;;;7016:13;7006:23;;6939:109;6332:730;;;6365:3;;6332:730;;;;6015:1057;;;;-1:-1:-1;1909:5250:1;;;;:::o;2768:248:4:-;2880:19;2913:20;2965:12;:33;2999:9;2965:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2965:44:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2965:44:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2965:44:4;;;;;;;;;2958:51;;;;2768:248;;;;:::o;1098:37:0:-;;;-1:-1:-1;;;;;1098:37:0;;:::o;945:30::-;;;-1:-1:-1;;;;;945:30:0;;:::o;5890:372:4:-;6004:19;6037:20;6071:25;6110:28;6152:25;6209:12;:35;6245:9;6209:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6209:46:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6209:46:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;6209:46:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;6209:46:4;;;;;;;;;6202:53;;;;-1:-1:-1;6202:53:4;;-1:-1:-1;6202:53:4;-1:-1:-1;6202:53:4;;-1:-1:-1;5890:372:4;-1:-1:-1;;5890:372:4:o;1626:384:2:-;1787:17;1827:176;1866:5;1885:108;1912:28;;;;;;;;;;;;;;;;;1942:31;;;;;;;;;;;;;;;;;1975:7;1984:8;1885:26;:108::i;:::-;1827:25;:176::i;765:336:3:-;862:16;894:25;936:9;:16;922:31;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;922:31:3;-1:-1:-1;894:59:3;-1:-1:-1;968:9:3;963:107;988:9;:16;983:1;:21;963:107;;1039:9;1049:1;1039:12;;;;;;;;;;;;;;-1:-1:-1;;;;;1039:20:3;;1025:8;1034:1;1025:11;;;;;;;;;;;;;;;;;:34;1006:3;;963:107;;12606:499:4;12990:15;;12916:182;;;;;12816:77;;12916:26;;:60;;:182;;-1:-1:-1;;;;;12990:15:4;;;;13019:6;;13039:14;;13067:21;;12916:182;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12916:182:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12916:182:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;12916:182:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;12916:182:4;;;;;;;;3360:224;3520:57;;;;;3475:22;;3520:12;;:34;;:57;;3555:12;;3569:7;;3520:57;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3520:57:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3520:57:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3520:57:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3520:57:4;;;;;;;;;3513:64;3360:224;-1:-1:-1;;;3360:224:4:o;1179:32:0:-;;;-1:-1:-1;;;;;1179:32:0;;:::o;4775:417:4:-;5041:144;;;;;4996:22;;5041:12;;:35;;:144;;5090:12;;5116:8;;5138:11;;5163:12;;5041:144;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5041:144:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5041:144:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;5041:144:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;5041:144:4;;;;;;;;;5034:151;4775:417;-1:-1:-1;;;;;4775:417:4:o;7325:296::-;7437:19;7470:24;7508:30;7570:12;:33;7604:9;7570:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7570:44:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7570:44:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;7570:44:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;7570:44:4;;;;;;;;1066:42:22;;;;:::o;1141:32:0:-;;;-1:-1:-1;;;;;1141:32:0;;:::o;8897:354:4:-;9014:19;9047:31;9092:27;9133:30;9195:12;:38;9234:9;9195:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9195:49:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9195:49:4;;;;;;39:16:-1;36:1;17:17;2:54;101:4;9195:49:4;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;9195:49:4;;;;;;;;7556:378:1;7662:25;7703:14;7720:9;:16;7703:33;;7771:6;7757:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7757:21:1;-1:-1:-1;7746:32:1;-1:-1:-1;7793:9:1;7788:115;7813:6;7808:1;:11;7788:115;;7854:38;7865:12;7879:9;7889:1;7879:12;;;;;;;7854:38;7840:8;7849:1;7840:11;;;;;;;;;;;;;;;;;:52;7821:3;;7788:115;;8586:5040;8696:17;;8792:23;:9;8696:17;8792:23;:20;:23;:::i;:::-;8770:45;-1:-1:-1;;;;;;;8830:58:1;;8846:42;8830:58;8826:1106;;;8966:24;8992:30;9026:12;:33;9060:9;9026:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9026:44:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9026:44:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;9026:44:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;9026:44:1;;;;;;;;;9102:22;;8963:107;;-1:-1:-1;8963:107:1;-1:-1:-1;9102:22:1;-1:-1:-1;9085:14:1;9138:754;9163:6;9158:1;:11;9138:754;;9271:7;9279:1;9271:10;;;;;;;;;;;;;;9285:1;9271:15;9267:70;;;9310:8;;9267:70;9414:22;9439:56;9462:12;9476:15;9492:1;9476:18;;;;;;;9439:56;9414:81;;9596:23;9639:7;9647:1;9639:10;;;;;;;;;;;;;;9622:14;:27;;;;;;;-1:-1:-1;9671:20:1;9667:75;;9722:1;9715:8;;;;;;;;;;;9667:75;9781:9;9763:15;:27;:45;;;-1:-1:-1;9794:14:1;;9763:45;9759:119;;;9844:15;9832:27;;9759:119;9138:754;;;9171:3;;9138:754;;;-1:-1:-1;9905:16:1;;-1:-1:-1;;;;9905:16:1;8826:1106;-1:-1:-1;;;;;;9946:58:1;;9962:42;9946:58;9942:3589;;;10059:20;10082:25;:9;10104:2;10082:25;:21;:25;:::i;:::-;10185:17;;10059:48;;-1:-1:-1;10133:70:1;;10059:48;;10171:12;;-1:-1:-1;;;;;10185:17:1;10133:23;:70::i;9942:3589::-;-1:-1:-1;;;;;;10225:59:1;;10241:43;10225:59;10221:3310;;;10350:20;10372:15;10391:12;:34;10426:9;10391:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10391:45:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10391:45:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;10391:45:1;;;;;;;;;10709:18;;10571:170;;10347:89;;-1:-1:-1;10347:89:1;;-1:-1:-1;10535:33:1;;-1:-1:-1;10611:50:1;;10571:170;;10679:12;;-1:-1:-1;;;;;10709:18:1;;;;10571:170;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;10571:170:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;10571:170:1;10535:206;;10757:12;10771:23;10798:12;-1:-1:-1;;;;;10798:23:1;10822:20;10798:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;10756:87:1;;;;10931:7;10930:8;:35;;;;10942:10;:17;10963:2;10942:23;;10930:35;:69;;;-1:-1:-1;10969:25:1;:10;10992:1;10969:25;:22;:25;:::i;:::-;10998:1;10969:30;;10930:69;10926:715;;;11108:78;;11077:28;;11131:45;;11108:78;;11178:7;;11108:78;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11108:78:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;11108:78:1;11077:109;;11228:12;-1:-1:-1;;;;;11228:23:1;11252:15;11228:40;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;-1:-1;11204:64:1;;-1:-1:-1;11204:64:1;-1:-1:-1;11204:64:1;11391:34;;;;;11402:10;:17;11423:2;11402:23;11391:34;:86;;;;-1:-1:-1;11459:18:1;;-1:-1:-1;;;;;11459:18:1;11429:26;:10;11452:2;11429:26;:22;:26;:::i;:::-;-1:-1:-1;;;;;11429:48:1;;11391:86;:94;;11484:1;11391:94;;;11480:1;11391:94;11379:106;;;;10926:715;;;;-1:-1:-1;;11602:24:1;;10221:3310;;;;;;;;-1:-1:-1;;;;;;11662:61:1;;11678:45;11662:61;11658:1873;;;11813:46;;;;;11783:20;;11813:12;;:35;;:46;;11849:9;;11813:46;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11813:46:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11813:46:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;11813:46:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;11813:46:1;;;;;;;;;-1:-1:-1;;12129:19:1;;11995:167;;11780:79;;-1:-1:-1;11959:33:1;;-1:-1:-1;12035:46:1;;11995:167;;-1:-1:-1;12099:12:1;;-1:-1:-1;;;;;12129:19:1;;11995:167;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;11995:167:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;11995:167:1;11959:203;;12209:12;12223:23;12250:12;-1:-1:-1;;;;;12250:23:1;12274:20;12250:45;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;12208:87:1;;;;12321:7;:34;;;;;12332:10;:17;12353:2;12332:23;12321:34;:68;;;;-1:-1:-1;12359:25:1;:10;12382:1;12359:25;:22;:25;:::i;:::-;12388:1;12359:30;12321:68;:87;;12407:1;12321:87;;;-1:-1:-1;;12321:87:1;12309:99;;11658:1873;;;;;;;-1:-1:-1;;;;;;12430:58:1;;12446:42;12430:58;12426:1105;;;-1:-1:-1;;12570:24:1;;12426:1105;;;-1:-1:-1;;;;;;12616:59:1;;12632:43;12616:59;12612:919;;;12756:20;12778:21;12820:12;:39;12860:9;12820:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12820:50:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12820:50:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;12820:50:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;12820:50:1;;;;;;;;;12753:117;;;;;;12904:16;:14;:16::i;:::-;-1:-1:-1;;;;;12888:32:1;:12;-1:-1:-1;;;;;12888:32:1;;:70;;;;-1:-1:-1;12941:17:1;;-1:-1:-1;;;;;12924:34:1;;;12941:17;;12924:34;12888:70;12884:575;;;12978:21;13002:75;13026:17;:15;:17::i;:::-;13059;;13045:12;;-1:-1:-1;;;;;13059:17:1;13002:23;:75::i;:::-;12978:99;;-1:-1:-1;;13184:13:1;:29;:85;;13231:38;13255:13;13231:23;:38::i;:::-;13184:85;;;-1:-1:-1;;13184:85:1;13172:97;;12884:575;;;;13311:17;;-1:-1:-1;;;;;13294:34:1;;;13311:17;;13294:34;13290:169;;;13360:14;:36;13397:12;13411:13;13426:17;:15;:17::i;:::-;13360:84;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13360:84:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13360:84:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;13360:84:1;;;;;;;;;13348:96;;13290:169;12612:919;;-1:-1:-1;8586:5040:1;;;;:::o;11640:460:4:-;11825:68;11989:15;;11916:177;;;;;:26;;:59;;:177;;-1:-1:-1;;;;;11989:15:4;;12018:5;;12037:12;;12063:20;;11916:177;;;;6585:244;6763:59;;;;;6718:22;;6763:12;;:33;;:59;;6797:7;;6806:15;;6763:59;;;;1784:210;1945:42;;;;;1894:19;;1945:12;;:31;;:42;;1977:9;;1945:42;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1945:42:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1945:42:4;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1945:42:4;;;;;;;;6966:807:10;7102:38;7154:42;7210:30;7265:14;7282:6;:13;7265:30;;7343:6;7318:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;7305:45;;7402:6;7388:21;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7388:21:10;;7360:49;;7449:6;7438:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;7438:18:10;-1:-1:-1;7419:37:10;-1:-1:-1;7472:9:10;7467:225;7492:6;7487:1;:11;7467:225;;7588:93;7627:6;7634:1;7627:9;;;;;;;;;;;;;;7654:10;7665:1;7654:13;;;;;;;;;;;;;;7588:21;:93::i;:::-;7520:13;;:10;;7531:1;;7520:13;;;;;;;;;;;7535:25;7561:1;7535:28;;;;;;;;;;;;;7565:16;7582:1;7565:19;;;;;;;;7519:162;;;7565:19;;;;;;;;;;;7519:162;;;;;;;;7500:3;;7467:225;;;-1:-1:-1;;6966:807:10;;;;;:::o;15706:395:1:-;15857:25;15884:27;15938:41;15955:12;15969:9;15938:16;:41::i;:::-;15927:52;;16002:53;16031:12;16045:9;16002:28;:53::i;2069:3889:10:-;2198:35;;:::i;:::-;2247:32;2399:15;;2389:46;;;;;2247:32;;-1:-1:-1;;;;;2399:15:10;;2389:39;;:46;;2429:5;;2389:46;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2389:46:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2389:46:10;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2389:46:10;;;;;;;;;2511:18;;2488:20;2568:15;2558:100;;;;;2377:58;;-1:-1:-1;2511:18:10;;-1:-1:-1;;;;;2568:15:10;;;;2558:48;;:100;;2511:5;;2639:9;;2558:100;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2558:100:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2558:100:10;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2558:100:10;;;;;;;;;2539:119;;2728:36;2767:70;2822:5;2767:41;:70::i;:::-;2728:109;;3047:36;3097:52;3125:5;:23;;;3097:5;:20;;;:27;;:52;;;;:::i;:::-;3093:1996;;;3355:193;3402:28;3448:46;3479:5;:14;;;3448:5;:22;;;:30;;:46;;;;:::i;:::-;3512:5;:22;;;3355:29;:193::i;:::-;3324:224;;3093:1996;;;3696:14;;;;3692:1387;;3766:185;3817:28;3867:5;:22;;;3911:5;:22;;;3766:29;:185::i;3692:1387::-;4279:39;4321:123;4369:12;4403:5;:23;;;4321:26;:123::i;:::-;4279:165;;4462:38;4503:185;4554:28;4604:5;:22;;;4648:5;:22;;;4503:29;:185::i;:::-;4462:226;;4706:41;4750:180;4801:31;4854:5;:14;;;4890:5;:22;;;4750:29;:180::i;:::-;4706:224;;4979:85;4998:30;5030:33;4979:18;:85::i;:::-;4948:116;;3692:1387;;;;5260:153;5292:69;5323:9;:37;;;5292:5;:22;;;:30;;:69;;;;:::i;:::-;5375:28;5260:18;:153::i;:::-;5233:180;;5558:31;5583:5;5558:24;:31::i;:::-;5553:91;;5632:1;5605:28;;5553:91;5795:29;5770:21;;:54;;;;;;;;;5766:113;;5867:1;5840:28;;5766:113;-1:-1:-1;;;2069:3889:10;;;;;:::o;981:32:0:-;;;-1:-1:-1;;;;;981:32:0;;:::o;1019:33::-;;;-1:-1:-1;;;;;1019:33:0;;:::o;1058:34::-;;;-1:-1:-1;;;;;1058:34:0;;:::o;1866:135:45:-;1951:7;1985:1;1981;:5;:13;;1993:1;1981:13;;;-1:-1:-1;1989:1:45;;1866:135;-1:-1:-1;1866:135:45:o;1285:1263:43:-;1997:11;;1992:2;1982:13;;;1972:37;2069:14;;2051:16;;;2041:43;;;;2158:2;2152:9;;962:66;2213:26;;2259:15;;;2252:33;;;;2305:15;;;2298:36;;;;2366:2;2354:15;;2347:32;2411:3;2399:16;;2392:43;2505:3;2487:22;;;1285:1263::o;1921:441:28:-;2066:23;2207:116;2248:24;2286:27;:11;:25;:27::i;:::-;2207;:116::i;16814:871:41:-;16934:13;16978:5;16986:1;16978:9;16967:1;:8;:20;16963:290;;;17003:239;17025:216;17087:87;17192:1;:8;17218:5;17226:1;17218:9;17025:44;:216::i;:::-;17003:21;:239::i;:::-;-1:-1:-1;17426:13:41;17329:2;17426:13;17420:20;-1:-1:-1;;;;;;17567:79:41;;16814:871::o;10753:1071::-;10874:14;10919:5;10927:2;10919:10;10908:1;:8;:21;10904:321;;;10945:269;10967:246;11029:89;11136:1;:8;11162:5;11170:2;11162:10;10967:44;:246::i;10945:269::-;-1:-1:-1;11726:13:41;11471:2;11726:13;11720:20;-1:-1:-1;;;;;11716:69:41;;10753:1071::o;5378:451:19:-;5580:110;;5474:15;;;;5523:23;;-1:-1:-1;;;;;5550:16:19;;;5620:33;;5580:110;;5671:5;;5580:110;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;5580:110:19;;;49:4:-1;25:18;;61:17;;5580:110:19;182:15:-1;-1:-1;;;;;;5580:110:19;;;179:29:-1;;;;160:49;;;5550:150:19;;;;5580:110;5550:150;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5505:195:19;;;;5714:10;:37;;;;;5728:10;:17;5749:2;5728:23;5714:37;5710:113;;;5777:35;5798:10;5810:1;15929:220:41;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;5445:132:40:-;2395:42;5445:132;:::o;5697:135::-;2695:42;5697:135;:::o;16324:516:1:-;16411:17;16444:11;16464:17;:15;:17::i;:::-;-1:-1:-1;;;;;16458:28:1;;:30;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16458:30:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16458:30:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;16458:30:1;;;;;;;;;16444:44;;16631:21;16662:3;-1:-1:-1;;;;;16662:7:1;;:9;;;;;;;;;;;;;;;;;;;;;;;8::-1;5:2;;;30:1;27;20:12;5:2;16662:9:1;;;;8::-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16662:9:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;16662:9:1;;;;;;;;;16656:3;:15;16655:66;;16712:3;-1:-1:-1;;;;;16712:7:1;;:9;;;;;;;;;;;;;;;;;;;;;;;8::-1;5:2;;;30:1;27;20:12;5:2;16712:9:1;;;;8::-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16712:9:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;16712:9:1;;;;;;;;;16655:66;;;16687:3;-1:-1:-1;;;;;16687:8:1;;:10;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16687:10:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16687:10:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;16687:10:1;;;;;;;;;16631:90;;16743:64;16773:13;16788:6;16796:10;16743:29;:64::i;4810:315:27:-;4937:17;4982:110;5023:24;5061:21;:5;:19;:21::i;4616:499:19:-;4838:135;;4729:18;;;;4781:23;;-1:-1:-1;;;;;4808:16:19;;;4878:33;;4838:135;;4929:5;;4952:7;;4838:135;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;4838:135:19;;;49:4:-1;25:18;;61:17;;4838:135:19;182:15:-1;-1:-1;;;;;;4838:135:19;;;179:29:-1;;;;160:49;;;4808:175:19;;;;4838:135;4808:175;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4763:220:19;;;;4997:10;:37;;;;;5011:10;:17;5032:2;5011:23;4997:37;4993:116;;;5063:35;5084:10;5096:1;5063:20;:35::i;:::-;5050:48;;4993:116;4616:499;;;;;;;:::o;6234:135:40:-;3273:42;6234:135;:::o;9242:435:10:-;9370:31;9418:15;9435:17;9456:56;9506:5;9456:49;:56::i;:::-;9417:95;;;;9548:38;9567:7;9576:9;9548:18;:38::i;:::-;9522:64;;9603:67;9622:23;9647:5;:22;;;9603:18;:67::i;10136:403:41:-;10257:10;10486:3;:10;10472:3;:10;:24;:60;;;;-1:-1:-1;;10518:14:41;;;;;;;10500;;;;;;;;;;:32;;10136:403::o;1335:383:45:-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;3189:300:25:-;3353:21;3406:46;3440:11;3406:25;:9;3424:6;3406:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;965:364:45:-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;1099:191::-;-1:-1:-1;1317:5:45;;;965:364::o;9951:404:10:-;10061:4;10088:39;10106:5;:20;;;10088:17;:39::i;:::-;:122;;;;-1:-1:-1;10144:14:10;;;;:19;;:65;;;10167:42;10185:5;:23;;;10167:17;:42::i;:::-;10088:177;;;;;10226:39;10244:5;:20;;;10226:17;:39::i;:::-;10088:260;;;;-1:-1:-1;10282:14:10;;;;:19;;:65;;;10305:42;10323:5;:23;;;10305:17;:42::i;2542:1786:28:-;2769:16;;;;;2810;;2868:33;;;;;2930:20;;;;;2749:17;2984:25;;;;3417:11;;3402:13;;;3392:37;;;;3497:9;;1160:66;3520:26;;3647:15;;;3640:29;;;;3757:15;;;3750:46;;;;3884:15;;;3877:33;;;;-1:-1:-1;;;;;4016:62:28;;;3998:16;;;3991:88;;;;4129:3;4117:16;;4110:34;4285:3;4267:22;;;2542:1786::o;2889:890:43:-;3318:2;3312:9;3350:66;3335:82;;3467:1;3455:14;;3448:40;;;;3585:2;3573:15;;3566:35;3737:2;3719:21;;;2889:890::o;1292:378:42:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;-1:-1:-1;;26:21;;;22:32;6:49;;1515:148:42;;;49:4:-1;25:18;;61:17;;1515:148:42;182:15:-1;-1:-1;;;;;;1515:148:42;;;179:29:-1;;;;160:49;;;1515:148:42;-1:-1:-1;1292:378:42;;;;;:::o;1511:170:44:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;14133:679:41;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:41;14661:2;14759:13;14753:20;;14133:679::o;5279:2665:27:-;5485:20;;;;5545;;;;5608:23;;;;5674;;;;5369:14;;1422:66;;5485:20;;5545;;6578:2;6568:13;;6565:2;;;6600:9;6565:2;-1:-1:-1;;6731:14:27;;6954:11;;6781:3;6770:15;;6991:11;;6821:3;6810:15;;7028:11;;6861:3;6850:15;;7065:11;;6901:3;6890:15;;7102:11;;7156:24;;;7241:21;;6742:2;7216:23;;;7206:57;7193:71;;7364:21;;7339:23;;;7329:57;;;;7316:71;;7490:24;;7462:26;;;7452:63;;;;7439:77;;7616:24;;7588:26;;;;7578:63;;;;7565:77;;7717:3;7701:20;;7758:19;;;;7790;;7822;;;7854;;7886;;;;7701:20;-1:-1:-1;5279:2665:27;;;:::o;17232:1013:1:-;17368:15;17385:17;17452:1;17422:5;:20;;;:27;:31;17418:75;;;-1:-1:-1;17477:1:1;;-1:-1:-1;17477:1:1;17469:13;;17418:75;17524:20;;;;17502:19;;17524:34;;17502:19;17524:34;:31;:34;:::i;:::-;17502:56;-1:-1:-1;;;;;;;17610:59:1;;17626:43;17610:59;17606:462;;;17757:20;;;;17717:61;;;;;17690:21;;17717:12;;:39;;:61;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17717:61:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17717:61:1;;;;;;39:16:-1;36:1;17:17;2:54;101:4;17717:61:1;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;17717:61:1;;;;;;;;;-1:-1:-1;17813:17:1;;17685:93;;-1:-1:-1;;;;;;17796:34:1;;;17813:17;;17796:34;17792:266;;-1:-1:-1;17792:266:1;;-1:-1:-1;17792:266:1;17879:14;:34;17914:5;17921:17;:15;:17::i;:::-;17879:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;17879:60:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17879:60:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;17879:60:1;;;;;;;;;17961:64;17984:5;:18;;;18004:5;:20;;;17961:22;:64::i;:::-;17850:193;;;;;;;;17792:266;17606:462;;18098:52;18109:5;:18;;;18129:5;:20;;;18098:10;:52::i;:::-;18164:64;18187:5;:18;;;18207:5;:20;;;18164:22;:64::i;:::-;18077:161;;;;;17232:1013;;;:::o;731:322:46:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;122:448:45;208:7;235:6;231:45;;-1:-1:-1;264:1:45;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:45:o;10692:1231:10:-;10790:4;10955:2;10936:9;:16;:21;;;;;;10961:1;10936:26;10932:69;;-1:-1:-1;10985:5:10;10978:12;;10932:69;11081:19;11103:23;:9;11081:19;11103:23;:20;:23;:::i;:::-;11081:45;-1:-1:-1;;;;;;;11140:58:10;;11156:42;11140:58;11136:100;;11221:4;11214:11;;;;;11136:100;11352:44;;;;;11306:30;;11352:12;;:33;;:44;;11386:9;;11352:44;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11352:44:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11352:44:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;11352:44:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;11352:44:10;;;;;;;;;11424:22;;11301:95;;-1:-1:-1;11424:22:10;-1:-1:-1;11407:14:10;;-1:-1:-1;11456:439:10;11481:6;11476:1;:11;11456:439;;11607:25;11635:32;11665:1;11635:15;11651:1;11635:18;;;;;;;;;;;;;;:29;;:32;;;;:::i;:::-;11607:60;-1:-1:-1;;;;;;;11685:65:10;;11707:43;11685:65;11681:204;;;11774:42;11797:15;11814:1;11774:22;:42::i;:::-;11770:101;;;11847:5;11840:12;;;;;;;;;11770:101;-1:-1:-1;11489:3:10;;11456:439;;;-1:-1:-1;11912:4:10;;10692:1231;-1:-1:-1;;;;;10692:1231:10:o;12246:400::-;12434:22;;12397:4;;12494:1;12483:12;;12466:174;12501:6;12497:1;:10;12466:174;;;12532:52;12565:15;12581:1;12565:18;;;;;;;;;;;;;;12532:15;12548:8;12532:25;;;;;;;;;;;;;;:32;;:52;;;;:::i;:::-;12528:102;;;12611:4;12604:11;;;;;;12528:102;12509:3;;12466:174;;1145:1317:2;;;;;;;;;;;-1:-1:-1;1145:1317:2;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;142:134;220:13;;238:33;220:13;238:33;;301:707;;418:3;411:4;403:6;399:17;395:27;385:2;;-1:-1;;426:12;385:2;473:6;460:20;495:80;510:64;567:6;510:64;;;495:80;;;603:21;;;486:89;-1:-1;647:4;660:14;;;;635:17;;;749;;;740:27;;;;737:36;-1:-1;734:2;;;786:1;;776:12;734:2;811:1;796:206;821:6;818:1;815:13;796:206;;;85:6;72:20;97:33;124:5;97:33;;;889:50;;953:14;;;;981;;;;843:1;836:9;796:206;;1032:693;;1154:3;1147:4;1139:6;1135:17;1131:27;1121:2;;-1:-1;;1162:12;1121:2;1209:6;1196:20;1231:85;1246:69;1308:6;1246:69;;1231:85;1344:21;;;1222:94;-1:-1;1388:4;1401:14;;;;1376:17;;1496:1;1481:238;1506:6;1503:1;1500:13;1481:238;;;1613:42;1651:3;1388:4;1589:3;1576:17;1380:6;1564:30;;1613:42;;;1601:55;;1388:4;1670:14;;;;1698;;;;;1528:1;1521:9;1481:238;;;1485:14;;;;1114:611;;;;;1749:701;;1882:3;1875:4;1867:6;1863:17;1859:27;1849:2;;-1:-1;;1890:12;1849:2;1930:6;1924:13;1952:85;1967:69;2029:6;1967:69;;1952:85;2065:21;;;1943:94;-1:-1;2109:4;2122:14;;;;2097:17;;2217:1;2202:242;2227:6;2224:1;2221:13;2202:242;;;2327:53;2376:3;2109:4;2303:3;2297:10;2101:6;2285:23;;2327:53;;;2315:66;;2109:4;2395:14;;;;2423;;;;;2249:1;2242:9;2202:242;;3358:735;;3494:3;3487:4;3479:6;3475:17;3471:27;3461:2;;-1:-1;;3502:12;3461:2;3549:6;3536:20;3571:99;3586:83;3662:6;3586:83;;3571:99;3698:21;;;3562:108;-1:-1;3742:4;3755:14;;;;3730:17;;3850:1;3835:252;3860:6;3857:1;3854:13;3835:252;;;3967:56;4019:3;3742:4;3943:3;3930:17;3734:6;3918:30;;3967:56;;;3955:69;;3742:4;4038:14;;;;4066;;;;;3882:1;3875:9;3835:252;;4902:707;;5019:3;5012:4;5004:6;5000:17;4996:27;4986:2;;-1:-1;;5027:12;4986:2;5074:6;5061:20;5096:80;5111:64;5168:6;5111:64;;5096:80;5204:21;;;5087:89;-1:-1;5248:4;5261:14;;;;5236:17;;;5350;;;5341:27;;;;5338:36;-1:-1;5335:2;;;5387:1;;5377:12;5335:2;5412:1;5397:206;5422:6;5419:1;5416:13;5397:206;;;19983:20;;5490:50;;5554:14;;;;5582;;;;5444:1;5437:9;5397:206;;5635:722;;5763:3;5756:4;5748:6;5744:17;5740:27;5730:2;;-1:-1;;5771:12;5730:2;5811:6;5805:13;5833:80;5848:64;5905:6;5848:64;;5833:80;5941:21;;;5824:89;-1:-1;5985:4;5998:14;;;;5973:17;;;6087;;;6078:27;;;;6075:36;-1:-1;6072:2;;;6124:1;;6114:12;6072:2;6149:1;6134:217;6159:6;6156:1;6153:13;6134:217;;;20131:13;;6227:61;;6302:14;;;;6330;;;;6181:1;6174:9;6134:217;;6778:132;6855:13;;-1:-1;;;;;;95724:78;;99088:34;;99078:2;;99136:1;;99126:12;6918:432;;7015:3;7008:4;7000:6;6996:17;6992:27;6982:2;;-1:-1;;7023:12;6982:2;7070:6;7057:20;7092:60;7107:44;7144:6;7107:44;;7092:60;7083:69;;7172:6;7165:5;7158:21;7276:3;7208:4;7267:6;7200;7258:16;;7255:25;7252:2;;;7293:1;;7283:12;7252:2;97720:6;7208:4;7200:6;7196:17;7208:4;7234:5;7230:16;97697:30;97776:1;97758:16;;;7208:4;97758:16;97751:27;7234:5;6975:375;-1:-1;;6975:375;7359:434;;7467:3;7460:4;7452:6;7448:17;7444:27;7434:2;;-1:-1;;7475:12;7434:2;7515:6;7509:13;7537:60;7552:44;7589:6;7552:44;;7537:60;7528:69;;7617:6;7610:5;7603:21;7721:3;7653:4;7712:6;7645;7703:16;;7700:25;7697:2;;;7738:1;;7728:12;7697:2;7748:39;7780:6;7653:4;7679:5;7675:16;7653:4;7645:6;7641:17;7748:39;;9047:184;9150:13;;99519:1;99509:12;;99499:2;;99535:1;;99525:12;10466:2714;;10574:6;;10562:9;10557:3;10553:19;10549:32;10546:2;;;-1:-1;;10584:12;10546:2;10612:22;10574:6;10612:22;;;10603:31;;;10724:49;10769:3;10745:22;10724:49;;;10706:16;10699:75;10876:49;10921:3;10843:2;10901:9;10897:22;10876:49;;;10843:2;10862:5;10858:16;10851:75;11035:49;11080:3;11002:2;11060:9;11056:22;11035:49;;;11002:2;11021:5;11017:16;11010:75;11188:49;11233:3;11155:2;11213:9;11209:22;11188:49;;;11155:2;11174:5;11170:16;11163:75;11311:3;11370:9;11366:22;19983:20;11311:3;11331:5;11327:16;11320:75;11468:3;11527:9;11523:22;19983:20;11468:3;11488:5;11484:16;11477:75;11617:3;11676:9;11672:22;19983:20;11617:3;11637:5;11633:16;11626:75;11766:3;11825:9;11821:22;19983:20;11766:3;11786:5;11782:16;11775:75;11928:3;;11989:9;11985:22;19983:20;11928:3;11948:5;11944:18;11937:77;;12075:3;;12136:9;12132:22;19983:20;12075:3;12095:5;12091:18;12084:77;;12260:3;;12249:9;12245:19;12232:33;12285:18;;12277:6;12274:30;12271:2;;;10692:1;;12307:12;12271:2;12354:54;12404:3;12395:6;12384:9;12380:22;12354:54;;;12260:3;12338:5;12334:18;12327:82;12508:3;;;;12497:9;12493:19;12480:33;12466:47;;12285:18;12525:6;12522:30;12519:2;;;10692:1;;12555:12;12519:2;12602:54;12652:3;12643:6;12632:9;12628:22;12602:54;;;12508:3;12586:5;12582:18;12575:82;12759:3;;;;12748:9;12744:19;12731:33;12717:47;;12285:18;12776:6;12773:30;12770:2;;;10692:1;;12806:12;12770:2;12853:54;12903:3;12894:6;12883:9;12879:22;12853:54;;;12759:3;12837:5;12833:18;12826:82;13010:3;;;;12999:9;12995:19;12982:33;12968:47;;12285:18;13027:6;13024:30;13021:2;;;10692:1;;13057:12;13021:2;;13104:54;13154:3;13145:6;13134:9;13130:22;13104:54;;;13010:3;13088:5;13084:18;13077:82;;;10540:2640;;;;;13215:2851;;13334:6;;13322:9;13317:3;13313:19;13309:32;13306:2;;;-1:-1;;13344:12;13306:2;13372:22;13334:6;13372:22;;;13363:31;;;13484:60;13540:3;13516:22;13484:60;;;13466:16;13459:86;13647:60;13703:3;13614:2;13683:9;13679:22;13647:60;;;13614:2;13633:5;13629:16;13622:86;13817:60;13873:3;13784:2;13853:9;13849:22;13817:60;;;13784:2;13803:5;13799:16;13792:86;13981:60;14037:3;13948:2;14017:9;14013:22;13981:60;;;13948:2;13967:5;13963:16;13956:86;14115:3;14185:9;14181:22;20131:13;14115:3;14135:5;14131:16;14124:86;14283:3;14353:9;14349:22;20131:13;14283:3;14303:5;14299:16;14292:86;14443:3;14513:9;14509:22;20131:13;14443:3;14463:5;14459:16;14452:86;14603:3;14673:9;14669:22;20131:13;14603:3;14623:5;14619:16;14612:86;14776:3;;14848:9;14844:22;20131:13;14776:3;14796:5;14792:18;14785:88;;14934:3;;15006:9;15002:22;20131:13;14934:3;14954:5;14950:18;14943:88;;15123:3;;15112:9;15108:19;15102:26;15148:18;;15140:6;15137:30;15134:2;;;13452:1;;15170:12;15134:2;15217:65;15278:3;15269:6;15258:9;15254:22;15217:65;;;15123:3;15201:5;15197:18;15190:93;15375:3;;;;15364:9;15360:19;15354:26;15340:40;;15148:18;15392:6;15389:30;15386:2;;;13452:1;;15422:12;15386:2;15469:65;15530:3;15521:6;15510:9;15506:22;15469:65;;;15375:3;15453:5;15449:18;15442:93;15630:3;;;;15619:9;15615:19;15609:26;15595:40;;15148:18;15647:6;15644:30;15641:2;;;13452:1;;15677:12;15641:2;15724:65;15785:3;15776:6;15765:9;15761:22;15724:65;;;15630:3;15708:5;15704:18;15697:93;15885:3;;;;15874:9;15870:19;15864:26;15850:40;;15148:18;15902:6;15899:30;15896:2;;;13452:1;;15932:12;15896:2;;15979:65;16040:3;16031:6;16020:9;16016:22;15979:65;;20194:241;;20298:2;20286:9;20277:7;20273:23;20269:32;20266:2;;;-1:-1;;20304:12;20266:2;85:6;72:20;97:33;124:5;97:33;;20442:512;;;20593:2;20581:9;20572:7;20568:23;20564:32;20561:2;;;-1:-1;;20599:12;20561:2;85:6;72:20;97:33;124:5;97:33;;;20651:63;-1:-1;20779:2;20764:18;;20751:32;20803:18;20792:30;;20789:2;;;-1:-1;;20825:12;20789:2;20855:83;20930:7;20921:6;20910:9;20906:22;20855:83;;;20845:93;;;20555:399;;;;;;20961:993;;;;;21175:3;21163:9;21154:7;21150:23;21146:33;21143:2;;;-1:-1;;21182:12;21143:2;85:6;72:20;97:33;124:5;97:33;;;21234:63;-1:-1;21362:2;21347:18;;21334:32;21386:18;21375:30;;;21372:2;;;-1:-1;;21408:12;21372:2;21438:78;21508:7;21499:6;21488:9;21484:22;21438:78;;;21428:88;;21581:2;21570:9;21566:18;21553:32;21539:46;;21386:18;21597:6;21594:30;21591:2;;;-1:-1;;21627:12;21591:2;21657:78;21727:7;21718:6;21707:9;21703:22;21657:78;;;21647:88;;21800:2;21789:9;21785:18;21772:32;21758:46;;21386:18;21816:6;21813:30;21810:2;;;-1:-1;;21846:12;21810:2;;21876:62;21930:7;21921:6;21910:9;21906:22;21876:62;;;21866:72;;;21137:817;;;;;;;;21961:470;;;22091:2;22079:9;22070:7;22066:23;22062:32;22059:2;;;-1:-1;;22097:12;22059:2;85:6;72:20;97:33;124:5;97:33;;;22149:63;-1:-1;22277:2;22262:18;;22249:32;22301:18;22290:30;;22287:2;;;-1:-1;;22323:12;22287:2;22353:62;22407:7;22398:6;22387:9;22383:22;22353:62;;22438:595;;;;22585:2;22573:9;22564:7;22560:23;22556:32;22553:2;;;-1:-1;;22591:12;22553:2;85:6;72:20;97:33;124:5;97:33;;;22643:63;-1:-1;22771:2;22756:18;;22743:32;22795:18;22784:30;;22781:2;;;-1:-1;;22817:12;22781:2;22847:62;22901:7;22892:6;22881:9;22877:22;22847:62;;;22837:72;;;22946:2;22989:9;22985:22;6567:20;22954:63;;22547:486;;;;;;23040:366;;;23161:2;23149:9;23140:7;23136:23;23132:32;23129:2;;;-1:-1;;23167:12;23129:2;85:6;72:20;97:33;124:5;97:33;;;23219:63;23319:2;23358:22;;;;19983:20;;-1:-1;;;23123:283;23413:377;;23542:2;23530:9;23521:7;23517:23;23513:32;23510:2;;;-1:-1;;23548:12;23510:2;23606:17;23593:31;23644:18;23636:6;23633:30;23630:2;;;-1:-1;;23666:12;23630:2;23696:78;23766:7;23757:6;23746:9;23742:22;23696:78;;23797:442;;23962:2;;23950:9;23941:7;23937:23;23933:32;23930:2;;;-1:-1;;23968:12;23930:2;24019:17;24013:24;24057:18;24049:6;24046:30;24043:2;;;-1:-1;;24079:12;24043:2;24206:6;24195:9;24191:22;2674:3;2667:4;2659:6;2655:17;2651:27;2641:2;;-1:-1;;2682:12;2641:2;2722:6;2716:13;2702:27;;2744:105;2759:89;2841:6;2759:89;;2744:105;2877:21;;;2934:14;;;;2909:17;;;3023;;;3014:27;;;;3011:36;-1:-1;3008:2;;;-1:-1;;3050:12;3008:2;-1:-1;3076:10;;3070:242;3095:6;3092:1;3089:13;3070:242;;;3175:73;3244:3;3232:10;3175:73;;;3163:86;;3117:1;3110:9;;;;;3263:14;;;;3291;;3070:242;;;-1:-1;24099:124;23924:315;-1:-1;;;;;;;23924:315;24246:937;;;;24478:2;24466:9;24457:7;24453:23;24449:32;24446:2;;;-1:-1;;24484:12;24446:2;24542:17;24529:31;24580:18;;24572:6;24569:30;24566:2;;;-1:-1;;24602:12;24566:2;24632:97;24721:7;24712:6;24701:9;24697:22;24632:97;;;24622:107;;24794:2;24783:9;24779:18;24766:32;24752:46;;24580:18;24810:6;24807:30;24804:2;;;-1:-1;;24840:12;24804:2;24870:78;24940:7;24931:6;24920:9;24916:22;24870:78;;;24860:88;;25013:2;25002:9;24998:18;24985:32;24971:46;;24580:18;25029:6;25026:30;25023:2;;;-1:-1;;25059:12;25023:2;;25089:78;25159:7;25150:6;25139:9;25135:22;25089:78;;;25079:88;;;24440:743;;;;;;25190:686;;;25385:2;25373:9;25364:7;25360:23;25356:32;25353:2;;;-1:-1;;25391:12;25353:2;25449:17;25436:31;25487:18;;25479:6;25476:30;25473:2;;;-1:-1;;25509:12;25473:2;25539:97;25628:7;25619:6;25608:9;25604:22;25539:97;;;25529:107;;25701:2;25690:9;25686:18;25673:32;25659:46;;25487:18;25717:6;25714:30;25711:2;;;-1:-1;;25747:12;25711:2;;25777:83;25852:7;25843:6;25832:9;25828:22;25777:83;;25883:648;;;26059:2;26047:9;26038:7;26034:23;26030:32;26027:2;;;-1:-1;;26065:12;26027:2;26123:17;26110:31;26161:18;;26153:6;26150:30;26147:2;;;-1:-1;;26183:12;26147:2;26213:78;26283:7;26274:6;26263:9;26259:22;26213:78;;26538:257;;26650:2;26638:9;26629:7;26625:23;26621:32;26618:2;;;-1:-1;;26656:12;26618:2;6446:6;6440:13;98869:5;95558:13;95551:21;98847:5;98844:32;98834:2;;-1:-1;;98880:12;26802:261;;26916:2;26904:9;26895:7;26891:23;26887:32;26884:2;;;-1:-1;;26922:12;26884:2;26984:63;27039:7;27015:22;26984:63;;27070:397;;;27201:2;27189:9;27180:7;27176:23;27172:32;27169:2;;;-1:-1;;27207:12;27169:2;27269:63;27324:7;27300:22;27269:63;;;27259:73;;27369:2;27423:9;27419:22;220:13;238:33;265:5;238:33;;;27377:74;;;;27163:304;;;;;;27474:767;;;;;27648:3;27636:9;27627:7;27623:23;27619:33;27616:2;;;-1:-1;;27655:12;27616:2;6861:6;6855:13;6873:32;6899:5;6873:32;;;27817:2;27867:22;;220:13;27707:73;;-1:-1;238:33;220:13;238:33;;;27936:2;27986:22;;220:13;27825:74;;-1:-1;238:33;220:13;238:33;;;28076:2;28061:18;;28055:25;27944:74;;-1:-1;28100:18;28089:30;;28086:2;;;-1:-1;;28122:12;28086:2;28152:73;28217:7;28208:6;28197:9;28193:22;28152:73;;28248:1162;;;;;;28489:3;28477:9;28468:7;28464:23;28460:33;28457:2;;;-1:-1;;28496:12;28457:2;28558:63;28613:7;28589:22;28558:63;;;28548:73;;28658:2;28712:9;28708:22;220:13;238:33;265:5;238:33;;;28798:2;28783:18;;28777:25;28666:74;;-1:-1;28822:18;28811:30;;;28808:2;;;-1:-1;;28844:12;28808:2;28874:89;28955:7;28946:6;28935:9;28931:22;28874:89;;;28864:99;;29021:2;29010:9;29006:18;29000:25;28986:39;;28822:18;29037:6;29034:30;29031:2;;;-1:-1;;29067:12;29031:2;29097:89;29178:7;29169:6;29158:9;29154:22;29097:89;;;29087:99;;29244:3;29233:9;29229:19;29223:26;29209:40;;28822:18;29261:6;29258:30;29255:2;;;-1:-1;;29291:12;29255:2;;29321:73;29386:7;29377:6;29366:9;29362:22;29321:73;;;29311:83;;;28451:959;;;;;;;;;29417:767;;;;;29591:3;29579:9;29570:7;29566:23;29562:33;29559:2;;;-1:-1;;29598:12;29559:2;29660:63;29715:7;29691:22;29660:63;;;29650:73;;29760:2;29814:9;29810:22;220:13;238:33;265:5;238:33;;;29900:2;29885:18;;29879:25;29768:74;;-1:-1;29924:18;29913:30;;29910:2;;;-1:-1;;29946:12;29910:2;29976:73;30041:7;30032:6;30021:9;30017:22;29976:73;;;30086:2;30136:22;;;;6715:13;29553:631;;;;-1:-1;;;;29553:631;30191:533;;;;30339:2;30327:9;30318:7;30314:23;30310:32;30307:2;;;-1:-1;;30345:12;30307:2;30407:63;30462:7;30438:22;30407:63;;;30397:73;;30507:2;30561:9;30557:22;220:13;238:33;265:5;238:33;;;30515:74;;;;30626:2;30680:9;30676:22;20131:13;30634:74;;30301:423;;;;;;30731:801;;;;30934:2;30922:9;30913:7;30909:23;30905:32;30902:2;;;-1:-1;;30940:12;30902:2;6861:6;6855:13;6873:32;6899:5;6873:32;;;31123:2;31108:18;;31102:25;30992:73;;-1:-1;31147:18;31136:30;;;31133:2;;;-1:-1;;31169:12;31133:2;31199:89;31280:7;31271:6;31260:9;31256:22;31199:89;;;31189:99;;31346:2;31335:9;31331:18;31325:25;31311:39;;31147:18;31362:6;31359:30;31356:2;;;-1:-1;;31392:12;31356:2;;31422:94;31508:7;31499:6;31488:9;31484:22;31422:94;;31539:345;;31652:2;31640:9;31631:7;31627:23;31623:32;31620:2;;;-1:-1;;31658:12;31620:2;31716:17;31703:31;31754:18;31746:6;31743:30;31740:2;;;-1:-1;;31776:12;31740:2;31806:62;31860:7;31851:6;31840:9;31836:22;31806:62;;31891:360;;32015:2;32003:9;31994:7;31990:23;31986:32;31983:2;;;-1:-1;;32021:12;31983:2;32072:17;32066:24;32110:18;32102:6;32099:30;32096:2;;;-1:-1;;32132:12;32096:2;32162:73;32227:7;32218:6;32207:9;32203:22;32162:73;;32258:295;;32389:2;32377:9;32368:7;32364:23;32360:32;32357:2;;;-1:-1;;32395:12;32357:2;8801:6;8795:13;8813:49;8856:5;8813:49;;32560:313;;32700:2;32688:9;32679:7;32675:23;32671:32;32668:2;;;-1:-1;;32706:12;32668:2;9156:6;9150:13;99519:1;99512:5;99509:12;99499:2;;-1:-1;;99525:12;32880:1206;;;;;33155:3;33143:9;33134:7;33130:23;33126:33;33123:2;;;-1:-1;;33162:12;33123:2;33213:17;33207:24;33251:18;;33243:6;33240:30;33237:2;;;-1:-1;;33273:12;33237:2;33303:74;33369:7;33360:6;33349:9;33345:22;33303:74;;;33293:84;;33435:2;;;;33424:9;33420:18;33414:25;33251:18;33451:6;33448:30;33445:2;;;-1:-1;;33481:12;33445:2;33602:6;33591:9;33587:22;4280:3;4273:4;4265:6;4261:17;4257:27;4247:2;;-1:-1;;4288:12;4247:2;4328:6;4322:13;4308:27;;4350:99;4365:83;4441:6;4365:83;;4350:99;4477:21;;;4534:14;;;;4509:17;;;-1:-1;4614:256;4639:6;4636:1;4633:13;4614:256;;;4739:67;4802:3;33435:2;4715:3;4709:10;4513:6;4697:23;;4739:67;;;4727:80;;4821:14;;;;4849;;;;4661:1;4654:9;4614:256;;;-1:-1;;33677:2;33662:18;;33656:25;33501:118;;-1:-1;33656:25;-1:-1;;;;33690:30;;;33687:2;;;-1:-1;;33723:12;33687:2;33753:89;33834:7;33825:6;33814:9;33810:22;33753:89;;;33743:99;;33900:2;33889:9;33885:18;33879:25;33865:39;;33251:18;33916:6;33913:30;33910:2;;;-1:-1;;33946:12;33910:2;;33976:94;34062:7;34053:6;34042:9;34038:22;33976:94;;34093:317;;34235:2;34223:9;34214:7;34210:23;34206:32;34203:2;;;-1:-1;;34241:12;34203:2;9886:20;34235:2;9886:20;;;8974:6;8968:13;99393:1;99386:5;99383:12;99373:2;;-1:-1;;99399:12;99373:2;9970:102;;10138:2;10203:22;;;6715:13;10153:16;;;10146:86;10316:2;10381:22;;;20131:13;10331:16;;;10324:86;;;;-1:-1;9977:16;34197:213;-1:-1;34197:213;34417:623;;;;34578:2;34566:9;34557:7;34553:23;34549:32;34546:2;;;-1:-1;;34584:12;34546:2;34642:17;34629:31;34680:18;34672:6;34669:30;34666:2;;;-1:-1;;34702:12;34666:2;34732:76;34800:7;34791:6;34780:9;34776:22;34732:76;;;34722:86;;;34845:2;34888:9;34884:22;72:20;97:33;124:5;97:33;;;34540:500;;34853:63;;-1:-1;;;34953:2;34992:22;;;;19983:20;;34540:500;35047:602;;;35200:2;35188:9;35179:7;35175:23;35171:32;35168:2;;;-1:-1;;35206:12;35168:2;35264:17;35251:31;35302:18;;35294:6;35291:30;35288:2;;;-1:-1;;35324:12;35288:2;35354:76;35422:7;35413:6;35402:9;35398:22;35354:76;;;35344:86;;35495:2;35484:9;35480:18;35467:32;35453:46;;35302:18;35511:6;35508:30;35505:2;;;-1:-1;;35541:12;35505:2;;35571:62;35625:7;35616:6;35605:9;35601:22;35571:62;;35656:623;;;;35817:2;35805:9;35796:7;35792:23;35788:32;35785:2;;;-1:-1;;35823:12;35785:2;35881:17;35868:31;35919:18;35911:6;35908:30;35905:2;;;-1:-1;;35941:12;35905:2;35971:76;36039:7;36030:6;36019:9;36015:22;35971:76;;;35961:86;;;36084:2;36127:9;36123:22;19983:20;36092:63;;36192:2;36235:9;36231:22;72:20;97:33;124:5;97:33;;;36200:63;;;;35779:500;;;;;;36286:647;;;;36459:2;36447:9;36438:7;36434:23;36430:32;36427:2;;;-1:-1;;36465:12;36427:2;36523:17;36510:31;36561:18;;36553:6;36550:30;36547:2;;;-1:-1;;36583:12;36547:2;36684:6;36673:9;36669:22;19002:4;18990:9;18985:3;18981:19;18977:30;18974:2;;;-1:-1;;19010:12;18974:2;19038:20;19002:4;19038:20;;;19029:29;;19161:22;19983:20;19122:16;19115:75;19268:2;19326:9;19322:22;19983:20;19268:2;19287:5;19283:16;19276:75;19416:2;19474:9;19470:22;19983:20;19416:2;19435:5;19431:16;19424:75;19602:49;19647:3;36459:2;19627:9;19623:22;19602:49;;;36459:2;19588:5;19584:16;19577:75;19741:3;19730:9;19726:19;19713:33;36561:18;19758:6;19755:30;19752:2;;;-1:-1;;19788:12;19752:2;19833:54;19883:3;19874:6;19863:9;19859:22;19833:54;;;19741:3;19815:16;;19808:80;-1:-1;19819:5;;-1:-1;;;19268:2;36777:22;;19983:20;;-1:-1;36864:53;36909:7;19416:2;36885:22;;36864:53;;;36854:63;;36421:512;;;;;;36940:263;;37055:2;37043:9;37034:7;37030:23;37026:32;37023:2;;;-1:-1;;37061:12;37023:2;-1:-1;20131:13;;37017:186;-1:-1;37017:186;37211:189;-1:-1;;;;;96638:54;39439:45;;37389:4;37380:14;;37299:101;38195:269;;38328:96;38420:3;38412:6;38328:96;;;-1:-1;;38453:4;38444:14;;38321:143;39352:137;-1:-1;;;;;96638:54;39439:45;;39433:56;41451:888;;41592:73;41659:5;90086:12;92454:6;92449:3;92442:19;92491:4;;92486:3;92482:14;41671:98;;92491:4;;41826:6;41822:17;92486:3;41813:27;;92491:4;41916:5;88923:14;-1:-1;41955:345;41980:6;41977:1;41974:13;41955:345;;;-1:-1;;92486:3;42036:4;42032:20;;42027:3;42020:33;37690:60;37746:3;42087:6;42081:13;37690:60;;;42279:14;;;;42101:82;-1:-1;91530:14;;;;42002:1;41995:9;41955:345;;;-1:-1;42323:10;;41585:754;-1:-1;;;;;;;41585:754;47323:690;;47516:5;90086:12;92454:6;92449:3;92442:19;92491:4;92486:3;92482:14;47528:93;;92491:4;47692:5;88923:14;-1:-1;47731:260;47756:6;47753:1;47750:13;47731:260;;;47817:13;;49047:37;;92491:4;39126:14;;;;91530;;;;47778:1;47771:9;47731:260;;;-1:-1;47997:10;;47447:566;-1:-1;;;;47447:566;49461:343;;49603:5;90086:12;92454:6;92449:3;92442:19;49696:52;49741:6;92491:4;92486:3;92482:14;92491:4;49722:5;49718:16;49696:52;;;98157:2;98137:14;-1:-1;;98133:28;49760:39;;;;92491:4;49760:39;;49551:253;-1:-1;;49551:253;52989:683;53215:16;53209:23;98512:1;98505:5;98502:12;98492:2;;98518:9;98492:2;52005:64;;53399:4;53388:16;;;53382:23;53459:14;;;49047:37;53576:4;53565:16;;;53559:23;53636:14;;49047:37;53109:563;54469:2780;;54616:6;54721:63;54769:14;54698:16;54692:23;54721:63;;;54871:4;54864:5;54860:16;54854:23;54883:63;54871:4;54935:3;54931:14;54917:12;54883:63;;;;55040:4;55033:5;55029:16;55023:23;55052:63;55040:4;55104:3;55100:14;55086:12;55052:63;;;;55203:4;55196:5;55192:16;55186:23;55215:63;55203:4;55267:3;55263:14;55249:12;55215:63;;;;55369:4;55362:5;55358:16;55352:23;55369:4;55433:3;55429:14;49047:37;55535:4;55528:5;55524:16;55518:23;55535:4;55599:3;55595:14;49047:37;55693:4;55686:5;55682:16;55676:23;55693:4;55757:3;55753:14;49047:37;55851:4;55844:5;55840:16;55834:23;55851:4;55915:3;55911:14;49047:37;56022:6;;56015:5;56011:18;56005:25;56022:6;56088:3;56084:16;49047:37;;56180:6;;56173:5;56169:18;56163:25;56180:6;56246:3;56242:16;49047:37;;56348:6;;56341:5;56337:18;56331:25;54616:6;56348;56380:3;56376:16;56369:40;56424:67;54616:6;54611:3;54607:16;56472:12;56424:67;;;56416:75;;;56586:6;;;;56579:5;56575:18;56569:25;56642:3;56636:4;56632:14;56586:6;56618:3;56614:16;56607:40;56662:67;56724:4;56710:12;56662:67;;;56654:75;;;;56827:6;;56820:5;56816:18;56810:25;56883:3;56877:4;56873:14;56827:6;56859:3;56855:16;56848:40;56903:67;56965:4;56951:12;56903:67;;;56895:75;;;57068:6;;;;57061:5;57057:18;57051:25;57124:3;57118:4;57114:14;57068:6;57100:3;57096:16;57089:40;57144:67;57206:4;57192:12;57144:67;;;57233:11;54589:2660;-1:-1;;;;;;54589:2660;66464:262;;50337:5;90086:12;50448:52;50493:6;50488:3;50481:4;50474:5;50470:16;50448:52;;;50512:16;;;;;66589:137;-1:-1;;66589:137;66733:213;-1:-1;;;;;96638:54;;;;39439:45;;66851:2;66836:18;;66822:124;67189:324;-1:-1;;;;;96638:54;;;39439:45;;96638:54;;67499:2;67484:18;;39439:45;67335:2;67320:18;;67306:207;67520:467;-1:-1;;;;;96638:54;;;39439:45;;96638:54;;;67882:2;67867:18;;39439:45;96638:54;;;67973:2;67958:18;;39439:45;67702:2;67687:18;;67673:314;67994:1107;;68392:3;68381:9;68377:19;-1:-1;;;;;39477:5;96638:54;39446:3;39439:45;68519:2;68392:3;68519:2;68508:9;68504:18;68497:48;68559:154;46518:5;90086:12;46537:113;46643:6;46638:3;46537:113;;;46530:120;;;;;68519:2;46707:6;46703:17;46698:3;46694:27;68519:2;46811:5;88923:14;-1:-1;46850:395;46875:6;46872:1;46869:13;46850:395;;;46937:9;46931:4;46927:20;46922:3;46915:33;38862:96;38954:3;46982:6;46976:13;38862:96;;;47224:14;;;;46996:118;-1:-1;91530:14;;;;46897:1;46890:9;46850:395;;;46854:14;;68761:9;68755:4;68751:20;68746:2;68735:9;68731:18;68724:48;68786:116;;;40204:5;90086:12;40142:68;;40223:94;40310:6;40305:3;40223:94;;;40216:101;;;;68519:2;40388:5;88923:14;-1:-1;40427:268;40452:6;40449:1;40446:13;40427:268;;;40540:71;40607:3;40519:6;40513:13;40540:71;;;40533:78;-1:-1;91530:14;;;;46897:1;40467:9;40427:268;;;40431:14;;;;68950:9;68944:4;68940:20;68935:2;68924:9;68920:18;68913:48;68975:116;69086:4;69077:6;68975:116;;;68967:124;68363:738;-1:-1;;;;;;;68363:738;69108:967;;-1:-1;;;;;96642:5;96638:54;39446:3;39439:45;69436:3;69563:2;69552:9;69548:18;69541:48;69603:116;69436:3;69425:9;69421:19;69705:6;69603:116;;;69767:9;69761:4;69757:20;69752:2;69741:9;69737:18;69730:48;69792:116;69903:4;69894:6;69792:116;;;69956:9;69950:4;69946:20;69941:2;69930:9;69926:18;69919:48;69981:84;70060:4;70051:6;69981:84;;;69973:92;69407:668;-1:-1;;;;;;;;69407:668;70082:551;;-1:-1;;;;;39477:5;96638:54;39446:3;39439:45;70282:2;70408;70397:9;70393:18;70386:48;70448:84;70282:2;70271:9;70267:18;70518:6;70448:84;;;70440:92;;49077:5;70619:2;70608:9;70604:18;49047:37;70253:380;;;;;;;70640:727;;-1:-1;;;;;96649:42;39477:5;96638:54;39446:3;39439:45;70896:3;71023:2;71012:9;71008:18;71001:48;71063:112;70896:3;70885:9;70881:19;71161:6;71063:112;;;96638:54;;71262:2;71247:18;;39439:45;-1:-1;71353:2;71338:18;49047:37;71055:120;70867:500;-1:-1;;70867:500;71374:324;-1:-1;;;;;96638:54;;;;39439:45;;71684:2;71669:18;;49047:37;71520:2;71505:18;;71491:207;72060:407;72251:2;72265:47;;;90086:12;;72236:18;;;92442:19;;;72060:407;;88923:14;;;92482;;;;72060:407;43847:308;43872:6;43869:1;43866:13;43847:308;;;43939:6;43933:13;98635:1;98628:5;98625:12;98615:2;;98641:9;98615:2;52165:73;;72251:2;91530:14;;;;38166;;;;43894:1;43887:9;43847:308;;;-1:-1;72318:139;;72222:245;-1:-1;;;;;72222:245;72474:959;;72838:2;72827:9;72823:18;72838:2;72859:17;72852:47;72913:154;44514:5;90086:12;44533:109;44635:6;44630:3;44533:109;;;44526:116;;88932:4;;;;44736:5;88923:14;-1:-1;44775:329;44800:6;44797:1;44794:13;44775:329;;;44888:109;44993:3;44867:6;44861:13;44888:109;;;44881:116;-1:-1;91530:14;;;;44822:1;44815:9;44775:329;;;44779:14;;;73115:9;73109:4;73105:20;88932:4;73089:9;73085:18;73078:48;73140:108;73243:4;73234:6;73140:108;;;73286:20;;;73281:2;73266:18;;73259:48;90086:12;;92442:19;;;92482:14;;;;-1:-1;88923:14;;;;-1:-1;41143:251;41168:6;41165:1;41162:13;41143:251;;;41229:13;;95558;95551:21;48829:34;;37550:14;;;;91530;;;;44822:1;41183:9;41143:251;;;-1:-1;73313:110;;72809:624;-1:-1;;;;;;;;72809:624;73440:361;;73608:2;73629:17;73622:47;73683:108;73608:2;73597:9;73593:18;73777:6;73683:108;;73808:664;;74072:2;74093:17;74086:47;74147:116;74072:2;74061:9;74057:18;74249:6;74147:116;;;74296:2;74311:9;74305:4;74301:20;74296:2;74285:9;74281:18;74274:48;74336:126;42590:5;90086:12;92454:6;92449:3;92442:19;74296:2;92486:3;92482:14;42602:106;;74296:2;;42765:6;42761:17;92486:3;42752:27;;74296:2;42855:5;88923:14;-1:-1;42894:353;42919:6;42916:1;42913:13;42894:353;;;-1:-1;;92486:3;42975:4;42971:20;;42966:3;42959:33;37884:68;37948:3;43026:6;43020:13;37884:68;;;43226:14;;;;43040:90;-1:-1;91530:14;;;;42941:1;42934:9;42894:353;;;-1:-1;74328:134;;74043:429;-1:-1;;;;;;;;;74043:429;74479:620;;74725:2;74746:17;74739:47;74800:108;74725:2;74714:9;74710:18;74894:6;74800:108;;;74956:9;74950:4;74946:20;74941:2;74930:9;74926:18;74919:48;74981:108;75084:4;75075:6;74981:108;;75106:213;49047:37;;;75224:2;75209:18;;75195:124;75326:209;-1:-1;;;;;;95724:78;;;;49413:36;;75442:2;75427:18;;75413:122;75542:320;-1:-1;;;;;;95724:78;;;;49413:36;;-1:-1;;;;;96638:54;75848:2;75833:18;;39439:45;75686:2;75671:18;;75657:205;75869:627;;-1:-1;;;;;;49442:5;95724:78;49420:3;49413:36;-1:-1;;;;;96649:42;39477:5;96638:54;76250:2;76239:9;76235:18;39439:45;96649:42;39477:5;96638:54;76333:2;76322:9;76318:18;39439:45;;76087:3;76370:2;76359:9;76355:18;76348:48;76410:76;76087:3;76076:9;76072:19;76472:6;76410:76;;76503:1035;;-1:-1;;;;;;49442:5;95724:78;49420:3;49413:36;-1:-1;;;;;39477:5;96638:54;77012:2;77001:9;76997:18;39439:45;76849:3;77049:2;77038:9;77034:18;77027:48;77089:108;76849:3;76838:9;76834:19;77183:6;77089:108;;;77245:9;77239:4;77235:20;77230:2;77219:9;77215:18;77208:48;77270:108;77373:4;77364:6;77270:108;;;77427:9;77421:4;77417:20;77411:3;77400:9;77396:19;77389:49;77452:76;77523:4;77514:6;77452:76;;;77444:84;76820:718;-1:-1;;;;;;;;;76820:718;77545:627;;-1:-1;;;;;;49442:5;95724:78;49420:3;49413:36;-1:-1;;;;;39477:5;96638:54;77926:2;77915:9;77911:18;39439:45;77763:3;77963:2;77952:9;77948:18;77941:48;78003:76;77763:3;77752:9;77748:19;78065:6;78003:76;;;77995:84;;49077:5;78158:2;78147:9;78143:18;49047:37;77734:438;;;;;;;;78179:431;-1:-1;;;;;;95724:78;;;;49413:36;;-1:-1;;;;;96638:54;;;;78513:2;78498:18;;39439:45;78596:2;78581:18;;49047:37;78351:2;78336:18;;78322:288;78617:747;;-1:-1;;;;;;49442:5;95724:78;49420:3;49413:36;78899:2;79015;79004:9;79000:18;78993:48;79055:108;78899:2;78888:9;78884:18;79149:6;79055:108;;;79211:9;79205:4;79201:20;79196:2;79185:9;79181:18;79174:48;79236:118;79349:4;79340:6;79236:118;;79371:305;;79511:2;79532:17;79525:47;79586:80;79511:2;79500:9;79496:18;79652:6;79586:80;;80307:707;;80565:3;80587:17;80580:47;80641:76;80565:3;80554:9;80550:19;80703:6;80641:76;;;-1:-1;;;;;96638:54;;;80812:2;80797:18;;39439:45;96638:54;;;;80911:2;80896:18;;39439:45;96854:4;96843:16;;;;81000:2;80985:18;;;52506:56;80633:84;80536:478;-1:-1;;80536:478;81021:473;81214:2;81199:18;;98264:1;98254:12;;98244:2;;98270:9;98244:2;51648:69;;;81397:2;81382:18;;49047:37;;;;81480:2;81465:18;;;49047:37;81185:309;;81501:503;81709:2;81694:18;;98398:1;98388:12;;98378:2;;98404:9;82011:259;82152:2;82137:18;;98635:1;98625:12;;98615:2;;98641:9;98615:2;52165:73;;;82123:147;;82277:1175;;82697:3;82719:17;82712:47;82773:78;82697:3;82686:9;82682:19;82837:6;82773:78;;;82884:2;82899:9;82893:4;82889:20;82884:2;82873:9;82869:18;82862:48;82924:146;45443:5;90086:12;92454:6;92449:3;92442:19;82884:2;92486:3;92482:14;45455:112;;82884:2;;45624:6;45620:17;92486:3;45611:27;;82884:2;45728:5;88923:14;-1:-1;45767:387;45792:6;45789:1;45786:13;45767:387;;;-1:-1;;92486:3;45848:4;45844:20;;45839:3;45832:33;38612:88;38696:3;45899:6;45893:13;38612:88;;;46133:14;;;;45913:110;-1:-1;91530:14;;;;45814:1;45807:9;45767:387;;;45771:14;;83118:9;83112:4;83108:20;83103:2;83092:9;83088:18;83081:48;83143:108;83246:4;83237:6;83143:108;;;83135:116;;;;;;83299:9;83293:4;83289:20;83284:2;83273:9;83269:18;83262:48;83324:118;83437:4;83428:6;83324:118;;83459:533;83681:3;83666:19;;83696:125;83670:9;83794:6;83696:125;;;49077:5;83900:2;83889:9;83885:18;49047:37;48856:5;95558:13;95551:21;83977:3;83966:9;83962:19;48829:34;83652:340;;;;;;;83999:353;;84163:2;84184:17;84177:47;84238:104;84163:2;84152:9;84148:18;84328:6;84238:104;;84359:488;;84559:2;84580:17;84573:47;84634:112;84559:2;84548:9;84544:18;84732:6;84634:112;;;84626:120;;-1:-1;;;;;39477:5;96638:54;84833:2;84822:9;84818:18;39439:45;84530:317;;;;;;84854:548;;85064:2;85085:17;85078:47;85139:104;85064:2;85053:9;85049:18;85229:6;85139:104;;;85291:9;85285:4;85281:20;85276:2;85265:9;85261:18;85254:48;85316:76;85387:4;85378:6;85316:76;;85629:324;49047:37;;;85939:2;85924:18;;49047:37;85775:2;85760:18;;85746:207;85960:256;86022:2;86016:9;86048:17;;;86123:18;86108:34;;86144:22;;;86105:62;86102:2;;;86180:1;;86170:12;86102:2;86022;86189:22;86000:216;;-1:-1;86000:216;86223:304;;86382:18;86374:6;86371:30;86368:2;;;-1:-1;;86404:12;86368:2;-1:-1;86449:4;86437:17;;;86502:15;;86305:222;87827:317;;87966:18;87958:6;87955:30;87952:2;;;-1:-1;;87988:12;87952:2;-1:-1;88065:4;88042:17;-1:-1;;88038:33;88129:4;88119:15;;87889:255;97793:268;97858:1;97865:101;97879:6;97876:1;97873:13;97865:101;;;97946:11;;;97940:18;97927:11;;;97920:39;97901:2;97894:10;97865:101;;;97981:6;97978:1;97975:13;97972:2;;;97858:1;98037:6;98032:3;98028:16;98021:27;97972:2;;97842:219;;;;98664:117;-1:-1;;;;;98751:5;96638:54;98726:5;98723:35;98713:2;;98772:1;;98762:12;99030:115;-1:-1;;;;;;99115:5;95724:78;99091:5;99088:34;99078:2;;99136:1;;99126:12"
            }
        }
    },
    "sourceTreeHashHex": "0xb6527c54911b970811d496653ccdb01e8fb1fa5cb82d0b0ebc20f92bda189fd1",
    "sources": {
        "./DevUtils.sol": {
            "id": 2
        },
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": {
            "id": 22
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 43
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 27
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 28
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 41
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 42
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 44
        },
        "./Addresses.sol": {
            "id": 0
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol": {
            "id": 13
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 30
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 31
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 24
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 45
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 46
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 25
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 26
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 33
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 32
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 34
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 35
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 29
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 37
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 40
        },
        "./OrderValidationUtils.sol": {
            "id": 10
        },
        "./AssetBalance.sol": {
            "id": 1
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetProxy.sol": {
            "id": 14
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 19
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 20
        },
        "@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol": {
            "id": 21
        },
        "@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol": {
            "id": 18
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IChai.sol": {
            "id": 15
        },
        "./LibDydxBalance.sol": {
            "id": 6
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol": {
            "id": 17
        },
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": {
            "id": 16
        },
        "@0x/contracts-utils/contracts/src/D18.sol": {
            "id": 39
        },
        "./LibAssetData.sol": {
            "id": 5
        },
        "./LibOrderTransferSimulation.sol": {
            "id": 7
        },
        "@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol": {
            "id": 38
        },
        "@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol": {
            "id": 23
        },
        "./EthBalanceChecker.sol": {
            "id": 3
        },
        "./ExternalFunctions.sol": {
            "id": 4
        },
        "./LibTransactionDecoder.sol": {
            "id": 8
        }
    },
    "sourceCodes": {
        "./DevUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"./Addresses.sol\";\nimport \"./OrderValidationUtils.sol\";\nimport \"./EthBalanceChecker.sol\";\nimport \"./ExternalFunctions.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract DevUtils is\n    Addresses,\n    OrderValidationUtils,\n    LibEIP712ExchangeDomain,\n    EthBalanceChecker,\n    ExternalFunctions\n{\n    constructor (\n        address exchange_,\n        address chaiBridge_,\n        address dydxBridge_\n    )\n        public\n        Addresses(\n            exchange_,\n            chaiBridge_,\n            dydxBridge_\n        )\n        LibEIP712ExchangeDomain(uint256(0), address(0)) // null args because because we only use constants\n    {}\n\n    function getOrderHash(\n        LibOrder.Order memory order,\n        uint256 chainId,\n        address exchange\n    )\n        public\n        pure\n        returns (bytes32 orderHash)\n    {\n        return LibOrder.getTypedDataHash(\n            order,\n            LibEIP712.hashEIP712Domain(_EIP712_EXCHANGE_DOMAIN_NAME, _EIP712_EXCHANGE_DOMAIN_VERSION, chainId, exchange)\n        );\n    }\n\n    function getTransactionHash(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        uint256 chainId,\n        address exchange\n    )\n        public\n        pure\n        returns (bytes32 transactionHash)\n    {\n        return LibZeroExTransaction.getTypedDataHash(\n            transaction,\n            LibEIP712.hashEIP712Domain(_EIP712_EXCHANGE_DOMAIN_NAME, _EIP712_EXCHANGE_DOMAIN_VERSION, chainId, exchange)\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibEIP712ExchangeDomain.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\ncontract LibEIP712ExchangeDomain {\n\n    // EIP712 Exchange Domain Name value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_NAME = \"0x Protocol\";\n\n    // EIP712 Exchange Domain Version value\n    string constant internal _EIP712_EXCHANGE_DOMAIN_VERSION = \"3.0.0\";\n\n    // solhint-disable var-name-mixedcase\n    /// @dev Hash of the EIP712 Domain Separator data\n    /// @return 0 Domain hash.\n    bytes32 public EIP712_EXCHANGE_DOMAIN_HASH;\n    // solhint-enable var-name-mixedcase\n\n    /// @param chainId Chain ID of the network this contract is deployed on.\n    /// @param verifyingContractAddressIfExists Address of the verifying contract (null if the address of this contract)\n    constructor (\n        uint256 chainId,\n        address verifyingContractAddressIfExists\n    )\n        public\n    {\n        address verifyingContractAddress = verifyingContractAddressIfExists == address(0) ? address(this) : verifyingContractAddressIfExists;\n        EIP712_EXCHANGE_DOMAIN_HASH = LibEIP712.hashEIP712Domain(\n            _EIP712_EXCHANGE_DOMAIN_NAME,\n            _EIP712_EXCHANGE_DOMAIN_VERSION,\n            chainId,\n            verifyingContractAddress\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "./Addresses.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract Addresses is\n    DeploymentConstants\n{\n    address public exchangeAddress;\n    address public erc20ProxyAddress;\n    address public erc721ProxyAddress;\n    address public erc1155ProxyAddress;\n    address public staticCallProxyAddress;\n    address public chaiBridgeAddress;\n    address public dydxBridgeAddress;\n\n    constructor (\n        address exchange_,\n        address chaiBridge_,\n        address dydxBridge_\n    )\n        public\n    {\n        exchangeAddress = exchange_;\n        chaiBridgeAddress = chaiBridge_;\n        dydxBridgeAddress = dydxBridge_;\n        erc20ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC20Token.selector);\n        erc721ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC721Token.selector);\n        erc1155ProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).ERC1155Assets.selector);\n        staticCallProxyAddress = IExchange(exchange_).getAssetProxy(IAssetData(address(0)).StaticCall.selector);\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\n// solhint-disable\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\n// @dev Interface of the asset proxy's assetData.\n// The asset proxies take an ABI encoded `bytes assetData` as argument.\n// This argument is ABI encoded as one of the methods of this interface.\ninterface IAssetData {\n\n    /// @dev Function signature for encoding ERC20 assetData.\n    /// @param tokenAddress Address of ERC20Token contract.\n    function ERC20Token(address tokenAddress)\n        external;\n\n    /// @dev Function signature for encoding ERC721 assetData.\n    /// @param tokenAddress Address of ERC721 token contract.\n    /// @param tokenId Id of ERC721 token to be transferred.\n    function ERC721Token(\n        address tokenAddress,\n        uint256 tokenId\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC1155 assetData.\n    /// @param tokenAddress Address of ERC1155 token contract.\n    /// @param tokenIds Array of ids of tokens to be transferred.\n    /// @param values Array of values that correspond to each token id to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param callbackData Extra data to be passed to receiver's `onERC1155Received` callback function.\n    function ERC1155Assets(\n        address tokenAddress,\n        uint256[] calldata tokenIds,\n        uint256[] calldata values,\n        bytes calldata callbackData\n    )\n        external;\n\n    /// @dev Function signature for encoding MultiAsset assetData.\n    /// @param values Array of amounts that correspond to each asset to be transferred.\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\n    /// @param nestedAssetData Array of assetData fields that will be be dispatched to their correspnding AssetProxy contract.\n    function MultiAsset(\n        uint256[] calldata values,\n        bytes[] calldata nestedAssetData\n    )\n        external;\n\n    /// @dev Function signature for encoding StaticCall assetData.\n    /// @param staticCallTargetAddress Address that will execute the staticcall.\n    /// @param staticCallData Data that will be executed via staticcall on the staticCallTargetAddress.\n    /// @param expectedReturnDataHash Keccak-256 hash of the expected staticcall return data.\n    function StaticCall(\n        address staticCallTargetAddress,\n        bytes calldata staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        external;\n\n    /// @dev Function signature for encoding ERC20Bridge assetData.\n    /// @param tokenAddress Address of token to transfer.\n    /// @param bridgeAddress Address of the bridge contract.\n    /// @param bridgeData Arbitrary data to be passed to the bridge contract.\n    function ERC20Bridge(\n        address tokenAddress,\n        address bridgeAddress,\n        bytes calldata bridgeData\n    )\n        external;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    // ///@dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "./OrderValidationUtils.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./Addresses.sol\";\nimport \"./AssetBalance.sol\";\nimport \"./LibAssetData.sol\";\nimport \"./LibOrderTransferSimulation.sol\";\n\n\ncontract OrderValidationUtils is\n    Addresses,\n    AssetBalance\n{\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied order is fillable.\n    /// @param order The order structure.\n    /// @param signature Signature provided by maker that proves the order's authenticity.\n    /// `0x01` can always be provided if the signature does not need to be validated.\n    /// @return The orderInfo (hash, status, and `takerAssetAmount` already filled for the given order),\n    /// fillableTakerAssetAmount (amount of the order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (validity of the provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, `fillableTakerAssetAmount` will represent a \"scaled\"\n    /// amount, meaning it must be multiplied by all the individual asset amounts within the `takerAssetData` to get the final\n    /// amount of each asset that can be filled.\n    function getOrderRelevantState(LibOrder.Order memory order, bytes memory signature)\n        public\n        returns (\n            LibOrder.OrderInfo memory orderInfo,\n            uint256 fillableTakerAssetAmount,\n            bool isValidSignature\n        )\n    {\n        // Get info specific to order\n        orderInfo = IExchange(exchangeAddress).getOrderInfo(order);\n\n        // Validate the maker's signature\n        address makerAddress = order.makerAddress;\n        isValidSignature = IExchange(exchangeAddress).isValidOrderSignature(\n            order,\n            signature\n        );\n\n        // Get the transferable amount of the `makerAsset`\n        uint256 transferableMakerAssetAmount = _getTransferableConvertedMakerAssetAmount(\n            order\n        );\n\n        // Get the amount of `takerAsset` that is transferable to maker given the\n        // transferability of `makerAsset`, `makerFeeAsset`,\n        // and the total amounts specified in the order\n        uint256 transferableTakerAssetAmount;\n        if (order.makerAssetData.equals(order.makerFeeAssetData)) {\n            // If `makerAsset` equals `makerFeeAsset`, the % that can be filled is\n            // transferableMakerAssetAmount / (makerAssetAmount + makerFee)\n            transferableTakerAssetAmount = LibMath.getPartialAmountFloor(\n                transferableMakerAssetAmount,\n                order.makerAssetAmount.safeAdd(order.makerFee),\n                order.takerAssetAmount\n            );\n        } else {\n            // If `makerFee` is 0, the % that can be filled is (transferableMakerAssetAmount / makerAssetAmount)\n            if (order.makerFee == 0) {\n                transferableTakerAssetAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    order.takerAssetAmount\n                );\n\n            // If `makerAsset` does not equal `makerFeeAsset`, the % that can be filled is the lower of\n            // (transferableMakerAssetAmount / makerAssetAmount) and (transferableMakerAssetFeeAmount / makerFee)\n            } else {\n                // Get the transferable amount of the `makerFeeAsset`\n                uint256 transferableMakerFeeAssetAmount = getTransferableAssetAmount(\n                    makerAddress,\n                    order.makerFeeAssetData\n                );\n                uint256 transferableMakerToTakerAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerAssetAmount,\n                    order.makerAssetAmount,\n                    order.takerAssetAmount\n                );\n                uint256 transferableMakerFeeToTakerAmount = LibMath.getPartialAmountFloor(\n                    transferableMakerFeeAssetAmount,\n                    order.makerFee,\n                    order.takerAssetAmount\n                );\n                transferableTakerAssetAmount = LibSafeMath.min256(transferableMakerToTakerAmount, transferableMakerFeeToTakerAmount);\n            }\n        }\n\n        // `fillableTakerAssetAmount` is the lower of the order's remaining `takerAssetAmount` and the `transferableTakerAssetAmount`\n        fillableTakerAssetAmount = LibSafeMath.min256(\n            order.takerAssetAmount.safeSub(orderInfo.orderTakerAssetFilledAmount),\n            transferableTakerAssetAmount\n        );\n\n        // Ensure that all of the asset data is valid. Fee asset data only needs\n        // to be valid if the fees are nonzero.\n        if (!_areOrderAssetDatasValid(order)) {\n            fillableTakerAssetAmount = 0;\n        }\n\n        // If the order is not fillable, then the fillable taker asset amount is\n        // zero by definition.\n        if (orderInfo.orderStatus != LibOrder.OrderStatus.FILLABLE) {\n            fillableTakerAssetAmount = 0;\n        }\n\n        return (orderInfo, fillableTakerAssetAmount, isValidSignature);\n    }\n\n    /// @dev Fetches all order-relevant information needed to validate if the supplied orders are fillable.\n    /// @param orders Array of order structures.\n    /// @param signatures Array of signatures provided by makers that prove the authenticity of the orders.\n    /// `0x01` can always be provided if a signature does not need to be validated.\n    /// @return The ordersInfo (array of the hash, status, and `takerAssetAmount` already filled for each order),\n    /// fillableTakerAssetAmounts (array of amounts for each order's `takerAssetAmount` that is fillable given all on-chain state),\n    /// and isValidSignature (array containing the validity of each provided signature).\n    /// NOTE: If the `takerAssetData` encodes data for multiple assets, each element of `fillableTakerAssetAmounts`\n    /// will represent a \"scaled\" amount, meaning it must be multiplied by all the individual asset amounts within\n    /// the `takerAssetData` to get the final amount of each asset that can be filled.\n    function getOrderRelevantStates(LibOrder.Order[] memory orders, bytes[] memory signatures)\n        public\n        returns (\n            LibOrder.OrderInfo[] memory ordersInfo,\n            uint256[] memory fillableTakerAssetAmounts,\n            bool[] memory isValidSignature\n        )\n    {\n        uint256 length = orders.length;\n        ordersInfo = new LibOrder.OrderInfo[](length);\n        fillableTakerAssetAmounts = new uint256[](length);\n        isValidSignature = new bool[](length);\n\n        for (uint256 i = 0; i != length; i++) {\n            (ordersInfo[i], fillableTakerAssetAmounts[i], isValidSignature[i]) = getOrderRelevantState(\n                orders[i],\n                signatures[i]\n            );\n        }\n\n        return (ordersInfo, fillableTakerAssetAmounts, isValidSignature);\n    }\n\n    /// @dev Gets the amount of an asset transferable by the maker of an order.\n    /// @param ownerAddress Address of the owner of the asset.\n    /// @param assetData Description of tokens, per the AssetProxy contract specification.\n    /// @return The amount of the asset tranferable by the owner.\n    /// NOTE: If the `assetData` encodes data for multiple assets, the `transferableAssetAmount`\n    /// will represent the amount of times the entire `assetData` can be transferred. To calculate\n    /// the total individual transferable amounts, this scaled `transferableAmount` must be multiplied by\n    /// the individual asset amounts located within the `assetData`.\n    function getTransferableAssetAmount(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 transferableAssetAmount)\n    {\n        (uint256 balance, uint256 allowance) = getBalanceAndAssetProxyAllowance(\n            ownerAddress,\n            assetData\n        );\n        transferableAssetAmount = LibSafeMath.min256(balance, allowance);\n        return transferableAssetAmount;\n    }\n\n    /// @dev Gets the amount of an asset transferable by the maker of an order.\n    ///      Similar to `getTransferableAssetAmount()`, but can handle maker asset\n    ///      types that depend on taker assets being transferred first (e.g., Dydx bridge).\n    /// @param order The order.\n    /// @return transferableAssetAmount Amount of maker asset that can be transferred.\n    function _getTransferableConvertedMakerAssetAmount(\n        LibOrder.Order memory order\n    )\n        internal\n        returns (uint256 transferableAssetAmount)\n    {\n        (uint256 balance, uint256 allowance) = _getConvertibleMakerBalanceAndAssetProxyAllowance(order);\n        transferableAssetAmount = LibSafeMath.min256(balance, allowance);\n        return LibSafeMath.min256(transferableAssetAmount, order.makerAssetAmount);\n    }\n\n    /// @dev Checks that the asset data contained in a ZeroEx is valid and returns\n    /// a boolean that indicates whether or not the asset data was found to be valid.\n    /// @param order A ZeroEx order to validate.\n    /// @return The validatity of the asset data.\n    function _areOrderAssetDatasValid(LibOrder.Order memory order)\n        internal\n        pure\n        returns (bool)\n    {\n        return _isAssetDataValid(order.makerAssetData) &&\n            (order.makerFee == 0 || _isAssetDataValid(order.makerFeeAssetData)) &&\n            _isAssetDataValid(order.takerAssetData) &&\n            (order.takerFee == 0 || _isAssetDataValid(order.takerFeeAssetData));\n    }\n\n    /// @dev This function handles the edge cases around taker validation. This function\n    ///      currently attempts to find duplicate ERC721 token's in the taker\n    ///      multiAssetData.\n    /// @param assetData The asset data that should be validated.\n    /// @return Whether or not the order should be considered valid.\n    function _isAssetDataValid(bytes memory assetData)\n        internal\n        pure\n        returns (bool)\n    {\n        // Asset data must be composed of an asset proxy Id and a bytes segment with\n        // a length divisible by 32.\n        if (assetData.length % 32 != 4) {\n            return false;\n        }\n\n        // Only process the taker asset data if it is multiAssetData.\n        bytes4 assetProxyId = assetData.readBytes4(0);\n        if (assetProxyId != IAssetData(address(0)).MultiAsset.selector) {\n            return true;\n        }\n\n        // Get array of values and array of assetDatas\n        (, , bytes[] memory nestedAssetData) =\n            LibAssetData.decodeMultiAssetData(assetData);\n\n        uint256 length = nestedAssetData.length;\n        for (uint256 i = 0; i != length; i++) {\n            // TODO(jalextowle): Implement similar validation for non-fungible ERC1155 asset data.\n            bytes4 nestedAssetProxyId = nestedAssetData[i].readBytes4(0);\n            if (nestedAssetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n                if (_isAssetDataDuplicated(nestedAssetData, i)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /// Determines whether or not asset data is duplicated later in the nested asset data.\n    /// @param nestedAssetData The asset data to scan for duplication.\n    /// @param startIdx The index where the scan should begin.\n    /// @return A boolean reflecting whether or not the starting asset data was duplicated.\n    function _isAssetDataDuplicated(\n        bytes[] memory nestedAssetData,\n        uint256 startIdx\n    )\n        internal\n        pure\n        returns (bool)\n    {\n        uint256 length = nestedAssetData.length;\n        for (uint256 i = startIdx + 1; i < length; i++) {\n            if (nestedAssetData[startIdx].equals(nestedAssetData[i])) {\n                return true;\n            }\n        }\n    }\n}\n",
        "./AssetBalance.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetProxy.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol\";\nimport \"@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IChai.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"./Addresses.sol\";\nimport \"./LibDydxBalance.sol\";\n\n\ncontract AssetBalance is\n    Addresses\n{\n    // 2^256 - 1\n    uint256 constant internal _MAX_UINT256 = uint256(-1);\n\n    using LibBytes for bytes;\n\n    /// @dev Returns the owner's balance of the assets(s) specified in\n    /// assetData.  When the asset data contains multiple assets (eg in\n    /// ERC1155 or Multi-Asset), the return value indicates how many\n    /// complete \"baskets\" of those assets are owned by owner.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner.\n    function getBalance(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 balance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n            balance = LibERC20Token.balanceOf(tokenAddress, ownerAddress);\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = LibAssetData.decodeERC721AssetData(assetData);\n\n            // Check if id is owned by ownerAddress\n            bytes memory ownerOfCalldata = abi.encodeWithSelector(\n                IERC721Token(address(0)).ownerOf.selector,\n                tokenId\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(ownerOfCalldata);\n            address currentOwnerAddress = (success && returnData.length == 32) ? returnData.readAddress(12) : address(0);\n            balance = currentOwnerAddress == ownerAddress ? 1 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            // Get ERC1155 token address, array of ids, and array of values\n            (, address tokenAddress, uint256[] memory tokenIds, uint256[] memory tokenValues,) = LibAssetData.decodeERC1155AssetData(assetData);\n\n            uint256 length = tokenIds.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the token if the corresponding value is 0.\n                if (tokenValues[i] == 0) {\n                    continue;\n                }\n\n                // Encode data for `balanceOf(ownerAddress, tokenIds[i])\n                bytes memory balanceOfData = abi.encodeWithSelector(\n                    IERC1155(address(0)).balanceOf.selector,\n                    ownerAddress,\n                    tokenIds[i]\n                );\n\n                // Query balance\n                (bool success, bytes memory returnData) = tokenAddress.staticcall(balanceOfData);\n                uint256 totalBalance = success && returnData.length == 32 ? returnData.readUint256(0) : 0;\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / tokenValues[i];\n                if (scaledBalance == 0) {\n                    return 0;\n                }\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            // Encode data for `staticCallProxy.transferFrom(assetData,...)`\n            bytes memory transferFromData = abi.encodeWithSelector(\n                IAssetProxy(address(0)).transferFrom.selector,\n                assetData,\n                address(0),  // `from` address is not used\n                address(0),  // `to` address is not used\n                0            // `amount` is not used\n            );\n\n            // Check if staticcall would be successful\n            (bool success,) = staticCallProxyAddress.staticcall(transferFromData);\n\n            // Success means that the staticcall can be made an unlimited amount of times\n            balance = success ? _MAX_UINT256 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            // Get address of ERC20 token and bridge contract\n            (, address tokenAddress, address bridgeAddress, ) = LibAssetData.decodeERC20BridgeAssetData(assetData);\n            if (tokenAddress == _getDaiAddress() && bridgeAddress == chaiBridgeAddress) {\n                uint256 chaiBalance = LibERC20Token.balanceOf(_getChaiAddress(), ownerAddress);\n                // Calculate Dai balance\n                balance = _convertChaiToDaiAmount(chaiBalance);\n            }\n            // Balance will be 0 if bridge is not supported\n\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory assetAmounts, bytes[] memory nestedAssetData) = LibAssetData.decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the asset if the corresponding amount is 0.\n                if (assetAmounts[i] == 0) {\n                    continue;\n                }\n\n                // Query balance of individual assetData\n                uint256 totalBalance = getBalance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total balance down by corresponding value in assetData\n                uint256 scaledBalance = totalBalance / assetAmounts[i];\n                if (scaledBalance == 0) {\n                    return 0;\n                }\n                if (scaledBalance < balance || balance == 0) {\n                    balance = scaledBalance;\n                }\n            }\n        }\n\n        // Balance will be 0 if assetProxyId is unknown\n        return balance;\n    }\n\n    /// @dev Calls getBalance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return Array of asset balances from getBalance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalances(address ownerAddress, bytes[] memory assetData)\n        public\n        returns (uint256[] memory balances)\n    {\n        uint256 length = assetData.length;\n        balances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            balances[i] = getBalance(ownerAddress, assetData[i]);\n        }\n        return balances;\n    }\n\n    /// @dev Returns the number of asset(s) (described by assetData) that\n    /// the corresponding AssetProxy contract is authorized to spend.  When the asset data contains\n    /// multiple assets (eg for Multi-Asset), the return value indicates\n    /// how many complete \"baskets\" of those assets may be spent by all of the corresponding\n    /// AssetProxy contracts.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getAssetProxyAllowance(address ownerAddress, bytes memory assetData)\n        public\n        returns (uint256 allowance)\n    {\n        // Get id of AssetProxy contract\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            // Get array of values and array of assetDatas\n            (, uint256[] memory amounts, bytes[] memory nestedAssetData) = LibAssetData.decodeMultiAssetData(assetData);\n\n            uint256 length = nestedAssetData.length;\n            for (uint256 i = 0; i != length; i++) {\n                // Skip over the asset if the corresponding amount is 0.\n                if (amounts[i] == 0) {\n                    continue;\n                }\n\n                // Query allowance of individual assetData\n                uint256 totalAllowance = getAssetProxyAllowance(ownerAddress, nestedAssetData[i]);\n\n                // Scale total allowance down by corresponding value in assetData\n                uint256 scaledAllowance = totalAllowance / amounts[i];\n                if (scaledAllowance == 0) {\n                    return 0;\n                }\n                if (scaledAllowance < allowance || allowance == 0) {\n                    allowance = scaledAllowance;\n                }\n            }\n            return allowance;\n        }\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            // Get ERC20 token address\n            address tokenAddress = assetData.readAddress(16);\n            allowance = LibERC20Token.allowance(tokenAddress, ownerAddress, erc20ProxyAddress);\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            // Get ERC721 token address and id\n            (, address tokenAddress, uint256 tokenId) = LibAssetData.decodeERC721AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, erc721ProxyAddress)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                IERC721Token(address(0)).isApprovedForAll.selector,\n                ownerAddress,\n                erc721ProxyAddress\n            );\n\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n\n            // If not approved for all, call `getApproved(tokenId)`\n            if (!success || returnData.length != 32 || returnData.readUint256(0) != 1) {\n                // Encode data for `getApproved(tokenId)`\n                bytes memory getApprovedData = abi.encodeWithSelector(IERC721Token(address(0)).getApproved.selector, tokenId);\n                (success, returnData) = tokenAddress.staticcall(getApprovedData);\n\n                // Allowance is 1 if successful and the approved address is the ERC721Proxy\n                allowance = success && returnData.length == 32 && returnData.readAddress(12) == erc721ProxyAddress ? 1 : 0;\n            } else {\n                // Allowance is 2^256 - 1 if `isApprovedForAll` returned true\n                allowance = _MAX_UINT256;\n            }\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            // Get ERC1155 token address\n            (, address tokenAddress, , , ) = LibAssetData.decodeERC1155AssetData(assetData);\n\n            // Encode data for `isApprovedForAll(ownerAddress, erc1155ProxyAddress)`\n            bytes memory isApprovedForAllData = abi.encodeWithSelector(\n                IERC1155(address(0)).isApprovedForAll.selector,\n                ownerAddress,\n                erc1155ProxyAddress\n            );\n\n            // Query allowance\n            (bool success, bytes memory returnData) = tokenAddress.staticcall(isApprovedForAllData);\n            allowance = success && returnData.length == 32 && returnData.readUint256(0) == 1 ? _MAX_UINT256 : 0;\n\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            // The StaticCallProxy does not require any approvals\n            allowance = _MAX_UINT256;\n\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            // Get address of ERC20 token and bridge contract\n            (, address tokenAddress, address bridgeAddress,) =\n                LibAssetData.decodeERC20BridgeAssetData(assetData);\n            if (tokenAddress == _getDaiAddress() && bridgeAddress == chaiBridgeAddress) {\n                uint256 chaiAllowance = LibERC20Token.allowance(_getChaiAddress(), ownerAddress, chaiBridgeAddress);\n                // Dai allowance is unlimited if Chai allowance is unlimited\n                allowance = chaiAllowance == _MAX_UINT256 ? _MAX_UINT256 : _convertChaiToDaiAmount(chaiAllowance);\n            } else if (bridgeAddress == dydxBridgeAddress) {\n                allowance = LibDydxBalance.getDydxMakerAllowance(ownerAddress, bridgeAddress, _getDydxAddress());\n            }\n            // Allowance will be 0 if bridge is not supported\n        }\n\n        // Allowance will be 0 if the assetProxyId is unknown\n        return allowance;\n    }\n\n    /// @dev Calls getAssetProxyAllowance() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset allowances from getAllowance(), with each\n    /// element corresponding to the same-indexed element in the assetData input.\n    function getBatchAssetProxyAllowances(address ownerAddress, bytes[] memory assetData)\n        public\n        returns (uint256[] memory allowances)\n    {\n        uint256 length = assetData.length;\n        allowances = new uint256[](length);\n        for (uint256 i = 0; i != length; i++) {\n            allowances[i] = getAssetProxyAllowance(ownerAddress, assetData[i]);\n        }\n        return allowances;\n    }\n\n    /// @dev Calls getBalance() and getAllowance() for assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Details of asset, encoded per the AssetProxy contract specification.\n    /// @return Number of assets (or asset baskets) held by owner, and number\n    /// of assets (or asset baskets) that the corresponding AssetProxy is authorized to spend.\n    function getBalanceAndAssetProxyAllowance(\n        address ownerAddress,\n        bytes memory assetData\n    )\n        public\n        returns (uint256 balance, uint256 allowance)\n    {\n        balance = getBalance(ownerAddress, assetData);\n        allowance = getAssetProxyAllowance(ownerAddress, assetData);\n        return (balance, allowance);\n    }\n\n    /// @dev Calls getBatchBalances() and getBatchAllowances() for each element of assetData.\n    /// @param ownerAddress Owner of the assets specified by assetData.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @return An array of asset balances from getBalance(), and an array of\n    /// asset allowances from getAllowance(), with each element\n    /// corresponding to the same-indexed element in the assetData input.\n    function getBatchBalancesAndAssetProxyAllowances(\n        address ownerAddress,\n        bytes[] memory assetData\n    )\n        public\n        returns (uint256[] memory balances, uint256[] memory allowances)\n    {\n        balances = getBatchBalances(ownerAddress, assetData);\n        allowances = getBatchAssetProxyAllowances(ownerAddress, assetData);\n        return (balances, allowances);\n    }\n\n    /// @dev Converts an amount of Chai into its equivalent Dai amount.\n    ///      Also accumulates Dai from DSR if called after the last time it was collected.\n    /// @param chaiAmount Amount of Chai to converts.\n    function _convertChaiToDaiAmount(uint256 chaiAmount)\n        internal\n        returns (uint256 daiAmount)\n    {\n        PotLike pot = IChai(_getChaiAddress()).pot();\n        // Accumulate savings if called after last time savings were collected\n        // solhint-disable-next-line not-rely-on-time\n        uint256 chiMultiplier = (now > pot.rho())\n            ? pot.drip()\n            : pot.chi();\n        daiAmount = LibMath.getPartialAmountFloor(chiMultiplier, 10**27, chaiAmount);\n        return daiAmount;\n    }\n\n    /// @dev Returns an order MAKER's balance of the assets(s) specified in\n    ///      makerAssetData. Unlike `getBalanceAndAssetProxyAllowance()`, this\n    ///      can handle maker asset types that depend on taker tokens being\n    ///      transferred to the maker first.\n    /// @param order The order.\n    /// @return balance Quantity of assets transferrable from maker to taker.\n    function _getConvertibleMakerBalanceAndAssetProxyAllowance(\n        LibOrder.Order memory order\n    )\n        internal\n        returns (uint256 balance, uint256 allowance)\n    {\n        if (order.makerAssetData.length < 4) {\n            return (0, 0);\n        }\n        bytes4 assetProxyId = order.makerAssetData.readBytes4(0);\n        // Handle dydx bridge assets.\n        if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            (, , address bridgeAddress, ) = LibAssetData.decodeERC20BridgeAssetData(order.makerAssetData);\n            if (bridgeAddress == dydxBridgeAddress) {\n                return (\n                    LibDydxBalance.getDydxMakerBalance(order, _getDydxAddress()),\n                    getAssetProxyAllowance(order.makerAddress, order.makerAssetData)\n                );\n            }\n        }\n        return (\n            getBalance(order.makerAddress, order.makerAssetData),\n            getAssetProxyAllowance(order.makerAddress, order.makerAssetData)\n        );\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetProxy.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxy {\n\n    /// @dev Transfers assets. Either succeeds or throws.\n    /// @param assetData Byte array encoded for the respective asset proxy.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    function transferFrom(\n        bytes calldata assetData,\n        address from,\n        address to,\n        uint256 amount\n    )\n        external;\n    \n    /// @dev Gets the proxy id associated with the proxy address.\n    /// @return Proxy id.\n    function getProxyId()\n        external\n        pure\n        returns (bytes4);\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-erc721/contracts/src/interfaces/IERC721Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC721Token {\n\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///      This event emits when NFTs are created (`from` == 0) and destroyed\n    ///      (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///      may be created and assigned without emitting Transfer. At the time of\n    ///      any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 indexed _tokenId\n    );\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///      reaffirmed. The zero address indicates there is no approved address.\n    ///      When a Transfer event emits, this also indicates that the approved\n    ///      address for that NFT (if any) is reset to none.\n    event Approval(\n        address indexed _owner,\n        address indexed _approved,\n        uint256 indexed _tokenId\n    );\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///      The operator can manage all NFTs of the owner.\n    event ApprovalForAll(\n        address indexed _owner,\n        address indexed _operator,\n        bool _approved\n    );\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///      perator, or the approved address for this NFT. Throws if `_from` is\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n    ///      `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///      checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///      `onERC721Received` on `_to` and throws if the return value is not\n    ///      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param _data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId,\n        bytes calldata _data\n    )\n        external;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///      except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///      Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///      operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId)\n        external;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///         all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///      multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved)\n        external;\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///      function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///         TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///         THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///      operator, or the approved address for this NFT. Throws if `_from` is\n    ///      not the current owner. Throws if `_to` is the zero address. Throws if\n    ///      `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        public;\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///      about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId)\n        public\n        view\n        returns (address);\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) \n        public\n        view\n        returns (address);\n    \n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator)\n        public\n        view\n        returns (bool);\n}\n",
        "@0x/contracts-erc1155/contracts/src/interfaces/IERC1155.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\n/// @title ERC-1155 Multi Token Standard\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md\n/// Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\n    ///      including zero value transfers as well as minting or burning.\n    /// Operator will always be msg.sender.\n    /// Either event from address `0x0` signifies a minting operation.\n    /// An event to address `0x0` signifies a burning or melting operation.\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\n    /// be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID.\n    /// To define a token ID with no initial balance, the contract SHOULD emit the TransferSingle event\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\n    event TransferSingle(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 id,\n        uint256 value\n    );\n\n    /// @dev Either TransferSingle or TransferBatch MUST emit when tokens are transferred,\n    ///      including zero value transfers as well as minting or burning.\n    ///Operator will always be msg.sender.\n    /// Either event from address `0x0` signifies a minting operation.\n    /// An event to address `0x0` signifies a burning or melting operation.\n    /// The total value transferred from address 0x0 minus the total value transferred to 0x0 may\n    /// be used by clients and exchanges to be added to the \"circulating supply\" for a given token ID.\n    /// To define multiple token IDs with no initial balance, this SHOULD emit the TransferBatch event\n    /// from `0x0` to `0x0`, with the token creator as `_operator`.\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /// @dev MUST emit when an approval is updated.\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /// @dev MUST emit when the URI is updated for a token ID.\n    /// URIs are defined in RFC 3986.\n    /// The URI MUST point a JSON file that conforms to the \"ERC-1155 Metadata JSON Schema\".\n    event URI(\n        string value,\n        uint256 indexed id\n    );\n\n    /// @notice Transfers value amount of an _id from the _from address to the _to address specified.\n    /// @dev MUST emit TransferSingle event on success.\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\n    /// MUST throw if `_to` is the zero address.\n    /// MUST throw if balance of sender for token `_id` is lower than the `_value` sent.\n    /// MUST throw on any other error.\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\n    /// If so, it MUST call `onERC1155Received` on `_to` and revert if the return value\n    /// is not `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.\n    /// @param from    Source address\n    /// @param to      Target address\n    /// @param id      ID of the token type\n    /// @param value   Transfer amount\n    /// @param data    Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice Send multiple types of Tokens from a 3rd party in one transfer (with safety call).\n    /// @dev MUST emit TransferBatch event on success.\n    /// Caller must be approved to manage the _from account's tokens (see isApprovedForAll).\n    /// MUST throw if `_to` is the zero address.\n    /// MUST throw if length of `_ids` is not the same as length of `_values`.\n    ///  MUST throw if any of the balance of sender for token `_ids` is lower than the respective `_values` sent.\n    /// MUST throw on any other error.\n    /// When transfer is complete, this function MUST check if `_to` is a smart contract (code size > 0).\n    /// If so, it MUST call `onERC1155BatchReceived` on `_to` and revert if the return value\n    /// is not `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.\n    /// @param from    Source addresses\n    /// @param to      Target addresses\n    /// @param ids     IDs of each token type\n    /// @param values  Transfer amounts per token type\n    /// @param data    Additional data with no specified format, sent in call to `_to`\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    )\n        external;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage all of the caller's tokens.\n    /// @dev MUST emit the ApprovalForAll event on success.\n    /// @param operator  Address to add to the set of authorized operators\n    /// @param approved  True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Queries the approval status of an operator for a given owner.\n    /// @param owner     The owner of the Tokens\n    /// @param operator  Address of authorized operator\n    /// @return           True if the operator is approved, false if not\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /// @notice Get the balance of an account's Tokens.\n    /// @param owner  The address of the token holder\n    /// @param id     ID of the Token\n    /// @return        The _owner's balance of the Token type requested\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\n\n    /// @notice Get the balance of multiple account/token pairs\n    /// @param owners The addresses of the token holders\n    /// @param ids    ID of the Tokens\n    /// @return        The _owner's balance of the Token types requested\n    function balanceOfBatch(\n        address[] calldata owners,\n        uint256[] calldata ids\n    )\n        external\n        view\n        returns (uint256[] memory balances_);\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IChai.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\n\n\ncontract PotLike {\n    function chi() external returns (uint256);\n    function rho() external returns (uint256);\n    function drip() external returns (uint256);\n    function join(uint256) external;\n    function exit(uint256) external;\n}\n\n\n// The actual Chai contract can be found here: https://github.com/dapphub/chai\ncontract IChai is\n    IERC20Token\n{\n    /// @dev Withdraws Dai owned by `src`\n    /// @param src Address that owns Dai.\n    /// @param wad Amount of Dai to withdraw.\n    function draw(\n        address src,\n        uint256 wad\n    )\n        external;\n\n    /// @dev Queries Dai balance of Chai holder.\n    /// @param usr Address of Chai holder.\n    /// @return Dai balance.\n    function dai(address usr)\n        external\n        returns (uint256);\n\n    /// @dev Queries the Pot contract used by the Chai contract.\n    function pot()\n        external\n        returns (PotLike);\n\n    /// @dev Deposits Dai in exchange for Chai\n    /// @param dst Address to receive Chai.\n    /// @param wad Amount of Dai to deposit.\n    function join(\n        address dst,\n        uint256 wad\n    )\n        external;\n}\n",
        "./LibDydxBalance.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/D18.sol\";\nimport \"./LibAssetData.sol\";\n\n\nlibrary LibDydxBalance {\n\n    using LibBytes for bytes;\n    using LibSafeMath for uint256;\n\n    /// @dev Padding % added to the minimum collateralization ratio to\n    ///      prevent withdrawing exactly the amount that would make an account\n    ///      insolvent. 1 bps.\n    int256 private constant MARGIN_RATIO_PADDING = 0.0001e18;\n\n    /// @dev Structure that holds all pertinent info needed to perform a balance\n    ///      check.\n    struct BalanceCheckInfo {\n        IDydx dydx;\n        address bridgeAddress;\n        address makerAddress;\n        address makerTokenAddress;\n        address takerTokenAddress;\n        int256 orderMakerToTakerRate;\n        uint256[] accounts;\n        IDydxBridge.BridgeAction[] actions;\n    }\n\n    /// @dev Gets the maker asset allowance for a Dydx bridge order.\n    /// @param makerAddress The maker of the order.\n    /// @param bridgeAddress The address of the Dydx bridge.\n    /// @param dydx The Dydx contract address.\n    /// @return allowance The maker asset allowance.\n    function getDydxMakerAllowance(address makerAddress, address bridgeAddress, address dydx)\n        public\n        view\n        returns (uint256 allowance)\n    {\n        // Allowance is infinite if the dydx bridge is an operator for the maker.\n        return IDydx(dydx).getIsLocalOperator(makerAddress, bridgeAddress)\n            ? uint256(-1) : 0;\n    }\n\n    /// @dev Gets the maker allowance for a\n    /// @dev Get the maker asset balance of an order with a `DydxBridge` maker asset.\n    /// @param order An order with a dydx maker asset.\n    /// @param dydx The address of the dydx contract.\n    /// @return balance The maker asset balance.\n    function getDydxMakerBalance(LibOrder.Order memory order, address dydx)\n        public\n        view\n        returns (uint256 balance)\n    {\n        BalanceCheckInfo memory info = _getBalanceCheckInfo(order, dydx);\n        // Actions must be well-formed.\n        if (!_areActionsWellFormed(info)) {\n            return 0;\n        }\n        // If the rate we withdraw maker tokens is less than one, the asset\n        // proxy will throw because we will always transfer less maker tokens\n        // than asked.\n        if (_getMakerTokenWithdrawRate(info) < D18.one()) {\n            return 0;\n        }\n        // The maker balance is the smaller of:\n        return LibSafeMath.min256(\n            // How many times we can execute all the deposit actions.\n            _getDepositableMakerAmount(info),\n            // How many times we can execute all the actions before the an\n            // account becomes undercollateralized.\n            _getSolventMakerAmount(info)\n        );\n    }\n\n    /// @dev Checks that:\n    ///      1. Actions are arranged as [...deposits, withdraw].\n    ///      2. There is only one deposit for each market ID.\n    ///      3. Every action has a valid account index.\n    ///      4. There is exactly one withdraw at the end and it is for the\n    ///         maker token.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return areWellFormed Whether the actions are well-formed.\n    function _areActionsWellFormed(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (bool areWellFormed)\n    {\n        if (info.actions.length == 0) {\n            return false;\n        }\n        uint256 depositCount = 0;\n        // Count the number of deposits.\n        for (; depositCount < info.actions.length; ++depositCount) {\n            IDydxBridge.BridgeAction memory action = info.actions[depositCount];\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                break;\n            }\n            // Search all prior actions for the same market ID.\n            uint256 marketId = action.marketId;\n            for (uint256 j = 0; j < depositCount; ++j) {\n                if (info.actions[j].marketId == marketId) {\n                    // Market ID is not unique.\n                    return false;\n                }\n            }\n            // Check that the account index is within the valid range.\n            if (action.accountIdx >= info.accounts.length) {\n                return false;\n            }\n        }\n        // There must be exactly one withdraw action at the end.\n        if (depositCount + 1 != info.actions.length) {\n            return false;\n        }\n        IDydxBridge.BridgeAction memory withdraw = info.actions[depositCount];\n        if (withdraw.actionType != IDydxBridge.BridgeActionType.Withdraw) {\n            return false;\n        }\n        // And it must be for the maker token.\n        if (info.dydx.getMarketTokenAddress(withdraw.marketId) != info.makerTokenAddress) {\n            return false;\n        }\n        // Check the account index.\n        return withdraw.accountIdx < info.accounts.length;\n    }\n\n    /// @dev Returns the rate at which we withdraw maker tokens.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @return makerTokenWithdrawRate Maker token withdraw rate.\n    function _getMakerTokenWithdrawRate(BalanceCheckInfo memory info)\n        internal\n        pure\n        returns (int256 makerTokenWithdrawRate)\n    {\n        // The last action is always a withdraw for the maker token.\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        return _getActionRate(withdraw);\n    }\n\n    /// @dev Get how much maker asset we can transfer before a deposit fails.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getDepositableMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 depositableMakerAmount)\n    {\n        depositableMakerAmount = uint256(-1);\n        // Take the minimum maker amount from all deposits.\n        for (uint256 i = 0; i < info.actions.length; ++i) {\n            IDydxBridge.BridgeAction memory action = info.actions[i];\n            // Only looking at deposit actions.\n            if (action.actionType != IDydxBridge.BridgeActionType.Deposit) {\n                continue;\n            }\n            // `depositRate` is the rate at which we convert a maker token into\n            // a taker token for deposit.\n            int256 depositRate = _getActionRate(action);\n            // Taker tokens will be transferred to the maker for every fill, so\n            // we reduce the effective deposit rate if we're depositing the taker\n            // token.\n            address depositToken = info.dydx.getMarketTokenAddress(action.marketId);\n            if (info.takerTokenAddress != address(0) && depositToken == info.takerTokenAddress) {\n                depositRate = D18.sub(depositRate, info.orderMakerToTakerRate);\n            }\n            // If the deposit rate is > 0, we are limited by the transferrable\n            // token balance of the maker.\n            if (depositRate > 0) {\n                uint256 supply = _getTransferabeTokenAmount(\n                    depositToken,\n                    info.makerAddress,\n                    address(info.dydx)\n                );\n                depositableMakerAmount = LibSafeMath.min256(\n                    depositableMakerAmount,\n                    uint256(D18.div(supply, depositRate))\n                );\n            }\n        }\n    }\n\n    /// @dev Get how much maker asset we can transfer before an account\n    ///      becomes insolvent.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    function _getSolventMakerAmount(BalanceCheckInfo memory info)\n        internal\n        view\n        returns (uint256 solventMakerAmount)\n    {\n        solventMakerAmount = uint256(-1);\n        assert(info.actions.length >= 1);\n        IDydxBridge.BridgeAction memory withdraw = info.actions[info.actions.length - 1];\n        assert(withdraw.actionType == IDydxBridge.BridgeActionType.Withdraw);\n        int256 minCr = D18.add(_getMinimumCollateralizationRatio(info.dydx), MARGIN_RATIO_PADDING);\n        // Loop through the accounts.\n        for (uint256 accountIdx = 0; accountIdx < info.accounts.length; ++accountIdx) {\n            (uint256 supplyValue, uint256 borrowValue) =\n                _getAccountMarketValues(info, info.accounts[accountIdx]);\n            // All accounts must currently be solvent.\n            if (borrowValue != 0 && D18.div(supplyValue, borrowValue) < minCr) {\n                return 0;\n            }\n            // If this is the same account used to in the withdraw/borrow action,\n            // compute the maker amount at which it will become insolvent.\n            if (accountIdx != withdraw.accountIdx) {\n                continue;\n            }\n            // Compute the deposit/collateralization rate, which is the rate at\n            // which (USD) value is added to the account across all markets.\n            int256 dd = 0;\n            for (uint256 i = 0; i < info.actions.length - 1; ++i) {\n                IDydxBridge.BridgeAction memory deposit = info.actions[i];\n                assert(deposit.actionType == IDydxBridge.BridgeActionType.Deposit);\n                if (deposit.accountIdx == accountIdx) {\n                    dd = D18.add(\n                        dd,\n                        _getActionRateValue(\n                            info,\n                            deposit\n                        )\n                    );\n                }\n            }\n            // Compute the borrow/withdraw rate, which is the rate at which\n            // (USD) value is deducted from the account.\n            int256 db = _getActionRateValue(\n                info,\n                withdraw\n            );\n            // If the deposit to withdraw ratio is >= the minimum collateralization\n            // ratio, then we will never become insolvent at these prices.\n            if (D18.div(dd, db) >= minCr) {\n                continue;\n            }\n            // If the adjusted deposit rates are equal, the account will remain\n            // at the same level of collateralization.\n            if (D18.mul(minCr, db) == dd) {\n                continue;\n            }\n            // The collateralization ratio for this account, parameterized by\n            // `t` (maker amount), is given by:\n            //      `cr = (supplyValue + t * dd) / (borrowValue + t * db)`\n            // Solving for `t` gives us:\n            //      `t = (supplyValue - cr * borrowValue) / (cr * db - dd)`\n            int256 t = D18.div(\n                D18.sub(supplyValue, D18.mul(minCr, borrowValue)),\n                D18.sub(D18.mul(minCr, db), dd)\n            );\n            solventMakerAmount = LibSafeMath.min256(\n                solventMakerAmount,\n                // `t` is in maker token units, so convert it to maker wei.\n                _toWei(info.makerTokenAddress, uint256(D18.clip(t)))\n            );\n        }\n    }\n\n    /// @dev Create a `BalanceCheckInfo` struct.\n    /// @param order An order with a `DydxBridge` maker asset.\n    /// @param dydx The address of the Dydx contract.\n    /// @return info The `BalanceCheckInfo` struct.\n    function _getBalanceCheckInfo(LibOrder.Order memory order, address dydx)\n        private\n        pure\n        returns (BalanceCheckInfo memory info)\n    {\n        bytes memory rawBridgeData;\n        (, info.makerTokenAddress, info.bridgeAddress, rawBridgeData) =\n            LibAssetData.decodeERC20BridgeAssetData(order.makerAssetData);\n        info.dydx = IDydx(dydx);\n        info.makerAddress = order.makerAddress;\n        if (order.takerAssetData.length == 36) {\n            if (order.takerAssetData.readBytes4(0) == IAssetData(0).ERC20Token.selector) {\n                (, info.takerTokenAddress) =\n                    LibAssetData.decodeERC20AssetData(order.takerAssetData);\n            }\n        }\n        info.orderMakerToTakerRate = D18.div(order.takerAssetAmount, order.makerAssetAmount);\n        (IDydxBridge.BridgeData memory bridgeData) =\n            abi.decode(rawBridgeData, (IDydxBridge.BridgeData));\n        info.accounts = bridgeData.accountNumbers;\n        info.actions = bridgeData.actions;\n    }\n\n    /// @dev Returns the conversion rate for an action.\n    /// @param action A `BridgeAction`.\n    function _getActionRate(IDydxBridge.BridgeAction memory action)\n        private\n        pure\n        returns (int256 rate)\n    {\n        rate = action.conversionRateDenominator == 0\n            ? D18.one()\n            : D18.div(\n                action.conversionRateNumerator,\n                action.conversionRateDenominator\n            );\n    }\n\n    /// @dev Returns the USD value of an action based on its conversion rate\n    ///      and market prices.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param action A `BridgeAction`.\n    function _getActionRateValue(\n        BalanceCheckInfo memory info,\n        IDydxBridge.BridgeAction memory action\n    )\n        private\n        view\n        returns (int256 value)\n    {\n        address toToken = info.dydx.getMarketTokenAddress(action.marketId);\n        uint256 fromTokenDecimals = LibERC20Token.decimals(info.makerTokenAddress);\n        uint256 toTokenDecimals = LibERC20Token.decimals(toToken);\n        // First express the rate as 18-decimal units.\n        value = toTokenDecimals > fromTokenDecimals\n            ? int256(\n                uint256(_getActionRate(action))\n                    .safeDiv(10 ** (toTokenDecimals - fromTokenDecimals))\n            )\n            : int256(\n                uint256(_getActionRate(action))\n                    .safeMul(10 ** (fromTokenDecimals - toTokenDecimals))\n            );\n        // Prices have 18 + (18 - TOKEN_DECIMALS) decimal places because\n        // consistency is stupid.\n        uint256 price = info.dydx.getMarketPrice(action.marketId).value;\n        // Make prices have 18 decimals.\n        if (toTokenDecimals > 18) {\n            price = price.safeMul(10 ** (toTokenDecimals - 18));\n        } else {\n            price = price.safeDiv(10 ** (18 - toTokenDecimals));\n        }\n        // The action value is the action rate times the price.\n        value = D18.mul(price, value);\n        // Scale by the market premium.\n        int256 marketPremium = D18.add(\n            D18.one(),\n            info.dydx.getMarketMarginPremium(action.marketId).value\n        );\n        if (action.actionType == IDydxBridge.BridgeActionType.Deposit) {\n            value = D18.div(value, marketPremium);\n        } else {\n            value = D18.mul(value, marketPremium);\n        }\n    }\n\n    /// @dev Convert a `D18` fraction of 1 token to the equivalent integer wei.\n    /// @param token Address the of the token.\n    /// @param units Token units expressed with 18 digit precision.\n    function _toWei(address token, uint256 units)\n        private\n        view\n        returns (uint256 rate)\n    {\n        uint256 decimals = LibERC20Token.decimals(token);\n        rate = decimals > 18\n            ? units.safeMul(10 ** (decimals - 18))\n            : units.safeDiv(10 ** (18 - decimals));\n    }\n\n    /// @dev Get the global minimum collateralization ratio required for\n    ///      an account to be considered solvent.\n    /// @param dydx The Dydx interface.\n    function _getMinimumCollateralizationRatio(IDydx dydx)\n        private\n        view\n        returns (int256 ratio)\n    {\n        IDydx.RiskParams memory riskParams = dydx.getRiskParams();\n        return D18.add(D18.one(), D18.toSigned(riskParams.marginRatio.value));\n    }\n\n    /// @dev Get the total supply and borrow values for an account across all markets.\n    /// @param info State from `_getBalanceCheckInfo()`.\n    /// @param account The Dydx account identifier.\n    function _getAccountMarketValues(BalanceCheckInfo memory info, uint256 account)\n        private\n        view\n        returns (uint256 supplyValue, uint256 borrowValue)\n    {\n        (IDydx.Value memory supplyValue_, IDydx.Value memory borrowValue_) =\n            info.dydx.getAdjustedAccountValues(IDydx.AccountInfo(\n                info.makerAddress,\n                account\n            ));\n        // Account values have 36 decimal places because dydx likes to make sure\n        // you're paying attention.\n        return (supplyValue_.value / 1e18, borrowValue_.value / 1e18);\n    }\n\n    /// @dev Get the amount of an ERC20 token held by `owner` that can be transferred\n    ///      by `spender`.\n    /// @param tokenAddress The address of the ERC20 token.\n    /// @param owner The address of the token holder.\n    /// @param spender The address of the token spender.\n    function _getTransferabeTokenAmount(\n        address tokenAddress,\n        address owner,\n        address spender\n    )\n        private\n        view\n        returns (uint256 transferableAmount)\n    {\n        return LibSafeMath.min256(\n            LibERC20Token.allowance(tokenAddress, owner, spender),\n            LibERC20Token.balanceOf(tokenAddress, owner)\n        );\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydxBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IDydxBridge {\n\n    /// @dev This is the subset of `IDydx.ActionType` that are supported by the bridge.\n    enum BridgeActionType {\n        Deposit,                    // Deposit tokens into dydx account.\n        Withdraw                    // Withdraw tokens from dydx account.\n    }\n\n    struct BridgeAction {\n        BridgeActionType actionType;            // Action to run on dydx account.\n        uint256 accountIdx;                     // Index in `BridgeData.accountNumbers` for this action.\n        uint256 marketId;                       // Market to operate on.\n        uint256 conversionRateNumerator;        // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n        uint256 conversionRateDenominator;      // Optional. If set, transfer amount is scaled by (conversionRateNumerator/conversionRateDenominator).\n    }\n\n    struct BridgeData {\n        uint256[] accountNumbers;               // Account number used to identify the owner's specific account.\n        BridgeAction[] actions;                 // Actions to carry out on the owner's accounts.\n    }\n}\n",
        "@0x/contracts-asset-proxy/contracts/src/interfaces/IDydx.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ninterface IDydx {\n\n    /// @dev Represents the unique key that specifies an account\n    struct AccountInfo {\n        address owner;  // The address that owns the account\n        uint256 number; // A nonce that allows a single address to control many accounts\n    }\n\n    enum ActionType {\n        Deposit,   // supply tokens\n        Withdraw,  // borrow tokens\n        Transfer,  // transfer balance between accounts\n        Buy,       // buy an amount of some token (externally)\n        Sell,      // sell an amount of some token (externally)\n        Trade,     // trade tokens against another account\n        Liquidate, // liquidate an undercollateralized or expiring account\n        Vaporize,  // use excess tokens to zero-out a completely negative account\n        Call       // send arbitrary data to an address\n    }\n\n    /// @dev Arguments that are passed to Solo in an ordered list as part of a single operation.\n    /// Each ActionArgs has an actionType which specifies which action struct that this data will be\n    /// parsed into before being processed.\n    struct ActionArgs {\n        ActionType actionType;\n        uint256 accountIdx;\n        AssetAmount amount;\n        uint256 primaryMarketId;\n        uint256 secondaryMarketId;\n        address otherAddress;\n        uint256 otherAccountIdx;\n        bytes data;\n    }\n\n    enum AssetDenomination {\n        Wei, // the amount is denominated in wei\n        Par  // the amount is denominated in par\n    }\n\n    enum AssetReference {\n        Delta, // the amount is given as a delta from the current value\n        Target // the amount is given as an exact number to end up at\n    }\n\n    struct AssetAmount {\n        bool sign; // true if positive\n        AssetDenomination denomination;\n        AssetReference ref;\n        uint256 value;\n    }\n\n    struct D256 {\n        uint256 value;\n    }\n\n    struct Value {\n        uint256 value;\n    }\n\n    struct Price {\n        uint256 value;\n    }\n\n    struct OperatorArg {\n        address operator;\n        bool trusted;\n    }\n\n    /// @dev The global risk parameters that govern the health and security of the system\n    struct RiskParams {\n        // Required ratio of over-collateralization\n        D256 marginRatio;\n        // Percentage penalty incurred by liquidated accounts\n        D256 liquidationSpread;\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\n        D256 earningsRate;\n        // The minimum absolute borrow value of an account\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\n        Value minBorrowedValue;\n    }\n\n    /// @dev The main entry-point to Solo that allows users and contracts to manage accounts.\n    ///      Take one or more actions on one or more accounts. The msg.sender must be the owner or\n    ///      operator of all accounts except for those being liquidated, vaporized, or traded with.\n    ///      One call to operate() is considered a singular \"operation\". Account collateralization is\n    ///      ensured only after the completion of the entire operation.\n    /// @param  accounts  A list of all accounts that will be used in this operation. Cannot contain\n    ///                   duplicates. In each action, the relevant account will be referred-to by its\n    ///                   index in the list.\n    /// @param  actions   An ordered list of all actions that will be taken in this operation. The\n    ///                   actions will be processed in order.\n    function operate(\n        AccountInfo[] calldata accounts,\n        ActionArgs[] calldata actions\n    )\n        external;\n\n    // @dev Approves/disapproves any number of operators. An operator is an external address that has the\n    //      same permissions to manipulate an account as the owner of the account. Operators are simply\n    //      addresses and therefore may either be externally-owned Ethereum accounts OR smart contracts.\n    //      Operators are also able to act as AutoTrader contracts on behalf of the account owner if the\n    //      operator is a smart contract and implements the IAutoTrader interface.\n    // @param args A list of OperatorArgs which have an address and a boolean. The boolean value\n    //        denotes whether to approve (true) or revoke approval (false) for that address.\n    function setOperators(OperatorArg[] calldata args) external;\n\n    /// @dev Return true if a particular address is approved as an operator for an owner's accounts.\n    ///      Approved operators can act on the accounts of the owner as if it were the operator's own.\n    /// @param owner The owner of the accounts\n    /// @param operator The possible operator\n    /// @return isLocalOperator True if operator is approved for owner's accounts\n    function getIsLocalOperator(\n        address owner,\n        address operator\n    )\n        external\n        view\n        returns (bool isLocalOperator);\n\n    /// @dev Get the ERC20 token address for a market.\n    /// @param marketId The market to query\n    /// @return tokenAddress The token address\n    function getMarketTokenAddress(\n        uint256 marketId\n    )\n        external\n        view\n        returns (address tokenAddress);\n\n    /// @dev Get all risk parameters in a single struct.\n    /// @return riskParams All global risk parameters\n    function getRiskParams()\n        external\n        view\n        returns (RiskParams memory riskParams);\n\n    /// @dev Get the price of the token for a market.\n    /// @param marketId The market to query\n    /// @return price The price of each atomic unit of the token\n    function getMarketPrice(\n        uint256 marketId\n    )\n        external\n        view\n        returns (Price memory price);\n\n    /// @dev Get the margin premium for a market. A margin premium makes it so that any positions that\n    ///      include the market require a higher collateralization to avoid being liquidated.\n    /// @param  marketId  The market to query\n    /// @return premium The market's margin premium\n    function getMarketMarginPremium(uint256 marketId)\n        external\n        view\n        returns (D256 memory premium);\n\n    /// @dev Get the total supplied and total borrowed values of an account adjusted by the marginPremium\n    ///      of each market. Supplied values are divided by (1 + marginPremium) for each market and\n    ///      borrowed values are multiplied by (1 + marginPremium) for each market. Comparing these\n    ///      adjusted values gives the margin-ratio of the account which will be compared to the global\n    ///      margin-ratio when determining if the account can be liquidated.\n    /// @param account The account to query\n    /// @return supplyValue The supplied value of the account (adjusted for marginPremium)\n    /// @return borrowValue The borrowed value of the account (adjusted for marginPremium)\n    function getAdjustedAccountValues(\n        AccountInfo calldata account\n    )\n        external\n        view\n        returns (Value memory supplyValue, Value memory borrowValue);\n}\n",
        "@0x/contracts-utils/contracts/src/D18.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\n\n/// @dev A library for working with 18 digit, base 10 decimals.\nlibrary D18 {\n\n    /// @dev Decimal places for dydx value quantities.\n    uint256 private constant PRECISION = 18;\n    /// @dev 1.0 in base-18 decimal.\n    int256 private constant DECIMAL_ONE = int256(10 ** PRECISION);\n    /// @dev Minimum signed integer value.\n    int256 private constant MIN_INT256_VALUE = int256(0x8000000000000000000000000000000000000000000000000000000000000000);\n\n    /// @dev Return `1.0`\n    function one()\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = DECIMAL_ONE;\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, b);\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), b);\n    }\n\n    /// @dev Add two decimals.\n    function add(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(a, int256(b));\n    }\n\n    /// @dev Add two decimals.\n    function add(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), int256(b));\n    }\n\n    /// @dev Subract two decimals.\n    function sub(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _add(a, -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -b);\n    }\n\n    /// @dev Subract two decimals.\n    function sub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _add(int256(a), -int256(b));\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), b), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Multiply two decimals.\n    function mul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), int256(b)), DECIMAL_ONE);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = _div(_mul(a, DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, int256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), b);\n    }\n\n    /// @dev Divide two decimals.\n    function div(int256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(a, DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Divide two decimals.\n    function div(uint256 a, uint256 b)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        require(int256(b) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = _div(_mul(int256(a), DECIMAL_ONE), int256(b));\n    }\n\n    /// @dev Safely convert an unsigned integer into a signed integer.\n    function toSigned(uint256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        require(int256(a) >= 0, \"D18/DECIMAL_VALUE_TOO_BIG\");\n        r = int256(a);\n    }\n\n    /// @dev Clip a signed value to be positive.\n    function clip(int256 a)\n        internal\n        pure\n        returns (int256 r)\n    {\n        r = a < 0 ? 0 : a;\n    }\n\n    /// @dev Safely multiply two signed integers.\n    function _mul(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        if (a == 0 || b == 0) {\n            return 0;\n        }\n        r = a * b;\n        require(r / a == b && r / b == a, \"D18/DECIMAL_MUL_OVERFLOW\");\n        return r;\n    }\n\n    /// @dev Safely divide two signed integers.\n    function _div(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        require(b != 0, \"D18/DECIMAL_DIV_BY_ZERO\");\n        require(a != MIN_INT256_VALUE || b != -1, \"D18/DECIMAL_DIV_OVERFLOW\");\n        r = a / b;\n    }\n\n    /// @dev Safely add two signed integers.\n    function _add(int256 a, int256 b)\n        private\n        pure\n        returns (int256 r)\n    {\n        r = a + b;\n        require(\n            !((a < 0 && b < 0 && r > a) || (a > 0 && b > 0 && r < a)),\n            \"D18/DECIMAL_ADD_OVERFLOW\"\n        );\n    }\n\n}\n",
        "./LibAssetData.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\";\n\n\nlibrary LibAssetData {\n\n    using LibBytes for bytes;\n\n    /// @dev Decode AssetProxy identifier\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\n    /// @return The AssetProxy identifier\n    function decodeAssetProxyId(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector ||\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector ||\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector ||\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n        return assetProxyId;\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(IAssetData(address(0)).ERC20Token.selector, tokenAddress);\n        return assetData;\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The AssetProxy identifier, and the address of the ERC-20\n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        return (assetProxyId, tokenAddress);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC721Token.selector,\n            tokenAddress,\n            tokenId\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        tokenAddress = assetData.readAddress(16);\n        tokenId = assetData.readUint256(36);\n        return (assetProxyId, tokenAddress, tokenId);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).ERC1155Assets.selector,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        assembly {\n            // Skip selector and length to get to the first parameter:\n            assetData := add(assetData, 36)\n            // Read the value of the first parameter:\n            tokenAddress := mload(assetData)\n            // Point to the next parameter's data:\n            tokenIds := add(assetData, mload(add(assetData, 32)))\n            // Point to the next parameter's data:\n            tokenValues := add(assetData, mload(add(assetData, 64)))\n            // Point to the next parameter's data:\n            callbackData := add(assetData, mload(add(assetData, 96)))\n        }\n\n        return (\n            assetProxyId,\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).MultiAsset.selector,\n            amounts,\n            nestedAssetData\n        );\n        return assetData;\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        // solhint-disable indent\n        (amounts, nestedAssetData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (uint256[], bytes[])\n        );\n        // solhint-enable indent\n    }\n\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\n    /// @param staticCallTargetAddress Target address of StaticCall.\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeStaticCallAssetData(\n        address staticCallTargetAddress,\n        bytes memory staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        assetData = abi.encodeWithSelector(\n            IAssetData(address(0)).StaticCall.selector,\n            staticCallTargetAddress,\n            staticCallData,\n            expectedReturnDataHash\n        );\n        return assetData;\n    }\n\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\n    function decodeStaticCallAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address staticCallTargetAddress,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (staticCallTargetAddress, staticCallData, expectedReturnDataHash) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, bytes, bytes32)\n        );\n    }\n\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\n    function decodeERC20BridgeAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        )\n    {\n        assetProxyId = assetData.readBytes4(0);\n\n        require(\n            assetProxyId == IAssetData(address(0)).ERC20Bridge.selector,\n            \"WRONG_PROXY_ID\"\n        );\n\n        (tokenAddress, bridgeAddress, bridgeData) = abi.decode(\n            assetData.slice(4, assetData.length),\n            (address, address, bytes)\n        );\n    }\n\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\n    /// @param assetData AssetProxy compliant asset data.\n    function revertIfInvalidAssetData(bytes memory assetData)\n        public\n        pure\n    {\n        bytes4 assetProxyId = assetData.readBytes4(0);\n\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\n            decodeERC20AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\n            decodeERC721AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\n            decodeERC1155AssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\n            decodeMultiAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\n            decodeStaticCallAssetData(assetData);\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\n            decodeERC20BridgeAssetData(assetData);\n        } else {\n            revert(\"WRONG_PROXY_ID\");\n        }\n    }\n}\n",
        "./LibOrderTransferSimulation.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibOrderTransferSimulation {\n    using LibBytes for bytes;\n\n    enum OrderTransferResults {\n        TakerAssetDataFailed,     // Transfer of takerAsset failed\n        MakerAssetDataFailed,     // Transfer of makerAsset failed\n        TakerFeeAssetDataFailed,  // Transfer of takerFeeAsset failed\n        MakerFeeAssetDataFailed,  // Transfer of makerFeeAsset failed\n        TransfersSuccessful       // All transfers in the order were successful\n    }\n\n    // NOTE(jalextowle): This is a random address that we use to avoid issues that addresses like `address(1)`\n    // may cause later.\n    address constant internal UNUSED_ADDRESS = address(0x377f698C4c287018D09b516F415317aEC5919332);\n\n    // keccak256(abi.encodeWithSignature(\"Error(string)\", \"TRANSFERS_SUCCESSFUL\"));\n    bytes32 constant internal _TRANSFERS_SUCCESSFUL_RESULT_HASH = 0xf43f26ea5a94b478394a975e856464913dc1a8a1ca70939d974aa7c238aa0ce0;\n\n    /// @dev Simulates the maker transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderMakerTransferResults(\n        address exchange,\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            IExchange(exchange).protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        bytes[] memory assetData = new bytes[](2);\n        address[] memory fromAddresses = new address[](2);\n        address[] memory toAddresses = new address[](2);\n        uint256[] memory amounts = new uint256[](2);\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[0] = order.makerAssetData;\n        fromAddresses[0] = order.makerAddress;\n        toAddresses[0] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[0] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[1] = order.makerFeeAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[1] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            exchange,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderTransferResults(\n        address exchange,\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (OrderTransferResults orderTransferResults)\n    {\n        LibFillResults.FillResults memory fillResults = LibFillResults.calculateFillResults(\n            order,\n            takerAssetFillAmount,\n            IExchange(exchange).protocolFeeMultiplier(),\n            tx.gasprice\n        );\n\n        // Create input arrays\n        bytes[] memory assetData = new bytes[](4);\n        address[] memory fromAddresses = new address[](4);\n        address[] memory toAddresses = new address[](4);\n        uint256[] memory amounts = new uint256[](4);\n\n        // Transfer `takerAsset` from taker to maker\n        assetData[0] = order.takerAssetData;\n        fromAddresses[0] = takerAddress;\n        toAddresses[0] = order.makerAddress;\n        amounts[0] = takerAssetFillAmount;\n\n        // Transfer `makerAsset` from maker to taker\n        assetData[1] = order.makerAssetData;\n        fromAddresses[1] = order.makerAddress;\n        toAddresses[1] = takerAddress == address(0) ? UNUSED_ADDRESS : takerAddress;\n        amounts[1] = fillResults.makerAssetFilledAmount;\n\n        // Transfer `takerFeeAsset` from taker to feeRecipient\n        assetData[2] = order.takerFeeAssetData;\n        fromAddresses[2] = takerAddress;\n        toAddresses[2] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[2] = fillResults.takerFeePaid;\n\n        // Transfer `makerFeeAsset` from maker to feeRecipient\n        assetData[3] = order.makerFeeAssetData;\n        fromAddresses[3] = order.makerAddress;\n        toAddresses[3] = order.feeRecipientAddress == address(0) ? UNUSED_ADDRESS : order.feeRecipientAddress;\n        amounts[3] = fillResults.makerFeePaid;\n\n        return _simulateTransferFromCalls(\n            exchange,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n    }\n\n    /// @dev Simulates all of the transfers for each given order and returns the indices of each first failed transfer.\n    /// @param orders Array of orders to individually simulate transfers for.\n    /// @param takerAddresses Array of addresses of takers that will fill each order.\n    /// @param takerAssetFillAmounts Array of amounts of takerAsset that will be filled for each order.\n    /// @return The indices of the first failed transfer (or 4 if all transfers are successful) for each order.\n    function getSimulatedOrdersTransferResults(\n        address exchange,\n        LibOrder.Order[] memory orders,\n        address[] memory takerAddresses,\n        uint256[] memory takerAssetFillAmounts\n    )\n        public\n        returns (OrderTransferResults[] memory orderTransferResults)\n    {\n        uint256 length = orders.length;\n        orderTransferResults = new OrderTransferResults[](length);\n        for (uint256 i = 0; i != length; i++) {\n            orderTransferResults[i] = getSimulatedOrderTransferResults(\n                exchange,\n                orders[i],\n                takerAddresses[i],\n                takerAssetFillAmounts[i]\n            );\n        }\n        return orderTransferResults;\n    }\n\n    /// @dev Makes the simulation call with information about the transfers and processes\n    ///      the returndata.\n    /// @param assetData The assetdata to use to make transfers.\n    /// @param fromAddresses The addresses to transfer funds.\n    /// @param toAddresses The addresses that will receive funds\n    /// @param amounts The amounts involved in the transfer.\n    function _simulateTransferFromCalls(\n        address exchange,\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        private\n        returns (OrderTransferResults orderTransferResults)\n    {\n        // Encode data for `simulateDispatchTransferFromCalls(assetData, fromAddresses, toAddresses, amounts)`\n        bytes memory simulateDispatchTransferFromCallsData = abi.encodeWithSelector(\n            IExchange(address(0)).simulateDispatchTransferFromCalls.selector,\n            assetData,\n            fromAddresses,\n            toAddresses,\n            amounts\n        );\n\n        // Perform call and catch revert\n        (, bytes memory returnData) = address(exchange).call(simulateDispatchTransferFromCallsData);\n\n        bytes4 selector = returnData.readBytes4(0);\n        if (selector == LibExchangeRichErrors.AssetProxyDispatchErrorSelector()) {\n            // Decode AssetProxyDispatchError and return index of failed transfer\n            (, bytes32 failedTransferIndex,) = LibExchangeRichErrorDecoder.decodeAssetProxyDispatchError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (selector == LibExchangeRichErrors.AssetProxyTransferErrorSelector()) {\n            // Decode AssetProxyTransferError and return index of failed transfer\n            (bytes32 failedTransferIndex, ,) = LibExchangeRichErrorDecoder.decodeAssetProxyTransferError(returnData);\n            return OrderTransferResults(uint8(uint256(failedTransferIndex)));\n        } else if (keccak256(returnData) == _TRANSFERS_SUCCESSFUL_RESULT_HASH) {\n            // All transfers were successful\n            return OrderTransferResults.TransfersSuccessful;\n        } else {\n            revert(\"UNKNOWN_RETURN_DATA\");\n        }\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/libs/LibExchangeRichErrorDecoder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibExchangeRichErrorDecoder {\n\n    using LibBytes for bytes;\n\n    /// @dev Decompose an ABI-encoded SignatureError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature.\n    function decodeSignatureError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.SignatureErrorCodes errorCode,\n            bytes32 hash,\n            address signerAddress,\n            bytes memory signature\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, hash, signerAddress, signature) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, address, bytes)\n        );\n        errorCode = LibExchangeRichErrors.SignatureErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureValidatorError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature bytes.\n    /// @return errorData The revert data thrown by the validator contract.\n    function decodeEIP1271SignatureError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address verifyingContractAddress,\n            bytes memory data,\n            bytes memory signature,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.EIP1271SignatureErrorSelector());\n        (verifyingContractAddress, data, signature, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, bytes, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureValidatorNotApprovedError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return validatorAddress The expected validator.\n    function decodeSignatureValidatorNotApprovedError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address signerAddress,\n            address validatorAddress\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureValidatorNotApprovedErrorSelector());\n        (signerAddress, validatorAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, address)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded SignatureWalletError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return signerAddress The expected signer of the hash.\n    /// @return signature The full signature bytes.\n    /// @return errorData The revert data thrown by the validator contract.\n    function decodeSignatureWalletError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 hash,\n            address signerAddress,\n            bytes memory signature,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.SignatureWalletErrorSelector());\n        (hash, signerAddress, signature, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, address, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded OrderStatusError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash The order hash.\n    /// @return orderStatus The order status.\n    function decodeOrderStatusError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 orderHash,\n            LibOrder.OrderStatus orderStatus\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.OrderStatusErrorSelector());\n        uint8 _orderStatus;\n        (orderHash, _orderStatus) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, uint8)\n        );\n        orderStatus = LibOrder.OrderStatus(_orderStatus);\n    }\n\n    /// @dev Decompose an ABI-encoded OrderStatusError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode Error code that corresponds to invalid maker, taker, or sender.\n    /// @return orderHash The order hash.\n    /// @return contextAddress The maker, taker, or sender address\n    function decodeExchangeInvalidContextError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.ExchangeContextErrorCodes errorCode,\n            bytes32 orderHash,\n            address contextAddress\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.ExchangeInvalidContextErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash, contextAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, address)\n        );\n        errorCode = LibExchangeRichErrors.ExchangeContextErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded FillError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return orderHash The order hash.\n    function decodeFillError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.FillErrorCodes errorCode,\n            bytes32 orderHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.FillErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32)\n        );\n        errorCode = LibExchangeRichErrors.FillErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded OrderEpochError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return makerAddress The order maker.\n    /// @return orderSenderAddress The order sender.\n    /// @return currentEpoch The current epoch for the maker.\n    function decodeOrderEpochError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            address makerAddress,\n            address orderSenderAddress,\n            uint256 currentEpoch\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.OrderEpochErrorSelector());\n        (makerAddress, orderSenderAddress, currentEpoch) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (address, address, uint256)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyExistsError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return assetProxyId Id of asset proxy.\n    /// @return assetProxyAddress The address of the asset proxy.\n    function decodeAssetProxyExistsError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes4 assetProxyId, address assetProxyAddress)\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyExistsErrorSelector());\n        (assetProxyId, assetProxyAddress) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes4, address)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyDispatchError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return orderHash Hash of the order being dispatched.\n    /// @return assetData Asset data of the order being dispatched.\n    function decodeAssetProxyDispatchError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.AssetProxyDispatchErrorCodes errorCode,\n            bytes32 orderHash,\n            bytes memory assetData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyDispatchErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, orderHash, assetData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32, bytes)\n        );\n        errorCode = LibExchangeRichErrors.AssetProxyDispatchErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded AssetProxyTransferError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash Hash of the order being dispatched.\n    /// @return assetData Asset data of the order being dispatched.\n    /// @return errorData ABI-encoded revert data from the asset proxy.\n    function decodeAssetProxyTransferError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 orderHash,\n            bytes memory assetData,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.AssetProxyTransferErrorSelector());\n        (orderHash, assetData, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded NegativeSpreadError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return leftOrderHash Hash of the left order being matched.\n    /// @return rightOrderHash Hash of the right order being matched.\n    function decodeNegativeSpreadError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 leftOrderHash,\n            bytes32 rightOrderHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.NegativeSpreadErrorSelector());\n        (leftOrderHash, rightOrderHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes32)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded TransactionError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return errorCode The error code.\n    /// @return transactionHash Hash of the transaction.\n    function decodeTransactionError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.TransactionErrorCodes errorCode,\n            bytes32 transactionHash\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.TransactionErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, transactionHash) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, bytes32)\n        );\n        errorCode = LibExchangeRichErrors.TransactionErrorCodes(_errorCode);\n    }\n\n    /// @dev Decompose an ABI-encoded TransactionExecutionError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return transactionHash Hash of the transaction.\n    /// @return errorData Error thrown by exeucteTransaction().\n    function decodeTransactionExecutionError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            bytes32 transactionHash,\n            bytes memory errorData\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.TransactionExecutionErrorSelector());\n        (transactionHash, errorData) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (bytes32, bytes)\n        );\n    }\n\n    /// @dev Decompose an ABI-encoded IncompleteFillError.\n    /// @param encoded ABI-encoded revert error.\n    /// @return orderHash Hash of the order being filled.\n    function decodeIncompleteFillError(bytes memory encoded)\n        internal\n        pure\n        returns (\n            LibExchangeRichErrors.IncompleteFillErrorCode errorCode,\n            uint256 expectedAssetFillAmount,\n            uint256 actualAssetFillAmount\n        )\n    {\n        _assertSelectorBytes(encoded, LibExchangeRichErrors.IncompleteFillErrorSelector());\n        uint8 _errorCode;\n        (_errorCode, expectedAssetFillAmount, actualAssetFillAmount) = abi.decode(\n            encoded.sliceDestructive(4, encoded.length),\n            (uint8, uint256, uint256)\n        );\n        errorCode = LibExchangeRichErrors.IncompleteFillErrorCode(_errorCode);\n    }\n\n    /// @dev Revert if the leading 4 bytes of `encoded` is not `selector`.\n    function _assertSelectorBytes(bytes memory encoded, bytes4 selector)\n        private\n        pure\n    {\n        bytes4 actualSelector = LibBytes.readBytes4(encoded, 0);\n        require(\n            actualSelector == selector,\n            \"BAD_SELECTOR\"\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibExchangeRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibExchangeRichErrors {\n\n    enum AssetProxyDispatchErrorCodes {\n        INVALID_ASSET_DATA_LENGTH,\n        UNKNOWN_ASSET_PROXY\n    }\n\n    enum BatchMatchOrdersErrorCodes {\n        ZERO_LEFT_ORDERS,\n        ZERO_RIGHT_ORDERS,\n        INVALID_LENGTH_LEFT_SIGNATURES,\n        INVALID_LENGTH_RIGHT_SIGNATURES\n    }\n\n    enum ExchangeContextErrorCodes {\n        INVALID_MAKER,\n        INVALID_TAKER,\n        INVALID_SENDER\n    }\n\n    enum FillErrorCodes {\n        INVALID_TAKER_AMOUNT,\n        TAKER_OVERPAY,\n        OVERFILL,\n        INVALID_FILL_PRICE\n    }\n\n    enum SignatureErrorCodes {\n        BAD_ORDER_SIGNATURE,\n        BAD_TRANSACTION_SIGNATURE,\n        INVALID_LENGTH,\n        UNSUPPORTED,\n        ILLEGAL,\n        INAPPROPRIATE_SIGNATURE_TYPE,\n        INVALID_SIGNER\n    }\n\n    enum TransactionErrorCodes {\n        ALREADY_EXECUTED,\n        EXPIRED\n    }\n\n    enum IncompleteFillErrorCode {\n        INCOMPLETE_MARKET_BUY_ORDERS,\n        INCOMPLETE_MARKET_SELL_ORDERS,\n        INCOMPLETE_FILL_ORDER\n    }\n\n    // bytes4(keccak256(\"SignatureError(uint8,bytes32,address,bytes)\"))\n    bytes4 internal constant SIGNATURE_ERROR_SELECTOR =\n        0x7e5a2318;\n\n    // bytes4(keccak256(\"SignatureValidatorNotApprovedError(address,address)\"))\n    bytes4 internal constant SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR =\n        0xa15c0d06;\n\n    // bytes4(keccak256(\"EIP1271SignatureError(address,bytes,bytes,bytes)\"))\n    bytes4 internal constant EIP1271_SIGNATURE_ERROR_SELECTOR =\n        0x5bd0428d;\n\n    // bytes4(keccak256(\"SignatureWalletError(bytes32,address,bytes,bytes)\"))\n    bytes4 internal constant SIGNATURE_WALLET_ERROR_SELECTOR =\n        0x1b8388f7;\n\n    // bytes4(keccak256(\"OrderStatusError(bytes32,uint8)\"))\n    bytes4 internal constant ORDER_STATUS_ERROR_SELECTOR =\n        0xfdb6ca8d;\n\n    // bytes4(keccak256(\"ExchangeInvalidContextError(uint8,bytes32,address)\"))\n    bytes4 internal constant EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xe53c76c8;\n\n    // bytes4(keccak256(\"FillError(uint8,bytes32)\"))\n    bytes4 internal constant FILL_ERROR_SELECTOR =\n        0xe94a7ed0;\n\n    // bytes4(keccak256(\"OrderEpochError(address,address,uint256)\"))\n    bytes4 internal constant ORDER_EPOCH_ERROR_SELECTOR =\n        0x4ad31275;\n\n    // bytes4(keccak256(\"AssetProxyExistsError(bytes4,address)\"))\n    bytes4 internal constant ASSET_PROXY_EXISTS_ERROR_SELECTOR =\n        0x11c7b720;\n\n    // bytes4(keccak256(\"AssetProxyDispatchError(uint8,bytes32,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_DISPATCH_ERROR_SELECTOR =\n        0x488219a6;\n\n    // bytes4(keccak256(\"AssetProxyTransferError(bytes32,bytes,bytes)\"))\n    bytes4 internal constant ASSET_PROXY_TRANSFER_ERROR_SELECTOR =\n        0x4678472b;\n\n    // bytes4(keccak256(\"NegativeSpreadError(bytes32,bytes32)\"))\n    bytes4 internal constant NEGATIVE_SPREAD_ERROR_SELECTOR =\n        0xb6555d6f;\n\n    // bytes4(keccak256(\"TransactionError(uint8,bytes32)\"))\n    bytes4 internal constant TRANSACTION_ERROR_SELECTOR =\n        0xf5985184;\n\n    // bytes4(keccak256(\"TransactionExecutionError(bytes32,bytes)\"))\n    bytes4 internal constant TRANSACTION_EXECUTION_ERROR_SELECTOR =\n        0x20d11f61;\n    \n    // bytes4(keccak256(\"TransactionGasPriceError(bytes32,uint256,uint256)\"))\n    bytes4 internal constant TRANSACTION_GAS_PRICE_ERROR_SELECTOR =\n        0xa26dac09;\n\n    // bytes4(keccak256(\"TransactionInvalidContextError(bytes32,address)\"))\n    bytes4 internal constant TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR =\n        0xdec4aedf;\n\n    // bytes4(keccak256(\"IncompleteFillError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INCOMPLETE_FILL_ERROR_SELECTOR =\n        0x18e4b141;\n\n    // bytes4(keccak256(\"BatchMatchOrdersError(uint8)\"))\n    bytes4 internal constant BATCH_MATCH_ORDERS_ERROR_SELECTOR =\n        0xd4092f4f;\n\n    // bytes4(keccak256(\"PayProtocolFeeError(bytes32,uint256,address,address,bytes)\"))\n    bytes4 internal constant PAY_PROTOCOL_FEE_ERROR_SELECTOR =\n        0x87cb1e75;\n\n    // solhint-disable func-name-mixedcase\n    function SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureValidatorNotApprovedErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR;\n    }\n\n    function EIP1271SignatureErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EIP1271_SIGNATURE_ERROR_SELECTOR;\n    }\n\n    function SignatureWalletErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return SIGNATURE_WALLET_ERROR_SELECTOR;\n    }\n\n    function OrderStatusErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_STATUS_ERROR_SELECTOR;\n    }\n\n    function ExchangeInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function FillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return FILL_ERROR_SELECTOR;\n    }\n\n    function OrderEpochErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ORDER_EPOCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyExistsErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_EXISTS_ERROR_SELECTOR;\n    }\n\n    function AssetProxyDispatchErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_DISPATCH_ERROR_SELECTOR;\n    }\n\n    function AssetProxyTransferErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return ASSET_PROXY_TRANSFER_ERROR_SELECTOR;\n    }\n\n    function NegativeSpreadErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return NEGATIVE_SPREAD_ERROR_SELECTOR;\n    }\n\n    function TransactionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_ERROR_SELECTOR;\n    }\n\n    function TransactionExecutionErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_EXECUTION_ERROR_SELECTOR;\n    }\n\n    function IncompleteFillErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return INCOMPLETE_FILL_ERROR_SELECTOR;\n    }\n\n    function BatchMatchOrdersErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return BATCH_MATCH_ORDERS_ERROR_SELECTOR;\n    }\n\n    function TransactionGasPriceErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_GAS_PRICE_ERROR_SELECTOR;\n    }\n\n    function TransactionInvalidContextErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR;\n    }\n\n    function PayProtocolFeeErrorSelector()\n        internal\n        pure\n        returns (bytes4)\n    {\n        return PAY_PROTOCOL_FEE_ERROR_SELECTOR;\n    }\n    \n    function BatchMatchOrdersError(\n        BatchMatchOrdersErrorCodes errorCode\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            BATCH_MATCH_ORDERS_ERROR_SELECTOR,\n            errorCode\n        );\n    }\n\n    function SignatureError(\n        SignatureErrorCodes errorCode,\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_ERROR_SELECTOR,\n            errorCode,\n            hash,\n            signerAddress,\n            signature\n        );\n    }\n\n    function SignatureValidatorNotApprovedError(\n        address signerAddress,\n        address validatorAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_VALIDATOR_NOT_APPROVED_ERROR_SELECTOR,\n            signerAddress,\n            validatorAddress\n        );\n    }\n\n    function EIP1271SignatureError(\n        address verifyingContractAddress,\n        bytes memory data,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EIP1271_SIGNATURE_ERROR_SELECTOR,\n            verifyingContractAddress,\n            data,\n            signature,\n            errorData\n        );\n    }\n\n    function SignatureWalletError(\n        bytes32 hash,\n        address walletAddress,\n        bytes memory signature,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            SIGNATURE_WALLET_ERROR_SELECTOR,\n            hash,\n            walletAddress,\n            signature,\n            errorData\n        );\n    }\n\n    function OrderStatusError(\n        bytes32 orderHash,\n        LibOrder.OrderStatus orderStatus\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_STATUS_ERROR_SELECTOR,\n            orderHash,\n            orderStatus\n        );\n    }\n\n    function ExchangeInvalidContextError(\n        ExchangeContextErrorCodes errorCode,\n        bytes32 orderHash,\n        address contextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            EXCHANGE_INVALID_CONTEXT_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            contextAddress\n        );\n    }\n\n    function FillError(\n        FillErrorCodes errorCode,\n        bytes32 orderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            FILL_ERROR_SELECTOR,\n            errorCode,\n            orderHash\n        );\n    }\n\n    function OrderEpochError(\n        address makerAddress,\n        address orderSenderAddress,\n        uint256 currentEpoch\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ORDER_EPOCH_ERROR_SELECTOR,\n            makerAddress,\n            orderSenderAddress,\n            currentEpoch\n        );\n    }\n\n    function AssetProxyExistsError(\n        bytes4 assetProxyId,\n        address assetProxyAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_EXISTS_ERROR_SELECTOR,\n            assetProxyId,\n            assetProxyAddress\n        );\n    }\n\n    function AssetProxyDispatchError(\n        AssetProxyDispatchErrorCodes errorCode,\n        bytes32 orderHash,\n        bytes memory assetData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_DISPATCH_ERROR_SELECTOR,\n            errorCode,\n            orderHash,\n            assetData\n        );\n    }\n\n    function AssetProxyTransferError(\n        bytes32 orderHash,\n        bytes memory assetData,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ASSET_PROXY_TRANSFER_ERROR_SELECTOR,\n            orderHash,\n            assetData,\n            errorData\n        );\n    }\n\n    function NegativeSpreadError(\n        bytes32 leftOrderHash,\n        bytes32 rightOrderHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            NEGATIVE_SPREAD_ERROR_SELECTOR,\n            leftOrderHash,\n            rightOrderHash\n        );\n    }\n\n    function TransactionError(\n        TransactionErrorCodes errorCode,\n        bytes32 transactionHash\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_ERROR_SELECTOR,\n            errorCode,\n            transactionHash\n        );\n    }\n\n    function TransactionExecutionError(\n        bytes32 transactionHash,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_EXECUTION_ERROR_SELECTOR,\n            transactionHash,\n            errorData\n        );\n    }\n\n    function TransactionGasPriceError(\n        bytes32 transactionHash,\n        uint256 actualGasPrice,\n        uint256 requiredGasPrice\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_GAS_PRICE_ERROR_SELECTOR,\n            transactionHash,\n            actualGasPrice,\n            requiredGasPrice\n        );\n    }\n\n    function TransactionInvalidContextError(\n        bytes32 transactionHash,\n        address currentContextAddress\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            TRANSACTION_INVALID_CONTEXT_ERROR_SELECTOR,\n            transactionHash,\n            currentContextAddress\n        );\n    }\n\n    function IncompleteFillError(\n        IncompleteFillErrorCode errorCode,\n        uint256 expectedAssetFillAmount,\n        uint256 actualAssetFillAmount\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INCOMPLETE_FILL_ERROR_SELECTOR,\n            errorCode,\n            expectedAssetFillAmount,\n            actualAssetFillAmount\n        );\n    }\n\n    function PayProtocolFeeError(\n        bytes32 orderHash,\n        uint256 protocolFee,\n        address makerAddress,\n        address takerAddress,\n        bytes memory errorData\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            PAY_PROTOCOL_FEE_ERROR_SELECTOR,\n            orderHash,\n            protocolFee,\n            makerAddress,\n            takerAddress,\n            errorData\n        );\n    }\n}\n",
        "./EthBalanceChecker.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\n\n\ncontract EthBalanceChecker {\n\n    /// @dev Batch fetches ETH balances\n    /// @param addresses Array of addresses.\n    /// @return Array of ETH balances.\n    function getEthBalances(address[] memory addresses)\n        public\n        view\n        returns (uint256[] memory)\n    {\n        uint256[] memory balances = new uint256[](addresses.length);\n        for (uint256 i = 0; i != addresses.length; i++) {\n            balances[i] = addresses[i].balance;\n        }\n        return balances;\n    }\n\n}\n",
        "./ExternalFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"./Addresses.sol\";\nimport \"./LibAssetData.sol\";\nimport \"./LibTransactionDecoder.sol\";\nimport \"./LibOrderTransferSimulation.sol\";\n\n\ncontract ExternalFunctions is\n    Addresses\n{\n\n    /// @dev Decodes the call data for an Exchange contract method call.\n    /// @param transactionData ABI-encoded calldata for an Exchange\n    ///     contract method call.\n    /// @return The name of the function called, and the parameters it was\n    ///     given.  For single-order fills and cancels, the arrays will have\n    ///     just one element.\n    function decodeZeroExTransactionData(bytes memory transactionData)\n        public\n        pure\n        returns(\n            string memory functionName,\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        return LibTransactionDecoder.decodeZeroExTransactionData(transactionData);\n    }\n\n    /// @dev Decode AssetProxy identifier\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\n    /// @return The AssetProxy identifier\n    function decodeAssetProxyId(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId\n        )\n    {\n        return LibAssetData.decodeAssetProxyId(assetData);\n    }\n\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\n    /// @return AssetProxy-compliant data describing the asset.\n    function encodeERC20AssetData(address tokenAddress)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC20AssetData(tokenAddress);\n    }\n\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\n    /// @return The AssetProxy identifier, and the address of the ERC-20\n    /// contract hosting this asset.\n    function decodeERC20AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress\n        )\n    {\n        return LibAssetData.decodeERC20AssetData(assetData);\n    }\n\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\n    /// @param tokenId The identifier of the specific asset to be traded.\n    /// @return AssetProxy-compliant asset data describing the asset.\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC721AssetData(tokenAddress, tokenId);\n    }\n\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\n    /// contract hosting this asset, and the identifier of the specific\n    /// asset to be traded.\n    function decodeERC721AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256 tokenId\n        )\n    {\n        return LibAssetData.decodeERC721AssetData(assetData);\n    }\n\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\n    /// @param tokenIds The identifiers of the specific assets to be traded.\n    /// @param tokenValues The amounts of each asset to be traded.\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeERC1155AssetData(\n        address tokenAddress,\n        uint256[] memory tokenIds,\n        uint256[] memory tokenValues,\n        bytes memory callbackData\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeERC1155AssetData(\n            tokenAddress,\n            tokenIds,\n            tokenValues,\n            callbackData\n        );\n    }\n\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\n    /// contract hosting the assets, an array of the identifiers of the\n    /// assets to be traded, an array of asset amounts to be traded, and\n    /// callback data.  Each element of the arrays corresponds to the\n    /// same-indexed element of the other array.  Return values specified as\n    /// `memory` are returned as pointers to locations within the memory of\n    /// the input parameter `assetData`.\n    function decodeERC1155AssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            uint256[] memory tokenIds,\n            uint256[] memory tokenValues,\n            bytes memory callbackData\n        )\n    {\n        return LibAssetData.decodeERC1155AssetData(assetData);\n    }\n\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\n    /// @param amounts The amounts of each asset to be traded.\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\n    /// @return AssetProxy-compliant data describing the set of assets.\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeMultiAssetData(amounts, nestedAssetData);\n    }\n\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\n    /// of the assets to be traded, and an array of the\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\n    /// element of the arrays corresponds to the same-indexed element of the other array.\n    function decodeMultiAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            uint256[] memory amounts,\n            bytes[] memory nestedAssetData\n        )\n    {\n        return LibAssetData.decodeMultiAssetData(assetData);\n    }\n\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\n    /// @param staticCallTargetAddress Target address of StaticCall.\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\n    /// @return AssetProxy-compliant asset data describing the set of assets.\n    function encodeStaticCallAssetData(\n        address staticCallTargetAddress,\n        bytes memory staticCallData,\n        bytes32 expectedReturnDataHash\n    )\n        public\n        pure\n        returns (bytes memory assetData)\n    {\n        return LibAssetData.encodeStaticCallAssetData(\n            staticCallTargetAddress,\n            staticCallData,\n            expectedReturnDataHash\n        );\n    }\n\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\n    function decodeStaticCallAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address staticCallTargetAddress,\n            bytes memory staticCallData,\n            bytes32 expectedReturnDataHash\n        )\n    {\n        return LibAssetData.decodeStaticCallAssetData(assetData);\n    }\n\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\n    function decodeERC20BridgeAssetData(bytes memory assetData)\n        public\n        pure\n        returns (\n            bytes4 assetProxyId,\n            address tokenAddress,\n            address bridgeAddress,\n            bytes memory bridgeData\n        )\n    {\n        return LibAssetData.decodeERC20BridgeAssetData(assetData);\n    }\n\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\n    /// @param assetData AssetProxy compliant asset data.\n    function revertIfInvalidAssetData(bytes memory assetData)\n        public\n        pure\n    {\n        return LibAssetData.revertIfInvalidAssetData(assetData);\n    }\n\n    /// @dev Simulates the maker transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderMakerTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrderMakerTransferResults(\n            exchangeAddress,\n            order,\n            takerAddress,\n            takerAssetFillAmount\n        );\n    }\n\n    /// @dev Simulates all of the transfers within an order and returns the index of the first failed transfer.\n    /// @param order The order to simulate transfers for.\n    /// @param takerAddress The address of the taker that will fill the order.\n    /// @param takerAssetFillAmount The amount of takerAsset that the taker wished to fill.\n    /// @return The index of the first failed transfer (or 4 if all transfers are successful).\n    function getSimulatedOrderTransferResults(\n        LibOrder.Order memory order,\n        address takerAddress,\n        uint256 takerAssetFillAmount\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrderTransferResults(\n            exchangeAddress,\n            order,\n            takerAddress,\n            takerAssetFillAmount\n        );\n    }\n\n    /// @dev Simulates all of the transfers for each given order and returns the indices of each first failed transfer.\n    /// @param orders Array of orders to individually simulate transfers for.\n    /// @param takerAddresses Array of addresses of takers that will fill each order.\n    /// @param takerAssetFillAmounts Array of amounts of takerAsset that will be filled for each order.\n    /// @return The indices of the first failed transfer (or 4 if all transfers are successful) for each order.\n    function getSimulatedOrdersTransferResults(\n        LibOrder.Order[] memory orders,\n        address[] memory takerAddresses,\n        uint256[] memory takerAssetFillAmounts\n    )\n        public\n        returns (LibOrderTransferSimulation.OrderTransferResults[] memory orderTransferResults)\n    {\n        return LibOrderTransferSimulation.getSimulatedOrdersTransferResults(\n            exchangeAddress,\n            orders,\n            takerAddresses,\n            takerAssetFillAmounts\n        );\n    }\n}\n",
        "./LibTransactionDecoder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\n\n\nlibrary LibTransactionDecoder {\n\n    using LibBytes for bytes;\n\n    /// @dev Decodes the call data for an Exchange contract method call.\n    /// @param transactionData ABI-encoded calldata for an Exchange\n    ///     contract method call.\n    /// @return The name of the function called, and the parameters it was\n    ///     given.  For single-order fills and cancels, the arrays will have\n    ///     just one element.\n    function decodeZeroExTransactionData(bytes memory transactionData)\n        public\n        pure\n        returns(\n            string memory functionName,\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        bytes4 functionSelector = transactionData.readBytes4(0);\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            functionName = \"batchCancelOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrders.selector) {\n            functionName = \"batchFillOrders\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector) {\n            functionName = \"batchFillOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector) {\n            functionName = \"batchFillOrKillOrders\";\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            functionName = \"cancelOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrder.selector) {\n            functionName = \"fillOrder\";\n        } else if (functionSelector == IExchange(address(0)).fillOrKillOrder.selector) {\n            functionName = \"fillOrKillOrder\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector) {\n            functionName = \"marketBuyOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector) {\n            functionName = \"marketSellOrdersNoThrow\";\n        } else if (functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector) {\n            functionName = \"marketBuyOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector) {\n            functionName = \"marketSellOrdersFillOrKill\";\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            functionName = \"matchOrders\";\n        } else if (\n            functionSelector == IExchange(address(0)).cancelOrdersUpTo.selector ||\n            functionSelector == IExchange(address(0)).executeTransaction.selector\n        ) {\n            revert(\"UNIMPLEMENTED\");\n        } else {\n            revert(\"UNKNOWN_FUNCTION_SELECTOR\");\n        }\n\n        if (functionSelector == IExchange(address(0)).batchCancelOrders.selector) {\n            // solhint-disable-next-line indent\n            orders = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order[]));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).batchFillOrKillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrders.selector ||\n            functionSelector == IExchange(address(0)).batchFillOrdersNoThrow.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForBatchFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).cancelOrder.selector) {\n            orders = new LibOrder.Order[](1);\n            orders[0] = abi.decode(transactionData.slice(4, transactionData.length), (LibOrder.Order));\n            takerAssetFillAmounts = new uint256[](0);\n            signatures = new bytes[](0);\n        } else if (\n            functionSelector == IExchange(address(0)).fillOrKillOrder.selector ||\n            functionSelector == IExchange(address(0)).fillOrder.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForSingleOrderFill(transactionData);\n        } else if (\n            functionSelector == IExchange(address(0)).marketBuyOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersNoThrow.selector ||\n            functionSelector == IExchange(address(0)).marketBuyOrdersFillOrKill.selector ||\n            functionSelector == IExchange(address(0)).marketSellOrdersFillOrKill.selector\n        ) {\n            (orders, takerAssetFillAmounts, signatures) = _makeReturnValuesForMarketFill(transactionData);\n        } else if (functionSelector == IExchange(address(0)).matchOrders.selector) {\n            (\n                LibOrder.Order memory leftOrder,\n                LibOrder.Order memory rightOrder,\n                bytes memory leftSignature,\n                bytes memory rightSignature\n            ) = abi.decode(\n                transactionData.slice(4, transactionData.length),\n                (LibOrder.Order, LibOrder.Order, bytes, bytes)\n            );\n\n            orders = new LibOrder.Order[](2);\n            orders[0] = leftOrder;\n            orders[1] = rightOrder;\n\n            takerAssetFillAmounts = new uint256[](2);\n            takerAssetFillAmounts[0] = leftOrder.takerAssetAmount;\n            takerAssetFillAmounts[1] = rightOrder.takerAssetAmount;\n\n            signatures = new bytes[](2);\n            signatures[0] = leftSignature;\n            signatures[1] = rightSignature;\n        }\n    }\n\n    function _makeReturnValuesForSingleOrderFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        orders = new LibOrder.Order[](1);\n        takerAssetFillAmounts = new uint256[](1);\n        signatures = new bytes[](1);\n        // solhint-disable-next-line indent\n        (orders[0], takerAssetFillAmounts[0], signatures[0]) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            (LibOrder.Order, uint256, bytes)\n        );\n    }\n\n    function _makeReturnValuesForBatchFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts, signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256[], bytes[])\n        );\n    }\n\n    function _makeReturnValuesForMarketFill(bytes memory transactionData)\n        private\n        pure\n        returns(\n            LibOrder.Order[] memory orders,\n            uint256[] memory takerAssetFillAmounts,\n            bytes[] memory signatures\n        )\n    {\n        takerAssetFillAmounts = new uint256[](1);\n        // solhint-disable-next-line indent\n        (orders, takerAssetFillAmounts[0], signatures) = abi.decode(\n            transactionData.slice(4, transactionData.length),\n            // solhint-disable-next-line indent\n            (LibOrder.Order[], uint256, bytes[])\n        );\n    }\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-asset-proxy=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-asset-proxy",
                "@0x/contracts-exchange=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange",
                "@0x/contracts-exchange-libs=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-utils=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc20",
                "@0x/contracts-erc721=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc721",
                "@0x/contracts-erc1155=/Users/rickmorty/Documents/projects/0x/0x-monorepo/node_modules/@0x/contracts-erc1155"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 5000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
