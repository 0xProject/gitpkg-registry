{
    "schemaVersion": "2.0.0",
    "contractName": "UniswapV3Sampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3QuoterV2",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3QuoterV2",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "uniswapGasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "sampleBuysFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromUniswapV3(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapGasUsed": "Estimated amount of gas used",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "stateVariables": {
                "QUOTE_GAS": {
                    "details": "Gas limit for UniswapV3 calls. This is 100% a guess."
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50611717806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635505000a1461003b5780635aae4e5314610066575b600080fd5b61004e610049366004611209565b610079565b60405161005d93929190611533565b60405180910390f35b61004e610074366004611209565b61036e565b6060806060806100fb876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bb57600080fd5b505afa1580156100cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f391906111e3565b876000610653565b905084516001600160401b038111801561011457600080fd5b5060405190808252806020026020018201604052801561013e578160200160208202803683370190505b50915084516001600160401b038111801561015857600080fd5b5060405190808252806020026020018201604052801561018c57816020015b60608152602001906001900390816101775790505b50935084516001600160401b03811180156101a657600080fd5b506040519080825280602002602001820160405280156101d0578160200160208202803683370190505b50925060005b8551811015610363576000805b83518110156102f557606061020b8a8684815181106101fe57fe5b6020026020010151610afd565b90508a6001600160a01b031663cdca1753620aae60838c888151811061022d57fe5b60200260200101516040518463ffffffff1660e01b8152600401610252929190611575565b600060405180830381600088803b15801561026c57600080fd5b5087f1935050505080156102a257506040513d6000823e601f3d908101601f1916820160405261029f91908101906112c0565b60015b6102ab576102ec565b8387116102e757839650848c89815181106102c257fe5b6020026020010181905250808b89815181106102da57fe5b6020026020010181815250505b505050505b506001016101e3565b5080610342576040518060200160405280600081525086838151811061031757fe5b6020026020010181905250600085838151811061033057fe5b60200260200101818152505050610363565b8084838151811061034f57fe5b6020908102919091010152506001016101d6565b505093509350939050565b6060806060806103b0876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bb57600080fd5b905060606103bd87610c60565b905085516001600160401b03811180156103d657600080fd5b50604051908082528060200260200182016040528015610400578160200160208202803683370190505b50925085516001600160401b038111801561041a57600080fd5b5060405190808252806020026020018201604052801561044e57816020015b60608152602001906001900390816104395790505b50945085516001600160401b038111801561046857600080fd5b50604051908082528060200260200182016040528015610492578160200160208202803683370190505b50935060005b8651811015610647576000805b84518110156105d95760606104d5856104d08885815181106104c357fe5b6020026020010151610cfe565b610afd565b90508b6001600160a01b0316632f80bb1d620aae60838d88815181106104f757fe5b60200260200101516040518463ffffffff1660e01b815260040161051c929190611575565b600060405180830381600088803b15801561053657600080fd5b5087f19350505050801561056c57506040513d6000823e601f3d908101601f1916820160405261056991908101906112c0565b60015b610575576105d0565b8615806105825750838710155b156105cb5783965061059a8f8b88815181106101fe57fe5b8d89815181106105a657fe5b6020026020010181905250808c89815181106105be57fe5b6020026020010181815250505b505050505b506001016104a5565b508061062657604051806020016040528060008152508783815181106105fb57fe5b6020026020010181905250600086838151811061061457fe5b60200260200101818152505050610647565b8085838151811061063357fe5b602090810291909101015250600101610498565b50505093509350939050565b606060028284510310156106825760405162461bcd60e51b8152600401610679906115bd565b60405180910390fd5b61068a610fa3565b5060408051608081018252606481526101f46020820152610bb8818301526127106060808301919091528251600480825260a0820190945291929091908160200160208202803683370190505090506000808686815181106106e857fe5b60200260200101519050600087876001018151811061070357fe5b6020026020010151905060005b60048110156107f85760008a6001600160a01b0316631698ee8285858a866004811061073857fe5b60200201516040518463ffffffff1660e01b815260040161075b93929190611595565b60206040518083038186803b15801561077357600080fd5b505afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906111e3565b90506107b681610d96565b156107ef57808686806001019750815181106107ce57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101610710565b5050508061080857505050610af6565b85518560020114156108fe57806001600160401b038111801561082a57600080fd5b5060405190808252806020026020018201604052801561085e57816020015b60608152602001906001900390816108495790505b50935060005b818110156108f55760408051600180825281830190925290602080830190803683370190505085828151811061089657fe5b60200260200101819052508281815181106108ad57fe5b60200260200101518582815181106108c157fe5b60200260200101516000815181106108d557fe5b6001600160a01b0390921660209283029190910190910152600101610864565b50505050610af6565b606061090e888888600101610653565b90508051600014156109235750505050610af6565b805182026001600160401b038111801561093c57600080fd5b5060405190808252806020026020018201604052801561097057816020015b606081526020019060019003908161095b5790505b50945060005b82811015610af05760005b8251811015610ae757825182810282019084908390811061099e57fe5b6020026020010151516001016001600160401b03811180156109bf57600080fd5b506040519080825280602002602001820160405280156109e9578160200160208202803683370190505b508882815181106109f657fe5b6020026020010181905250858381518110610a0d57fe5b6020026020010151888281518110610a2157fe5b6020026020010151600081518110610a3557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110610a6457fe5b602002602001015151811015610add57848381518110610a8057fe5b60200260200101518181518110610a9357fe5b6020026020010151898381518110610aa757fe5b60200260200101518260010181518110610abd57fe5b6001600160a01b0390921660209283029190910190910152600101610a58565b5050600101610981565b50600101610976565b50505050505b9392505050565b60606002835110158015610b15575081516001018351145b610b315760405162461bcd60e51b8152600401610679906115cd565b81516003028351601402016001600160401b0381118015610b5157600080fd5b506040519080825280601f01601f191660200182016040528015610b7c576020820181803683370190505b5090506020810160005b8451811015610c58578015610c2b576000846001830381518110610ba657fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190611284565b60e81b8352506003909101905b6000858281518110610c3957fe5b602090810291909101015160601b835250601490910190600101610b86565b505092915050565b606081516001600160401b0381118015610c7957600080fd5b50604051908082528060200260200182016040528015610ca3578160200160208202803683370190505b50905060005b8251811015610cf857826001828551030381518110610cc457fe5b6020026020010151828281518110610cd857fe5b6001600160a01b0390921660209283029190910190910152600101610ca9565b50919050565b606081516001600160401b0381118015610d1757600080fd5b50604051908082528060200260200182016040528015610d41578160200160208202803683370190505b50905060005b8251811015610cf857826001828551030381518110610d6257fe5b6020026020010151828281518110610d7657fe5b6001600160a01b0390921660209283029190910190910152600101610d47565b6000813b80610da9576000915050610f9e565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b91906111e3565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610e469190611525565b60206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9691906112a2565b610ea257506000610f9e565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906111e3565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610f3e9190611525565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e91906112a2565b610f9a57506000610f9e565b5060015b919050565b60405180608001604052806004906020820280368337509192915050565b600082601f830112610fd257600080fd5b8135610fe5610fe082611603565b6115dd565b9150818183526020840193506020810190508385602084028201111561100a57600080fd5b60005b8381101561103657816110208882611190565b845250602092830192919091019060010161100d565b5050505092915050565b600082601f83011261105157600080fd5b815161105f610fe082611603565b9150818183526020840193506020810190508385602084028201111561108457600080fd5b60005b83811015611036578161109a88826111ac565b8452506020928301929190910190600101611087565b600082601f8301126110c157600080fd5b81356110cf610fe082611603565b915081818352602084019350602081019050838560208402820111156110f457600080fd5b60005b83811015611036578161110a88826111c2565b84525060209283019291909101906001016110f7565b600082601f83011261113157600080fd5b815161113f610fe082611603565b9150818183526020840193506020810190508385602084028201111561116457600080fd5b60005b83811015611036578161117a88826111d8565b8452506020928301929190910190600101611167565b803561119b816116a6565b92915050565b805161119b816116a6565b805161119b816116bd565b805161119b816116c6565b803561119b816116cf565b805161119b816116cf565b805161119b816116d8565b6000602082840312156111f557600080fd5b600061120184846111a1565b949350505050565b60008060006060848603121561121e57600080fd5b600061122a8686611190565b93505060208401356001600160401b0381111561124657600080fd5b61125286828701610fc1565b92505060408401356001600160401b0381111561126e57600080fd5b61127a868287016110b0565b9150509250925092565b60006020828403121561129657600080fd5b600061120184846111b7565b6000602082840312156112b457600080fd5b600061120184846111cd565b600080600080608085870312156112d657600080fd5b60006112e287876111cd565b94505060208501516001600160401b038111156112fe57600080fd5b61130a87828801611040565b93505060408501516001600160401b0381111561132657600080fd5b61133287828801611120565b9250506060611343878288016111cd565b91505092959194509250565b6000610af68383611445565b6000611367838361151c565b505060200190565b61137881611636565b82525050565b600061138982611629565b611393818561162d565b9350836020820285016113a585611623565b8060005b858110156113df57848403895281516113c2858261134f565b94506113cd83611623565b60209a909a01999250506001016113a9565b5091979650505050505050565b60006113f782611629565b611401818561162d565b935061140c83611623565b8060005b8381101561143a578151611424888261135b565b975061142f83611623565b925050600101611410565b509495945050505050565b600061145082611629565b61145a818561162d565b935061146a81856020860161166c565b6114738161169c565b9093019392505050565b61137881611641565b600061149360248361162d565b7f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20738152631a1bdc9d60e21b602082015260400192915050565b60006114d960258361162d565b7f556e6973776170563353616d706c65722f696e76616c69642070617468206c658152646e6774687360d81b602082015260400192915050565b61137881611658565b61137881611660565b6020810161119b828461136f565b60608082528101611544818661137e565b9050818103602083015261155881856113ec565b9050818103604083015261156c81846113ec565b95945050505050565b604080825281016115868185611445565b9050610af6602083018461151c565b606081016115a3828661147d565b6115b0602083018561147d565b6112016040830184611513565b6020808252810161119b81611486565b6020808252810161119b816114cc565b6040518181016001600160401b03811182821017156115fb57600080fd5b604052919050565b60006001600160401b0382111561161957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b600061119b8261164c565b600061119b82611636565b6001600160a01b031690565b62ffffff1690565b90565b63ffffffff1690565b60005b8381101561168757818101518382015260200161166f565b83811115611696576000848401525b50505050565b601f01601f191690565b6116af81611641565b81146116ba57600080fd5b50565b6116af8161164c565b6116af81611658565b6116af81611660565b6116af8161166356fea264697066735822122037c33bfdb23efe8406da6c0398207b7cfdea995ff2619b22065d79c6ad136afa64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1717 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5505000A EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x66 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0xFB DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x653 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x177 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x60 PUSH2 0x20B DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0xAAE60 DUP4 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x252 SWAP3 SWAP2 SWAP1 PUSH2 0x1575 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2AB JUMPI PUSH2 0x2EC JUMP JUMPDEST DUP4 DUP8 GT PUSH2 0x2E7 JUMPI DUP4 SWAP7 POP DUP5 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1E3 JUMP JUMPDEST POP DUP1 PUSH2 0x342 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x317 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x330 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x363 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x34F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1D6 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3B0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3BD DUP8 PUSH2 0xC60 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x400 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x439 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x492 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x60 PUSH2 0x4D5 DUP6 PUSH2 0x4D0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCFE JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0xAAE60 DUP4 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C SWAP3 SWAP2 SWAP1 PUSH2 0x1575 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x56C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x569 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x575 JUMPI PUSH2 0x5D0 JUMP JUMPDEST DUP7 ISZERO DUP1 PUSH2 0x582 JUMPI POP DUP4 DUP8 LT ISZERO JUMPDEST ISZERO PUSH2 0x5CB JUMPI DUP4 SWAP7 POP PUSH2 0x59A DUP16 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4A5 JUMP JUMPDEST POP DUP1 PUSH2 0x626 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x614 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x647 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x633 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x498 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x682 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x679 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x68A PUSH2 0xFA3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6E8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x703 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x738 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x773 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x787 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x7B6 DUP2 PUSH2 0xD96 JUMP JUMPDEST ISZERO PUSH2 0x7EF JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x7CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x710 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x808 JUMPI POP POP POP PUSH2 0xAF6 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x8FE JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x85E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x849 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x896 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8D5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x864 JUMP JUMPDEST POP POP POP POP PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x90E DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x653 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x923 JUMPI POP POP POP POP PUSH2 0xAF6 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x970 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x95B JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xAE7 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x99E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA35 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA64 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xADD JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xA93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xA58 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x981 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x976 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0xB15 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0xB31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x679 SWAP1 PUSH2 0x15CD JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB7C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC58 JUMPI DUP1 ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0xBA6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1E SWAP2 SWAP1 PUSH2 0x1284 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC39 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB86 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCA3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xCF8 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0xCC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCD8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xCA9 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xCF8 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD76 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xF9E JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE1B SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE46 SWAP2 SWAP1 PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE96 SWAP2 SWAP1 PUSH2 0x12A2 JUMP JUMPDEST PUSH2 0xEA2 JUMPI POP PUSH1 0x0 PUSH2 0xF9E JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF13 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF3E SWAP2 SWAP1 PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF8E SWAP2 SWAP1 PUSH2 0x12A2 JUMP JUMPDEST PUSH2 0xF9A JUMPI POP PUSH1 0x0 PUSH2 0xF9E JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFE5 PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x15DD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x1020 DUP9 DUP3 PUSH2 0x1190 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x100D JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x105F PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x109A DUP9 DUP3 PUSH2 0x11AC JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10CF PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x10F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x110A DUP9 DUP3 PUSH2 0x11C2 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x113F PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x117A DUP9 DUP3 PUSH2 0x11D8 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1167 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0x16A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16A6 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16C6 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0x16CF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16CF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11A1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x122A DUP7 DUP7 PUSH2 0x1190 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1252 DUP7 DUP3 DUP8 ADD PUSH2 0xFC1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x126E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127A DUP7 DUP3 DUP8 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12E2 DUP8 DUP8 PUSH2 0x11CD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x12FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x130A DUP8 DUP3 DUP9 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1332 DUP8 DUP3 DUP9 ADD PUSH2 0x1120 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1343 DUP8 DUP3 DUP9 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF6 DUP4 DUP4 PUSH2 0x1445 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1367 DUP4 DUP4 PUSH2 0x151C JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1389 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x1393 DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x13A5 DUP6 PUSH2 0x1623 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x13DF JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x13C2 DUP6 DUP3 PUSH2 0x134F JUMP JUMPDEST SWAP5 POP PUSH2 0x13CD DUP4 PUSH2 0x1623 JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x13A9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13F7 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x1401 DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP PUSH2 0x140C DUP4 PUSH2 0x1623 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x143A JUMPI DUP2 MLOAD PUSH2 0x1424 DUP9 DUP3 PUSH2 0x135B JUMP JUMPDEST SWAP8 POP PUSH2 0x142F DUP4 PUSH2 0x1623 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x1410 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1450 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x145A DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP PUSH2 0x146A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x166C JUMP JUMPDEST PUSH2 0x1473 DUP2 PUSH2 0x169C JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1641 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1493 PUSH1 0x24 DUP4 PUSH2 0x162D JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 DUP2 MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D9 PUSH1 0x25 DUP4 PUSH2 0x162D JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 DUP2 MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x119B DUP3 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1544 DUP2 DUP7 PUSH2 0x137E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1558 DUP2 DUP6 PUSH2 0x13EC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x156C DUP2 DUP5 PUSH2 0x13EC JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1586 DUP2 DUP6 PUSH2 0x1445 JUMP JUMPDEST SWAP1 POP PUSH2 0xAF6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x151C JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x15A3 DUP3 DUP7 PUSH2 0x147D JUMP JUMPDEST PUSH2 0x15B0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x147D JUMP JUMPDEST PUSH2 0x1201 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1513 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x119B DUP2 PUSH2 0x1486 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x119B DUP2 PUSH2 0x14CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x15FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP3 PUSH2 0x164C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP3 PUSH2 0x1636 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1687 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x166F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x16BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x164C JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1663 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xC3 EXTCODESIZE REVERT 0xB2 RETURNDATACOPY INVALID DUP5 MOD 0xDA PUSH13 0x398207B7CFDEA995FF2619B22 MOD 0x5D PUSH26 0xC6AD136AFA64736F6C634300060C003300000000000000000000 ",
                "sourceMap": "3091:10877:27:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635505000a1461003b5780635aae4e5314610066575b600080fd5b61004e610049366004611209565b610079565b60405161005d93929190611533565b60405180910390f35b61004e610074366004611209565b61036e565b6060806060806100fb876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bb57600080fd5b505afa1580156100cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100f391906111e3565b876000610653565b905084516001600160401b038111801561011457600080fd5b5060405190808252806020026020018201604052801561013e578160200160208202803683370190505b50915084516001600160401b038111801561015857600080fd5b5060405190808252806020026020018201604052801561018c57816020015b60608152602001906001900390816101775790505b50935084516001600160401b03811180156101a657600080fd5b506040519080825280602002602001820160405280156101d0578160200160208202803683370190505b50925060005b8551811015610363576000805b83518110156102f557606061020b8a8684815181106101fe57fe5b6020026020010151610afd565b90508a6001600160a01b031663cdca1753620aae60838c888151811061022d57fe5b60200260200101516040518463ffffffff1660e01b8152600401610252929190611575565b600060405180830381600088803b15801561026c57600080fd5b5087f1935050505080156102a257506040513d6000823e601f3d908101601f1916820160405261029f91908101906112c0565b60015b6102ab576102ec565b8387116102e757839650848c89815181106102c257fe5b6020026020010181905250808b89815181106102da57fe5b6020026020010181815250505b505050505b506001016101e3565b5080610342576040518060200160405280600081525086838151811061031757fe5b6020026020010181905250600085838151811061033057fe5b60200260200101818152505050610363565b8084838151811061034f57fe5b6020908102919091010152506001016101d6565b505093509350939050565b6060806060806103b0876001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bb57600080fd5b905060606103bd87610c60565b905085516001600160401b03811180156103d657600080fd5b50604051908082528060200260200182016040528015610400578160200160208202803683370190505b50925085516001600160401b038111801561041a57600080fd5b5060405190808252806020026020018201604052801561044e57816020015b60608152602001906001900390816104395790505b50945085516001600160401b038111801561046857600080fd5b50604051908082528060200260200182016040528015610492578160200160208202803683370190505b50935060005b8651811015610647576000805b84518110156105d95760606104d5856104d08885815181106104c357fe5b6020026020010151610cfe565b610afd565b90508b6001600160a01b0316632f80bb1d620aae60838d88815181106104f757fe5b60200260200101516040518463ffffffff1660e01b815260040161051c929190611575565b600060405180830381600088803b15801561053657600080fd5b5087f19350505050801561056c57506040513d6000823e601f3d908101601f1916820160405261056991908101906112c0565b60015b610575576105d0565b8615806105825750838710155b156105cb5783965061059a8f8b88815181106101fe57fe5b8d89815181106105a657fe5b6020026020010181905250808c89815181106105be57fe5b6020026020010181815250505b505050505b506001016104a5565b508061062657604051806020016040528060008152508783815181106105fb57fe5b6020026020010181905250600086838151811061061457fe5b60200260200101818152505050610647565b8085838151811061063357fe5b602090810291909101015250600101610498565b50505093509350939050565b606060028284510310156106825760405162461bcd60e51b8152600401610679906115bd565b60405180910390fd5b61068a610fa3565b5060408051608081018252606481526101f46020820152610bb8818301526127106060808301919091528251600480825260a0820190945291929091908160200160208202803683370190505090506000808686815181106106e857fe5b60200260200101519050600087876001018151811061070357fe5b6020026020010151905060005b60048110156107f85760008a6001600160a01b0316631698ee8285858a866004811061073857fe5b60200201516040518463ffffffff1660e01b815260040161075b93929190611595565b60206040518083038186803b15801561077357600080fd5b505afa158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906111e3565b90506107b681610d96565b156107ef57808686806001019750815181106107ce57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101610710565b5050508061080857505050610af6565b85518560020114156108fe57806001600160401b038111801561082a57600080fd5b5060405190808252806020026020018201604052801561085e57816020015b60608152602001906001900390816108495790505b50935060005b818110156108f55760408051600180825281830190925290602080830190803683370190505085828151811061089657fe5b60200260200101819052508281815181106108ad57fe5b60200260200101518582815181106108c157fe5b60200260200101516000815181106108d557fe5b6001600160a01b0390921660209283029190910190910152600101610864565b50505050610af6565b606061090e888888600101610653565b90508051600014156109235750505050610af6565b805182026001600160401b038111801561093c57600080fd5b5060405190808252806020026020018201604052801561097057816020015b606081526020019060019003908161095b5790505b50945060005b82811015610af05760005b8251811015610ae757825182810282019084908390811061099e57fe5b6020026020010151516001016001600160401b03811180156109bf57600080fd5b506040519080825280602002602001820160405280156109e9578160200160208202803683370190505b508882815181106109f657fe5b6020026020010181905250858381518110610a0d57fe5b6020026020010151888281518110610a2157fe5b6020026020010151600081518110610a3557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110610a6457fe5b602002602001015151811015610add57848381518110610a8057fe5b60200260200101518181518110610a9357fe5b6020026020010151898381518110610aa757fe5b60200260200101518260010181518110610abd57fe5b6001600160a01b0390921660209283029190910190910152600101610a58565b5050600101610981565b50600101610976565b50505050505b9392505050565b60606002835110158015610b15575081516001018351145b610b315760405162461bcd60e51b8152600401610679906115cd565b81516003028351601402016001600160401b0381118015610b5157600080fd5b506040519080825280601f01601f191660200182016040528015610b7c576020820181803683370190505b5090506020810160005b8451811015610c58578015610c2b576000846001830381518110610ba657fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015610be657600080fd5b505afa158015610bfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1e9190611284565b60e81b8352506003909101905b6000858281518110610c3957fe5b602090810291909101015160601b835250601490910190600101610b86565b505092915050565b606081516001600160401b0381118015610c7957600080fd5b50604051908082528060200260200182016040528015610ca3578160200160208202803683370190505b50905060005b8251811015610cf857826001828551030381518110610cc457fe5b6020026020010151828281518110610cd857fe5b6001600160a01b0390921660209283029190910190910152600101610ca9565b50919050565b606081516001600160401b0381118015610d1757600080fd5b50604051908082528060200260200182016040528015610d41578160200160208202803683370190505b50905060005b8251811015610cf857826001828551030381518110610d6257fe5b6020026020010151828281518110610d7657fe5b6001600160a01b0390921660209283029190910190910152600101610d47565b6000813b80610da9576000915050610f9e565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b91906111e3565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610e469190611525565b60206040518083038186803b158015610e5e57600080fd5b505afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9691906112a2565b610ea257506000610f9e565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610edb57600080fd5b505afa158015610eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1391906111e3565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401610f3e9190611525565b60206040518083038186803b158015610f5657600080fd5b505afa158015610f6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8e91906112a2565b610f9a57506000610f9e565b5060015b919050565b60405180608001604052806004906020820280368337509192915050565b600082601f830112610fd257600080fd5b8135610fe5610fe082611603565b6115dd565b9150818183526020840193506020810190508385602084028201111561100a57600080fd5b60005b8381101561103657816110208882611190565b845250602092830192919091019060010161100d565b5050505092915050565b600082601f83011261105157600080fd5b815161105f610fe082611603565b9150818183526020840193506020810190508385602084028201111561108457600080fd5b60005b83811015611036578161109a88826111ac565b8452506020928301929190910190600101611087565b600082601f8301126110c157600080fd5b81356110cf610fe082611603565b915081818352602084019350602081019050838560208402820111156110f457600080fd5b60005b83811015611036578161110a88826111c2565b84525060209283019291909101906001016110f7565b600082601f83011261113157600080fd5b815161113f610fe082611603565b9150818183526020840193506020810190508385602084028201111561116457600080fd5b60005b83811015611036578161117a88826111d8565b8452506020928301929190910190600101611167565b803561119b816116a6565b92915050565b805161119b816116a6565b805161119b816116bd565b805161119b816116c6565b803561119b816116cf565b805161119b816116cf565b805161119b816116d8565b6000602082840312156111f557600080fd5b600061120184846111a1565b949350505050565b60008060006060848603121561121e57600080fd5b600061122a8686611190565b93505060208401356001600160401b0381111561124657600080fd5b61125286828701610fc1565b92505060408401356001600160401b0381111561126e57600080fd5b61127a868287016110b0565b9150509250925092565b60006020828403121561129657600080fd5b600061120184846111b7565b6000602082840312156112b457600080fd5b600061120184846111cd565b600080600080608085870312156112d657600080fd5b60006112e287876111cd565b94505060208501516001600160401b038111156112fe57600080fd5b61130a87828801611040565b93505060408501516001600160401b0381111561132657600080fd5b61133287828801611120565b9250506060611343878288016111cd565b91505092959194509250565b6000610af68383611445565b6000611367838361151c565b505060200190565b61137881611636565b82525050565b600061138982611629565b611393818561162d565b9350836020820285016113a585611623565b8060005b858110156113df57848403895281516113c2858261134f565b94506113cd83611623565b60209a909a01999250506001016113a9565b5091979650505050505050565b60006113f782611629565b611401818561162d565b935061140c83611623565b8060005b8381101561143a578151611424888261135b565b975061142f83611623565b925050600101611410565b509495945050505050565b600061145082611629565b61145a818561162d565b935061146a81856020860161166c565b6114738161169c565b9093019392505050565b61137881611641565b600061149360248361162d565b7f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20738152631a1bdc9d60e21b602082015260400192915050565b60006114d960258361162d565b7f556e6973776170563353616d706c65722f696e76616c69642070617468206c658152646e6774687360d81b602082015260400192915050565b61137881611658565b61137881611660565b6020810161119b828461136f565b60608082528101611544818661137e565b9050818103602083015261155881856113ec565b9050818103604083015261156c81846113ec565b95945050505050565b604080825281016115868185611445565b9050610af6602083018461151c565b606081016115a3828661147d565b6115b0602083018561147d565b6112016040830184611513565b6020808252810161119b81611486565b6020808252810161119b816114cc565b6040518181016001600160401b03811182821017156115fb57600080fd5b604052919050565b60006001600160401b0382111561161957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b600061119b8261164c565b600061119b82611636565b6001600160a01b031690565b62ffffff1690565b90565b63ffffffff1690565b60005b8381101561168757818101518382015260200161166f565b83811115611696576000848401525b50505050565b601f01601f191690565b6116af81611641565b81146116ba57600080fd5b50565b6116af8161164c565b6116af81611658565b6116af81611660565b6116af8161166356fea264697066735822122037c33bfdb23efe8406da6c0398207b7cfdea995ff2619b22065d79c6ad136afa64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5505000A EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x5AAE4E53 EQ PUSH2 0x66 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1533 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x4E PUSH2 0x74 CALLDATASIZE PUSH1 0x4 PUSH2 0x1209 JUMP JUMPDEST PUSH2 0x36E JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0xFB DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF3 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0x653 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x114 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x13E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x18C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x177 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x363 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x60 PUSH2 0x20B DUP11 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0xAAE60 DUP4 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x22D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x252 SWAP3 SWAP2 SWAP1 PUSH2 0x1575 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x26C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2AB JUMPI PUSH2 0x2EC JUMP JUMPDEST DUP4 DUP8 GT PUSH2 0x2E7 JUMPI DUP4 SWAP7 POP DUP5 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x2DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1E3 JUMP JUMPDEST POP DUP1 PUSH2 0x342 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x317 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x330 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x363 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x34F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1D6 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x3B0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x3BD DUP8 PUSH2 0xC60 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x400 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x44E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x439 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x468 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x492 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x60 PUSH2 0x4D5 DUP6 PUSH2 0x4D0 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4C3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCFE JUMP JUMPDEST PUSH2 0xAFD JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0xAAE60 DUP4 DUP14 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4F7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x51C SWAP3 SWAP2 SWAP1 PUSH2 0x1575 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x56C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x569 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x12C0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x575 JUMPI PUSH2 0x5D0 JUMP JUMPDEST DUP7 ISZERO DUP1 PUSH2 0x582 JUMPI POP DUP4 DUP8 LT ISZERO JUMPDEST ISZERO PUSH2 0x5CB JUMPI DUP4 SWAP7 POP PUSH2 0x59A DUP16 DUP12 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1FE JUMPI INVALID JUMPDEST DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5A6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5BE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP POP POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4A5 JUMP JUMPDEST POP DUP1 PUSH2 0x626 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP PUSH1 0x0 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x614 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0x647 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x633 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x498 JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x682 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x679 SWAP1 PUSH2 0x15BD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x68A PUSH2 0xFA3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6E8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x703 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x7F8 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x738 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1595 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x773 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x787 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST SWAP1 POP PUSH2 0x7B6 DUP2 PUSH2 0xD96 JUMP JUMPDEST ISZERO PUSH2 0x7EF JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x7CE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x710 JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x808 JUMPI POP POP POP PUSH2 0xAF6 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x8FE JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x82A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x85E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x849 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x896 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x8AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x8D5 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x864 JUMP JUMPDEST POP POP POP POP PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x90E DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x653 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x923 JUMPI POP POP POP POP PUSH2 0xAF6 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x93C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x970 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x95B JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xAF0 JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xAE7 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x99E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9F6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA35 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA64 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0xADD JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xA80 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xA93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0xABD JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xA58 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x981 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x976 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0xB15 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0xB31 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x679 SWAP1 PUSH2 0x15CD JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xB51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB7C JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xC58 JUMPI DUP1 ISZERO PUSH2 0xC2B JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0xBA6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBFA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC1E SWAP2 SWAP1 PUSH2 0x1284 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC39 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB86 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC79 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCA3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xCF8 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0xCC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xCD8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xCA9 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xD17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xD41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xCF8 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0xD62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xD76 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xD47 JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0xDA9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xF9E JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDF7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE1B SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE46 SWAP2 SWAP1 PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE72 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE96 SWAP2 SWAP1 PUSH2 0x12A2 JUMP JUMPDEST PUSH2 0xEA2 JUMPI POP PUSH1 0x0 PUSH2 0xF9E JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEEF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF13 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF3E SWAP2 SWAP1 PUSH2 0x1525 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF8E SWAP2 SWAP1 PUSH2 0x12A2 JUMP JUMPDEST PUSH2 0xF9A JUMPI POP PUSH1 0x0 PUSH2 0xF9E JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFE5 PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST PUSH2 0x15DD JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x100A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x1020 DUP9 DUP3 PUSH2 0x1190 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x100D JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x105F PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x109A DUP9 DUP3 PUSH2 0x11AC JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1087 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x10CF PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x10F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x110A DUP9 DUP3 PUSH2 0x11C2 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x10F7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x113F PUSH2 0xFE0 DUP3 PUSH2 0x1603 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1164 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1036 JUMPI DUP2 PUSH2 0x117A DUP9 DUP3 PUSH2 0x11D8 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1167 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0x16A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16A6 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16BD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16C6 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0x16CF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16CF JUMP JUMPDEST DUP1 MLOAD PUSH2 0x119B DUP2 PUSH2 0x16D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11A1 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x122A DUP7 DUP7 PUSH2 0x1190 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1252 DUP7 DUP3 DUP8 ADD PUSH2 0xFC1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x126E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x127A DUP7 DUP3 DUP8 ADD PUSH2 0x10B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11B7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1201 DUP5 DUP5 PUSH2 0x11CD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x12E2 DUP8 DUP8 PUSH2 0x11CD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x12FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x130A DUP8 DUP3 DUP9 ADD PUSH2 0x1040 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1332 DUP8 DUP3 DUP9 ADD PUSH2 0x1120 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1343 DUP8 DUP3 DUP9 ADD PUSH2 0x11CD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAF6 DUP4 DUP4 PUSH2 0x1445 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1367 DUP4 DUP4 PUSH2 0x151C JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1636 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1389 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x1393 DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0x13A5 DUP6 PUSH2 0x1623 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x13DF JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0x13C2 DUP6 DUP3 PUSH2 0x134F JUMP JUMPDEST SWAP5 POP PUSH2 0x13CD DUP4 PUSH2 0x1623 JUMP JUMPDEST PUSH1 0x20 SWAP11 SWAP1 SWAP11 ADD SWAP10 SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x13A9 JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13F7 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x1401 DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP PUSH2 0x140C DUP4 PUSH2 0x1623 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x143A JUMPI DUP2 MLOAD PUSH2 0x1424 DUP9 DUP3 PUSH2 0x135B JUMP JUMPDEST SWAP8 POP PUSH2 0x142F DUP4 PUSH2 0x1623 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x1410 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1450 DUP3 PUSH2 0x1629 JUMP JUMPDEST PUSH2 0x145A DUP2 DUP6 PUSH2 0x162D JUMP JUMPDEST SWAP4 POP PUSH2 0x146A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x166C JUMP JUMPDEST PUSH2 0x1473 DUP2 PUSH2 0x169C JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1641 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1493 PUSH1 0x24 DUP4 PUSH2 0x162D JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 DUP2 MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14D9 PUSH1 0x25 DUP4 PUSH2 0x162D JUMP JUMPDEST PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 DUP2 MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH2 0x1378 DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x119B DUP3 DUP5 PUSH2 0x136F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1544 DUP2 DUP7 PUSH2 0x137E JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1558 DUP2 DUP6 PUSH2 0x13EC JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x156C DUP2 DUP5 PUSH2 0x13EC JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x1586 DUP2 DUP6 PUSH2 0x1445 JUMP JUMPDEST SWAP1 POP PUSH2 0xAF6 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x151C JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x15A3 DUP3 DUP7 PUSH2 0x147D JUMP JUMPDEST PUSH2 0x15B0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x147D JUMP JUMPDEST PUSH2 0x1201 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1513 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x119B DUP2 PUSH2 0x1486 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x119B DUP2 PUSH2 0x14CC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x15FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x1619 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST MLOAD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP3 PUSH2 0x164C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x119B DUP3 PUSH2 0x1636 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 0xFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1687 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x166F JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1696 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1641 JUMP JUMPDEST DUP2 EQ PUSH2 0x16BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x164C JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1658 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1660 JUMP JUMPDEST PUSH2 0x16AF DUP2 PUSH2 0x1663 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xC3 EXTCODESIZE REVERT 0xB2 RETURNDATACOPY INVALID DUP5 MOD 0xDA PUSH13 0x398207B7CFDEA995FF2619B22 MOD 0x5D PUSH26 0xC6AD136AFA64736F6C634300060C003300000000000000000000 ",
                "sourceMap": "3091:10877:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3707:2106;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;6285:2513;;;;;;:::i;:::-;;:::i;3707:2106::-;3909:27;3950:31;3995:34;4054:35;4104:45;4123:6;-1:-1:-1;;;;;4123:14:27;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4141:4;4147:1;4104:18;:45::i;:::-;4054:95;;4194:17;:24;-1:-1:-1;;;;;4180:39:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4180:39:27;;4160:59;;4256:17;:24;-1:-1:-1;;;;;4244:37:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4229:52;;4322:17;:24;-1:-1:-1;;;;;4308:39:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4308:39:27;;4291:56;;4363:9;4358:1449;4382:17;:24;4378:1;:28;4358:1449;;;4483:20;4526:9;4521:837;4545:9;:16;4541:1;:20;4521:837;;;4586:24;4613:34;4628:4;4634:9;4644:1;4634:12;;;;;;;;;;;;;;4613:14;:34::i;:::-;4586:61;;4669:6;-1:-1:-1;;;;;4669:22:27;;3226:5;4752:11;4765:17;4783:1;4765:20;;;;;;;;;;;;;;4669:117;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4669:117:27;;;;;;;;;;;;:::i;:::-;;;4665:679;;;;;5125:9;5109:12;:25;5105:212;;5177:9;5162:24;;5230:11;5212:12;5225:1;5212:15;;;;;;;;;;;;;:29;;;;5287:7;5267:14;5282:1;5267:17;;;;;;;;;;;;;:27;;;;;5105:212;4807:528;;;;4665:679;-1:-1:-1;4563:3:27;;4521:837;;;-1:-1:-1;5434:17:27;5430:318;;5651:20;;;;;;;;;;;;:12;5664:1;5651:15;;;;;;;;;;;;;:20;;;;5709:1;5689:14;5704:1;5689:17;;;;;;;;;;;;;:21;;;;;5728:5;;;5430:318;5784:12;5761:17;5779:1;5761:20;;;;;;;;;;;;;;;;;:35;-1:-1:-1;4408:3:27;;4358:1449;;;;3707:2106;;;;;;;;:::o;6285:2513::-;6486:27;6527:31;6572:34;6631:35;6681:45;6700:6;-1:-1:-1;;;;;6700:14:27;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6681:45;6631:95;;6736:36;6775:23;6793:4;6775:17;:23::i;:::-;6736:62;;6843:17;:24;-1:-1:-1;;;;;6829:39:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6829:39:27;;6809:59;;6905:17;:24;-1:-1:-1;;;;;6893:37:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6878:52;;6971:17;:24;-1:-1:-1;;;;;6957:39:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6957:39:27;;6940:56;;7012:9;7007:1785;7031:17;:24;7027:1;:28;7007:1785;;;7132:21;7176:9;7171:1171;7195:9;:16;7191:1;:20;7171:1171;;;7301:24;7328:118;7364:12;7398:30;7415:9;7425:1;7415:12;;;;;;;;;;;;;;7398:16;:30::i;:::-;7328:14;:118::i;:::-;7301:145;;7488:6;-1:-1:-1;;;;;7488:23:27;;3226:5;7580:11;7593:17;7611:1;7593:20;;;;;;;;;;;;;;7488:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7488:126:27;;;;;;;;;;;;:::i;:::-;;;7464:864;;;;;7962:18;;;:49;;;8001:10;7984:13;:27;;7962:49;7958:343;;;8055:10;8039:26;;8191:34;8206:4;8212:9;8222:1;8212:12;;;;;;;8191:34;8173:12;8186:1;8173:15;;;;;;;;;;;;;:52;;;;8271:7;8251:14;8266:1;8251:17;;;;;;;;;;;;;:27;;;;;7958:343;7639:680;;;;7464:864;-1:-1:-1;7213:3:27;;7171:1171;;;-1:-1:-1;8417:18:27;8413:319;;8635:20;;;;;;;;;;;;:12;8648:1;8635:15;;;;;;;;;;;;;:20;;;;8693:1;8673:14;8688:1;8673:17;;;;;;;;;;;;;:21;;;;;8712:5;;;8413:319;8768:13;8745:17;8763:1;8745:20;;;;;;;;;;;;;;;;;:36;-1:-1:-1;7057:3:27;;7007:1785;;;;6285:2513;;;;;;;;;:::o;8804:2754::-;8990:35;9095:1;9081:10;9062:9;:16;:29;:34;;9041:117;;;;-1:-1:-1;;;9041:117:27;;;;;;;:::i;:::-;;;;;;;;;9168:30;;:::i;:::-;-1:-1:-1;9168:233:27;;;;;;;;9295:8;9168:233;;9325:8;9168:233;;;;9355:7;9168:233;;;;9384:6;9168:233;;;;;;;;9460:42;;9481:20;9460:42;;;;;;;;;9168:233;;;;9460:42;;;;;;;;;;;;;-1:-1:-1;9460:42:27;9411:91;;9512:21;9561:25;9589:9;9599:10;9589:21;;;;;;;;;;;;;;9561:49;;9624:26;9653:9;9663:10;9676:1;9663:14;9653:25;;;;;;;;;;;;;;9624:54;;9697:9;9692:296;9716:20;9712:1;:24;9692:296;;;9761:19;9799:7;-1:-1:-1;;;;;9799:15:27;;9815:10;9827:11;9840:13;9854:1;9840:16;;;;;;;;;;;9799:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9761:96;;9879:18;9892:4;9879:12;:18::i;:::-;9875:99;;;9951:4;9921:10;9932:15;;;;;;9921:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;9921:34:27;;;-1:-1:-1;;;;;9921:34:27;;;;;9875:99;-1:-1:-1;9738:3:27;;9692:296;;;-1:-1:-1;;;10011:18:27;10007:109;;10089:16;;;;;10007:109;10147:9;:16;10129:10;10142:1;10129:14;:34;10125:349;;;10242:13;-1:-1:-1;;;;;10219:37:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10207:49;;10275:9;10270:164;10294:13;10290:1;:17;10270:164;;;10347:23;;;10368:1;10347:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10347:23:27;10332:9;10342:1;10332:12;;;;;;;;;;;;;:38;;;;10406:10;10417:1;10406:13;;;;;;;;;;;;;;10388:9;10398:1;10388:12;;;;;;;;;;;;;;10401:1;10388:15;;;;;;;;-1:-1:-1;;;;;10388:31:27;;;:15;;;;;;;;;;;:31;10309:3;;10270:164;;;;10447:16;;;;;10125:349;10525:45;10585:54;10604:7;10613:9;10624:10;10637:1;10624:14;10585:18;:54::i;:::-;10525:114;;10653:19;:26;10683:1;10653:31;10649:122;;;10744:16;;;;;;10649:122;10898:19;:26;10882:13;:42;-1:-1:-1;;;;;10846:88:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10834:100;;10949:9;10944:582;10968:13;10964:1;:17;10944:582;;;11007:9;11002:514;11026:19;:26;11022:1;:30;11002:514;;;11093:26;;11089:30;;;:34;;;11093:19;;11122:1;;11257:22;;;;;;;;;;;;:29;11253:1;:33;-1:-1:-1;;;;;11232:55:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11232:55:27;;11197:9;11207:1;11197:12;;;;;;;;;;;;;:90;;;;11323:10;11334:1;11323:13;;;;;;;;;;;;;;11305:9;11315:1;11305:12;;;;;;;;;;;;;;11318:1;11305:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;11305:31:27;;;-1:-1:-1;;;;;11305:31:27;;;;;11359:9;11354:148;11378:19;11398:1;11378:22;;;;;;;;;;;;;;:29;11374:1;:33;11354:148;;;11458:19;11478:1;11458:22;;;;;;;;;;;;;;11481:1;11458:25;;;;;;;;;;;;;;11436:9;11446:1;11436:12;;;;;;;;;;;;;;11453:1;11449;:5;11436:19;;;;;;;;-1:-1:-1;;;;;11436:47:27;;;:19;;;;;;;;;;;:47;11409:3;;11354:148;;;-1:-1:-1;;11054:3:27;;11002:514;;;-1:-1:-1;10983:3:27;;10944:582;;;;11535:16;;;;8804:2754;;;;;;:::o;12884:1082::-;13045:24;13126:1;13106:9;:16;:21;;:64;;;;;13151:8;:15;13169:1;13151:19;13131:9;:16;:39;13106:64;13085:148;;;;-1:-1:-1;;;13085:148:27;;;;;;;:::i;:::-;13422:8;:15;13440:1;13422:19;13398:9;:16;13417:2;13398:21;:43;-1:-1:-1;;;;;13388:54:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13388:54:27;-1:-1:-1;13374:68:27;-1:-1:-1;13504:2:27;13487:20;;13452:9;13518:442;13542:9;:16;13538:1;:20;13518:442;;;13583:5;;13579:211;;13608:14;13625:8;13638:1;13634;:5;13625:15;;;;;;;;;;;;;;-1:-1:-1;;;;;13625:19:27;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13709:3;13705:17;13695:28;;-1:-1:-1;13756:1:27;13749:9;;;;13673:103;13803:20;13826:9;13836:1;13826:12;;;;;;;;;;;;;;;;;;13893:2;13889:14;13879:25;;-1:-1:-1;13933:2:27;13926:10;;;;13560:3;;13518:442;;;;12884:1082;;;;;:::o;11564:342::-;11672:32;11752:9;:16;-1:-1:-1;;;;;11731:38:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11731:38:27;;11720:49;;11784:9;11779:121;11803:9;:16;11799:1;:20;11779:121;;;11854:9;11887:1;11883;11864:9;:16;:20;:24;11854:35;;;;;;;;;;;;;;11840:8;11849:1;11840:11;;;;;;;;-1:-1:-1;;;;;11840:49:27;;;:11;;;;;;;;;;;:49;11821:3;;11779:121;;;;11564:342;;;:::o;11912:336::-;12018:32;12098:8;:15;-1:-1:-1;;;;;12077:37:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12077:37:27;;12066:48;;12129:9;12124:118;12148:8;:15;12144:1;:19;12124:118;;;12198:8;12229:1;12225;12207:8;:15;:19;:23;12198:33;;;;;;;;;;;;;;12184:8;12193:1;12184:11;;;;;;;;-1:-1:-1;;;;;12184:47:27;;;:11;;;;;;;;;;;:47;12165:3;;12124:118;;12254:624;12343:12;12496:17;;12544:13;12540:64;;12584:5;12577:12;;;;;12540:64;12254:624;12674:4;-1:-1:-1;;;;;12674:11:27;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12674:23:27;;12706:4;12674:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12670:86;;-1:-1:-1;12740:5:27;12733:12;;12670:86;12769:4;-1:-1:-1;;;;;12769:11:27;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12769:23:27;;12801:4;12769:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12765:86;;-1:-1:-1;12835:5:27;12828:12;;12765:86;-1:-1:-1;12867:4:27;12254:624;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;39:776::-;;179:3;172:4;164:6;160:17;156:27;146:2;;197:1;194;187:12;146:2;234:6;221:20;256:103;271:87;351:6;271:87;:::i;:::-;256:103;:::i;:::-;247:112;;376:5;401:6;394:5;387:21;431:4;423:6;419:17;409:27;;453:4;448:3;444:14;437:21;;506:6;553:3;545:4;537:6;533:17;528:3;524:27;521:36;518:2;;;570:1;567;560:12;518:2;595:1;580:229;605:6;602:1;599:13;580:229;;;663:3;685:60;741:3;729:10;685:60;:::i;:::-;673:73;;-1:-1;769:4;760:14;;;;788;;;;;627:1;620:9;580:229;;;584:14;139:676;;;;;;;:::o;841:722::-;;969:3;962:4;954:6;950:17;946:27;936:2;;987:1;984;977:12;936:2;1017:6;1011:13;1039:80;1054:64;1111:6;1054:64;:::i;1039:80::-;1030:89;;1136:5;1161:6;1154:5;1147:21;1191:4;1183:6;1179:17;1169:27;;1213:4;1208:3;1204:14;1197:21;;1266:6;1313:3;1305:4;1297:6;1293:17;1288:3;1284:27;1281:36;1278:2;;;1330:1;1327;1320:12;1278:2;1355:1;1340:217;1365:6;1362:1;1359:13;1340:217;;;1423:3;1445:48;1489:3;1477:10;1445:48;:::i;:::-;1433:61;;-1:-1;1517:4;1508:14;;;;1536;;;;;1387:1;1380:9;1340:217;;1589:707;;1706:3;1699:4;1691:6;1687:17;1683:27;1673:2;;1724:1;1721;1714:12;1673:2;1761:6;1748:20;1783:80;1798:64;1855:6;1798:64;:::i;1783:80::-;1774:89;;1880:5;1905:6;1898:5;1891:21;1935:4;1927:6;1923:17;1913:27;;1957:4;1952:3;1948:14;1941:21;;2010:6;2057:3;2049:4;2041:6;2037:17;2032:3;2028:27;2025:36;2022:2;;;2074:1;2071;2064:12;2022:2;2099:1;2084:206;2109:6;2106:1;2103:13;2084:206;;;2167:3;2189:37;2222:3;2210:10;2189:37;:::i;:::-;2177:50;;-1:-1;2250:4;2241:14;;;;2269;;;;;2131:1;2124:9;2084:206;;2321:719;;2448:3;2441:4;2433:6;2429:17;2425:27;2415:2;;2466:1;2463;2456:12;2415:2;2496:6;2490:13;2518:79;2533:63;2589:6;2533:63;:::i;2518:79::-;2509:88;;2614:5;2639:6;2632:5;2625:21;2669:4;2661:6;2657:17;2647:27;;2691:4;2686:3;2682:14;2675:21;;2744:6;2791:3;2783:4;2775:6;2771:17;2766:3;2762:27;2759:36;2756:2;;;2808:1;2805;2798:12;2756:2;2833:1;2818:216;2843:6;2840:1;2837:13;2818:216;;;2901:3;2923:47;2966:3;2954:10;2923:47;:::i;:::-;2911:60;;-1:-1;2994:4;2985:14;;;;3013;;;;;2865:1;2858:9;2818:216;;3048:176;3138:20;;3163:56;3138:20;3163:56;:::i;:::-;3123:101;;;;:::o;3231:180::-;3332:13;;3350:56;3332:13;3350:56;:::i;3989:134::-;4067:13;;4085:33;4067:13;4085:33;:::i;4130:132::-;4207:13;;4225:32;4207:13;4225:32;:::i;4269:130::-;4336:20;;4361:33;4336:20;4361:33;:::i;4406:134::-;4484:13;;4502:33;4484:13;4502:33;:::i;4547:132::-;4624:13;;4642:32;4624:13;4642:32;:::i;4686:309::-;;4824:2;4812:9;4803:7;4799:23;4795:32;4792:2;;;4840:1;4837;4830:12;4792:2;4875:1;4892:87;4971:7;4951:9;4892:87;:::i;:::-;4882:97;4786:209;-1:-1;;;;4786:209::o;5640:863::-;;;;5878:2;5866:9;5857:7;5853:23;5849:32;5846:2;;;5894:1;5891;5884:12;5846:2;5929:1;5946:80;6018:7;5998:9;5946:80;:::i;:::-;5936:90;;5908:124;6091:2;6080:9;6076:18;6063:32;-1:-1;;;;;6107:6;6104:30;6101:2;;;6147:1;6144;6137:12;6101:2;6167:101;6260:7;6251:6;6240:9;6236:22;6167:101;:::i;:::-;6157:111;;6042:232;6333:2;6322:9;6318:18;6305:32;-1:-1;;;;;6349:6;6346:30;6343:2;;;6389:1;6386;6379:12;6343:2;6409:78;6479:7;6470:6;6459:9;6455:22;6409:78;:::i;:::-;6399:88;;6284:209;5840:663;;;;;:::o;6510:261::-;;6624:2;6612:9;6603:7;6599:23;6595:32;6592:2;;;6640:1;6637;6630:12;6592:2;6675:1;6692:63;6747:7;6727:9;6692:63;:::i;6778:263::-;;6893:2;6881:9;6872:7;6868:23;6864:32;6861:2;;;6909:1;6906;6899:12;6861:2;6944:1;6961:64;7017:7;6997:9;6961:64;:::i;7048:928::-;;;;;7263:3;7251:9;7242:7;7238:23;7234:33;7231:2;;;7280:1;7277;7270:12;7231:2;7315:1;7332:64;7388:7;7368:9;7332:64;:::i;:::-;7322:74;;7294:108;7454:2;7443:9;7439:18;7433:25;-1:-1;;;;;7470:6;7467:30;7464:2;;;7510:1;7507;7500:12;7464:2;7530:89;7611:7;7602:6;7591:9;7587:22;7530:89;:::i;:::-;7520:99;;7412:213;7677:2;7666:9;7662:18;7656:25;-1:-1;;;;;7693:6;7690:30;7687:2;;;7733:1;7730;7723:12;7687:2;7753:88;7833:7;7824:6;7813:9;7809:22;7753:88;:::i;:::-;7743:98;;7635:212;7878:2;7896:64;7952:7;7943:6;7932:9;7928:22;7896:64;:::i;:::-;7886:74;;7857:109;7225:751;;;;;;;:::o;7984:189::-;;8103:64;8163:3;8155:6;8103:64;:::i;8182:173::-;;8269:46;8311:3;8303:6;8269:46;:::i;:::-;-1:-1;;8344:4;8335:14;;8262:93::o;8363:113::-;8446:24;8464:5;8446:24;:::i;:::-;8441:3;8434:37;8428:48;;:::o;8510:920::-;;8673:63;8730:5;8673:63;:::i;:::-;8749:95;8837:6;8832:3;8749:95;:::i;:::-;8742:102;;8867:3;8909:4;8901:6;8897:17;8892:3;8888:27;8936:65;8995:5;8936:65;:::i;:::-;9021:7;9049:1;9034:357;9059:6;9056:1;9053:13;9034:357;;;9121:9;9115:4;9111:20;9106:3;9099:33;9166:6;9160:13;9188:82;9265:4;9250:13;9188:82;:::i;:::-;9180:90;;9287:69;9349:6;9287:69;:::i;:::-;9379:4;9370:14;;;;;9277:79;-1:-1;;9081:1;9074:9;9034:357;;;-1:-1;9404:4;;8652:778;-1:-1;;;;;;;8652:778::o;9469:690::-;;9614:54;9662:5;9614:54;:::i;:::-;9681:86;9760:6;9755:3;9681:86;:::i;:::-;9674:93;;9788:56;9838:5;9788:56;:::i;:::-;9864:7;9892:1;9877:260;9902:6;9899:1;9896:13;9877:260;;;9969:6;9963:13;9990:63;10049:3;10034:13;9990:63;:::i;:::-;9983:70;;10070:60;10123:6;10070:60;:::i;:::-;10060:70;-1:-1;;9924:1;9917:9;9877:260;;;-1:-1;10150:3;;9593:566;-1:-1;;;;;9593:566::o;10167:323::-;;10267:38;10299:5;10267:38;:::i;:::-;10317:60;10370:6;10365:3;10317:60;:::i;:::-;10310:67;;10382:52;10427:6;10422:3;10415:4;10408:5;10404:16;10382:52;:::i;:::-;10455:29;10477:6;10455:29;:::i;:::-;10446:39;;;;10247:243;-1:-1;;;10247:243::o;10847:172::-;10953:60;11007:5;10953:60;:::i;11027:373::-;;11187:67;11251:2;11246:3;11187:67;:::i;:::-;11287:34;11267:55;;-1:-1;;;11351:2;11342:12;;11335:28;11391:2;11382:12;;11173:227;-1:-1;;11173:227::o;11409:374::-;;11569:67;11633:2;11628:3;11569:67;:::i;:::-;11669:34;11649:55;;-1:-1;;;11733:2;11724:12;;11717:29;11774:2;11765:12;;11555:228;-1:-1;;11555:228::o;11791:110::-;11872:23;11889:5;11872:23;:::i;11908:103::-;11981:24;11999:5;11981:24;:::i;12138:222::-;12265:2;12250:18;;12279:71;12254:9;12323:6;12279:71;:::i;12367:924::-;12718:2;12732:47;;;12703:18;;12793:126;12703:18;12905:6;12793:126;:::i;:::-;12785:134;;12967:9;12961:4;12957:20;12952:2;12941:9;12937:18;12930:48;12992:108;13095:4;13086:6;12992:108;:::i;:::-;12984:116;;13148:9;13142:4;13138:20;13133:2;13122:9;13118:18;13111:48;13173:108;13276:4;13267:6;13173:108;:::i;:::-;13165:116;12689:602;-1:-1;;;;;12689:602::o;13298:417::-;13471:2;13485:47;;;13456:18;;13546:76;13456:18;13608:6;13546:76;:::i;:::-;13538:84;;13633:72;13701:2;13690:9;13686:18;13677:6;13633:72;:::i;13722:532::-;13949:2;13934:18;;13963:94;13938:9;14030:6;13963:94;:::i;:::-;14068:95;14159:2;14148:9;14144:18;14135:6;14068:95;:::i;:::-;14174:70;14240:2;14229:9;14225:18;14216:6;14174:70;:::i;14261:416::-;14461:2;14475:47;;;14446:18;;14536:131;14446:18;14536:131;:::i;14684:416::-;14884:2;14898:47;;;14869:18;;14959:131;14869:18;14959:131;:::i;15107:256::-;15169:2;15163:9;15195:17;;;-1:-1;;;;;15255:34;;15291:22;;;15252:62;15249:2;;;15327:1;15324;15317:12;15249:2;15343;15336:22;15147:216;;-1:-1;15147:216::o;15370:327::-;;-1:-1;;;;;15544:6;15541:30;15538:2;;;15584:1;15581;15574:12;15538:2;-1:-1;15619:4;15607:17;;;15672:15;;15475:222::o;16636:160::-;16769:4;16760:14;;16717:79::o;16961:146::-;17073:12;;17044:63::o;17626:187::-;17753:19;;;17802:4;17793:14;;17746:67::o;18512:91::-;;18574:24;18592:5;18574:24;:::i;18610:114::-;;18695:24;18713:5;18695:24;:::i;19101:121::-;-1:-1;;;;;19163:54;;19146:76::o;19229:86::-;19301:8;19290:20;;19273:42::o;19322:72::-;19384:5;19367:27::o;19401:88::-;19473:10;19462:22;;19445:44::o;19809:268::-;19874:1;19881:101;19895:6;19892:1;19889:13;19881:101;;;19962:11;;;19956:18;19943:11;;;19936:39;19917:2;19910:10;19881:101;;;19997:6;19994:1;19991:13;19988:2;;;20062:1;20053:6;20048:3;20044:16;20037:27;19988:2;19858:219;;;;:::o;20085:97::-;20173:2;20153:14;-1:-1;;20149:28;;20133:49::o;20190:163::-;20282:47;20323:5;20282:47;:::i;:::-;20275:5;20272:58;20262:2;;20344:1;20341;20334:12;20262:2;20256:97;:::o;20884:117::-;20953:24;20971:5;20953:24;:::i;21008:115::-;21076:23;21093:5;21076:23;:::i;21130:117::-;21199:24;21217:5;21199:24;:::i;21254:115::-;21322:23;21339:5;21322:23;:::i"
            }
        }
    },
    "sourceTreeHashHex": "0x733d2b66bfd4909e90db99eba9f5df1d1d298ae008b9ef8f59345d4318bb3185",
    "sources": {
        "./UniswapV3Sampler.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3QuoterV2 {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 700e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try quoter.quoteExactInput\n                    { gas: QUOTE_GAS }\n                    (uniswapPath, takerTokenAmounts[i])\n                    returns (\n                        uint256 buyAmount,\n                        uint160[] memory, /* sqrtPriceX96AfterList */\n                        uint32[] memory, /* initializedTicksCrossedList */\n                        uint256 gasUsed\n                    )\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        uniswapPaths[i] = uniswapPath;\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the sells.\n            if (topBuyAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (\n                            uint256 sellAmount,\n                            uint160[] memory, /* sqrtPriceX96AfterList */\n                            uint32[] memory, /* initializedTicksCrossedList */\n                            uint256 gasUsed\n                        )\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        pure\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        pure\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        }
    },
    "sourceCodes": {
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\ninterface IUniswapV3QuoterV2 {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n\n    // @notice Returns the amount out received for a given exact input swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee\n    // @param amountIn The amount of the first token to swap\n    // @return amountOut The amount of the last token that would be received\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    // @notice Returns the amount in required for a given exact output swap without executing the swap\n    // @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    // @param amountOut The amount of the last token to receive\n    // @return amountIn The amount of first token required to be paid\n    // @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    // @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    // @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 700e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try quoter.quoteExactInput\n                    { gas: QUOTE_GAS }\n                    (uniswapPath, takerTokenAmounts[i])\n                    returns (\n                        uint256 buyAmount,\n                        uint160[] memory, /* sqrtPriceX96AfterList */\n                        uint32[] memory, /* initializedTicksCrossedList */\n                        uint256 gasUsed\n                    )\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        uniswapPaths[i] = uniswapPath;\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the sells.\n            if (topBuyAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return uniswapGasUsed Estimated amount of gas used\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3QuoterV2 quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory uniswapGasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n        uniswapGasUsed = new uint256[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (\n                            uint256 sellAmount,\n                            uint160[] memory, /* sqrtPriceX96AfterList */\n                            uint32[] memory, /* initializedTicksCrossedList */\n                            uint256 gasUsed\n                        )\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        uniswapPaths[i] = _toUniswapPath(path, poolPaths[j]);\n                        uniswapGasUsed[i] = gasUsed;\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                // HACK(kimpers): To avoid too many local variables, paths and gas used is set directly in the loop\n                // then reset if no valid valid quote was found\n                uniswapPaths[i] = \"\";\n                uniswapGasUsed[i] = 0;\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        pure\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        pure\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": false,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
