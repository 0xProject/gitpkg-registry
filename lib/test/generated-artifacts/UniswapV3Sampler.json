{
    "schemaVersion": "2.0.0",
    "contractName": "UniswapV3Sampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    }
                ],
                "name": "_callRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes4",
                        "name": "selector",
                        "type": "bytes4"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "amountsIn",
                        "type": "uint256[]"
                    }
                ],
                "name": "_mintCallRevert",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "gasUsed",
                        "type": "uint256[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSwapFromUniswapV3",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "_mintCallRevert(bytes4,address,address,bytes,uint256[])": {
                    "details": "Mints the sell token, then performs the swap, then reverts with the amount out. The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support encoding the function"
                },
                "sampleBuysFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromUniswapV3(address,address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract.",
                        "router": "UniswapV3 Router contract.",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "gasUsed": "gas consumed in each sample sell",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50612929806100206000396000f3fe60806040526004361061004e5760003560e01c80631f4ff03e1461005a57806359ab9a6c1461007c5780636a33bc7e146100b257806378fee41c146100e1578063fa5def9f1461010157610055565b3661005557005b600080fd5b34801561006657600080fd5b5061007a610075366004612145565b610121565b005b34801561008857600080fd5b5061009c61009736600461207e565b610426565b6040516100a99190612828565b60405180910390f35b3480156100be57600080fd5b506100d26100cd366004612273565b61043c565b6040516100a993929190612571565b3480156100ed57600080fd5b5061007a6100fc3660046121dd565b61074d565b34801561010d57600080fd5b506100d261011c366004612273565b61090d565b600084905060008260018451038151811061013857fe5b60200260200101519050816001600160a01b031663e326c7d760016040518263ffffffff1660e01b815260040161016f9190612615565b600060405180830381600087803b15801561018957600080fd5b505af192505050801561019a575060015b506040516355c3705360e11b81526001600160a01b0383169063ab86e0a6906101c990309085906004016124d5565b600060405180830381600087803b1580156101e357600080fd5b505af19250505080156101f4575060015b50856001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561023057600080fd5b505af193505050508015610242575060015b50606083516001600160401b038111801561025c57600080fd5b50604051908082528060200260200182016040528015610286578160200160208202803683370190505b509050606084516001600160401b03811180156102a257600080fd5b506040519080825280602002602001820160405280156102cc578160200160208202803683370190505b50905060005b855181101561041057306001600160a01b03166378fee41c621e84808c8c8c8c8c88815181106102fe57fe5b60200260200101516040518763ffffffff1660e01b815260040161032695949392919061267a565b600060405180830381600088803b15801561034057600080fd5b5087f193505050508015610352575060015b6103e7573d808015610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b5061038f81610c53565b85848151811061039b57fe5b602002602001018585815181106103ae57fe5b60200260200101828152508281525050508382815181106103cb57fe5b6020026020010151600014156103e15750610410565b50610408565b60405162461bcd60e51b81526004016103ff9061279b565b60405180910390fd5b6001016102d2565b5061041b8282610c88565b505050505050505050565b6000610433858385610cb6565b95945050505050565b6060806060806104be886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190612257565b876000610d94565b905084516001600160401b03811180156104d757600080fd5b50604051908082528060200260200182016040528015610501578160200160208202803683370190505b50915084516001600160401b038111801561051b57600080fd5b50604051908082528060200260200182016040528015610545578160200160208202803683370190505b50925084516001600160401b038111801561055f57600080fd5b5060405190808252806020026020018201604052801561059357816020015b606081526020019060019003908161057e5790505b50935060005b81518110156107415760606105c1888484815181106105b457fe5b602002602001015161122b565b905060608061065b60405180608001604052808c6000815181106105e157fe5b60200260200101516001600160a01b031681526020018c60018e51038151811061060757fe5b60200260200101516001600160a01b031681526020018d86604051602001610630929190612545565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a61138e565b9150915060005b81518110156107325781818151811061067757fe5b60200260200101516000141561068c57610732565b81818151811061069857fe5b60200260200101518782815181106106ac57fe5b60200260200101511161072a578181815181106106c557fe5b60200260200101518782815181106106d957fe5b6020026020010181815250508281815181106106f157fe5b602002602001015188828151811061070557fe5b6020026020010181815250508389828151811061071e57fe5b60200260200101819052505b600101610662565b50505050806001019050610599565b50509450945094915050565b61133761def160901b016001600160a01b031663d0afdca96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561079157600080fd5b505af19250505080156107a2575060015b5060005a905060006060306001600160a01b031688888888886040516024016107ce9493929190612508565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161080c91906124a5565b6000604051808303816000865af19150503d8060008114610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b50915091505a8303925061133761def160901b016001600160a01b0316630c18c1626040518163ffffffff1660e01b815260040160206040518083038186803b15801561089a57600080fd5b505afa9250505080156108ca575060408051601f3d908101601f191682019092526108c791810190612404565b60015b6108d3576108d8565b909203915b816108e6576108e68161145f565b610903818060200190518101906108fd9190612404565b84611467565b5050505050505050565b60608060608061094f886001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561047e57600080fd5b9050606061095c87611478565b905085516001600160401b038111801561097557600080fd5b5060405190808252806020026020018201604052801561099f578160200160208202803683370190505b50925085516001600160401b03811180156109b957600080fd5b506040519080825280602002602001820160405280156109e3578160200160208202803683370190505b50935085516001600160401b03811180156109fd57600080fd5b50604051908082528060200260200182016040528015610a3157816020015b6060815260200190600190039081610a1c5790505b50945060005b8251811015610c4657606080610b326040518060a001604052808c600081518110610a5e57fe5b60200260200101516001600160a01b031681526020018c60018e510381518110610a8457fe5b60200260200101516001600160a01b031681526020018d610aab8e8a89815181106105b457fe5b604051602001610abc929190612545565b60405160208183030381529060405281526020018d610af688610af18b8a81518110610ae457fe5b6020026020010151611516565b61122b565b604051602001610b07929190612545565b60408051601f1981840301815291815290825230602090811b6359ab9a6c1790911b9101528a6115ae565b9150915060005b8151811015610c3857818181518110610b4e57fe5b602002602001015160001415610b6357610c38565b868181518110610b6f57fe5b602002602001015160001480610bab5750818181518110610b8c57fe5b6020026020010151878281518110610ba057fe5b602002602001015110155b15610c3057818181518110610bbc57fe5b6020026020010151878281518110610bd057fe5b602002602001018181525050828181518110610be857fe5b6020026020010151888281518110610bfc57fe5b602002602001018181525050610c188b8786815181106105b457fe5b898281518110610c2457fe5b60200260200101819052505b600101610b39565b505050806001019050610a37565b5050509450945094915050565b6000808251604014610c6a57506000905080610c83565b82806020019051810190610c7e919061241c565b915091505b915091565b60608282604051602001610c9d9291906125f0565b6040516020818303038152906040529050805160208201fd5b600080606083806020019051810190610ccf9190612359565b9092509050610ce86001600160a01b0387168387611a64565b6040805160a08101825282815230602082015242818301526060810187905260016080820152905163c04b8d5960e01b81526001600160a01b0384169163c04b8d5991610d3891906004016127d0565b602060405180830381600087803b158015610d5257600080fd5b505af1158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190612404565b9695505050505050565b60606002828451031015610dba5760405162461bcd60e51b81526004016103ff90612712565b610dc2611f1e565b5060408051606080820183526101f48252610bb860208301526127108284015282516003808252608082019094529192909190816020016020820280368337019050509050600080868681518110610e1657fe5b602002602001015190506000878760010181518110610e3157fe5b6020026020010151905060005b6003811015610f265760008a6001600160a01b0316631698ee8285858a8660038110610e6657fe5b60200201516040518463ffffffff1660e01b8152600401610e89939291906126c8565b60206040518083038186803b158015610ea157600080fd5b505afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190612257565b9050610ee481611afc565b15610f1d5780868680600101975081518110610efc57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b50600101610e3e565b50505080610f3657505050611224565b855185600201141561102c57806001600160401b0381118015610f5857600080fd5b50604051908082528060200260200182016040528015610f8c57816020015b6060815260200190600190039081610f775790505b50935060005b8181101561102357604080516001808252818301909252906020808301908036833701905050858281518110610fc457fe5b6020026020010181905250828181518110610fdb57fe5b6020026020010151858281518110610fef57fe5b602002602001015160008151811061100357fe5b6001600160a01b0390921660209283029190910190910152600101610f92565b50505050611224565b606061103c888888600101610d94565b90508051600014156110515750505050611224565b805182026001600160401b038111801561106a57600080fd5b5060405190808252806020026020018201604052801561109e57816020015b60608152602001906001900390816110895790505b50945060005b8281101561121e5760005b82518110156112155782518281028201908490839081106110cc57fe5b6020026020010151516001016001600160401b03811180156110ed57600080fd5b50604051908082528060200260200182016040528015611117578160200160208202803683370190505b5088828151811061112457fe5b602002602001018190525085838151811061113b57fe5b602002602001015188828151811061114f57fe5b602002602001015160008151811061116357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b84838151811061119257fe5b60200260200101515181101561120b578483815181106111ae57fe5b602002602001015181815181106111c157fe5b60200260200101518983815181106111d557fe5b602002602001015182600101815181106111eb57fe5b6001600160a01b0390921660209283029190910190910152600101611186565b50506001016110af565b506001016110a4565b50505050505b9392505050565b60606002835110158015611243575081516001018351145b61125f5760405162461bcd60e51b81526004016103ff90612756565b81516003028351601402016001600160401b038111801561127f57600080fd5b506040519080825280601f01601f1916602001820160405280156112aa576020820181803683370190505b5090506020810160005b84518110156113865780156113595760008460018303815181106112d457fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b15801561131457600080fd5b505afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906123e1565b60e81b8352506003909101905b600085828151811061136757fe5b602090810291909101015160601b8352506014909101906001016112b4565b505092915050565b606082810151835160208501516040808701519051630fa7f81f60e11b815285943094631f4ff03e946113da9460a09390931b6001600160e01b03191693919290918a90600401612620565b600060405180830381600087803b1580156113f457600080fd5b505af1925050508015611405575060015b6103e7573d808015611433576040519150601f19603f3d011682016040523d82523d6000602084013e611438565b606091505b508080602001905181019061144d91906120e5565b935091506114589050565b9250929050565b805160208201fd5b604051828152816020820152604081fd5b606081516001600160401b038111801561149157600080fd5b506040519080825280602002602001820160405280156114bb578160200160208202803683370190505b50905060005b8251811015611510578260018285510303815181106114dc57fe5b60200260200101518282815181106114f057fe5b6001600160a01b03909216602092830291909101909101526001016114c1565b50919050565b606081516001600160401b038111801561152f57600080fd5b50604051908082528060200260200182016040528015611559578160200160208202803683370190505b50905060005b82518110156115105782600182855103038151811061157a57fe5b602002602001015182828151811061158e57fe5b6001600160a01b039092166020928302919091019091015260010161155f565b6060808251600014156115c057611458565b82516001600160401b03811180156115d757600080fd5b50604051908082528060200260200182016040528015611601578160200160208202803683370190505b50905082516001600160401b038111801561161b57600080fd5b50604051908082528060200260200182016040528015611645578160200160208202803683370190505b5060408051600180825281830190925291935060609190602080830190803683370190505090508360008151811061167957fe5b60200260200101518160008151811061168e57fe5b6020026020010181815250506116a2611f3c565b50604080516080808201835287516001600160a01b0390811683526020808a0151909116908301528783015182840152870151640100000000600160c01b0390831c90811663ffffffff9091161790911b6060820152611700611f3c565b604051806080016040528088602001516001600160a01b0316815260200188600001516001600160a01b031681526020018860600151815260200188608001518060601c9060401c63ffffffff1663ffffffff169060201b1760401b815250905061176b818461138e565b80519094501590508061179257508260008151811061178657fe5b60200260200101516000145b1561179f57505050611458565b60606117ab838561138e565b8051909250159050806117d25750806000815181106117c657fe5b60200260200101516000145b156117e05750505050611458565b60005b8751811015611a5857606060005b60038110156119b8576118408a848151811061180957fe5b60200260200101518560008151811061181e57fe5b60200260200101518960008151811061183357fe5b6020026020010151611d09565b8760008151811061184d57fe5b60209081029190910101528651158061187a57508660008151811061186e57fe5b60200260200101516000145b15611884576119b8565b61189d6005612710016127108960008151811061183357fe5b876000815181106118aa57fe5b6020908102919091010152865115806118d75750866000815181106118cb57fe5b60200260200101516000145b156118e1576119b8565b60606118ed878961138e565b80519194509150158061191457508060008151811061190857fe5b60200260200101516000145b1561191f57506119b8565b8094508a848151811061192e57fe5b60200260200101518560008151811061194357fe5b6020026020010151106119af5760008b858151811061195e57fe5b60200260200101516127108d878151811061197557fe5b60200260200101518860008151811061198a57fe5b602002602001015103028161199b57fe5b049050600581116119ad5750506119b8565b505b506001016117f1565b50600081511180156119cb575060008351115b15611a4f57806000815181106119dd57fe5b60200260200101518883815181106119f157fe5b602002602001018181525050611a36898381518110611a0c57fe5b602002602001015184600081518110611a2157fe5b60200260200101518860008151811061183357fe5b878381518110611a4257fe5b6020026020010181815250505b506001016117e3565b50505050509250929050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e90611a9490309087906004016124ee565b60206040518083038186803b158015611aac57600080fd5b505afa158015611ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae49190612404565b1015611af757611af78383600019611d61565b505050565b6000813b80611b0f576000915050611d04565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4957600080fd5b505afa158015611b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b819190612257565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401611bac91906124c1565b60206040518083038186803b158015611bc457600080fd5b505afa158015611bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfc9190612404565b611c0857506000611d04565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4157600080fd5b505afa158015611c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c799190612257565b6001600160a01b03166370a08231836040518263ffffffff1660e01b8152600401611ca491906124c1565b60206040518083038186803b158015611cbc57600080fd5b505afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190612404565b611d0057506000611d04565b5060015b919050565b6000831580611d16575081155b80611d1f575082155b15611d2c57506000611224565b83820282858281611d3957fe5b0414611d49576000915050611224565b8360018503820181611d5757fe5b0495945050505050565b606063095ea7b360e01b8383604051602401611d7e9291906124d5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611dbc8482611dc2565b50505050565b60006060836001600160a01b031683604051611dde91906124a5565b6000604051808303816000865af19150503d8060008114611e1b576040519150601f19603f3d011682016040523d82523d6000602084013e611e20565b606091505b5091509150818015611e365750611e3681611e4f565b15611e42575050611e4b565b611dbc8161145f565b5050565b6000815160001415611e6357506001611d04565b6020825110611d04576000611e79836000611e8e565b90508060011415611510576001915050611d04565b6000611224838360008160200183511015611ebb57611ebb611eb66005855185602001611ec4565b61145f565b50016020015190565b6060632800659560e01b848484604051602401611ee3939291906126f0565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b60405180606001604052806003906020820280368337509192915050565b6040805160808101825260008082526020820181905260609282018390529181019190915290565b600082601f830112611f74578081fd5b8135611f87611f8282612857565b612831565b818152915060208083019084810181840286018201871015611fa857600080fd5b60005b84811015611fc757813584529282019290820190600101611fab565b505050505092915050565b600082601f830112611fe2578081fd5b8151611ff0611f8282612857565b81815291506020808301908481018184028601820187101561201157600080fd5b60005b84811015611fc757815184529282019290820190600101612014565b600082601f830112612040578081fd5b813561204e611f8282612876565b915080825283602082850101111561206557600080fd5b8060208401602084013760009082016020015292915050565b60008060008060808587031215612093578384fd5b843561209e816128c5565b935060208501356120ae816128c5565b925060408501356001600160401b038111156120c8578283fd5b6120d487828801612030565b949793965093946060013593505050565b600080604083850312156120f7578182fd5b82516001600160401b038082111561210d578384fd5b61211986838701611fd2565b9350602085015191508082111561212e578283fd5b5061213b85828601611fd2565b9150509250929050565b600080600080600060a0868803121561215c578081fd5b8535612167816128dd565b94506020860135612177816128c5565b93506040860135612187816128c5565b925060608601356001600160401b03808211156121a2578283fd5b6121ae89838a01612030565b935060808801359150808211156121c3578283fd5b506121d088828901611f64565b9150509295509295909350565b600080600080600060a086880312156121f4578081fd5b85356121ff816128dd565b9450602086013561220f816128c5565b9350604086013561221f816128c5565b925060608601356001600160401b03811115612239578182fd5b61224588828901612030565b95989497509295608001359392505050565b600060208284031215612268578081fd5b8151611224816128c5565b60008060008060808587031215612288578182fd5b8435612293816128c5565b93506020858101356122a4816128c5565b935060408601356001600160401b03808211156122bf578485fd5b818801915088601f8301126122d2578485fd5b81356122e0611f8282612857565b81815284810190848601868402860187018d10156122fc578889fd5b8895505b83861015612327578035612313816128c5565b835260019590950194918601918601612300565b5096505050606088013592508083111561233f578384fd5b505061234d87828801611f64565b91505092959194509250565b6000806040838503121561236b578182fd5b8251612376816128c5565b60208401519092506001600160401b03811115612391578182fd5b8301601f810185136123a1578182fd5b80516123af611f8282612876565b8181528660208385010111156123c3578384fd5b6123d4826020830160208601612899565b8093505050509250929050565b6000602082840312156123f2578081fd5b815162ffffff81168114611224578182fd5b600060208284031215612415578081fd5b5051919050565b6000806040838503121561242e578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b8381101561246e57815187529582019590820190600101612452565b509495945050505050565b60008151808452612491816020860160208601612899565b601f01601f19169290920160200192915050565b600082516124b7818460208701612899565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0385811682528416602082015260806040820181905260009061253490830185612479565b905082606083015295945050505050565b6001600160a01b038316815260406020820181905260009061256990830184612479565b949350505050565b60006060820160608352808651808352608085019150602092506080838202860101838901855b838110156125c657607f198884030185526125b4838351612479565b94860194925090850190600101612598565b5050858103848701526125d9818961243f565b93505050508281036040840152610d8a818561243f565b600060408252612603604083018561243f565b8281036020840152610433818561243f565b901515815260200190565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a06060820181905260009061265c90830185612479565b828103608084015261266e818561243f565b98975050505050505050565b6001600160e01b0319861681526001600160a01b0385811660208301528416604082015260a0606082018190526000906126b690830185612479565b90508260808301529695505050505050565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b60608101600885106126fe57fe5b938152602081019290925260409091015290565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b6020808252818101527f537761702053616d706c652073686f756c642068617665207265766572746564604082015260600190565b600060208252825160a060208401526127ec60c0840182612479565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b90815260200190565b6040518181016001600160401b038111828210171561284f57600080fd5b604052919050565b60006001600160401b0382111561286c578081fd5b5060209081020190565b60006001600160401b0382111561288b578081fd5b50601f01601f191660200190565b60005b838110156128b457818101518382015260200161289c565b83811115611dbc5750506000910152565b6001600160a01b03811681146128da57600080fd5b50565b6001600160e01b0319811681146128da57600080fdfea2646970667358221220e0062f81225a585c014a397fd2fee730fcae5f88ff7219e003c8736667e05f1c64736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2929 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0x101 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x2145 JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x207E JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x2828 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2571 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0x21DD JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x138 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x2615 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x19A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1C9 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F4 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x242 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x286 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x326 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x267A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x352 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3E7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x38F DUP2 PUSH2 0xC53 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x39B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E1 JUMPI POP PUSH2 0x410 JUMP JUMPDEST POP PUSH2 0x408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x279B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x2D2 JUMP JUMPDEST POP PUSH2 0x41B DUP3 DUP3 PUSH2 0xC88 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 DUP6 DUP4 DUP6 PUSH2 0xCB6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x4BE DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x492 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B6 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x501 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x545 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x57E JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x741 JUMPI PUSH1 0x60 PUSH2 0x5C1 DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x122B JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x65B PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x607 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x630 SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x138E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x732 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x68C JUMPI PUSH2 0x732 JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x698 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x72A JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x705 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x662 JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7A2 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7CE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2508 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x80C SWAP2 SWAP1 PUSH2 0x24A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x849 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x84E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8CA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8C7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8D3 JUMPI PUSH2 0x8D8 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x8E6 JUMPI PUSH2 0x8E6 DUP2 PUSH2 0x145F JUMP JUMPDEST PUSH2 0x903 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FD SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST DUP5 PUSH2 0x1467 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x94F DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x95C DUP8 PUSH2 0x1478 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x99F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA31 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA1C JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xC46 JUMPI PUSH1 0x60 DUP1 PUSH2 0xB32 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xA84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0xAAB DUP15 DUP11 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xABC SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0xAF6 DUP9 PUSH2 0xAF1 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0xAE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1516 JUMP JUMPDEST PUSH2 0x122B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB07 SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x15AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC38 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB4E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB63 JUMPI PUSH2 0xC38 JUMP JUMPDEST DUP7 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xBAB JUMPI POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xC30 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xBBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xBE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC18 DUP12 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB39 JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA37 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0xC6A JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xC83 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC9D SWAP3 SWAP2 SWAP1 PUSH2 0x25F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCCF SWAP2 SWAP1 PUSH2 0x2359 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xCE8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0xD38 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD8A SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x2712 JUMP JUMPDEST PUSH2 0xDC2 PUSH2 0x1F1E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0xE31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF26 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0xE66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE89 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED9 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST SWAP1 POP PUSH2 0xEE4 DUP2 PUSH2 0x1AFC JUMP JUMPDEST ISZERO PUSH2 0xF1D JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE3E JUMP JUMPDEST POP POP POP DUP1 PUSH2 0xF36 JUMPI POP POP POP PUSH2 0x1224 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x102C JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xF77 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1023 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xFDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFEF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1003 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF92 JUMP JUMPDEST POP POP POP POP PUSH2 0x1224 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x103C DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1051 JUMPI POP POP POP POP PUSH2 0x1224 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x106A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x109E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1089 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1215 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x10CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1117 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1124 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x113B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x114F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1163 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1192 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x120B JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x11C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1186 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x10AF JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x10A4 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x1243 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x125F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x2756 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x127F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12AA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1386 JUMPI DUP1 ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x12D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1328 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x134C SWAP2 SWAP1 PUSH2 0x23E1 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1367 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12B4 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x13DA SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2620 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1405 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3E7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1433 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1438 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x144D SWAP2 SWAP1 PUSH2 0x20E5 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x1458 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14BB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1510 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x14DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x14C1 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x152F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1559 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1510 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x157A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x158E JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x155F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x15C0 JUMPI PUSH2 0x1458 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1601 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1645 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1679 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x168E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x16A2 PUSH2 0x1F3C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1700 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x176B DUP2 DUP5 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0x1792 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x179F JUMPI POP POP POP PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17AB DUP4 DUP6 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0x17D2 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x17E0 JUMPI POP POP POP POP PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x19B8 JUMPI PUSH2 0x1840 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1809 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x181E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1D09 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x184D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x187A JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x186E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1884 JUMPI PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0x189D PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18AA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x18D7 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x18E1 JUMPI PUSH2 0x19B8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18ED DUP8 DUP10 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x1914 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1908 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x191F JUMPI POP PUSH2 0x19B8 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x192E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1943 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x19AF JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x195E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1975 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x198A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x199B JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x19AD JUMPI POP POP PUSH2 0x19B8 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17F1 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x19CB JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x1A4F JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x19F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1A36 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17E3 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1A94 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x24EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST LT ISZERO PUSH2 0x1AF7 JUMPI PUSH2 0x1AF7 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1D61 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x1B0F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1D04 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B5D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B81 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BAC SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BFC SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0x1C08 JUMPI POP PUSH1 0x0 PUSH2 0x1D04 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C79 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA4 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CF4 SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0x1D00 JUMPI POP PUSH1 0x0 PUSH2 0x1D04 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1D16 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x1D1F JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1D2C JUMPI POP PUSH1 0x0 PUSH2 0x1224 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1D39 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1D49 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1224 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1D57 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D7E SWAP3 SWAP2 SWAP1 PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1DBC DUP5 DUP3 PUSH2 0x1DC2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DDE SWAP2 SWAP1 PUSH2 0x24A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E1B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1E36 JUMPI POP PUSH2 0x1E36 DUP2 PUSH2 0x1E4F JUMP JUMPDEST ISZERO PUSH2 0x1E42 JUMPI POP POP PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1DBC DUP2 PUSH2 0x145F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E63 JUMPI POP PUSH1 0x1 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1D04 JUMPI PUSH1 0x0 PUSH2 0x1E79 DUP4 PUSH1 0x0 PUSH2 0x1E8E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1510 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1224 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1EBB JUMPI PUSH2 0x1EBB PUSH2 0x1EB6 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1EC4 JUMP JUMPDEST PUSH2 0x145F JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EE3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F74 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F87 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST PUSH2 0x2831 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1FA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FC7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FAB JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FE2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1FF0 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FC7 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2014 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2040 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x204E PUSH2 0x1F82 DUP3 PUSH2 0x2876 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2093 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x209E DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x20AE DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x20C8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x20D4 DUP8 DUP3 DUP9 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20F7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x210D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2119 DUP7 DUP4 DUP8 ADD PUSH2 0x1FD2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x212E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x213B DUP6 DUP3 DUP7 ADD PUSH2 0x1FD2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x215C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2167 DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2177 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x2187 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x21A2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x21AE DUP10 DUP4 DUP11 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x21C3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x21D0 DUP9 DUP3 DUP10 ADD PUSH2 0x1F64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x21F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x21FF DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x220F DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x221F DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2239 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2245 DUP9 DUP3 DUP10 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2268 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1224 DUP2 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2288 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2293 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH2 0x22A4 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x22BF JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22D2 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x22E0 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP14 LT ISZERO PUSH2 0x22FC JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2327 JUMPI DUP1 CALLDATALOAD PUSH2 0x2313 DUP2 PUSH2 0x28C5 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x2300 JUMP JUMPDEST POP SWAP7 POP POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x233F JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP PUSH2 0x234D DUP8 DUP3 DUP9 ADD PUSH2 0x1F64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x236B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x2376 DUP2 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2391 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x23A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x23AF PUSH2 0x1F82 DUP3 PUSH2 0x2876 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x23C3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x23D4 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2899 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23F2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x242E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x246E JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2452 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2491 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2899 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x24B7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2899 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2534 SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2569 SWAP1 DUP4 ADD DUP5 PUSH2 0x2479 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C6 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x25B4 DUP4 DUP4 MLOAD PUSH2 0x2479 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2598 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x25D9 DUP2 DUP10 PUSH2 0x243F JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xD8A DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2603 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x243F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x433 DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x265C SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x266E DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x26B6 SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x26FE JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27EC PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x284F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x286C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x288B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28B4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x289C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1DBC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x28DA JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 MOD 0x2F DUP2 0x22 GAS PC 0x5C ADD 0x4A CODECOPY PUSH32 0xD2FEE730FCAE5F88FF7219E003C8736667E05F1C64736F6C634300060C003300 ",
                "sourceMap": "1454:10774:22:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1F4FF03E EQ PUSH2 0x5A JUMPI DUP1 PUSH4 0x59AB9A6C EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x6A33BC7E EQ PUSH2 0xB2 JUMPI DUP1 PUSH4 0x78FEE41C EQ PUSH2 0xE1 JUMPI DUP1 PUSH4 0xFA5DEF9F EQ PUSH2 0x101 JUMPI PUSH2 0x55 JUMP JUMPDEST CALLDATASIZE PUSH2 0x55 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0x75 CALLDATASIZE PUSH1 0x4 PUSH2 0x2145 JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9C PUSH2 0x97 CALLDATASIZE PUSH1 0x4 PUSH2 0x207E JUMP JUMPDEST PUSH2 0x426 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x2828 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0xCD CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x43C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2571 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7A PUSH2 0xFC CALLDATASIZE PUSH1 0x4 PUSH2 0x21DD JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD2 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x2273 JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x0 DUP5 SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x1 DUP5 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x138 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xE326C7D7 PUSH1 0x1 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F SWAP2 SWAP1 PUSH2 0x2615 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x19A JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x55C37053 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0xAB86E0A6 SWAP1 PUSH2 0x1C9 SWAP1 ADDRESS SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1F4 JUMPI POP PUSH1 0x1 JUMPDEST POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 DUP3 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x242 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x286 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x410 JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x78FEE41C PUSH3 0x1E8480 DUP13 DUP13 DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x326 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x267A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x340 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x352 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3E7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH2 0x38F DUP2 PUSH2 0xC53 JUMP JUMPDEST DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x39B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP6 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP3 DUP2 MSTORE POP DUP3 DUP2 MSTORE POP POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E1 JUMPI POP PUSH2 0x410 JUMP JUMPDEST POP PUSH2 0x408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x279B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x2D2 JUMP JUMPDEST POP PUSH2 0x41B DUP3 DUP3 PUSH2 0xC88 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x433 DUP6 DUP4 DUP6 PUSH2 0xCB6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x4BE DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x492 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B6 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST DUP8 PUSH1 0x0 PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x501 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x51B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x545 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x55F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x593 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x57E JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x741 JUMPI PUSH1 0x60 PUSH2 0x5C1 DUP9 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x122B JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP1 PUSH2 0x65B PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5E1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x607 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x630 SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x138E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x732 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x677 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x68C JUMPI PUSH2 0x732 JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x698 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT PUSH2 0x72A JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6D9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x705 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x71E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x662 JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x599 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0AFDCA9 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x791 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7A2 JUMPI POP PUSH1 0x1 JUMPDEST POP PUSH1 0x0 GAS SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x7CE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2508 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x80C SWAP2 SWAP1 PUSH2 0x24A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x849 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x84E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP GAS DUP4 SUB SWAP3 POP PUSH2 0x1337 PUSH2 0xDEF1 PUSH1 0x90 SHL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC18C162 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x89A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x8CA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8C7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8D3 JUMPI PUSH2 0x8D8 JUMP JUMPDEST SWAP1 SWAP3 SUB SWAP2 JUMPDEST DUP2 PUSH2 0x8E6 JUMPI PUSH2 0x8E6 DUP2 PUSH2 0x145F JUMP JUMPDEST PUSH2 0x903 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FD SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST DUP5 PUSH2 0x1467 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 DUP1 PUSH2 0x94F DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x95C DUP8 PUSH2 0x1478 JUMP JUMPDEST SWAP1 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x975 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x99F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9E3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x9FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA31 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xA1C JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xC46 JUMPI PUSH1 0x60 DUP1 PUSH2 0xB32 PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP13 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xA5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP13 PUSH1 0x1 DUP15 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xA84 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0xAAB DUP15 DUP11 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xABC SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP14 PUSH2 0xAF6 DUP9 PUSH2 0xAF1 DUP12 DUP11 DUP2 MLOAD DUP2 LT PUSH2 0xAE4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1516 JUMP JUMPDEST PUSH2 0x122B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xB07 SWAP3 SWAP2 SWAP1 PUSH2 0x2545 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE SWAP1 DUP3 MSTORE ADDRESS PUSH1 0x20 SWAP1 DUP2 SHL PUSH4 0x59AB9A6C OR SWAP1 SWAP2 SHL SWAP2 ADD MSTORE DUP11 PUSH2 0x15AE JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC38 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB4E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB63 JUMPI PUSH2 0xC38 JUMP JUMPDEST DUP7 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xBAB JUMPI POP DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xC30 JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xBBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xBE8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xBFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0xC18 DUP12 DUP8 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5B4 JUMPI INVALID JUMPDEST DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xC24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xB39 JUMP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0xA37 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x40 EQ PUSH2 0xC6A JUMPI POP PUSH1 0x0 SWAP1 POP DUP1 PUSH2 0xC83 JUMP JUMPDEST DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xC7E SWAP2 SWAP1 PUSH2 0x241C JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x60 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xC9D SWAP3 SWAP2 SWAP1 PUSH2 0x25F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCCF SWAP2 SWAP1 PUSH2 0x2359 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0xCE8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP4 DUP8 PUSH2 0x1A64 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE DUP3 DUP2 MSTORE ADDRESS PUSH1 0x20 DUP3 ADD MSTORE TIMESTAMP DUP2 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0xC04B8D59 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH4 0xC04B8D59 SWAP2 PUSH2 0xD38 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x27D0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD8A SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0xDBA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x2712 JUMP JUMPDEST PUSH2 0xDC2 PUSH2 0x1F1E JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP1 DUP3 ADD DUP4 MSTORE PUSH2 0x1F4 DUP3 MSTORE PUSH2 0xBB8 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2710 DUP3 DUP5 ADD MSTORE DUP3 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0xE31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF26 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x3 DUP2 LT PUSH2 0xE66 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE89 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26C8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xED9 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST SWAP1 POP PUSH2 0xEE4 DUP2 PUSH2 0x1AFC JUMP JUMPDEST ISZERO PUSH2 0xF1D JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0xEFC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE3E JUMP JUMPDEST POP POP POP DUP1 PUSH2 0xF36 JUMPI POP POP POP PUSH2 0x1224 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x102C JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF8C JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0xF77 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1023 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xFDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xFEF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1003 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0xF92 JUMP JUMPDEST POP POP POP POP PUSH2 0x1224 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x103C DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0xD94 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1051 JUMPI POP POP POP POP PUSH2 0x1224 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x106A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x109E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1089 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x121E JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1215 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x10CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x10ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1117 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1124 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x113B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x114F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1163 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1192 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x120B JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x11C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x11EB JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1186 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x10AF JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x10A4 JUMP JUMPDEST POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x1243 JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x125F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FF SWAP1 PUSH2 0x2756 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x127F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x12AA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1386 JUMPI DUP1 ISZERO PUSH2 0x1359 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x12D4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1314 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1328 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x134C SWAP2 SWAP1 PUSH2 0x23E1 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1367 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x12B4 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 DUP2 ADD MLOAD DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 DUP8 ADD MLOAD SWAP1 MLOAD PUSH4 0xFA7F81F PUSH1 0xE1 SHL DUP2 MSTORE DUP6 SWAP5 ADDRESS SWAP5 PUSH4 0x1F4FF03E SWAP5 PUSH2 0x13DA SWAP5 PUSH1 0xA0 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x2620 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1405 JUMPI POP PUSH1 0x1 JUMPDEST PUSH2 0x3E7 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1433 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1438 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x144D SWAP2 SWAP1 PUSH2 0x20E5 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH2 0x1458 SWAP1 POP JUMP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 REVERT JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1491 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14BB JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1510 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x14DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14F0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x14C1 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x152F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1559 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1510 JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x157A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x158E JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x155F JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x15C0 JUMPI PUSH2 0x1458 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1601 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x161B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1645 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP4 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1679 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x168E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x16A2 PUSH2 0x1F3C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP1 DUP3 ADD DUP4 MSTORE DUP8 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP11 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE DUP8 DUP4 ADD MLOAD DUP3 DUP5 ADD MSTORE DUP8 ADD MLOAD PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xC0 SHL SUB SWAP1 DUP4 SHR SWAP1 DUP2 AND PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND OR SWAP1 SWAP2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x1700 PUSH2 0x1F3C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP9 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x60 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP9 PUSH1 0x80 ADD MLOAD DUP1 PUSH1 0x60 SHR SWAP1 PUSH1 0x40 SHR PUSH4 0xFFFFFFFF AND PUSH4 0xFFFFFFFF AND SWAP1 PUSH1 0x20 SHL OR PUSH1 0x40 SHL DUP2 MSTORE POP SWAP1 POP PUSH2 0x176B DUP2 DUP5 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP5 POP ISZERO SWAP1 POP DUP1 PUSH2 0x1792 JUMPI POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1786 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x179F JUMPI POP POP POP PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x17AB DUP4 DUP6 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP3 POP ISZERO SWAP1 POP DUP1 PUSH2 0x17D2 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x17C6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x17E0 JUMPI POP POP POP POP PUSH2 0x1458 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 0x1A58 JUMPI PUSH1 0x60 PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT ISZERO PUSH2 0x19B8 JUMPI PUSH2 0x1840 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1809 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x181E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1D09 JUMP JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x184D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x187A JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x186E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x1884 JUMPI PUSH2 0x19B8 JUMP JUMPDEST PUSH2 0x189D PUSH1 0x5 PUSH2 0x2710 ADD PUSH2 0x2710 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST DUP8 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18AA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE DUP7 MLOAD ISZERO DUP1 PUSH2 0x18D7 JUMPI POP DUP7 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x18CB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x18E1 JUMPI PUSH2 0x19B8 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x18ED DUP8 DUP10 PUSH2 0x138E JUMP JUMPDEST DUP1 MLOAD SWAP2 SWAP5 POP SWAP2 POP ISZERO DUP1 PUSH2 0x1914 JUMPI POP DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1908 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x191F JUMPI POP PUSH2 0x19B8 JUMP JUMPDEST DUP1 SWAP5 POP DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x192E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1943 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD LT PUSH2 0x19AF JUMPI PUSH1 0x0 DUP12 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x195E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP14 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x1975 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x198A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SUB MUL DUP2 PUSH2 0x199B JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x19AD JUMPI POP POP PUSH2 0x19B8 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17F1 JUMP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD GT DUP1 ISZERO PUSH2 0x19CB JUMPI POP PUSH1 0x0 DUP4 MLOAD GT JUMPDEST ISZERO PUSH2 0x1A4F JUMPI DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x19DD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x19F1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x1A36 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A0C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1A21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1833 JUMPI INVALID JUMPDEST DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1A42 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x17E3 JUMP JUMPDEST POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x1A94 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x24EE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1AE4 SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST LT ISZERO PUSH2 0x1AF7 JUMPI PUSH2 0x1AF7 DUP4 DUP4 PUSH1 0x0 NOT PUSH2 0x1D61 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x1B0F JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1D04 JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B49 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B5D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B81 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BAC SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1BC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1BD8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BFC SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0x1C08 JUMPI POP PUSH1 0x0 PUSH2 0x1D04 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C55 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C79 SWAP2 SWAP1 PUSH2 0x2257 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1CA4 SWAP2 SWAP1 PUSH2 0x24C1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CD0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CF4 SWAP2 SWAP1 PUSH2 0x2404 JUMP JUMPDEST PUSH2 0x1D00 JUMPI POP PUSH1 0x0 PUSH2 0x1D04 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x1D16 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x1D1F JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x1D2C JUMPI POP PUSH1 0x0 PUSH2 0x1224 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x1D39 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1D49 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x1224 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x1D57 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x95EA7B3 PUSH1 0xE0 SHL DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D7E SWAP3 SWAP2 SWAP1 PUSH2 0x24D5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x1DBC DUP5 DUP3 PUSH2 0x1DC2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1DDE SWAP2 SWAP1 PUSH2 0x24A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1E1B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x1E36 JUMPI POP PUSH2 0x1E36 DUP2 PUSH2 0x1E4F JUMP JUMPDEST ISZERO PUSH2 0x1E42 JUMPI POP POP PUSH2 0x1E4B JUMP JUMPDEST PUSH2 0x1DBC DUP2 PUSH2 0x145F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1E63 JUMPI POP PUSH1 0x1 PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x20 DUP3 MLOAD LT PUSH2 0x1D04 JUMPI PUSH1 0x0 PUSH2 0x1E79 DUP4 PUSH1 0x0 PUSH2 0x1E8E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1510 JUMPI PUSH1 0x1 SWAP2 POP POP PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1224 DUP4 DUP4 PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x1EBB JUMPI PUSH2 0x1EBB PUSH2 0x1EB6 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x1EC4 JUMP JUMPDEST PUSH2 0x145F JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1EE3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 SWAP3 DUP3 ADD DUP4 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1F74 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1F87 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST PUSH2 0x2831 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x1FA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FC7 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1FAB JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FE2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1FF0 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x2011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1FC7 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2014 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2040 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x204E PUSH2 0x1F82 DUP3 PUSH2 0x2876 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2065 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2093 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x209E DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x20AE DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x20C8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x20D4 DUP8 DUP3 DUP9 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP4 SWAP5 PUSH1 0x60 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x20F7 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x210D JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x2119 DUP7 DUP4 DUP8 ADD PUSH2 0x1FD2 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x212E JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x213B DUP6 DUP3 DUP7 ADD PUSH2 0x1FD2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x215C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2167 DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2177 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x2187 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x21A2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x21AE DUP10 DUP4 DUP11 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x21C3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x21D0 DUP9 DUP3 DUP10 ADD PUSH2 0x1F64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x21F4 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x21FF DUP2 PUSH2 0x28DD JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x220F DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x221F DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2239 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2245 DUP9 DUP3 DUP10 ADD PUSH2 0x2030 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 0x80 ADD CALLDATALOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2268 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1224 DUP2 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2288 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x2293 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD PUSH2 0x22A4 DUP2 PUSH2 0x28C5 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x22BF JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x22D2 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x22E0 PUSH2 0x1F82 DUP3 PUSH2 0x2857 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP5 DUP2 ADD SWAP1 DUP5 DUP7 ADD DUP7 DUP5 MUL DUP7 ADD DUP8 ADD DUP14 LT ISZERO PUSH2 0x22FC JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x2327 JUMPI DUP1 CALLDATALOAD PUSH2 0x2313 DUP2 PUSH2 0x28C5 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP2 DUP7 ADD SWAP2 DUP7 ADD PUSH2 0x2300 JUMP JUMPDEST POP SWAP7 POP POP POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP3 POP DUP1 DUP4 GT ISZERO PUSH2 0x233F JUMPI DUP4 DUP5 REVERT JUMPDEST POP POP PUSH2 0x234D DUP8 DUP3 DUP9 ADD PUSH2 0x1F64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x236B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x2376 DUP2 PUSH2 0x28C5 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2391 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x23A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x23AF PUSH2 0x1F82 DUP3 PUSH2 0x2876 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP7 PUSH1 0x20 DUP4 DUP6 ADD ADD GT ISZERO PUSH2 0x23C3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x23D4 DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2899 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23F2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1224 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2415 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x242E JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x246E JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2452 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x2491 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x2899 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x24B7 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2899 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2534 SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x60 DUP4 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x2569 SWAP1 DUP4 ADD DUP5 PUSH2 0x2479 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0x80 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x80 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP10 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x25C6 JUMPI PUSH1 0x7F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0x25B4 DUP4 DUP4 MLOAD PUSH2 0x2479 JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2598 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x25D9 DUP2 DUP10 PUSH2 0x243F JUMP JUMPDEST SWAP4 POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xD8A DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x2603 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x243F JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x433 DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x265C SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x80 DUP5 ADD MSTORE PUSH2 0x266E DUP2 DUP6 PUSH2 0x243F JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP7 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x26B6 SWAP1 DUP4 ADD DUP6 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x80 DUP4 ADD MSTORE SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x26FE JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x537761702053616D706C652073686F756C642068617665207265766572746564 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0xA0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x27EC PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x2479 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP6 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x284F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x286C JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x288B JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28B4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x289C JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1DBC JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x28DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x28DA JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 MOD 0x2F DUP2 0x22 GAS PC 0x5C ADD 0x4A CODECOPY PUSH32 0xD2FEE730FCAE5F88FF7219E003C8736667E05F1C64736F6C634300060C003300 ",
                "sourceMap": "1454:10774:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3723:2460:18;;;;;;;;;;-1:-1:-1;3723:2460:18;;;;;:::i;:::-;;:::i;:::-;;1570:348:22;;;;;;;;;;-1:-1:-1;1570:348:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2439:1876;;;;;;;;;;-1:-1:-1;2439:1876:22;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2483:1014:18:-;;;;;;;;;;-1:-1:-1;2483:1014:18;;;;;:::i;:::-;;:::i;4833:2278:22:-;;;;;;;;;;-1:-1:-1;4833:2278:22;;;;;:::i;:::-;;:::i;3723:2460:18:-;3932:28;3984:9;3932:63;;4129:16;4148:9;4177:1;4158:9;:16;:20;4148:31;;;;;;;;;;;;;;4129:50;;4262:15;-1:-1:-1;;;;;4262:27:18;;4290:4;4262:33;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4246:71;4374:52;;-1:-1:-1;;;4374:52:18;;-1:-1:-1;;;;;4374:27:18;;;;;:52;;4410:4;;4417:8;;4374:52;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4358:90;4497:9;-1:-1:-1;;;;;4474:42:18;;4525:8;4474:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:101;5160:27;5204:9;:16;-1:-1:-1;;;;;5190:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5190:31:18;;5160:61;;5231:24;5272:9;:16;-1:-1:-1;;;;;5258:31:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5258:31:18;;5231:58;;5305:9;5300:791;5324:9;:16;5320:1;:20;5300:791;;;5381:4;-1:-1:-1;;;;;5381:16:18;;5403:3;5429:8;5459:9;5490:8;5520:10;5552:9;5562:1;5552:12;;;;;;;;;;;;;;5381:201;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5361:720;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5805:38;5836:6;5805:30;:38::i;:::-;5776:10;5787:1;5776:13;;;;;;;;;;;;;5791:7;5799:1;5791:10;;;;;;;;;;;;;5775:68;;;;;;;;;;6001:10;6012:1;6001:13;;;;;;;;;;;;;;6018:1;6001:18;5997:70;;;6043:5;;;5997:70;5679:402;5361:720;;;5613:50;;-1:-1:-1;;;5613:50:18;;;;;;;:::i;:::-;;;;;;;;;5342:3;;5300:791;;;;6138:38;6156:10;6168:7;6138:17;:38::i;:::-;3723:2460;;;;;;;;;:::o;1570:348:22:-;1763:7;1793:118;1837:9;1861:16;1891:10;1793:15;:118::i;:::-;1786:125;1570:348;-1:-1:-1;;;;;1570:348:22:o;2439:1876::-;2663:27;2704:24;2742:34;2801:35;2851:45;2870:6;-1:-1:-1;;;;;2870:14:22;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2888:4;2894:1;2851:18;:45::i;:::-;2801:95;;2941:17;:24;-1:-1:-1;;;;;2927:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2927:39:22;;2907:59;;3000:17;:24;-1:-1:-1;;;;;2986:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2986:39:22;;2976:49;;3062:17;:24;-1:-1:-1;;;;;3050:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3035:52;;3103:9;3098:1211;3122:9;:16;3118:1;:20;3098:1211;;;3159:25;3187:34;3202:4;3208:9;3218:1;3208:12;;;;;;;;;;;;;;3187:14;:34::i;:::-;3159:62;;3253:25;3296:35;3348:385;3389:295;;;;;;;;3457:4;3462:1;3457:7;;;;;;;;;;;;;;-1:-1:-1;;;;;3389:295:22;;;;;3505:4;3524:1;3510:4;:11;:15;3505:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3389:295:22;;;;;3572:6;3580:12;3561:32;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3561:32:22;;;;;;;;;3389:295;;;3637:4;3561:32;3389:295;;;3637:28;3389:295;;;;;;;3702:17;3348:23;:385::i;:::-;3235:498;;;;3752:9;3747:552;3771:18;:25;3767:1;:29;3747:552;;;3888:18;3907:1;3888:21;;;;;;;;;;;;;;3913:1;3888:26;3884:78;;;3938:5;;3884:78;4079:18;4098:1;4079:21;;;;;;;;;;;;;;4055:17;4073:1;4055:20;;;;;;;;;;;;;;:45;4051:234;;4147:18;4166:1;4147:21;;;;;;;;;;;;;;4124:17;4142:1;4124:20;;;;;;;;;;;;;:44;;;;;4203:8;4212:1;4203:11;;;;;;;;;;;;;;4190:7;4198:1;4190:10;;;;;;;;;;;;;:24;;;;;4254:12;4236;4249:1;4236:15;;;;;;;;;;;;;:30;;;;4051:234;3798:3;;3747:552;;;;3098:1211;;;3140:3;;;;;3098:1211;;;;2439:1876;;;;;;;;;:::o;2483:1014:18:-;-1:-1:-1;;;;;;;;;;2735:39:18;;:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2719:79;2834:15;2852:9;2834:27;;2900:12;2914:17;2943:4;-1:-1:-1;;;;;2935:18:18;2990:8;3000:9;3011:8;3021:10;3033:8;2967:75;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2967:75:18;;;;;;;;;;;;;;-1:-1:-1;;;;;2967:75:18;-1:-1:-1;;;;;;2967:75:18;;;;;;;;;;2935:117;;;;2967:75;2935:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2899:153;;;;3082:9;3072:7;:19;3062:29;;-1:-1:-1;;;;;;;;;;3163:34:18;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3163:36:18;;;;;;;;-1:-1:-1;;3163:36:18;;;;;;;;;;;;:::i;:::-;;;3147:169;;;;;3274:21;;;;3147:169;3331:7;3326:53;;3354:14;:4;:12;:14::i;:::-;3429:61;3464:4;3453:27;;;;;;;;;;;;:::i;:::-;3482:7;3429:23;:61::i;:::-;2483:1014;;;;;;;;:::o;4833:2278:22:-;5056:27;5097:24;5135:34;5194:35;5244:45;5263:6;-1:-1:-1;;;;;5263:14:22;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5244:45;5194:95;;5299:36;5338:23;5356:4;5338:17;:23::i;:::-;5299:62;;5406:17;:24;-1:-1:-1;;;;;5392:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5392:39:22;;5372:59;;5465:17;:24;-1:-1:-1;;;;;5451:39:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5451:39:22;;5441:49;;5527:17;:24;-1:-1:-1;;;;;5515:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5500:52;;5568:9;5563:1542;5587:9;:16;5583:1;:20;5563:1542;;;5642:25;5685:35;5737:684;5781:591;;;;;;;;5852:4;5857:1;5852:7;;;;;;;;;;;;;;-1:-1:-1;;;;;5781:591:22;;;;;5900:4;5919:1;5905:4;:11;:15;5900:21;;;;;;;;;;;;;;-1:-1:-1;;;;;5781:591:22;;;;;5970:6;5978:34;5993:4;5999:9;6009:1;5999:12;;;;;;;5978:34;5959:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5781:591;;;;6085:6;6117:142;6161:12;6203:30;6220:9;6230:1;6220:12;;;;;;;;;;;;;;6203:16;:30::i;:::-;6117:14;:142::i;:::-;6049:232;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6049:232:22;;;;;;;;;5781:591;;;6325:4;6049:232;5781:591;;;6325:28;5781:591;;;;;;;6390:17;5737:26;:684::i;:::-;5624:797;;;;6441:9;6436:659;6460:18;:25;6456:1;:29;6436:659;;;6576:18;6595:1;6576:21;;;;;;;;;;;;;;6601:1;6576:26;6572:78;;;6626:5;;6572:78;6722:17;6740:1;6722:20;;;;;;;;;;;;;;6746:1;6722:25;:74;;;;6775:18;6794:1;6775:21;;;;;;;;;;;;;;6751:17;6769:1;6751:20;;;;;;;;;;;;;;:45;;6722:74;6718:363;;;6843:18;6862:1;6843:21;;;;;;;;;;;;;;6820:17;6838:1;6820:20;;;;;;;;;;;;;:44;;;;;6899:8;6908:1;6899:11;;;;;;;;;;;;;;6886:7;6894:1;6886:10;;;;;;;;;;;;;:24;;;;;7028:34;7043:4;7049:9;7059:1;7049:12;;;;;;;7028:34;7010:12;7023:1;7010:15;;;;;;;;;;;;;:52;;;;6718:363;6487:3;;6436:659;;;;5563:1542;;5605:3;;;;;5563:1542;;;;4833:2278;;;;;;;;;;:::o;7849:277:18:-;7971:7;7980;8007:6;:13;8024:2;8007:19;8003:62;;-1:-1:-1;8050:1:18;;-1:-1:-1;8050:1:18;8042:12;;8003:62;8092:6;8081:38;;;;;;;;;;;;:::i;:::-;8074:45;;;;7849:277;;;;:::o;7240:312::-;7372:17;7403:7;7412;7392:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7372:48;;7530:4;7524:11;7519:2;7513:4;7509:13;7502:34;1256:706:54;1416:20;1453:23;1478:17;1522:10;1511:49;;;;;;;;;;;;:::i;:::-;1452:108;;-1:-1:-1;1452:108:54;-1:-1:-1;1644:53:54;-1:-1:-1;;;;;1644:24:54;;1452:108;1686:10;1644:24;:53::i;:::-;1741:213;;;;;;;;;;;1832:4;1741:213;;;;1861:15;1741:213;;;;;;;;;;1942:1;1741:213;;;;1723:232;;-1:-1:-1;;;1723:232:54;;-1:-1:-1;;;;;1723:17:54;;;;;:232;;1741:213;1723:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1708:247;1256:706;-1:-1:-1;;;;;;1256:706:54:o;7117:2724:22:-;7303:35;7408:1;7394:10;7375:9;:16;:29;:34;;7354:117;;;;-1:-1:-1;;;7354:117:22;;;;;;;:::i;:::-;7481:30;;:::i;:::-;-1:-1:-1;7481:203:22;;;;;;;;;7608:8;7481:203;;7638:7;7481:203;;;;7667:6;7481:203;;;;7743:42;;7764:20;7743:42;;;;;;;;;7481:203;;;;7743:42;;;;;;;;;;;;;-1:-1:-1;7743:42:22;7694:91;;7795:21;7844:25;7872:9;7882:10;7872:21;;;;;;;;;;;;;;7844:49;;7907:26;7936:9;7946:10;7959:1;7946:14;7936:25;;;;;;;;;;;;;;7907:54;;7980:9;7975:296;7999:20;7995:1;:24;7975:296;;;8044:19;8082:7;-1:-1:-1;;;;;8082:15:22;;8098:10;8110:11;8123:13;8137:1;8123:16;;;;;;;;;;;8082:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8044:96;;8162:18;8175:4;8162:12;:18::i;:::-;8158:99;;;8234:4;8204:10;8215:15;;;;;;8204:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;8204:34:22;;;-1:-1:-1;;;;;8204:34:22;;;;;8158:99;-1:-1:-1;8021:3:22;;7975:296;;;-1:-1:-1;;;8294:18:22;8290:109;;8372:16;;;;;8290:109;8430:9;:16;8412:10;8425:1;8412:14;:34;8408:349;;;8525:13;-1:-1:-1;;;;;8502:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8490:49;;8558:9;8553:164;8577:13;8573:1;:17;8553:164;;;8630:23;;;8651:1;8630:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8630:23:22;8615:9;8625:1;8615:12;;;;;;;;;;;;;:38;;;;8689:10;8700:1;8689:13;;;;;;;;;;;;;;8671:9;8681:1;8671:12;;;;;;;;;;;;;;8684:1;8671:15;;;;;;;;-1:-1:-1;;;;;8671:31:22;;;:15;;;;;;;;;;;:31;8592:3;;8553:164;;;;8730:16;;;;;8408:349;8808:45;8868:54;8887:7;8896:9;8907:10;8920:1;8907:14;8868:18;:54::i;:::-;8808:114;;8936:19;:26;8966:1;8936:31;8932:122;;;9027:16;;;;;;8932:122;9181:19;:26;9165:13;:42;-1:-1:-1;;;;;9129:88:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9117:100;;9232:9;9227:582;9251:13;9247:1;:17;9227:582;;;9290:9;9285:514;9309:19;:26;9305:1;:30;9285:514;;;9376:26;;9372:30;;;:34;;;9376:19;;9405:1;;9540:22;;;;;;;;;;;;:29;9536:1;:33;-1:-1:-1;;;;;9515:55:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9515:55:22;;9480:9;9490:1;9480:12;;;;;;;;;;;;;:90;;;;9606:10;9617:1;9606:13;;;;;;;;;;;;;;9588:9;9598:1;9588:12;;;;;;;;;;;;;;9601:1;9588:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;9588:31:22;;;-1:-1:-1;;;;;9588:31:22;;;;;9642:9;9637:148;9661:19;9681:1;9661:22;;;;;;;;;;;;;;:29;9657:1;:33;9637:148;;;9741:19;9761:1;9741:22;;;;;;;;;;;;;;9764:1;9741:25;;;;;;;;;;;;;;9719:9;9729:1;9719:12;;;;;;;;;;;;;;9736:1;9732;:5;9719:19;;;;;;;;-1:-1:-1;;;;;9719:47:22;;;:19;;;;;;;;;;;:47;9692:3;;9637:148;;;-1:-1:-1;;9337:3:22;;9285:514;;;-1:-1:-1;9266:3:22;;9227:582;;;;9818:16;;;;7117:2724;;;;;;:::o;11144:1082::-;11305:24;11386:1;11366:9;:16;:21;;:64;;;;;11411:8;:15;11429:1;11411:19;11391:9;:16;:39;11366:64;11345:148;;;;-1:-1:-1;;;11345:148:22;;;;;;;:::i;:::-;11682:8;:15;11700:1;11682:19;11658:9;:16;11677:2;11658:21;:43;-1:-1:-1;;;;;11648:54:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11648:54:22;-1:-1:-1;11634:68:22;-1:-1:-1;11764:2:22;11747:20;;11712:9;11778:442;11802:9;:16;11798:1;:20;11778:442;;;11843:5;;11839:211;;11868:14;11885:8;11898:1;11894;:5;11885:15;;;;;;;;;;;;;;-1:-1:-1;;;;;11885:19:22;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11969:3;11965:17;11955:28;;-1:-1:-1;12016:1:22;12009:9;;;;11933:103;12063:20;12086:9;12096:1;12086:12;;;;;;;;;;;;;;;;;;12153:2;12149:14;12139:25;;-1:-1:-1;12193:2:22;12186:10;;;;11820:3;;11778:442;;;;11144:1082;;;;;:::o;6189:708:18:-;6346:24;6469:25;;;;6521:14;;6553:13;;;;6469:25;6584:15;;;;6431:209;;-1:-1:-1;;;6431:209:18;;6346:24;;6431:4;;:20;;:209;;6469:34;;;;;-1:-1:-1;;;;;;6469:34:18;;6521:14;;6553:13;;6617:9;;6431:209;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6415:476;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6849:6;6838:42;;;;;;;;;;;;:::i;:::-;6814:66;-1:-1:-1;6814:66:18;-1:-1:-1;6415:476:18;;-1:-1:-1;6415:476:18;6663:50;6189:708;;;;;:::o;1531:170:36:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;6903:331:18;7111:4;7105:11;7141:6;7136:3;7129:19;7182:7;7177:2;7172:3;7168:12;7161:29;7215:2;7210:3;7203:15;9847:329:22;9942:32;10022:9;:16;-1:-1:-1;;;;;10001:38:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10001:38:22;;9990:49;;10054:9;10049:121;10073:9;:16;10069:1;:20;10049:121;;;10124:9;10157:1;10153;10134:9;:16;:20;:24;10124:35;;;;;;;;;;;;;;10110:8;10119:1;10110:11;;;;;;;;-1:-1:-1;;;;;10110:49:22;;;:11;;;;;;;;;;;:49;10091:3;;10049:121;;;;9847:329;;;:::o;10182:323::-;10275:32;10355:8;:15;-1:-1:-1;;;;;10334:37:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10334:37:22;;10323:48;;10386:9;10381:118;10405:8;:15;10401:1;:19;10381:118;;;10455:8;10486:1;10482;10464:8;:15;:19;:23;10455:33;;;;;;;;;;;;;;10441:8;10450:1;10441:11;;;;;;;;-1:-1:-1;;;;;10441:47:22;;;:11;;;;;;;;;;;:47;10422:3;;10381:118;;8495:4060:18;8666:24;8692:34;8746:17;:24;8774:1;8746:29;8742:95;;;8791:35;;8742:95;8881:17;:24;-1:-1:-1;;;;;8867:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8867:39:18;;8847:59;;8940:17;:24;-1:-1:-1;;;;;8926:39:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8926:39:18;-1:-1:-1;9007:16:18;;;9021:1;9007:16;;;;;;;;;8916:49;;-1:-1:-1;8976:28:18;;9007:16;;;;;;;;;;;;-1:-1:-1;9007:16:18;8976:47;;9050:17;9068:1;9050:20;;;;;;;;;;;;;;9033:11;9045:1;9033:14;;;;;;;;;;;;;:37;;;;;9081:42;;:::i;:::-;-1:-1:-1;9126:219:18;;;;;;;;;9178:14;;-1:-1:-1;;;;;9126:219:18;;;;;;9216:13;;;;9126:219;;;;;;;9255:18;;;;9126:219;;;;9309:25;;;-1:-1:-1;;;;;9309:25:18;;;9126:219;;;9309:25;;;;9126:219;;;;;;;;9356:41;;:::i;:::-;9400:218;;;;;;;;9452:4;:13;;;-1:-1:-1;;;;;9400:218:18;;;;;9489:4;:14;;;-1:-1:-1;;;;;9400:218:18;;;;;9529:4;:17;;;9400:218;;;;9582:4;:25;;;;;;;;;;;9400:218;;;;;;;;;;;9356:262;;9717:45;9741:7;9750:11;9717:23;:45::i;:::-;9776:18;;9699:63;;-1:-1:-1;9776:23:18;;-1:-1:-1;9776:23:18;:46;;;9803:11;9815:1;9803:14;;;;;;;;;;;;;;9821:1;9803:19;9776:46;9772:112;;;9838:35;;;;;9772:112;9894:27;10025:46;10049:8;10059:11;10025:23;:46::i;:::-;10086:17;;10008:63;;-1:-1:-1;10086:22:18;;-1:-1:-1;10086:22:18;:44;;;10112:10;10123:1;10112:13;;;;;;;;;;;;;;10129:1;10112:18;10086:44;10082:110;;;10146:35;;;;;;10082:110;10207:9;10202:2347;10226:17;:24;10222:1;:28;10202:2347;;;10271:25;10315:12;10310:1667;8487:1;10333:4;:37;10310:1667;;;10510:156;10557:17;10575:1;10557:20;;;;;;;;;;;;;;10599:10;10610:1;10599:13;;;;;;;;;;;;;;10634:11;10646:1;10634:14;;;;;;;;;;;;;;10510:25;:156::i;:::-;10493:11;10505:1;10493:14;;;;;;;;;;;;;;;;;:173;10688:18;;:23;;:46;;;10715:11;10727:1;10715:14;;;;;;;;;;;;;;10733:1;10715:19;10688:46;10684:98;;;10758:5;;10684:98;10816:206;8340:8;8182:3;10864:59;8182:3;10990:11;11002:1;10990:14;;;;;;;10816:206;10799:11;10811:1;10799:14;;;;;;;;;;;;;;;;;:223;11044:18;;:23;;:46;;;11071:11;11083:1;11071:14;;;;;;;;;;;;;;11089:1;11071:19;11044:46;11040:98;;;11114:5;;11040:98;11155:28;11227:46;11251:8;11261:11;11227:23;:46::i;:::-;11295:18;;11201:72;;-1:-1:-1;11201:72:18;-1:-1:-1;11295:23:18;;:46;;;11322:11;11334:1;11322:14;;;;;;;;;;;;;;11340:1;11322:19;11295:46;11291:98;;;11365:5;;;11291:98;11523:11;11510:24;;11630:17;11648:1;11630:20;;;;;;;;;;;;;;11613:10;11624:1;11613:13;;;;;;;;;;;;;;:37;11609:354;;11674:11;11802:17;11820:1;11802:20;;;;;;;;;;;;;;8182:3;11729:17;11747:1;11729:20;;;;;;;;;;;;;;11713:10;11724:1;11713:13;;;;;;;;;;;;;;:36;11712:63;:110;;;;;;11674:148;;8340:8;11848:3;:41;11844:101;;11917:5;;;;11844:101;11609:354;;-1:-1:-1;10372:6:18;;10310:1667;;;;12012:1;11994:8;:15;:19;:44;;;;;12037:1;12017:10;:17;:21;11994:44;11990:549;;;12071:8;12080:1;12071:11;;;;;;;;;;;;;;12058:7;12066:1;12058:10;;;;;;;;;;;;;:24;;;;;12368:156;12415:17;12433:1;12415:20;;;;;;;;;;;;;;12457:10;12468:1;12457:13;;;;;;;;;;;;;;12492:11;12504:1;12492:14;;;;;;;12368:156;12345:17;12363:1;12345:20;;;;;;;;;;;;;:179;;;;;11990:549;-1:-1:-1;10252:3:18;;10202:2347;;;;8495:4060;;;;;;;;;:::o;1987:267:30:-;2131:39;;-1:-1:-1;;;2131:39:30;;2173:6;;-1:-1:-1;;;;;2131:15:30;;;;;:39;;2155:4;;2162:7;;2131:39;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:48;2127:121;;;2195:42;2209:5;2216:7;-1:-1:-1;;2195:13:30;:42::i;:::-;1987:267;;;:::o;10511:627:22:-;10600:12;10753:17;;10801:13;10797:64;;10841:5;10834:12;;;;;10797:64;10511:627;10934:4;-1:-1:-1;;;;;10934:11:22;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;10934:23:22;;10966:4;10934:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10930:86;;-1:-1:-1;11000:5:22;10993:12;;10930:86;11029:4;-1:-1:-1;;;;;11029:11:22;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11029:23:22;;11061:4;11029:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11025:86;;-1:-1:-1;11095:5:22;11088:12;;11025:86;-1:-1:-1;11127:4:22;10511:627;;;;:::o;12561:416:18:-;12729:21;12770:14;;;:29;;-1:-1:-1;12788:11:18;;12770:29;:49;;;-1:-1:-1;12803:16:18;;12770:49;12766:63;;;-1:-1:-1;12828:1:18;12821:8;;12766:63;12851:18;;;12863:6;12851:9;:18;:9;12883:13;;;;;:23;12879:37;;12915:1;12908:8;;;;;12879:37;12959:11;12953:1;12939:11;:15;12934:1;:21;12933:37;;;;;;;12561:416;-1:-1:-1;;;;;12561:416:18:o;1217:351:30:-;1359:21;1419:22;;;1455:7;1476:9;1383:112;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1383:112:30;;;;;;;;;;;;;;-1:-1:-1;;;;;1383:112:30;-1:-1:-1;;;;;;1383:112:30;;;;;;;;;;;-1:-1:-1;1505:56:30;1544:5;1383:112;1505:30;:56::i;:::-;1217:351;;;;:::o;6923:340::-;7055:15;7072:23;7099:6;-1:-1:-1;;;;;7099:11:30;7111:8;7099:21;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7054:66;;;;7134:10;:44;;;;;7148:30;7167:10;7148:18;:30::i;:::-;7130:81;;;7194:7;;;;7130:81;7220:36;7245:10;7220:24;:36::i;6923:340::-;;;:::o;6237:395::-;6337:17;6374:10;:17;6395:1;6374:22;6370:64;;;-1:-1:-1;6419:4:30;6412:11;;6370:64;6468:2;6447:10;:17;:23;6443:183;;6486:14;6503:38;6527:10;6539:1;6503:23;:38::i;:::-;6486:55;;6559:6;6569:1;6559:11;6555:61;;;6597:4;6590:11;;;;;16122:220:31;16243:14;16290:21;16302:1;16305:5;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;:::-;14493:24;:254::i;:::-;-1:-1:-1;14936:13:31;14838:2;14936:13;14930:20;;14301:688::o;1334:378:34:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:34;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:34;-1:-1:-1;;;;;;1557:148:34;;;;;;;;;;;-1:-1:-1;1334:378:34;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;978:707::-;;1095:3;1088:4;1080:6;1076:17;1072:27;1062:2;;-1:-1;;1103:12;1062:2;1150:6;1137:20;1172:80;1187:64;1244:6;1187:64;:::i;:::-;1172:80;:::i;:::-;1280:21;;;1163:89;-1:-1;1324:4;1337:14;;;;1312:17;;;1426;;;1417:27;;;;1414:36;-1:-1;1411:2;;;1463:1;;1453:12;1411:2;1488:1;1473:206;1498:6;1495:1;1492:13;1473:206;;;4812:20;;1566:50;;1630:14;;;;1658;;;;1520:1;1513:9;1473:206;;;1477:14;;;;;1055:630;;;;:::o;1711:722::-;;1839:3;1832:4;1824:6;1820:17;1816:27;1806:2;;-1:-1;;1847:12;1806:2;1887:6;1881:13;1909:80;1924:64;1981:6;1924:64;:::i;1909:80::-;2017:21;;;1900:89;-1:-1;2061:4;2074:14;;;;2049:17;;;2163;;;2154:27;;;;2151:36;-1:-1;2148:2;;;2200:1;;2190:12;2148:2;2225:1;2210:217;2235:6;2232:1;2229:13;2210:217;;;4960:13;;2303:61;;2378:14;;;;2406;;;;2257:1;2250:9;2210:217;;2577:440;;2678:3;2671:4;2663:6;2659:17;2655:27;2645:2;;-1:-1;;2686:12;2645:2;2733:6;2720:20;2755:64;2770:48;2811:6;2770:48;:::i;2755:64::-;2746:73;;2839:6;2832:5;2825:21;2943:3;2875:4;2934:6;2867;2925:16;;2922:25;2919:2;;;2960:1;;2950:12;2919:2;33104:6;2875:4;2867:6;2863:17;2875:4;2901:5;2897:16;33081:30;33160:1;33142:16;;;2875:4;33142:16;33135:27;2901:5;2638:379;-1:-1;;2638:379::o;5023:721::-;;;;;5187:3;5175:9;5166:7;5162:23;5158:33;5155:2;;;-1:-1;;5194:12;5155:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;5246:63;-1:-1;5346:2;5385:22;;72:20;97:33;72:20;97:33;:::i;:::-;5354:63;-1:-1;5482:2;5467:18;;5454:32;-1:-1;;;;;5495:30;;5492:2;;;-1:-1;;5528:12;5492:2;5558:62;5612:7;5603:6;5592:9;5588:22;5558:62;:::i;:::-;5149:595;;;;-1:-1;5548:72;;5657:2;5696:22;4812:20;;-1:-1;;;5149:595::o;5751:657::-;;;5933:2;5921:9;5912:7;5908:23;5904:32;5901:2;;;-1:-1;;5939:12;5901:2;5990:17;5984:24;-1:-1;;;;;6028:18;6020:6;6017:30;6014:2;;;-1:-1;;6050:12;6014:2;6080:89;6161:7;6152:6;6141:9;6137:22;6080:89;:::i;:::-;6070:99;;6227:2;6216:9;6212:18;6206:25;6192:39;;6028:18;6243:6;6240:30;6237:2;;;-1:-1;;6273:12;6237:2;;6303:89;6384:7;6375:6;6364:9;6360:22;6303:89;:::i;:::-;6293:99;;;5895:513;;;;;:::o;6415:981::-;;;;;;6620:3;6608:9;6599:7;6595:23;6591:33;6588:2;;;-1:-1;;6627:12;6588:2;2520:6;2507:20;2532:32;2558:5;2532:32;:::i;:::-;6679:62;-1:-1;6778:2;6817:22;;72:20;97:33;72:20;97:33;:::i;:::-;6786:63;-1:-1;6886:2;6925:22;;72:20;97:33;72:20;97:33;:::i;:::-;6894:63;-1:-1;7022:2;7007:18;;6994:32;-1:-1;;;;;7035:30;;;7032:2;;;-1:-1;;7068:12;7032:2;7098:62;7152:7;7143:6;7132:9;7128:22;7098:62;:::i;:::-;7088:72;;7225:3;7214:9;7210:19;7197:33;7183:47;;7046:18;7242:6;7239:30;7236:2;;;-1:-1;;7272:12;7236:2;;7302:78;7372:7;7363:6;7352:9;7348:22;7302:78;:::i;:::-;7292:88;;;6582:814;;;;;;;;:::o;7403:845::-;;;;;;7583:3;7571:9;7562:7;7558:23;7554:33;7551:2;;;-1:-1;;7590:12;7551:2;2520:6;2507:20;2532:32;2558:5;2532:32;:::i;:::-;7642:62;-1:-1;7741:2;7780:22;;72:20;97:33;72:20;97:33;:::i;:::-;7749:63;-1:-1;7849:2;7888:22;;72:20;97:33;72:20;97:33;:::i;:::-;7857:63;-1:-1;7985:2;7970:18;;7957:32;-1:-1;;;;;7998:30;;7995:2;;;-1:-1;;8031:12;7995:2;8061:62;8115:7;8106:6;8095:9;8091:22;8061:62;:::i;:::-;7545:703;;;;-1:-1;7545:703;;8160:3;8200:22;4812:20;;7545:703;-1:-1;;;7545:703::o;8255:309::-;;8393:2;8381:9;8372:7;8368:23;8364:32;8361:2;;;-1:-1;;8399:12;8361:2;3766:6;3760:13;3778:56;3828:5;3778:56;:::i;9209:985::-;;;;;9462:3;9450:9;9441:7;9437:23;9433:33;9430:2;;;-1:-1;;9469:12;9430:2;4331:6;4318:20;4343:58;4395:5;4343:58;:::i;:::-;9521:88;-1:-1;9646:2;9685:22;;;72:20;97:33;72:20;97:33;:::i;:::-;9654:63;-1:-1;9782:2;9767:18;;9754:32;-1:-1;;;;;9795:30;;;9792:2;;;-1:-1;;9828:12;9792:2;9942:6;9931:9;9927:22;;;316:3;309:4;301:6;297:17;293:27;283:2;;-1:-1;;324:12;283:2;371:6;358:20;393:103;408:87;488:6;408:87;:::i;393:103::-;524:21;;;581:14;;;;556:17;;;670;;;661:27;;;;658:36;-1:-1;655:2;;;-1:-1;;697:12;655:2;-1:-1;723:10;;717:229;742:6;739:1;736:13;717:229;;;3579:6;3566:20;3591:56;3641:5;3591:56;:::i;:::-;810:73;;764:1;757:9;;;;;897:14;;;;925;;717:229;;;-1:-1;9848:111;-1:-1;;;10024:2;10009:18;;9996:32;;-1:-1;10037:30;;;10034:2;;;-1:-1;;10070:12;10034:2;;;10100:78;10170:7;10161:6;10150:9;10146:22;10100:78;:::i;:::-;10090:88;;;9424:770;;;;;;;:::o;10201:548::-;;;10368:2;10356:9;10347:7;10343:23;10339:32;10336:2;;;-1:-1;;10374:12;10336:2;4523:6;4517:13;4535:59;4588:5;4535:59;:::i;:::-;10584:2;10569:18;;10563:25;10426:100;;-1:-1;;;;;;10597:30;;10594:2;;;-1:-1;;10630:12;10594:2;10701:22;;3131:4;3119:17;;3115:27;-1:-1;3105:2;;-1:-1;;3146:12;3105:2;3186:6;3180:13;3208:64;3223:48;3264:6;3223:48;:::i;3208:64::-;3292:6;3285:5;3278:21;3396:3;10584:2;3387:6;3320;3378:16;;3375:25;3372:2;;;-1:-1;;3403:12;3372:2;3423:39;3455:6;10584:2;3354:5;3350:16;10584:2;3320:6;3316:17;3423:39;:::i;:::-;10650:83;;;;;;10330:419;;;;;:::o;10756:261::-;;10870:2;10858:9;10849:7;10845:23;10841:32;10838:2;;;-1:-1;;10876:12;10838:2;4689:6;4683:13;32048:8;34888:5;32037:20;34864:5;34861:34;34851:2;;-1:-1;;34899:12;11024:263;;11139:2;11127:9;11118:7;11114:23;11110:32;11107:2;;;-1:-1;;11145:12;11107:2;-1:-1;4960:13;;11101:186;-1:-1;11101:186::o;11294:399::-;;;11426:2;11414:9;11405:7;11401:23;11397:32;11394:2;;;-1:-1;;11432:12;11394:2;-1:-1;;4960:13;;11595:2;11645:22;;;4960:13;;;;;-1:-1;11388:305::o;13445:690::-;;13638:5;29119:12;29811:6;29806:3;29799:19;29848:4;;29843:3;29839:14;13650:93;;29848:4;13814:5;28806:14;-1:-1;13853:260;13878:6;13875:1;13872:13;13853:260;;;13939:13;;18250:37;;12052:14;;;;29530;;;;13900:1;13893:9;13853:260;;;-1:-1;14119:10;;13569:566;-1:-1;;;;;13569:566::o;14371:323::-;;14503:5;29119:12;29811:6;29806:3;29799:19;14586:52;14631:6;29848:4;29843:3;29839:14;29848:4;14612:5;14608:16;14586:52;:::i;:::-;33537:7;33521:14;-1:-1;;33517:28;14650:39;;;;29848:4;14650:39;;14451:243;-1:-1;;14451:243::o;18419:271::-;;15211:5;29119:12;15322:52;15367:6;15362:3;15355:4;15348:5;15344:16;15322:52;:::i;:::-;15386:16;;;;;18553:137;-1:-1;;18553:137::o;18697:222::-;-1:-1;;;;;31910:54;;;;12290:37;;18824:2;18809:18;;18795:124::o;18926:349::-;-1:-1;;;;;31910:54;;;;12159:58;;19261:2;19246:18;;18250:37;19089:2;19074:18;;19060:215::o;19282:333::-;-1:-1;;;;;31910:54;;;12290:37;;31910:54;;19601:2;19586:18;;12290:37;19437:2;19422:18;;19408:207::o;19622:640::-;-1:-1;;;;;31910:54;;;12290:37;;31910:54;;20016:2;20001:18;;12290:37;19851:3;20053:2;20038:18;;20031:48;;;19622:640;;20093:76;;19836:19;;20155:6;20093:76;:::i;:::-;20085:84;;18280:5;20248:2;20237:9;20233:18;18250:37;19822:440;;;;;;;:::o;20269:417::-;-1:-1;;;;;31910:54;;12290:37;;20442:2;20560;20545:18;;20538:48;;;20269:417;;20600:76;;20427:18;;20662:6;20600:76;:::i;:::-;20592:84;20413:273;-1:-1;;;;20413:273::o;21033:924::-;;21384:2;21373:9;21369:18;21384:2;21405:17;21398:47;21459:126;12706:5;29119:12;29811:6;29806:3;29799:19;29839:14;21373:9;29839:14;12718:102;;29848:4;;;29839:14;29848:4;12877:6;12873:17;21373:9;12864:27;;29848:4;12971:5;28806:14;-1:-1;13010:357;13035:6;13032:1;13029:13;13010:357;;;13087:20;;21373:9;13091:4;13087:20;;13082:3;13075:33;11820:64;11880:3;13142:6;13136:13;11820:64;:::i;:::-;13346:14;;;;13156:90;-1:-1;29530:14;;;;13057:1;13050:9;13010:357;;;13014:14;;21633:9;21627:4;21623:20;29848:4;21607:9;21603:18;21596:48;21658:108;21761:4;21752:6;21658:108;:::i;:::-;21650:116;;;;;21814:9;21808:4;21804:20;21799:2;21788:9;21784:18;21777:48;21839:108;21942:4;21933:6;21839:108;:::i;21964:629::-;;22219:2;22240:17;22233:47;22294:108;22219:2;22208:9;22204:18;22388:6;22294:108;:::i;:::-;22450:9;22444:4;22440:20;22435:2;22424:9;22420:18;22413:48;22475:108;22578:4;22569:6;22475:108;:::i;22600:210::-;30875:13;;30868:21;14208:34;;22721:2;22706:18;;22692:118::o;22817:896::-;-1:-1;;;;;;30962:78;;14323:36;;-1:-1;;;;;31910:54;;;23285:2;23270:18;;12290:37;31910:54;;23368:2;23353:18;;12290:37;31921:42;23405:2;23390:18;;23383:48;;;22817:896;;23445:76;;23107:19;;23507:6;23445:76;:::i;:::-;23570:9;23564:4;23560:20;23554:3;23543:9;23539:19;23532:49;23595:108;23698:4;23689:6;23595:108;:::i;:::-;23587:116;23093:620;-1:-1;;;;;;;;23093:620::o;23720:748::-;-1:-1;;;;;;30962:78;;14323:36;;-1:-1;;;;;31910:54;;;24138:2;24123:18;;12290:37;31910:54;;24221:2;24206:18;;12290:37;31921:42;24258:2;24243:18;;24236:48;;;23720:748;;24298:76;;23960:19;;24360:6;24298:76;:::i;:::-;24290:84;;18280:5;24453:3;24442:9;24438:19;18250:37;23946:522;;;;;;;;:::o;24475:532::-;-1:-1;;;;;31910:54;;;15508:73;;31910:54;;;;24912:2;24897:18;;15508:73;32048:8;32037:20;;;24993:2;24978:18;;18141:36;24702:2;24687:18;;24673:334::o;25014:510::-;25230:2;25215:18;;33662:1;33652:12;;33642:2;;33668:9;33642:2;15697:83;;;25427:2;25412:18;;18250:37;;;;25510:2;25495:18;;;18250:37;25201:323;:::o;25531:416::-;25731:2;25745:47;;;16017:2;25716:18;;;29799:19;16053:34;29839:14;;;16033:55;-1:-1;;;16108:12;;;16101:28;16148:12;;;25702:245::o;25954:416::-;26154:2;26168:47;;;16399:2;26139:18;;;29799:19;16435:34;29839:14;;;16415:55;-1:-1;;;16490:12;;;16483:29;16531:12;;;26125:245::o;26377:416::-;26577:2;26591:47;;;26562:18;;;29799:19;16818:34;29839:14;;;16798:55;16872:12;;;26548:245::o;26800:410::-;;26997:2;27018:17;27011:47;17232:16;17226:23;17160:4;26997:2;26986:9;26982:18;17262:38;17315:71;17151:14;26986:9;17151:14;17367:12;17315:71;:::i;:::-;17307:79;;5506:18;;31921:42;;;26997:2;17469:5;17465:16;17459:23;31910:54;17536:14;26986:9;17536:14;12290:37;17536:14;17627:5;17623:16;17617:23;17694:14;26986:9;17694:14;18250:37;17694:14;17785:5;17781:16;17775:23;17852:14;26986:9;17852:14;18250:37;17852:14;17951:5;17947:16;17941:23;17160:4;26986:9;18018:14;18250:37;27064:136;;;;26968:242;;;;:::o;27217:222::-;18250:37;;;27344:2;27329:18;;27315:124::o;27446:256::-;27508:2;27502:9;27534:17;;;-1:-1;;;;;27594:34;;27630:22;;;27591:62;27588:2;;;27666:1;;27656:12;27588:2;27508;27675:22;27486:216;;-1:-1;27486:216::o;27709:327::-;;-1:-1;;;;;27883:6;27880:30;27877:2;;;-1:-1;;27913:12;27877:2;-1:-1;27958:4;27946:17;;;28011:15;;27814:222::o;28354:321::-;;-1:-1;;;;;28489:6;28486:30;28483:2;;;-1:-1;;28519:12;28483:2;-1:-1;33537:7;28573:17;-1:-1;;28569:33;28660:4;28650:15;;28420:255::o;33177:268::-;33242:1;33249:101;33263:6;33260:1;33257:13;33249:101;;;33330:11;;;33324:18;33311:11;;;33304:39;33285:2;33278:10;33249:101;;;33365:6;33362:1;33359:13;33356:2;;;-1:-1;;33242:1;33412:16;;33405:27;33226:219::o;33691:117::-;-1:-1;;;;;31910:54;;33750:35;;33740:2;;33799:1;;33789:12;33740:2;33734:74;:::o;33815:115::-;-1:-1;;;;;;30962:78;;33873:34;;33863:2;;33921:1;;33911:12"
            }
        }
    },
    "sourceTreeHashHex": "0xcb5f9057b0bf49bea29b201ec2cfda6867a1f8556cc2d98b9b3129c5e9d3ce41",
    "sources": {
        "./UniswapV3Sampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _takerTokenAmounts\n            ) = _sampleSwapApproximateBuys(\n                SwapRevertSamplerBuyQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[i])),\n                    buyTokenData: abi.encode(\n                        router,\n                        _toUniswapPath(\n                            reversedPath,\n                            _reversePoolPath(poolPaths[i])\n                        )\n                    ),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                makerTokenAmounts\n            );\n\n            for (uint256 j = 0; j < _takerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the buys.\n                if (_takerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // We can go from high to low here\n                if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] >= _takerTokenAmounts[j]) {\n                    takerTokenAmounts[j] = _takerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[j] = _toUniswapPath(path, poolPaths[i]);\n                }\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": {
            "id": 54,
            "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n"
        },
        "./SwapRevertSampler.sol": {
            "id": 18,
            "content": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}"
        },
        "./GasOverhead.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
        }
    },
    "sourceCodes": {
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\nimport \"@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol\";\nimport \"./SwapRevertSampler.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    MixinUniswapV3,\n    SwapRevertSampler\n{\n    using LibRichErrorsV06 for bytes;\n\n    function sampleSwapFromUniswapV3(\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 takerTokenAmount\n    )\n        external\n        returns (uint256)\n    {\n        return _tradeUniswapV3(\n            IERC20TokenV06(sellToken),\n            takerTokenAmount,\n            bridgeData\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        gasUsed = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            bytes memory _uniswapPath = _toUniswapPath(path, poolPaths[i]);\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _makerTokenAmounts\n            ) = _sampleSwapQuotesRevert(\n                SwapRevertSamplerQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    bridgeData: abi.encode(router, _uniswapPath),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                takerTokenAmounts\n            );\n            for (uint256 j = 0; j < _makerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the sells.\n                if (_makerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // If this is better than what we have found, prefer it\n                if (makerTokenAmounts[j] <= _makerTokenAmounts[j]) {\n                    makerTokenAmounts[j] = _makerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    uniswapPaths[j] = _uniswapPath;\n                }\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param router UniswapV3 Router contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return gasUsed gas consumed in each sample sell\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        address router,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory gasUsed,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < poolPaths.length; ++i) {\n            (\n                uint256[] memory _gasUsed,\n                uint256[] memory _takerTokenAmounts\n            ) = _sampleSwapApproximateBuys(\n                SwapRevertSamplerBuyQuoteOpts({\n                    sellToken: address(path[0]),\n                    buyToken: address(path[path.length - 1]),\n                    sellTokenData: abi.encode(router, _toUniswapPath(path, poolPaths[i])),\n                    buyTokenData: abi.encode(\n                        router,\n                        _toUniswapPath(\n                            reversedPath,\n                            _reversePoolPath(poolPaths[i])\n                        )\n                    ),\n                    getSwapQuoteCallback: this.sampleSwapFromUniswapV3\n                }),\n                makerTokenAmounts\n            );\n\n            for (uint256 j = 0; j < _takerTokenAmounts.length; ++j) {\n                // Break early if we can't complete the buys.\n                if (_takerTokenAmounts[j] == 0) {\n                    break;\n                }\n                // We can go from high to low here\n                if (takerTokenAmounts[j] == 0 || takerTokenAmounts[j] >= _takerTokenAmounts[j]) {\n                    takerTokenAmounts[j] = _takerTokenAmounts[j];\n                    gasUsed[j] = _gasUsed[j];\n                    // But the output path should still be encoded for sells.\n                    uniswapPaths[j] = _toUniswapPath(path, poolPaths[i]);\n                }\n            }\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[3] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/mixins/MixinUniswapV3.sol": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"../IBridgeAdapter.sol\";\n\ninterface IUniswapV3Router {\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    function exactInput(ExactInputParams memory params)\n        external\n        payable\n        returns (uint256 amountOut);\n}\n\ncontract MixinUniswapV3 {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    function _tradeUniswapV3(\n        IERC20TokenV06 sellToken,\n        uint256 sellAmount,\n        bytes memory bridgeData\n    )\n        internal\n        returns (uint256 boughtAmount)\n    {\n        (IUniswapV3Router router, bytes memory path) =\n            abi.decode(bridgeData, (IUniswapV3Router, bytes));\n\n        // Grant the Uniswap router an allowance to sell the sell token.\n        sellToken.approveIfBelow(address(router), sellAmount);\n\n        boughtAmount = router.exactInput(IUniswapV3Router.ExactInputParams({\n            path: path,\n            recipient: address(this),\n            deadline: block.timestamp,\n            amountIn: sellAmount,\n            amountOutMinimum: 1\n        }));\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/transformers/bridges/IBridgeAdapter.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface IBridgeAdapter {\n\n    struct BridgeOrder {\n        // Upper 16 bytes: uint128 protocol ID (right-aligned)\n        // Lower 16 bytes: ASCII source name (left-aligned)\n        bytes32 source;\n        uint256 takerTokenAmount;\n        uint256 makerTokenAmount;\n        bytes bridgeData;\n    }\n\n    /// @dev Emitted when tokens are swapped with an external source.\n    /// @param source A unique ID for the source, where the upper 16 bytes\n    ///        encodes the (right-aligned) uint128 protocol ID and the\n    ///        lower 16 bytes encodes an ASCII source name.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token sold.\n    /// @param outputTokenAmount Amount of output token bought.\n    event BridgeFill(\n        bytes32 source,\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount\n    );\n\n    function trade(\n        BridgeOrder calldata order,\n        IERC20TokenV06 sellToken,\n        IERC20TokenV06 buyToken,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 boughtAmount);\n}\n",
        "./SwapRevertSampler.sol": "\n\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./GasOverhead.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\n\ninterface IHackedERC20 {\n    function _setBalance(address owner, uint256 amount) external;\n    function _setEnabled(bool enabled) external;\n}\n\ncontract SwapRevertSampler {\n    using LibRichErrorsV06 for bytes;\n    address private constant GAS_OVERHEAD = 0xDeF1000000000000000000000000000000001337;\n\n    // solhint-disable no-empty-blocks\n    /// @dev Payable fallback to receive ETH from Kyber/WETH.\n    receive ()\n        external\n        payable\n    { }\n\n    struct SwapRevertSamplerQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the swap\n        bytes bridgeData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    struct SwapRevertSamplerBuyQuoteOpts {\n        // Address of the token which is being sold\n        address sellToken;\n        // Address of the token which is wanted\n        address buyToken;\n        // Data required for the bridge to execute the SELL_TOKEN->BUY_TOKEN swap\n        bytes sellTokenData;\n        // Data required for the bridge to execute the BUY_TOKEN->SELL_TOKEN swap\n        bytes buyTokenData;\n        // Callback to retrieve a swap quote.\n        function (address sellToken, address buyToken, bytes memory bridgeData, uint256 sellAmount)\n            external\n            returns (uint256)\n            getSwapQuoteCallback;\n    }\n\n    function _callRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256 amountIn\n    )\n        external\n    {\n        // Clear any registered overhead\n        try\n            GasOverhead(GAS_OVERHEAD).clearOverhead()\n        { } catch { }\n        // Measure the gas\n        uint256 gasUsed = gasleft();\n        // Perform the sell\n        (bool success, bytes memory data) = address(this).call(\n            abi.encodeWithSelector(selector, sellToken, buyToken, bridgeData, amountIn)\n        );\n        gasUsed = gasUsed - gasleft();\n        // Remove any registered gas overhead\n        try\n            GasOverhead(GAS_OVERHEAD).overhead()\n            returns (uint256 gasOverhead)\n        {\n            gasUsed = gasUsed - gasOverhead;\n        } catch { }\n\n        if (!success) {\n            data.rrevert();\n        }\n        // Revert with the amount bought\n        _revertSingleSwapSample(abi.decode(data, (uint256)), gasUsed);\n    }\n\n    /// @dev  Mints the sell token, then performs the swap, then reverts with the amount out.\n    /// The SwapRevertSamplerQuoteOpts has been unrolled here as our ABI encoder cannot support\n    /// encoding the function\n    function _mintCallRevert(\n        bytes4 selector,\n        address sellToken,\n        address buyToken,\n        bytes memory bridgeData,\n        uint256[] memory amountsIn\n    )\n        external\n    {\n        IHackedERC20 hackedSellToken = IHackedERC20(payable(sellToken));\n        // We assume the amounts are ascending and that\n        // the underlying call can handle selling a specific amount\n        uint256 amountIn = amountsIn[amountsIn.length - 1];\n\n        // Enable sell token to be tracked and shadowed\n        try\n            hackedSellToken._setEnabled(true)\n        { } catch { }\n\n        // Mint enough to sell\n        try\n            hackedSellToken._setBalance(address(this), amountIn)\n        { } catch { }\n\n        try\n            IEtherTokenV06(payable(sellToken)).deposit{ value: amountIn }()\n        { } catch { }\n\n        // IHackedERC20 hackedBuyToken = IHackedERC20(payable(buyToken));\n        // // Ensure the balance of the buyToken is 0\n        // try\n        //     hackedBuyToken._setBalance(address(this), 0)\n        // { } catch { }\n\n        // require(hackedSellToken.balanceOf(address(this)) == amountIn, \"Failed to mint or deposit sellToken\");\n        // require(hackedBuyToken.balanceOf(address(this)) == 0, \"Balance of buyToken must be 0\");\n\n        // // Burn any excess ETH to avoid balance issues for sources which use ETH directly\n        // address(0).transfer(address(this).balance);\n\n        uint256[] memory amountsOut = new uint256[](amountsIn.length);\n        uint256[] memory gasUsed = new uint256[](amountsIn.length);\n\n        for (uint256 i = 0; i < amountsIn.length; i++) {\n            try\n                this._callRevert{gas: 2e6}(\n                    selector,\n                    sellToken,\n                    buyToken,\n                    bridgeData,\n                    amountsIn[i]\n                )\n            {\n                require(false, \"Swap Sample should have reverted\");\n            } catch (bytes memory reason) {\n                // Parse the reverted sample data\n                (amountsOut[i], gasUsed[i]) = _parseRevertedSingleSwapSample(reason);\n                // If we detect the amount out is 0 then we return early\n                // rather than continue performing excess work\n                if (amountsOut[i] == 0) {\n                    break;\n                }\n            }\n        }\n        // Revert the entire sampling\n        _revertSwapSample(amountsOut, gasUsed);\n    }\n\n    function _sampleSwapQuotesRevert(\n        SwapRevertSamplerQuoteOpts memory opts,\n        uint256[] memory amountsIn\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory amountsOut)\n    {\n        try\n            this._mintCallRevert(\n                opts.getSwapQuoteCallback.selector,\n                opts.sellToken,\n                opts.buyToken,\n                opts.bridgeData,\n                amountsIn\n            )\n        {\n            require(false, \"Swap Sample should have reverted\");\n        } catch (bytes memory reason) {\n            // Parse the reverted sample datas\n            (amountsOut, gasUsed) = abi.decode(reason, (uint256[], uint256[]));\n        }\n    }\n\n    function _revertSingleSwapSample(\n        uint256 amount,\n        uint256 gasUsed\n    )\n        internal\n    {\n        // Revert it so there is no state change\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, amount)\n            mstore(add(ptr, 32), gasUsed)\n            revert(ptr, 64)\n        }\n    }\n\n    function _revertSwapSample(\n        uint256[] memory amounts,\n        uint256[] memory gasUsed\n    )\n        internal\n    {\n        bytes memory data = abi.encode(amounts, gasUsed);\n        // Revert it so there is no state change\n        assembly {\n            revert(add(data, 32), mload(data))\n        }\n    }\n\n    /// @dev Parses the reverted swap sample data. If no amount\n    ///      is decoded, 0 is returned.\n    /// @param reason the string which contains the possible\n    ///               sample amount\n    /// @return the decoded sample amount or 0\n    /// @return the gas used in the sample\n    function _parseRevertedSingleSwapSample(\n        bytes memory reason\n    )\n        internal\n        pure\n        returns (uint256, uint256)\n    {\n        if (reason.length != 64) {\n            return (0,0);\n        }\n        return abi.decode(reason, (uint256, uint256));\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 3;\n\n    function _sampleSwapApproximateBuys(\n        SwapRevertSamplerBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory gasUsed, uint256[] memory takerTokenAmounts)\n    {\n        if (makerTokenAmounts.length == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        gasUsed = new uint256[](makerTokenAmounts.length);\n\n        uint256[] memory sellAmounts = new uint256[](1);\n        sellAmounts[0] = makerTokenAmounts[0];\n\n        SwapRevertSamplerQuoteOpts memory sellOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.sellToken,\n            buyToken: opts.buyToken,\n            bridgeData: opts.sellTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n\n        SwapRevertSamplerQuoteOpts memory buyOpts = SwapRevertSamplerQuoteOpts({\n            sellToken: opts.buyToken,\n            buyToken: opts.sellToken,\n            bridgeData: opts.buyTokenData,\n            getSwapQuoteCallback: opts.getSwapQuoteCallback\n        });\n        // Inverted, perform a sell of the token the user wants to buy\n        (, sellAmounts) = _sampleSwapQuotesRevert(buyOpts, sellAmounts);\n        if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        uint256[] memory buyAmounts;\n        // Sell of the token the user wishes to dispose, see how much we buy\n        (, buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n\n        if (buyAmounts.length == 0 || buyAmounts[0] == 0) {\n            return (gasUsed, takerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256[] memory _gasUsed;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                sellAmounts[0] = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmounts[0]\n                );\n                if (sellAmounts.length == 0 || sellAmounts[0] == 0) {\n                    break;\n                }\n                uint256[] memory _buyAmounts;\n                (_gasUsed, _buyAmounts) = _sampleSwapQuotesRevert(sellOpts, sellAmounts);\n                if (_buyAmounts.length == 0 || _buyAmounts[0] == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmounts = _buyAmounts;\n                // If we've reached our goal, exit early\n                if (buyAmounts[0] >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmounts[0] - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (_gasUsed.length > 0 && buyAmounts.length > 0) {\n                gasUsed[i] = _gasUsed[0];\n                // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n                // if we hit a max iteration limit\n                // We scale the sell amount to get the approximate target\n                takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmounts[0],\n                    sellAmounts[0]\n                );\n            }\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n\n}",
        "./GasOverhead.sol": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.6;\n\ncontract GasOverhead {\n    uint256 public _overhead = 2;\n    // Overhead incurred from updating the overhead storage slot\n    uint256 constant SSTORE_OVERHEAD = 20000;\n\n    function addOverhead(uint256 gas, uint256 gasBefore)\n        external\n    {\n        uint256 callOverhead = gasBefore - gasleft();\n        // Add additional est overhead of performing this update\n        _overhead += gas + callOverhead + SSTORE_OVERHEAD;\n    }\n\n    function clearOverhead()\n        external\n    {\n        _overhead = 2;\n    }\n\n    function overhead()\n        external\n        view\n        returns (uint256)\n    {\n        return _overhead;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IEtherTokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./IERC20TokenV06.sol\";\n\n\ninterface IEtherTokenV06 is\n    IERC20TokenV06\n{\n    /// @dev Wrap ether.\n    function deposit() external payable;\n\n    /// @dev Unwrap ether.\n    function withdraw(uint256 amount) external;\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-zero-ex",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/0x-monorepo/packages/asset-swapper/node_modules/@0x/contracts-utils"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
