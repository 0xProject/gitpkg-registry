{
    "schemaVersion": "2.0.0",
    "contractName": "TestUniswapV2Bridge",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amountOutMin",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "toTokenAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "deadline",
                        "type": "uint256"
                    }
                ],
                "name": "SwapExactTokensForTokensInput",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "TokenApprove",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "TokenTransfer",
                "type": "event"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "toTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "bridgeTransferFrom",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    }
                ],
                "name": "createToken",
                "outputs": [
                    {
                        "internalType": "contract TestToken",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "getRouterAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicValue",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "amountIn",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountOutMin",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "toTokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "deadline",
                        "type": "uint256"
                    }
                ],
                "name": "raiseSwapExactTokensForTokensInput",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "allowance",
                        "type": "uint256"
                    }
                ],
                "name": "raiseTokenApprove",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    }
                ],
                "name": "raiseTokenTransfer",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "string",
                        "name": "revertReason",
                        "type": "string"
                    }
                ],
                "name": "setRouterRevertReason",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "balance",
                        "type": "uint256"
                    }
                ],
                "name": "setTokenBalance",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "details": "UniswapV2Bridge overridden to mock tokens and Uniswap router",
            "methods": {
                "bridgeTransferFrom(address,address,address,uint256,bytes)": {
                    "details": "Callback for `IERC20Bridge`. Tries to buy `amount` of      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`      token encoded in the bridge data.",
                    "params": {
                        "amount": "Minimum amount of `toTokenAddress` tokens to buy.",
                        "bridgeData": "The abi-encoded path of token addresses. Last element must be toTokenAddress",
                        "from": "The maker (this contract).",
                        "to": "The recipient of the bought tokens.",
                        "toTokenAddress": "The token to buy and transfer to `to`."
                    },
                    "return": "success The magic bytes if successful."
                },
                "createToken(address)": {
                    "details": "Create a new token",
                    "params": {
                        "tokenAddress": "The token address. If zero, one will be created."
                    }
                },
                "isValidSignature(bytes32,bytes)": {
                    "details": "`SignatureType.Wallet` callback, so that this bridge can be the maker      and sign for itself in orders. Always succeeds.",
                    "return": "magicValue Success bytes, always."
                },
                "setTokenBalance(address,uint256)": {
                    "details": "Sets the balance of this contract for an existing token.      The wei attached will be the balance."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905561006c565b6105a6806117b183390190565b6117368061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80634ceb1f1311610076578063c2df82e61161005b578063c2df82e61461013f578063d54f7d5e14610152578063dc6aed191461015a576100a3565b80634ceb1f131461010c578063c21ab7f91461011f576100a3565b80631626ba7e146100a857806336c8c27d146100d157806339dd7d09146100e65780633e7a8911146100f9575b600080fd5b6100bb6100b6366004610e77565b61016d565b6040516100c8919061108d565b60405180910390f35b6100e46100df366004610d25565b610195565b005b6100e46100f4366004610ce5565b6101d2565b6100e4610107366004610ec1565b610214565b6100e461011a366004610d25565b6102a2565b61013261012d366004610c43565b610342565b6040516100c89190610fa1565b6100bb61014d366004610c65565b6103dd565b6101326107c7565b6100e4610168366004610f19565b6107e3565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b7f54b41d7666b1bded95f272024889ac00d41cb183d6444dde7c15dfec6bd32fd882826040516101c6929190611067565b60405180910390a15050565b7fae33cb06d7303f889d953bb09540983050163c1c4c98b330db432a911cfb63fd338484846040516102079493929190610fc2565b60405180910390a1505050565b6001546040517f55b3f96600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906355b3f9669061026c90859085906004016110dc565b600060405180830381600087803b15801561028657600080fd5b505af115801561029a573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260208190526040908190205490517fe30443bc000000000000000000000000000000000000000000000000000000008152911690819063e30443bc9061030b9030908690600401611067565b600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b50505050505050565b8073ffffffffffffffffffffffffffffffffffffffff811661038a5760405161036a90610bb1565b604051809103906000f080158015610386573d6000803e3d6000fd5b5090505b73ffffffffffffffffffffffffffffffffffffffff8116600081815260208190526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055919050565b60006103e7610bbe565b6103f383850185610d4f565b808252516002111561043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190611186565b60405180910390fd5b8051805173ffffffffffffffffffffffffffffffffffffffff8a1691907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061048357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146104d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190611129565b8773ffffffffffffffffffffffffffffffffffffffff16816000015160008151811061050057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561057057610547816000015160008151811061053857fe5b60200260200101518787610829565b507fdc1600f30000000000000000000000000000000000000000000000000000000090506107bd565b8051805160009061057d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105bd9190610fa1565b60206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061060d9190810190610f01565b60208201528051805161063e919060009061062457fe5b60200260200101516106346107c7565b83602001516108f0565b60006106486107c7565b602083015183516040517f38ed173900000000000000000000000000000000000000000000000000000000815292935060609273ffffffffffffffffffffffffffffffffffffffff8516926338ed1739926106ac928c91908e90429060040161121c565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107209190810190610df0565b90507f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a9836000015160008151811061075457fe5b60200260200101518b85602001518460018651038151811061077257fe5b60200260200101518d8d60405161078e96959493929190611020565b60405180910390a1507fdc1600f300000000000000000000000000000000000000000000000000000000925050505b9695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b7f8501880051b32b53177526567603d2ca2879f4859593b2f9041358250206f6a9858585858560405161081a9594939291906111e3565b60405180910390a15050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906108619085908590602401611067565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506108ea84826109cc565b50505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906109469030908790600401610ff9565b60206040518083038186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109969190810190610f01565b10156109c7576109c783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a88565b505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516109f59190610f68565b6000604051808303816000865af19150503d8060008114610a32576040519150601f19603f3d011682016040523d82523d6000602084013e610a37565b606091505b50915091508115610a7b578051610a4f575050610a84565b805160201415610a7b576000610a66826000610ac0565b90508060011415610a7957505050610a84565b505b6108ea81610ad5565b5050565b6040516060907f095ea7b300000000000000000000000000000000000000000000000000000000906108619085908590602401611067565b6000610acc8383610add565b90505b92915050565b805160208201fd5b60008160200183511015610b0357610b03610afe6005855185602001610b0c565b610ad5565b50016020015190565b6060632800659560e01b848484604051602401610b2b939291906110ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6103e08061131483390190565b604051806040016040528060608152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610acf57600080fd5b60008083601f840112610c0d578182fd5b50813567ffffffffffffffff811115610c24578182fd5b602083019150836020828501011115610c3c57600080fd5b9250929050565b600060208284031215610c54578081fd5b610c5e8383610bd8565b9392505050565b60008060008060008060a08789031215610c7d578182fd5b610c878888610bd8565b9550610c968860208901610bd8565b9450610ca58860408901610bd8565b935060608701359250608087013567ffffffffffffffff811115610cc7578283fd5b610cd389828a01610bfc565b979a9699509497509295939492505050565b600080600060608486031215610cf9578283fd5b8335610d04816112ee565b92506020840135610d14816112ee565b929592945050506040919091013590565b60008060408385031215610d37578182fd5b610d418484610bd8565b946020939093013593505050565b60006020808385031215610d61578182fd5b823567ffffffffffffffff811115610d77578283fd5b80840185601f820112610d88578384fd5b80359150610d9d610d98836112ce565b6112a7565b8281528381019082850185850284018601891015610db9578687fd5b8693505b84841015610de4578035610dd0816112ee565b835260019390930192918501918501610dbd565b50979650505050505050565b60006020808385031215610e02578182fd5b825167ffffffffffffffff811115610e18578283fd5b80840185601f820112610e29578384fd5b80519150610e39610d98836112ce565b8281528381019082850185850284018601891015610e55578687fd5b8693505b84841015610de4578051835260019390930192918501918501610e59565b600080600060408486031215610e8b578283fd5b83359250602084013567ffffffffffffffff811115610ea8578283fd5b610eb486828701610bfc565b9497909650939450505050565b60008060208385031215610ed3578182fd5b823567ffffffffffffffff811115610ee9578283fd5b610ef585828601610bfc565b90969095509350505050565b600060208284031215610f12578081fd5b5051919050565b600080600080600060a08688031215610f30578081fd5b8535945060208601359350610f488760408801610bd8565b9250610f578760608801610bd8565b949793965091946080013592915050565b60008251815b81811015610f885760208186018101518583015201610f6e565b81811115610f965782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600885106110c857fe5b938152602081019290925260409091015290565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252603c908201527f556e697377617056324272696467652f4c4153545f454c454d454e545f4f465f60408201527f504154485f4d5553545f4d415443485f4f55545055545f544f4b454e00000000606082015260800190565b60208082526030908201527f556e697377617056324272696467652f504154485f4c454e4754485f4d55535460408201527f5f42455f41545f4c454153545f54574f00000000000000000000000000000000606082015260800190565b948552602085019390935273ffffffffffffffffffffffffffffffffffffffff9182166040850152166060830152608082015260a00190565b600060a0820187835286602084015260a0604084015280865180835260c085019150602088019250835b8181101561127a57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101611246565b505073ffffffffffffffffffffffffffffffffffffffff9590951660608401525050608001529392505050565b60405181810167ffffffffffffffff811182821017156112c657600080fd5b604052919050565b600067ffffffffffffffff8211156112e4578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461131057600080fd5b5056fe608060405234801561001057600080fd5b506103c0806100206000396000f3fe6080604052600436106100655760003560e01c8063a9059cbb11610043578063a9059cbb146100ed578063dd62ed3e1461010d578063e30443bc1461012d57610065565b8063095ea7b31461006a57806327e235e3146100a057806370a08231146100cd575b600080fd5b34801561007657600080fd5b5061008a6100853660046102e8565b610142565b6040516100979190610369565b60405180910390f35b3480156100ac57600080fd5b506100c06100bb366004610292565b6101c0565b6040516100979190610374565b3480156100d957600080fd5b506100c06100e8366004610292565b6101d2565b3480156100f957600080fd5b5061008a6101083660046102e8565b6101fa565b34801561011957600080fd5b506100c06101283660046102b4565b61023d565b61014061013b3660046102e8565b610245565b005b6040517f36c8c27d00000000000000000000000000000000000000000000000000000000815260009033906336c8c27d906101839086908690600401610343565b600060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b50505050600190505b92915050565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040517f39dd7d0900000000000000000000000000000000000000000000000000000000815260009033906339dd7d099061018390839087908790600401610312565b600092915050565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b803573ffffffffffffffffffffffffffffffffffffffff811681146101ba57600080fd5b6000602082840312156102a3578081fd5b6102ad838361026e565b9392505050565b600080604083850312156102c6578081fd5b6102d0848461026e565b91506102df846020850161026e565b90509250929050565b600080604083850312156102fa578182fd5b610304848461026e565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b9081526020019056fea365627a7a72315820991d2aee018f692a73f4061febedd7ef796c6112255c20563afaacd7b677747a6c6578706572696d656e74616cf564736f6c63430005110040a365627a7a723158203cdd56935f82c3d25ba579a2040c704257c2a1389b26095e9300dd2af648e27d6c6578706572696d656e74616cf564736f6c63430005110040608060405234801561001057600080fd5b50610586806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806338ed17391461003b57806355b3f96614610064575b600080fd5b61004e610049366004610387565b610079565b60405161005b9190610422565b60405180910390f35b61007761007236600461031d565b61018e565b005b606061008361019f565b6040805185815260208087028201019091528480156100ac578160200160208202803883390190505b50905086816000815181106100bd57fe5b60200260200101818152505085816001835103815181106100da57fe5b60209081029190910101523363dc6aed19888888887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810181811061011b57fe5b905060200201602061013091908101906102fb565b87876040518663ffffffff1660e01b815260040161015295949392919061050a565b600060405180830381600087803b15801561016c57600080fd5b505af1158015610180573d6000803e3d6000fd5b505050509695505050505050565b61019a60008383610218565b505050565b60005460027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001841615020190911604156102165760006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020d9190610465565b60405180910390fd5b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610277578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008235161785556102a4565b828001600101855582156102a4579182015b828111156102a4578235825591602001919060010190610289565b506102b09291506102b4565b5090565b6102ce91905b808211156102b057600081556001016102ba565b90565b803573ffffffffffffffffffffffffffffffffffffffff811681146102f557600080fd5b92915050565b60006020828403121561030c578081fd5b61031683836102d1565b9392505050565b6000806020838503121561032f578081fd5b823567ffffffffffffffff80821115610346578283fd5b81850186601f820112610357578384fd5b8035925081831115610367578384fd5b866020848301011115610378578384fd5b60200196919550909350505050565b60008060008060008060a0878903121561039f578182fd5b8635955060208701359450604087013567ffffffffffffffff808211156103c4578384fd5b8189018a601f8201126103d5578485fd5b80359250818311156103e5578485fd5b8a602080850283010111156103f8578485fd5b602001955090935061040f905088606089016102d1565b9150608087013590509295509295509295565b602080825282518282018190526000918401906040840190835b8181101561045a57835183526020938401939092019160010161043c565b509095945050505050565b60006020820160208352818454600181166000811461048b57600181146104c75761045a565b607f600283041684527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008216604087015260608601925061045a565b6002820480855287865260208620865b828110156104f6578154898201604001526001909101906020016104d7565b880160400194505050509095945050505050565b948552602085019390935273ffffffffffffffffffffffffffffffffffffffff9182166040850152166060830152608082015260a0019056fea365627a7a7231582041914ea075e43e254b57ffa1ce45811e9a0ce5e14d5ac8b07a62e5a5717e50cb6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1D SWAP1 PUSH2 0x5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x6C JUMP JUMPDEST PUSH2 0x5A6 DUP1 PUSH2 0x17B1 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x1736 DUP1 PUSH2 0x7B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4CEB1F13 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC2DF82E6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xD54F7D5E EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xDC6AED19 EQ PUSH2 0x15A JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x4CEB1F13 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0xC21AB7F9 EQ PUSH2 0x11F JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x36C8C27D EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x39DD7D09 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x3E7A8911 EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE77 JUMP JUMPDEST PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE4 PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0xD25 JUMP JUMPDEST PUSH2 0x195 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE4 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0xCE5 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xD25 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0xC43 JUMP JUMPDEST PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x132 PUSH2 0x7C7 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0xF19 JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x54B41D7666B1BDED95F272024889AC00D41CB183D6444DDE7C15DFEC6BD32FD8 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xAE33CB06D7303F889D953BB09540983050163C1C4C98B330DB432A911CFB63FD CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x207 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x55B3F96600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x55B3F966 SWAP1 PUSH2 0x26C SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x10DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xE30443BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xE30443BC SWAP1 PUSH2 0x30B SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38A JUMPI PUSH1 0x40 MLOAD PUSH2 0x36A SWAP1 PUSH2 0xBB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x386 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E7 PUSH2 0xBBE JUMP JUMPDEST PUSH2 0x3F3 DUP4 DUP6 ADD DUP6 PUSH2 0xD4F JUMP JUMPDEST DUP1 DUP3 MSTORE MLOAD PUSH1 0x2 GT ISZERO PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x431 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x431 SWAP1 PUSH2 0x1129 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x500 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x570 JUMPI PUSH2 0x547 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x538 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP8 PUSH2 0x829 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x7BD JUMP JUMPDEST DUP1 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x57D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x60D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE DUP1 MLOAD DUP1 MLOAD PUSH2 0x63E SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x624 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x634 PUSH2 0x7C7 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x648 PUSH2 0x7C7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x38ED173900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x60 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP3 PUSH4 0x38ED1739 SWAP3 PUSH2 0x6AC SWAP3 DUP13 SWAP2 SWAP1 DUP15 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x121C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x720 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xDF0 JUMP JUMPDEST SWAP1 POP PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x754 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x1 DUP7 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0x78E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1020 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0x8501880051B32B53177526567603D2CA2879F4859593B2F9041358250206F6A9 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x81A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x861 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x8EA DUP5 DUP3 PUSH2 0x9CC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x946 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x996 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF01 JUMP JUMPDEST LT ISZERO PUSH2 0x9C7 JUMPI PUSH2 0x9C7 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xA88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x9F5 SWAP2 SWAP1 PUSH2 0xF68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA7B JUMPI DUP1 MLOAD PUSH2 0xA4F JUMPI POP POP PUSH2 0xA84 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xA7B JUMPI PUSH1 0x0 PUSH2 0xA66 DUP3 PUSH1 0x0 PUSH2 0xAC0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xA79 JUMPI POP POP POP PUSH2 0xA84 JUMP JUMPDEST POP JUMPDEST PUSH2 0x8EA DUP2 PUSH2 0xAD5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x861 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xACC DUP4 DUP4 PUSH2 0xADD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xB03 JUMPI PUSH2 0xB03 PUSH2 0xAFE PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xAD5 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB2B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3E0 DUP1 PUSH2 0x1314 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC0D JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC24 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xC3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC54 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xC5E DUP4 DUP4 PUSH2 0xBD8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xC7D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xC87 DUP9 DUP9 PUSH2 0xBD8 JUMP JUMPDEST SWAP6 POP PUSH2 0xC96 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP5 POP PUSH2 0xCA5 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xCD3 DUP10 DUP3 DUP11 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCF9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xD04 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xD14 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD37 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xD41 DUP5 DUP5 PUSH2 0xBD8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD61 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD77 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xD88 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0xD9D PUSH2 0xD98 DUP4 PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x12A7 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xDB9 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0xDE4 JUMPI DUP1 CALLDATALOAD PUSH2 0xDD0 DUP2 PUSH2 0x12EE JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xDBD JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE02 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xE29 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0xE39 PUSH2 0xD98 DUP4 PUSH2 0x12CE JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xE55 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0xDE4 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xE59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE8B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xED3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEE9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEF5 DUP6 DUP3 DUP7 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF12 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xF30 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0xF48 DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP3 POP PUSH2 0xF57 DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF88 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF6E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF96 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x10C8 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F4C4153545F454C454D454E545F4F465F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x504154485F4D5553545F4D415443485F4F55545055545F544F4B454E00000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F504154485F4C454E4754485F4D555354 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F42455F41545F4C454153545F54574F00000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP8 DUP4 MSTORE DUP7 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0xC0 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP9 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x127A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1246 JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12E4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x65 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9059CBB GT PUSH2 0x43 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xE30443BC EQ PUSH2 0x12D JUMPI PUSH2 0x65 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x142 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x374 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0xE8 CALLDATASIZE PUSH1 0x4 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x1FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x36C8C27D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x36C8C27D SWAP1 PUSH2 0x183 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x343 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x39DD7D0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x39DD7D09 SWAP1 PUSH2 0x183 SWAP1 DUP4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x312 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AD DUP4 DUP4 PUSH2 0x26E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2D0 DUP5 DUP5 PUSH2 0x26E JUMP JUMPDEST SWAP2 POP PUSH2 0x2DF DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x26E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x304 DUP5 DUP5 PUSH2 0x26E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP10 SAR 0x2A 0xEE ADD DUP16 PUSH10 0x2A73F4061FEBEDD7EF79 PUSH13 0x6112255C20563AFAACD7B67774 PUSH27 0x6C6578706572696D656E74616CF564736F6C63430005110040A365 PUSH3 0x7A7A72 BALANCE PC KECCAK256 EXTCODECOPY 0xDD JUMP SWAP4 0x5F DUP3 0xC3 0xD2 JUMPDEST 0xA5 PUSH26 0xA2040C704257C2A1389B26095E9300DD2AF648E27D6C65787065 PUSH19 0x696D656E74616CF564736F6C63430005110040 PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x586 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x38ED1739 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x55B3F966 EQ PUSH2 0x64 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x387 JUMP JUMPDEST PUSH2 0x79 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x422 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x77 PUSH2 0x72 CALLDATASIZE PUSH1 0x4 PUSH2 0x31D JUMP JUMPDEST PUSH2 0x18E JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH2 0x83 PUSH2 0x19F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP1 DUP8 MUL DUP3 ADD ADD SWAP1 SWAP2 MSTORE DUP5 DUP1 ISZERO PUSH2 0xAC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP7 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP2 PUSH1 0x1 DUP4 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xDA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE CALLER PUSH4 0xDC6AED19 DUP9 DUP9 DUP9 DUP9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD DUP2 DUP2 LT PUSH2 0x11B JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 PUSH2 0x130 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2FB JUMP JUMPDEST DUP8 DUP8 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x152 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x50A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x180 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x19A PUSH1 0x0 DUP4 DUP4 PUSH2 0x218 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0x100 PUSH1 0x1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV ISZERO PUSH2 0x216 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20D SWAP2 SWAP1 PUSH2 0x465 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x277 JUMPI DUP3 DUP1 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 0x2A4 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x2A4 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x2A4 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x289 JUMP JUMPDEST POP PUSH2 0x2B0 SWAP3 SWAP2 POP PUSH2 0x2B4 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x2CE SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2BA JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x30C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x316 DUP4 DUP4 PUSH2 0x2D1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x32F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x346 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x357 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x367 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP5 DUP4 ADD ADD GT ISZERO PUSH2 0x378 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x39F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3C4 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP10 ADD DUP11 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x3D5 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP3 POP DUP2 DUP4 GT ISZERO PUSH2 0x3E5 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP1 DUP6 MUL DUP4 ADD ADD GT ISZERO PUSH2 0x3F8 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 ADD SWAP6 POP SWAP1 SWAP4 POP PUSH2 0x40F SWAP1 POP DUP9 PUSH1 0x60 DUP10 ADD PUSH2 0x2D1 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP5 ADD SWAP1 PUSH1 0x40 DUP5 ADD SWAP1 DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x45A JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x43C JUMP JUMPDEST POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH1 0x20 DUP4 MSTORE DUP2 DUP5 SLOAD PUSH1 0x1 DUP2 AND PUSH1 0x0 DUP2 EQ PUSH2 0x48B JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x4C7 JUMPI PUSH2 0x45A JUMP JUMPDEST PUSH1 0x7F PUSH1 0x2 DUP4 DIV AND DUP5 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP3 AND PUSH1 0x40 DUP8 ADD MSTORE PUSH1 0x60 DUP7 ADD SWAP3 POP PUSH2 0x45A JUMP JUMPDEST PUSH1 0x2 DUP3 DIV DUP1 DUP6 MSTORE DUP8 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4F6 JUMPI DUP2 SLOAD DUP10 DUP3 ADD PUSH1 0x40 ADD MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x4D7 JUMP JUMPDEST DUP9 ADD PUSH1 0x40 ADD SWAP5 POP POP POP POP SWAP1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 COINBASE SWAP2 0x4E LOG0 PUSH22 0xE43E254B57FFA1CE45811E9A0CE5E14D5AC8B07A62E5 0xA5 PUSH18 0x7E50CB6C6578706572696D656E74616CF564 PUSH20 0x6F6C634300051100400000000000000000000000 ",
                "sourceMap": "4584:1504:47:-;;;4830:68;8:9:-1;5:2;;;30:1;27;20:12;5:2;4830:68:47;4875:16;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;4861:11:47;:30;;-1:-1:-1;;;;;;4861:30:47;-1:-1:-1;;;;;4861:30:47;;;;;;;;;;4584:1504;;;;;;;;;;:::o;:::-;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80634ceb1f1311610076578063c2df82e61161005b578063c2df82e61461013f578063d54f7d5e14610152578063dc6aed191461015a576100a3565b80634ceb1f131461010c578063c21ab7f91461011f576100a3565b80631626ba7e146100a857806336c8c27d146100d157806339dd7d09146100e65780633e7a8911146100f9575b600080fd5b6100bb6100b6366004610e77565b61016d565b6040516100c8919061108d565b60405180910390f35b6100e46100df366004610d25565b610195565b005b6100e46100f4366004610ce5565b6101d2565b6100e4610107366004610ec1565b610214565b6100e461011a366004610d25565b6102a2565b61013261012d366004610c43565b610342565b6040516100c89190610fa1565b6100bb61014d366004610c65565b6103dd565b6101326107c7565b6100e4610168366004610f19565b6107e3565b7fb0671381000000000000000000000000000000000000000000000000000000009392505050565b7f54b41d7666b1bded95f272024889ac00d41cb183d6444dde7c15dfec6bd32fd882826040516101c6929190611067565b60405180910390a15050565b7fae33cb06d7303f889d953bb09540983050163c1c4c98b330db432a911cfb63fd338484846040516102079493929190610fc2565b60405180910390a1505050565b6001546040517f55b3f96600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906355b3f9669061026c90859085906004016110dc565b600060405180830381600087803b15801561028657600080fd5b505af115801561029a573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260208190526040908190205490517fe30443bc000000000000000000000000000000000000000000000000000000008152911690819063e30443bc9061030b9030908690600401611067565b600060405180830381600087803b15801561032557600080fd5b505af1158015610339573d6000803e3d6000fd5b50505050505050565b8073ffffffffffffffffffffffffffffffffffffffff811661038a5760405161036a90610bb1565b604051809103906000f080158015610386573d6000803e3d6000fd5b5090505b73ffffffffffffffffffffffffffffffffffffffff8116600081815260208190526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055919050565b60006103e7610bbe565b6103f383850185610d4f565b808252516002111561043a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190611186565b60405180910390fd5b8051805173ffffffffffffffffffffffffffffffffffffffff8a1691907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811061048357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146104d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043190611129565b8773ffffffffffffffffffffffffffffffffffffffff16816000015160008151811061050057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561057057610547816000015160008151811061053857fe5b60200260200101518787610829565b507fdc1600f30000000000000000000000000000000000000000000000000000000090506107bd565b8051805160009061057d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105bd9190610fa1565b60206040518083038186803b1580156105d557600080fd5b505afa1580156105e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061060d9190810190610f01565b60208201528051805161063e919060009061062457fe5b60200260200101516106346107c7565b83602001516108f0565b60006106486107c7565b602083015183516040517f38ed173900000000000000000000000000000000000000000000000000000000815292935060609273ffffffffffffffffffffffffffffffffffffffff8516926338ed1739926106ac928c91908e90429060040161121c565b600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107209190810190610df0565b90507f349fc08071558d8e3aa92dec9396e4e9f2dfecd6bb9065759d1932e7da43b8a9836000015160008151811061075457fe5b60200260200101518b85602001518460018651038151811061077257fe5b60200260200101518d8d60405161078e96959493929190611020565b60405180910390a1507fdc1600f300000000000000000000000000000000000000000000000000000000925050505b9695505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1690565b7f8501880051b32b53177526567603d2ca2879f4859593b2f9041358250206f6a9858585858560405161081a9594939291906111e3565b60405180910390a15050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906108619085908590602401611067565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290506108ea84826109cc565b50505050565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152819073ffffffffffffffffffffffffffffffffffffffff85169063dd62ed3e906109469030908790600401610ff9565b60206040518083038186803b15801561095e57600080fd5b505afa158015610972573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109969190810190610f01565b10156109c7576109c783837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610a88565b505050565b600060608373ffffffffffffffffffffffffffffffffffffffff16836040516109f59190610f68565b6000604051808303816000865af19150503d8060008114610a32576040519150601f19603f3d011682016040523d82523d6000602084013e610a37565b606091505b50915091508115610a7b578051610a4f575050610a84565b805160201415610a7b576000610a66826000610ac0565b90508060011415610a7957505050610a84565b505b6108ea81610ad5565b5050565b6040516060907f095ea7b300000000000000000000000000000000000000000000000000000000906108619085908590602401611067565b6000610acc8383610add565b90505b92915050565b805160208201fd5b60008160200183511015610b0357610b03610afe6005855185602001610b0c565b610ad5565b50016020015190565b6060632800659560e01b848484604051602401610b2b939291906110ba565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b6103e08061131483390190565b604051806040016040528060608152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610acf57600080fd5b60008083601f840112610c0d578182fd5b50813567ffffffffffffffff811115610c24578182fd5b602083019150836020828501011115610c3c57600080fd5b9250929050565b600060208284031215610c54578081fd5b610c5e8383610bd8565b9392505050565b60008060008060008060a08789031215610c7d578182fd5b610c878888610bd8565b9550610c968860208901610bd8565b9450610ca58860408901610bd8565b935060608701359250608087013567ffffffffffffffff811115610cc7578283fd5b610cd389828a01610bfc565b979a9699509497509295939492505050565b600080600060608486031215610cf9578283fd5b8335610d04816112ee565b92506020840135610d14816112ee565b929592945050506040919091013590565b60008060408385031215610d37578182fd5b610d418484610bd8565b946020939093013593505050565b60006020808385031215610d61578182fd5b823567ffffffffffffffff811115610d77578283fd5b80840185601f820112610d88578384fd5b80359150610d9d610d98836112ce565b6112a7565b8281528381019082850185850284018601891015610db9578687fd5b8693505b84841015610de4578035610dd0816112ee565b835260019390930192918501918501610dbd565b50979650505050505050565b60006020808385031215610e02578182fd5b825167ffffffffffffffff811115610e18578283fd5b80840185601f820112610e29578384fd5b80519150610e39610d98836112ce565b8281528381019082850185850284018601891015610e55578687fd5b8693505b84841015610de4578051835260019390930192918501918501610e59565b600080600060408486031215610e8b578283fd5b83359250602084013567ffffffffffffffff811115610ea8578283fd5b610eb486828701610bfc565b9497909650939450505050565b60008060208385031215610ed3578182fd5b823567ffffffffffffffff811115610ee9578283fd5b610ef585828601610bfc565b90969095509350505050565b600060208284031215610f12578081fd5b5051919050565b600080600080600060a08688031215610f30578081fd5b8535945060208601359350610f488760408801610bd8565b9250610f578760608801610bd8565b949793965091946080013592915050565b60008251815b81811015610f885760208186018101518583015201610f6e565b81811115610f965782828501525b509190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff96871681529486166020860152604085019390935260608401919091528316608083015290911660a082015260c00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b60608101600885106110c857fe5b938152602081019290925260409091015290565b60006020825282602083015282846040840137818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6020808252603c908201527f556e697377617056324272696467652f4c4153545f454c454d454e545f4f465f60408201527f504154485f4d5553545f4d415443485f4f55545055545f544f4b454e00000000606082015260800190565b60208082526030908201527f556e697377617056324272696467652f504154485f4c454e4754485f4d55535460408201527f5f42455f41545f4c454153545f54574f00000000000000000000000000000000606082015260800190565b948552602085019390935273ffffffffffffffffffffffffffffffffffffffff9182166040850152166060830152608082015260a00190565b600060a0820187835286602084015260a0604084015280865180835260c085019150602088019250835b8181101561127a57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101611246565b505073ffffffffffffffffffffffffffffffffffffffff9590951660608401525050608001529392505050565b60405181810167ffffffffffffffff811182821017156112c657600080fd5b604052919050565b600067ffffffffffffffff8211156112e4578081fd5b5060209081020190565b73ffffffffffffffffffffffffffffffffffffffff8116811461131057600080fd5b5056fe608060405234801561001057600080fd5b506103c0806100206000396000f3fe6080604052600436106100655760003560e01c8063a9059cbb11610043578063a9059cbb146100ed578063dd62ed3e1461010d578063e30443bc1461012d57610065565b8063095ea7b31461006a57806327e235e3146100a057806370a08231146100cd575b600080fd5b34801561007657600080fd5b5061008a6100853660046102e8565b610142565b6040516100979190610369565b60405180910390f35b3480156100ac57600080fd5b506100c06100bb366004610292565b6101c0565b6040516100979190610374565b3480156100d957600080fd5b506100c06100e8366004610292565b6101d2565b3480156100f957600080fd5b5061008a6101083660046102e8565b6101fa565b34801561011957600080fd5b506100c06101283660046102b4565b61023d565b61014061013b3660046102e8565b610245565b005b6040517f36c8c27d00000000000000000000000000000000000000000000000000000000815260009033906336c8c27d906101839086908690600401610343565b600060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b50505050600190505b92915050565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6040517f39dd7d0900000000000000000000000000000000000000000000000000000000815260009033906339dd7d099061018390839087908790600401610312565b600092915050565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b803573ffffffffffffffffffffffffffffffffffffffff811681146101ba57600080fd5b6000602082840312156102a3578081fd5b6102ad838361026e565b9392505050565b600080604083850312156102c6578081fd5b6102d0848461026e565b91506102df846020850161026e565b90509250929050565b600080604083850312156102fa578182fd5b610304848461026e565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b901515815260200190565b9081526020019056fea365627a7a72315820991d2aee018f692a73f4061febedd7ef796c6112255c20563afaacd7b677747a6c6578706572696d656e74616cf564736f6c63430005110040a365627a7a723158203cdd56935f82c3d25ba579a2040c704257c2a1389b26095e9300dd2af648e27d6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4CEB1F13 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC2DF82E6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xD54F7D5E EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0xDC6AED19 EQ PUSH2 0x15A JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x4CEB1F13 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0xC21AB7F9 EQ PUSH2 0x11F JUMPI PUSH2 0xA3 JUMP JUMPDEST DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x36C8C27D EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x39DD7D09 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x3E7A8911 EQ PUSH2 0xF9 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xE77 JUMP JUMPDEST PUSH2 0x16D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0x108D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE4 PUSH2 0xDF CALLDATASIZE PUSH1 0x4 PUSH2 0xD25 JUMP JUMPDEST PUSH2 0x195 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE4 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0xCE5 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x107 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC1 JUMP JUMPDEST PUSH2 0x214 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xD25 JUMP JUMPDEST PUSH2 0x2A2 JUMP JUMPDEST PUSH2 0x132 PUSH2 0x12D CALLDATASIZE PUSH1 0x4 PUSH2 0xC43 JUMP JUMPDEST PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC8 SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x14D CALLDATASIZE PUSH1 0x4 PUSH2 0xC65 JUMP JUMPDEST PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x132 PUSH2 0x7C7 JUMP JUMPDEST PUSH2 0xE4 PUSH2 0x168 CALLDATASIZE PUSH1 0x4 PUSH2 0xF19 JUMP JUMPDEST PUSH2 0x7E3 JUMP JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x54B41D7666B1BDED95F272024889AC00D41CB183D6444DDE7C15DFEC6BD32FD8 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH2 0x1C6 SWAP3 SWAP2 SWAP1 PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH32 0xAE33CB06D7303F889D953BB09540983050163C1C4C98B330DB432A911CFB63FD CALLER DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH2 0x207 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xFC2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x55B3F96600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0x55B3F966 SWAP1 PUSH2 0x26C SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x10DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x29A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xE30443BC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 AND SWAP1 DUP2 SWAP1 PUSH4 0xE30443BC SWAP1 PUSH2 0x30B SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x339 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38A JUMPI PUSH1 0x40 MLOAD PUSH2 0x36A SWAP1 PUSH2 0xBB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x386 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SWAP2 OR SWAP1 SSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E7 PUSH2 0xBBE JUMP JUMPDEST PUSH2 0x3F3 DUP4 DUP6 ADD DUP6 PUSH2 0xD4F JUMP JUMPDEST DUP1 DUP3 MSTORE MLOAD PUSH1 0x2 GT ISZERO PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x431 SWAP1 PUSH2 0x1186 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP2 SWAP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 ADD SWAP1 DUP2 LT PUSH2 0x483 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x431 SWAP1 PUSH2 0x1129 JUMP JUMPDEST DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x500 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x570 JUMPI PUSH2 0x547 DUP2 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x538 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP8 PUSH2 0x829 JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x7BD JUMP JUMPDEST DUP1 MLOAD DUP1 MLOAD PUSH1 0x0 SWAP1 PUSH2 0x57D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5BD SWAP2 SWAP1 PUSH2 0xFA1 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x60D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF01 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE DUP1 MLOAD DUP1 MLOAD PUSH2 0x63E SWAP2 SWAP1 PUSH1 0x0 SWAP1 PUSH2 0x624 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x634 PUSH2 0x7C7 JUMP JUMPDEST DUP4 PUSH1 0x20 ADD MLOAD PUSH2 0x8F0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x648 PUSH2 0x7C7 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD DUP4 MLOAD PUSH1 0x40 MLOAD PUSH32 0x38ED173900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP3 SWAP4 POP PUSH1 0x60 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP3 PUSH4 0x38ED1739 SWAP3 PUSH2 0x6AC SWAP3 DUP13 SWAP2 SWAP1 DUP15 SWAP1 TIMESTAMP SWAP1 PUSH1 0x4 ADD PUSH2 0x121C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x720 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xDF0 JUMP JUMPDEST SWAP1 POP PUSH32 0x349FC08071558D8E3AA92DEC9396E4E9F2DFECD6BB9065759D1932E7DA43B8A9 DUP4 PUSH1 0x0 ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x754 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP12 DUP6 PUSH1 0x20 ADD MLOAD DUP5 PUSH1 0x1 DUP7 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x772 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP14 DUP14 PUSH1 0x40 MLOAD PUSH2 0x78E SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1020 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP3 POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH32 0x8501880051B32B53177526567603D2CA2879F4859593B2F9041358250206F6A9 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH2 0x81A SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x11E3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x861 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0x8EA DUP5 DUP3 PUSH2 0x9CC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0xDD62ED3E SWAP1 PUSH2 0x946 SWAP1 ADDRESS SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0xFF9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x972 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x996 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xF01 JUMP JUMPDEST LT ISZERO PUSH2 0x9C7 JUMPI PUSH2 0x9C7 DUP4 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH2 0xA88 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x9F5 SWAP2 SWAP1 PUSH2 0xF68 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA32 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA37 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xA7B JUMPI DUP1 MLOAD PUSH2 0xA4F JUMPI POP POP PUSH2 0xA84 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xA7B JUMPI PUSH1 0x0 PUSH2 0xA66 DUP3 PUSH1 0x0 PUSH2 0xAC0 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xA79 JUMPI POP POP POP PUSH2 0xA84 JUMP JUMPDEST POP JUMPDEST PUSH2 0x8EA DUP2 PUSH2 0xAD5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x95EA7B300000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x861 SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x1067 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xACC DUP4 DUP4 PUSH2 0xADD JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xB03 JUMPI PUSH2 0xB03 PUSH2 0xAFE PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0xB0C JUMP JUMPDEST PUSH2 0xAD5 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB2B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x10BA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3E0 DUP1 PUSH2 0x1314 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xACF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC0D JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC24 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xC3C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC54 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xC5E DUP4 DUP4 PUSH2 0xBD8 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xC7D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xC87 DUP9 DUP9 PUSH2 0xBD8 JUMP JUMPDEST SWAP6 POP PUSH2 0xC96 DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP5 POP PUSH2 0xCA5 DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCC7 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xCD3 DUP10 DUP3 DUP11 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xCF9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0xD04 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0xD14 DUP2 PUSH2 0x12EE JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD37 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xD41 DUP5 DUP5 PUSH2 0xBD8 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD61 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD77 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xD88 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP2 POP PUSH2 0xD9D PUSH2 0xD98 DUP4 PUSH2 0x12CE JUMP JUMPDEST PUSH2 0x12A7 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xDB9 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0xDE4 JUMPI DUP1 CALLDATALOAD PUSH2 0xDD0 DUP2 PUSH2 0x12EE JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xDBD JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE02 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE18 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 DUP5 ADD DUP6 PUSH1 0x1F DUP3 ADD SLT PUSH2 0xE29 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP1 MLOAD SWAP2 POP PUSH2 0xE39 PUSH2 0xD98 DUP4 PUSH2 0x12CE JUMP JUMPDEST DUP3 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP3 DUP6 ADD DUP6 DUP6 MUL DUP5 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xE55 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP4 POP JUMPDEST DUP5 DUP5 LT ISZERO PUSH2 0xDE4 JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP4 SWAP1 SWAP4 ADD SWAP3 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xE59 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE8B JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEA8 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEB4 DUP7 DUP3 DUP8 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xED3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEE9 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xEF5 DUP6 DUP3 DUP7 ADD PUSH2 0xBFC JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF12 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xF30 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH2 0xF48 DUP8 PUSH1 0x40 DUP9 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP3 POP PUSH2 0xF57 DUP8 PUSH1 0x60 DUP9 ADD PUSH2 0xBD8 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF88 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0xF6E JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0xF96 JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 AND PUSH1 0x80 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x10C8 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 PUSH1 0x20 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0x40 DUP5 ADD CALLDATACOPY DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3C SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F4C4153545F454C454D454E545F4F465F PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x504154485F4D5553545F4D415443485F4F55545055545F544F4B454E00000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E697377617056324272696467652F504154485F4C454E4754485F4D555354 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F42455F41545F4C454153545F54574F00000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x40 DUP6 ADD MSTORE AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD DUP8 DUP4 MSTORE DUP7 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0xA0 PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP7 MLOAD DUP1 DUP4 MSTORE PUSH1 0xC0 DUP6 ADD SWAP2 POP PUSH1 0x20 DUP9 ADD SWAP3 POP DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x127A JUMPI DUP4 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x1246 JUMP JUMPDEST POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 SWAP1 SWAP6 AND PUSH1 0x60 DUP5 ADD MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x12C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12E4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C0 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x65 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA9059CBB GT PUSH2 0x43 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xED JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xE30443BC EQ PUSH2 0x12D JUMPI PUSH2 0x65 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x6A JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0xA0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0xCD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x85 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x142 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x369 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0xBB CALLDATASIZE PUSH1 0x4 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x97 SWAP2 SWAP1 PUSH2 0x374 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0xE8 CALLDATASIZE PUSH1 0x4 PUSH2 0x292 JUMP JUMPDEST PUSH2 0x1D2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8A PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x1FA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC0 PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0x23D JUMP JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x2E8 JUMP JUMPDEST PUSH2 0x245 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x36C8C27D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x36C8C27D SWAP1 PUSH2 0x183 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x343 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x19D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1B1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x39DD7D0900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH4 0x39DD7D09 SWAP1 PUSH2 0x183 SWAP1 DUP4 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x312 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2A3 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2AD DUP4 DUP4 PUSH2 0x26E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2C6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x2D0 DUP5 DUP5 PUSH2 0x26E JUMP JUMPDEST SWAP2 POP PUSH2 0x2DF DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x26E JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x304 DUP5 DUP5 PUSH2 0x26E JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 SWAP10 SAR 0x2A 0xEE ADD DUP16 PUSH10 0x2A73F4061FEBEDD7EF79 PUSH13 0x6112255C20563AFAACD7B67774 PUSH27 0x6C6578706572696D656E74616CF564736F6C63430005110040A365 PUSH3 0x7A7A72 BALANCE PC KECCAK256 EXTCODECOPY 0xDD JUMP SWAP4 0x5F DUP3 0xC3 0xD2 JUMPDEST 0xA5 PUSH26 0xA2040C704257C2A1389B26095E9300DD2AF648E27D6C65787065 PUSH19 0x696D656E74616CF564736F6C63430005110040 ",
                "sourceMap": "4584:1504:47:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4584:1504:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4476:192:20;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1592:126:47;;;;;;;;;:::i;:::-;;1342:244;;;;;;;;;:::i;4904:140::-;;;;;;;;;:::i;5171:195::-;;;;;;;;;:::i;5481:317::-;;;;;;;;;:::i;:::-;;;;;;;;1984:2292:20;;;;;;;;;:::i;5804:132:47:-;;;:::i;1724:363::-;;;;;;;;;:::i;4476:192:20:-;4636:25;4476:192;;;;;:::o;1592:126:47:-;1679:32;1692:7;1701:9;1679:32;;;;;;;;;;;;;;;;1592:126;;:::o;1342:244::-;1478:101;1505:10;1529:4;1547:2;1563:6;1478:101;;;;;;;;;;;;;;;;;;1342:244;;;:::o;4904:140::-;4996:11;;:41;;;;;:11;;;;;:27;;:41;;5024:12;;;;4996:41;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4996:41:47;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4996:41:47;;;;4904:140;;:::o;5171:195::-;5284:25;;;;5266:15;5284:25;;;;;;;;;;;;;5319:40;;;;;5284:25;;;;;5319:16;;:40;;5344:4;;5351:7;;5319:40;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5319:40:47;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5319:40:47;;;;5171:195;;;:::o;5481:317::-;5621:12;5648:26;;;5644:80;;5698:15;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5698:15:47;5690:23;;5644:80;5733:27;;;:11;:27;;;;;;;;;;:35;;;;;;;;;5481:317;;;:::o;1984:2292:20:-;2185:14;2279:26;;:::i;:::-;2428:35;;;;2439:10;2428:35;;;2415:48;;;2515:17;2536:1;-1:-1:-1;2515:22:20;2507:83;;;;;;;;;;;;;;;;;;;;;;2608:10;;2619:17;;2608:51;;;;:10;2619:21;;;;2608:33;;;;;;;;;;;;:51;;;2600:124;;;;;;;;;;;;;;2813:14;2796:31;;:5;:10;;;2807:1;2796:13;;;;;;;;;;;;;;:31;;;2792:146;;;2843:49;2866:5;:10;;;2877:1;2866:13;;;;;;;;;;;;;;2881:2;2885:6;2843:22;:49::i;:::-;-1:-1:-1;2913:14:20;;-1:-1:-1;2906:21:20;;2792:146;3041:10;;:13;;:10;;:13;;;;;;;;;;3029:36;;;3074:4;3029:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3029:51:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3029:51:20;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3029:51:20;;;;;;;;;3004:22;;;:76;3183:10;;:13;;3141:145;;3183:10;;;:13;;;;;;;;;;3210:30;:28;:30::i;:::-;3254:5;:22;;;3141:28;:145::i;:::-;3409:25;3456:30;:28;:30::i;:::-;3607:22;;;;3762:10;;3521:381;;;;;3409:78;;-1:-1:-1;3497:21:20;;3521:31;;;;;;:381;;3679:6;;3762:10;3820:2;;3877:15;;3521:381;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3521:381:20;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3521:381:20;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3521:381:20;80:15:-1;;;97:9;76:31;65:43;;120:4;113:20;3521:381:20;;;;;;;;;3497:405;;3918:319;3978:5;:10;;;3989:1;3978:13;;;;;;;;;;;;;;4033:14;4095:5;:22;;;4166:7;4191:1;4174:7;:14;:18;4166:27;;;;;;;;;;;;;;4207:4;4225:2;3918:319;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4255:14:20;;-1:-1:-1;;;1984:2292:20;;;;;;;;;:::o;5804:132:47:-;5917:11;;;;5804:132;:::o;1724:363::-;1927:153;1970:8;1992:12;2018:14;2046:2;2062:8;1927:153;;;;;;;;;;;;;;;;;;;1724:363;;;;;:::o;2581:324:50:-;2727:114;;2703:21;;2763:32;;2727:114;;2809:2;;2825:6;;2727:114;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2727:114:50;;;49:4:-1;25:18;;61:17;;2727:114:50;182:15:-1;2727:114:50;;;;179:29:-1;;;;160:49;;;2727:114:50;-1:-1:-1;2851:47:50;2882:5;2727:114;2851:30;:47::i;:::-;2581:324;;;;:::o;1978:267::-;2115:52;;;;;2170:6;;2115:28;;;;;;:52;;2152:4;;2159:7;;2115:52;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2115:52:50;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2115:52:50;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2115:52:50;;;;;;;;;:61;2111:128;;;2192:36;2200:5;2207:7;2224:2;2192:7;:36::i;:::-;1978:267;;;:::o;6120:571::-;6252:15;6269:23;6296:6;:11;;6308:8;6296:21;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6251:66:50;;;;6331:10;6327:315;;;6361:17;;6357:67;;6403:7;;;;6357:67;6441:10;:17;6462:2;6441:23;6437:195;;;6484:14;6501:35;6522:10;6534:1;6501:20;:35::i;:::-;6484:52;;6558:6;6568:1;6558:11;6554:64;;;6593:7;;;;;6554:64;6437:195;;6651:33;6673:10;6651:21;:33::i;6120:571::-;;;:::o;1194:338::-;1347:121;;1323:21;;1383:31;;1347:121;;1428:7;;1449:9;;1347:121;;;;15929:220:64;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;:::-;16089:30;-1:-1:-1;15929:220:64;;;;;:::o;1511:170:69:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;14133:679:64;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;:::-;14325:21;:245::i;:::-;-1:-1:-1;14759:13:64;14661:2;14759:13;14753:20;;14133:679::o;1292:378:65:-;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1515:148:65;;;49:4:-1;25:18;;61:17;;1515:148:65;182:15:-1;1515:148:65;;;;179:29:-1;;;;160:49;;;1515:148:65;-1:-1:-1;1292:378:65;;;;;:::o;4584:1504:47:-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;19405:42;19394:54;;21129:35;;21119:2;;21178:1;;21168:12;1766:336;;;1880:3;1873:4;1865:6;1861:17;1857:27;1847:2;;-1:-1;;1888:12;1847:2;-1:-1;1918:20;;1958:18;1947:30;;1944:2;;;-1:-1;;1980:12;1944:2;2024:4;2016:6;2012:17;2000:29;;2075:3;2024:4;2055:17;2016:6;2041:32;;2038:41;2035:2;;;2092:1;;2082:12;2035:2;1840:262;;;;;;2748:241;;2852:2;2840:9;2831:7;2827:23;2823:32;2820:2;;;-1:-1;;2858:12;2820:2;2920:53;2965:7;2941:22;2920:53;;;2910:63;2814:175;-1:-1;;;2814:175;2996:867;;;;;;;3187:3;3175:9;3166:7;3162:23;3158:33;3155:2;;;-1:-1;;3194:12;3155:2;3256:53;3301:7;3277:22;3256:53;;;3246:63;;3364:53;3409:7;3346:2;3389:9;3385:22;3364:53;;;3354:63;;3472:53;3517:7;3454:2;3497:9;3493:22;3472:53;;;3462:63;;3562:2;3605:9;3601:22;2537:20;3570:63;;3698:3;3687:9;3683:19;3670:33;3723:18;3715:6;3712:30;3709:2;;;-1:-1;;3745:12;3709:2;3783:64;3839:7;3830:6;3819:9;3815:22;3783:64;;;3149:714;;;;-1:-1;3149:714;;-1:-1;3149:714;;3773:74;;3149:714;-1:-1;;;3149:714;3870:491;;;;4008:2;3996:9;3987:7;3983:23;3979:32;3976:2;;;-1:-1;;4014:12;3976:2;85:6;72:20;97:33;124:5;97:33;;;4066:63;-1:-1;4166:2;4205:22;;72:20;97:33;72:20;97:33;;;3970:391;;4174:63;;-1:-1;;;4274:2;4313:22;;;;2537:20;;3970:391;4368:366;;;4489:2;4477:9;4468:7;4464:23;4460:32;4457:2;;;-1:-1;;4495:12;4457:2;4557:53;4602:7;4578:22;4557:53;;;4547:63;4647:2;4686:22;;;;2537:20;;-1:-1;;;4451:283;4741:369;;4866:2;;4854:9;4845:7;4841:23;4837:32;4834:2;;;-1:-1;;4872:12;4834:2;4930:17;4917:31;4968:18;4960:6;4957:30;4954:2;;;-1:-1;;4990:12;4954:2;5077:6;5066:9;5062:22;273:3;266:4;258:6;254:17;250:27;240:2;;-1:-1;;281:12;240:2;328:6;315:20;301:34;;350:76;365:60;418:6;365:60;;;350:76;;;454:21;;;511:14;;;;486:17;;;600;;;591:27;;;;588:36;-1:-1;585:2;;;-1:-1;;627:12;585:2;-1:-1;653:10;;647:206;672:6;669:1;666:13;647:206;;;85:6;72:20;97:33;124:5;97:33;;;740:50;;694:1;687:9;;;;;804:14;;;;832;;647:206;;;-1:-1;5010:84;4828:282;-1:-1;;;;;;;4828:282;5117:392;;5257:2;;5245:9;5236:7;5232:23;5228:32;5225:2;;;-1:-1;;5263:12;5225:2;5314:17;5308:24;5352:18;5344:6;5341:30;5338:2;;;-1:-1;;5374:12;5338:2;5476:6;5465:9;5461:22;1013:3;1006:4;998:6;994:17;990:27;980:2;;-1:-1;;1021:12;980:2;1061:6;1055:13;1041:27;;1083:80;1098:64;1155:6;1098:64;;1083:80;1191:21;;;1248:14;;;;1223:17;;;1337;;;1328:27;;;;1325:36;-1:-1;1322:2;;;-1:-1;;1364:12;1322:2;-1:-1;1390:10;;1384:217;1409:6;1406:1;1403:13;1384:217;;;2685:13;;1477:61;;1431:1;1424:9;;;;;1552:14;;;;1580;;1384:217;;5516:490;;;;5656:2;5644:9;5635:7;5631:23;5627:32;5624:2;;;-1:-1;;5662:12;5624:2;1695:6;1682:20;5714:63;;5842:2;5831:9;5827:18;5814:32;5866:18;5858:6;5855:30;5852:2;;;-1:-1;;5888:12;5852:2;5926:64;5982:7;5973:6;5962:9;5958:22;5926:64;;;5618:388;;5916:74;;-1:-1;5916:74;;-1:-1;;;;5618:388;6013:367;;;6137:2;6125:9;6116:7;6112:23;6108:32;6105:2;;;-1:-1;;6143:12;6105:2;6201:17;6188:31;6239:18;6231:6;6228:30;6225:2;;;-1:-1;;6261:12;6225:2;6299:65;6356:7;6347:6;6336:9;6332:22;6299:65;;;6289:75;;;;-1:-1;6099:281;-1:-1;;;;6099:281;6387:263;;6502:2;6490:9;6481:7;6477:23;6473:32;6470:2;;;-1:-1;;6508:12;6470:2;-1:-1;2685:13;;6464:186;-1:-1;6464:186;6657:743;;;;;;6829:3;6817:9;6808:7;6804:23;6800:33;6797:2;;;-1:-1;;6836:12;6797:2;2550:6;2537:20;6888:63;;6988:2;7031:9;7027:22;2537:20;6996:63;;7114:53;7159:7;7096:2;7139:9;7135:22;7114:53;;;7104:63;;7222:53;7267:7;7204:2;7247:9;7243:22;7222:53;;;6791:609;;;;-1:-1;6791:609;;7312:3;7352:22;2537:20;;6791:609;-1:-1;;6791:609;10784:262;;8958:5;18027:12;-1:-1;20627:101;20641:6;20638:1;20635:13;20627:101;;;9102:4;20708:11;;;;;20702:18;20689:11;;;20682:39;20656:10;20627:101;;;20743:6;20740:1;20737:13;20734:2;;;-1:-1;20799:6;20794:3;20790:16;20783:27;20734:2;-1:-1;9133:16;;;;;10909:137;-1:-1;;10909:137;11053:213;19405:42;19394:54;;;;7799:37;;11171:2;11156:18;;11142:124;11273:563;19405:42;19394:54;;;7668:58;;19394:54;;;11656:2;11641:18;;7799:37;19394:54;;11739:2;11724:18;;7799:37;11822:2;11807:18;;10735:37;;;;11483:3;11468:19;;11454:382;11843:324;19405:42;19394:54;;;7799:37;;19394:54;;12153:2;12138:18;;7799:37;11989:2;11974:18;;11960:207;12174:771;19405:42;19394:54;;;7799:37;;19394:54;;;12597:2;12582:18;;7799:37;12680:2;12665:18;;10735:37;;;;12763:2;12748:18;;10735:37;;;;19394:54;;12846:3;12831:19;;7799:37;19394:54;;;12930:3;12915:19;;7799:37;12432:3;12417:19;;12403:542;12952:324;19405:42;19394:54;;;;7799:37;;13262:2;13247:18;;10735:37;13098:2;13083:18;;13069:207;13283:209;19068:66;19057:78;;;;8750:36;;13399:2;13384:18;;13370:122;13755:503;13963:2;13948:18;;21041:1;21031:12;;21021:2;;21047:9;21021:2;9435:84;;;14161:2;14146:18;;10735:37;;;;14244:2;14229:18;;;10735:37;13934:324;;14265:321;;14413:2;14434:17;14427:47;18438:6;14413:2;14402:9;14398:18;18426:19;20482:6;20477:3;18466:14;14402:9;18466:14;20459:30;20520:16;;;18466:14;20520:16;;;20513:27;;;;20919:2;20899:14;;;20915:7;20895:28;9811:39;;;14384:202;-1:-1;14384:202;14593:407;14784:2;14798:47;;;10089:2;14769:18;;;18426:19;10125:34;18466:14;;;10105:55;10194:30;10180:12;;;10173:52;10244:12;;;14755:245;15007:407;15198:2;15212:47;;;10495:2;15183:18;;;18426:19;10531:34;18466:14;;;10511:55;10600:18;10586:12;;;10579:40;10638:12;;;15169:245;15421:659;10735:37;;;15816:2;15801:18;;10735:37;;;;19405:42;19394:54;;;15899:2;15884:18;;7799:37;19394:54;15982:2;15967:18;;7799:37;16065:3;16050:19;;10735:37;15651:3;15636:19;;15622:458;16087:799;;16363:3;16352:9;16348:19;10765:5;10742:3;10735:37;10765:5;16528:2;16517:9;16513:18;10735:37;16363:3;16565:2;16554:9;16550:18;16543:48;16605:104;8184:5;18027:12;18438:6;18433:3;18426:19;18466:14;16352:9;18466:14;8196:93;;16528:2;8356:5;17885:14;8368:21;;-1:-1;8395:256;8420:6;8417:1;8414:13;8395:256;;;8481:13;;19405:42;19394:54;7799:37;;16528:2;18281:14;;;;7561;;;;8442:1;8435:9;8395:256;;;-1:-1;;19405:42;19394:54;;;;16788:2;16773:18;;7799:37;-1:-1;;16871:3;16856:19;10735:37;16597:112;16334:552;-1:-1;;;16334:552;16893:256;16955:2;16949:9;16981:17;;;17056:18;17041:34;;17077:22;;;17038:62;17035:2;;;17113:1;;17103:12;17035:2;16955;17122:22;16933:216;;-1:-1;16933:216;17156:300;;17311:18;17303:6;17300:30;17297:2;;;-1:-1;;17333:12;17297:2;-1:-1;17378:4;17366:17;;;17431:15;;17234:222;21070:117;19405:42;21157:5;19394:54;21132:5;21129:35;21119:2;;21178:1;;21168:12;21119:2;21113:74;"
            }
        }
    },
    "sourceTreeHashHex": "0xd7835c9c60c76bdd66af1feec550446d1f0ef05e524890a359a87aba8855c15f",
    "sources": {
        "./TestUniswapV2Bridge.sol": {
            "id": 47
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 51
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 70
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 69
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 71
        },
        "@0x/contracts-utils/contracts/src/LibAddressArray.sol": {
            "id": 61
        },
        "@0x/contracts-utils/contracts/src/LibAddressArrayRichErrors.sol": {
            "id": 62
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 64
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 65
        },
        "../src/bridges/UniswapV2Bridge.sol": {
            "id": 20
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": {
            "id": 52
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 50
        },
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
            "id": 53
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 60
        },
        "../src/interfaces/IUniswapV2Router01.sol": {
            "id": 37
        },
        "../src/interfaces/IERC20Bridge.sol": {
            "id": 31
        }
    },
    "sourceCodes": {
        "./TestUniswapV2Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"../src/bridges/UniswapV2Bridge.sol\";\nimport \"../src/interfaces/IUniswapV2Router01.sol\";\n\n\ncontract TestEventsRaiser {\n\n    event TokenTransfer(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    );\n\n    event TokenApprove(\n        address spender,\n        uint256 allowance\n    );\n\n    event SwapExactTokensForTokensInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        uint deadline\n    );\n\n    function raiseTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    )\n        external\n    {\n        emit TokenTransfer(\n            msg.sender,\n            from,\n            to,\n            amount\n        );\n    }\n\n    function raiseTokenApprove(address spender, uint256 allowance) external {\n        emit TokenApprove(spender, allowance);\n    }\n\n    function raiseSwapExactTokensForTokensInput(\n        uint amountIn,\n        uint amountOutMin,\n        address toTokenAddress,\n        address to,\n        uint deadline\n    ) external\n    {\n        emit SwapExactTokensForTokensInput(\n            amountIn,\n            amountOutMin,\n            toTokenAddress,\n            to,\n            deadline\n        );\n    }\n}\n\n\n/// @dev A minimalist ERC20 token.\ncontract TestToken {\n\n    using LibSafeMath for uint256;\n\n    mapping (address => uint256) public balances;\n    string private _nextRevertReason;\n\n    /// @dev Set the balance for `owner`.\n    function setBalance(address owner, uint256 balance)\n        external\n        payable\n    {\n        balances[owner] = balance;\n    }\n\n    /// @dev Just emits a TokenTransfer event on the caller\n    function transfer(address to, uint256 amount)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenTransfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @dev Just emits a TokenApprove event on the caller\n    function approve(address spender, uint256 allowance)\n        external\n        returns (bool)\n    {\n        TestEventsRaiser(msg.sender).raiseTokenApprove(spender, allowance);\n        return true;\n    }\n\n    function allowance(address, address) external view returns (uint256) {\n        return 0;\n    }\n\n    /// @dev Retrieve the balance for `owner`.\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256)\n    {\n        return balances[owner];\n    }\n}\n\n\n/// @dev Mock the UniswapV2Router01 contract\ncontract TestRouter is\n    IUniswapV2Router01\n{\n    string private _nextRevertReason;\n\n    /// @dev Set the revert reason for `swapExactTokensForTokens`.\n    function setRevertReason(string calldata reason)\n        external\n    {\n        _nextRevertReason = reason;\n    }\n\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts)\n    {\n        _revertIfReasonExists();\n\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        amounts[amounts.length - 1] = amountOutMin;\n\n        TestEventsRaiser(msg.sender).raiseSwapExactTokensForTokensInput(\n            // tokens sold\n            amountIn,\n            // tokens bought\n            amountOutMin,\n            // output token (toTokenAddress)\n            path[path.length - 1],\n            // recipient\n            to,\n            // deadline\n            deadline\n        );\n    }\n\n    function _revertIfReasonExists()\n        private\n        view\n    {\n        if (bytes(_nextRevertReason).length != 0) {\n            revert(_nextRevertReason);\n        }\n    }\n\n}\n\n\n/// @dev UniswapV2Bridge overridden to mock tokens and Uniswap router\ncontract TestUniswapV2Bridge is\n    UniswapV2Bridge,\n    TestEventsRaiser\n{\n\n    // Token address to TestToken instance.\n    mapping (address => TestToken) private _testTokens;\n    // TestRouter instance.\n    TestRouter private _testRouter;\n\n    constructor() public {\n        _testRouter = new TestRouter();\n    }\n\n    function setRouterRevertReason(string calldata revertReason)\n        external\n    {\n        _testRouter.setRevertReason(revertReason);\n    }\n\n    /// @dev Sets the balance of this contract for an existing token.\n    ///      The wei attached will be the balance.\n    function setTokenBalance(address tokenAddress, uint256 balance)\n        external\n    {\n        TestToken token = _testTokens[tokenAddress];\n        token.setBalance(address(this), balance);\n    }\n\n    /// @dev Create a new token\n    /// @param tokenAddress The token address. If zero, one will be created.\n    function createToken(\n        address tokenAddress\n    )\n        external\n        returns (TestToken token)\n    {\n        token = TestToken(tokenAddress);\n        if (tokenAddress == address(0)) {\n            token = new TestToken();\n        }\n        _testTokens[address(token)] = token;\n\n        return token;\n    }\n\n    function getRouterAddress()\n        external\n        view\n        returns (address)\n    {\n        return address(_testRouter);\n    }\n\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address)\n    {\n        return address(_testRouter);\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibAddressArray.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibAddressArrayRichErrors.sol\";\nimport \"./LibBytes.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibAddressArray {\n\n    /// @dev Append a new address to an array of addresses.\n    ///      The `addressArray` may need to be reallocated to make space\n    ///      for the new address. Because of this we return the resulting\n    ///      memory location of `addressArray`.\n    /// @param addressArray Array of addresses.\n    /// @param addressToAppend  Address to append.\n    /// @return Array of addresses: [... addressArray, addressToAppend]\n    function append(address[] memory addressArray, address addressToAppend)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        // Get stats on address array and free memory\n        uint256 freeMemPtr = 0;\n        uint256 addressArrayBeginPtr = 0;\n        uint256 addressArrayEndPtr = 0;\n        uint256 addressArrayLength = addressArray.length;\n        uint256 addressArrayMemSizeInBytes = 32 + (32 * addressArrayLength);\n        assembly {\n            freeMemPtr := mload(0x40)\n            addressArrayBeginPtr := addressArray\n            addressArrayEndPtr := add(addressArray, addressArrayMemSizeInBytes)\n        }\n\n        // Cases for `freeMemPtr`:\n        //  `freeMemPtr` == `addressArrayEndPtr`: Nothing occupies memory after `addressArray`\n        //  `freeMemPtr` > `addressArrayEndPtr`: Some value occupies memory after `addressArray`\n        //  `freeMemPtr` < `addressArrayEndPtr`: Memory has not been managed properly.\n        if (freeMemPtr < addressArrayEndPtr) {\n            LibRichErrors.rrevert(LibAddressArrayRichErrors.MismanagedMemoryError(\n                freeMemPtr,\n                addressArrayEndPtr\n            ));\n        }\n\n        // If free memory begins at the end of `addressArray`\n        // then we can append `addressToAppend` directly.\n        // Otherwise, we must copy the array to free memory\n        // before appending new values to it.\n        if (freeMemPtr > addressArrayEndPtr) {\n            LibBytes.memCopy(freeMemPtr, addressArrayBeginPtr, addressArrayMemSizeInBytes);\n            assembly {\n                addressArray := freeMemPtr\n                addressArrayBeginPtr := addressArray\n            }\n        }\n\n        // Append `addressToAppend`\n        addressArrayLength += 1;\n        addressArrayMemSizeInBytes += 32;\n        addressArrayEndPtr = addressArrayBeginPtr + addressArrayMemSizeInBytes;\n        freeMemPtr = addressArrayEndPtr;\n        assembly {\n            // Store new array length\n            mstore(addressArray, addressArrayLength)\n\n            // Update `freeMemPtr`\n            mstore(0x40, freeMemPtr)\n        }\n        addressArray[addressArrayLength - 1] = addressToAppend;\n        return addressArray;\n    }\n\n    /// @dev Checks if an address array contains the target address.\n    /// @param addressArray Array of addresses.\n    /// @param target Address to search for in array.\n    /// @return True if the addressArray contains the target.\n    function contains(address[] memory addressArray, address target)\n        internal\n        pure\n        returns (bool success)\n    {\n        assembly {\n\n            // Calculate byte length of array\n            let arrayByteLen := mul(mload(addressArray), 32)\n            // Calculate beginning of array contents\n            let arrayContentsStart := add(addressArray, 32)\n            // Calclulate end of array contents\n            let arrayContentsEnd := add(arrayContentsStart, arrayByteLen)\n\n            // Loop through array\n            for {let i:= arrayContentsStart} lt(i, arrayContentsEnd) {i := add(i, 32)} {\n\n                // Load array element\n                let arrayElement := mload(i)\n\n                // Return true if array element equals target\n                if eq(target, arrayElement) {\n                    // Set success to true\n                    success := 1\n                    // Break loop\n                    i := arrayContentsEnd\n                }\n            }\n        }\n        return success;\n    }\n\n    /// @dev Finds the index of an address within an array.\n    /// @param addressArray Array of addresses.\n    /// @param target Address to search for in array.\n    /// @return Existence and index of the target in the array.\n    function indexOf(address[] memory addressArray, address target)\n        internal\n        pure\n        returns (bool success, uint256 index)\n    {\n        assembly {\n\n            // Calculate byte length of array\n            let arrayByteLen := mul(mload(addressArray), 32)\n            // Calculate beginning of array contents\n            let arrayContentsStart := add(addressArray, 32)\n            // Calclulate end of array contents\n            let arrayContentsEnd := add(arrayContentsStart, arrayByteLen)\n\n            // Loop through array\n            for {let i:= arrayContentsStart} lt(i, arrayContentsEnd) {i := add(i, 32)} {\n\n                // Load array element\n                let arrayElement := mload(i)\n\n                // Return true if array element equals target\n                if eq(target, arrayElement) {\n                    // Set success and index\n                    success := 1\n                    index := div(sub(i, arrayContentsStart), 32)\n                    // Break loop\n                    i := arrayContentsEnd\n                }\n            }\n        }\n        return (success, index);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibAddressArrayRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibAddressArrayRichErrors {\n\n    // bytes4(keccak256(\"MismanagedMemoryError(uint256,uint256)\"))\n    bytes4 internal constant MISMANAGED_MEMORY_ERROR_SELECTOR =\n        0x5fc83722;\n\n    // solhint-disable func-name-mixedcase\n    function MismanagedMemoryError(\n        uint256 freeMemPtr,\n        uint256 addressArrayEndPtr\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            MISMANAGED_MEMORY_ERROR_SELECTOR,\n            freeMemPtr,\n            addressArrayEndPtr\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "../src/bridges/UniswapV2Bridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol\";\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibAddressArray.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"../interfaces/IUniswapV2Router01.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract UniswapV2Bridge is\n    IERC20Bridge,\n    IWallet,\n    DeploymentConstants\n{\n    struct TransferState {\n        address[] path;\n        uint256 fromTokenBalance;\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `amount` of\n    ///      `toTokenAddress` tokens by selling the entirety of the `fromTokenAddress`\n    ///      token encoded in the bridge data.\n    /// @param toTokenAddress The token to buy and transfer to `to`.\n    /// @param from The maker (this contract).\n    /// @param to The recipient of the bought tokens.\n    /// @param amount Minimum amount of `toTokenAddress` tokens to buy.\n    /// @param bridgeData The abi-encoded path of token addresses. Last element must be toTokenAddress\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address toTokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        // hold variables to get around stack depth limitations\n        TransferState memory state;\n\n        // Decode the bridge data to get the `fromTokenAddress`.\n        // solhint-disable indent\n        state.path = abi.decode(bridgeData, (address[]));\n        // solhint-enable indent\n\n        require(state.path.length >= 2, \"UniswapV2Bridge/PATH_LENGTH_MUST_BE_AT_LEAST_TWO\");\n        require(state.path[state.path.length - 1] == toTokenAddress, \"UniswapV2Bridge/LAST_ELEMENT_OF_PATH_MUST_MATCH_OUTPUT_TOKEN\");\n\n        // Just transfer the tokens if they're the same.\n        if (state.path[0] == toTokenAddress) {\n            LibERC20Token.transfer(state.path[0], to, amount);\n            return BRIDGE_SUCCESS;\n        }\n\n        // Get our balance of `fromTokenAddress` token.\n        state.fromTokenBalance = IERC20Token(state.path[0]).balanceOf(address(this));\n\n        // Grant the Uniswap router an allowance.\n        LibERC20Token.approveIfBelow(\n            state.path[0],\n            _getUniswapV2Router01Address(),\n            state.fromTokenBalance\n        );\n\n        // Buy as much `toTokenAddress` token with `fromTokenAddress` token\n        // and transfer it to `to`.\n        IUniswapV2Router01 router = IUniswapV2Router01(_getUniswapV2Router01Address());\n        uint[] memory amounts = router.swapExactTokensForTokens(\n             // Sell all tokens we hold.\n            state.fromTokenBalance,\n             // Minimum buy amount.\n            amount,\n            // Convert `fromTokenAddress` to `toTokenAddress`.\n            state.path,\n            // Recipient is `to`.\n            to,\n            // Expires after this block.\n            block.timestamp\n        );\n\n        emit ERC20BridgeTransfer(\n            // input token\n            state.path[0],\n            // output token\n            toTokenAddress,\n            // input token amount\n            state.fromTokenBalance,\n            // output token amount\n            amounts[amounts.length - 1],\n            from,\n            to\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n\n    // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "../src/interfaces/IUniswapV2Router01.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ninterface IUniswapV2Router01 {\n\n    /// @dev Swaps an exact amount of input tokens for as many output tokens as possible, along the route determined by the path.\n    ///      The first element of path is the input token, the last is the output token, and any intermediate elements represent\n    ///      intermediate pairs to trade through (if, for example, a direct pair does not exist).\n    /// @param amountIn The amount of input tokens to send.\n    /// @param amountOutMin The minimum amount of output tokens that must be received for the transaction not to revert.\n    /// @param path An array of token addresses. path.length must be >= 2. Pools for each consecutive pair of addresses must exist and have liquidity.\n    /// @param to Recipient of the output tokens.\n    /// @param deadline Unix timestamp after which the transaction will revert.\n    /// @return amounts The input token amount and all subsequent output token amounts.\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n",
        "../src/interfaces/IERC20Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc1155=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc1155",
                "@0x/contracts-erc20=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20",
                "@0x/contracts-exchange-libs=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/michaelzhu/monorepo/node_modules/@0x/contracts-exchange"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
