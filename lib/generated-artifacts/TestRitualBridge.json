{
    "schemaVersion": "2.0.0",
    "contractName": "TestRitualBridge",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "weth",
                        "type": "address"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "inputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "outputToken",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "inputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "outputTokenAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "from",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "to",
                        "type": "address"
                    }
                ],
                "name": "ERC20BridgeTransfer",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "takerAssetFillAmount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "msgValue",
                        "type": "uint256"
                    }
                ],
                "name": "MarketSellCalled",
                "type": "event"
            },
            {
                "payable": true,
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "BUY_WINDOW_LENGTH",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [],
                "name": "MIN_INTERVAL_LENGTH",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "taker",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "makerAssetAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bytes",
                        "name": "bridgeData",
                        "type": "bytes"
                    }
                ],
                "name": "bridgeTransferFrom",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "success",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    }
                ],
                "name": "cancelRecurringBuy",
                "outputs": [],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "recipient",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    }
                ],
                "name": "flashArbitrage",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "amountBought",
                        "type": "uint256"
                    }
                ],
                "payable": false,
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "",
                        "type": "bytes"
                    }
                ],
                "name": "isValidSignature",
                "outputs": [
                    {
                        "internalType": "bytes4",
                        "name": "magicValue",
                        "type": "bytes4"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": true,
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "",
                        "type": "bytes32"
                    }
                ],
                "name": "recurringBuys",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "interval",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "maxSlippageBps",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "currentBuyWindowStart",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "currentIntervalAmountSold",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "unwrapWeth",
                        "type": "bool"
                    }
                ],
                "payable": false,
                "stateMutability": "view",
                "type": "function"
            },
            {
                "constant": false,
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "sellToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "buyToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "interval",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "minBuyAmount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "maxSlippageBps",
                        "type": "uint256"
                    },
                    {
                        "internalType": "bool",
                        "name": "unwrapWeth",
                        "type": "bool"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct LibOrder.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "signatures",
                        "type": "bytes[]"
                    }
                ],
                "name": "setRecurringBuy",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "recurringBuyID",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "uint256",
                        "name": "amountBought",
                        "type": "uint256"
                    }
                ],
                "payable": true,
                "stateMutability": "payable",
                "type": "function"
            }
        ],
        "devdoc": {
            "methods": {
                "bridgeTransferFrom(address,address,address,uint256,bytes)": {
                    "details": "Callback for `IERC20Bridge`. Tries to buy `makerAssetAmount` of      `makerToken` by selling the entirety of the `takerToken`      encoded in the bridge data.",
                    "params": {
                        "bridgeData": "ABI-encoded addresses of the taker token and        recurring buyer for whom the bridge order was created.",
                        "makerAssetAmount": "Minimum amount of `makerToken` to buy.",
                        "makerToken": "The token to buy and transfer to `to`.",
                        "taker": "The recipient of the bought tokens."
                    },
                    "return": "success The magic bytes if successful."
                },
                "isValidSignature(bytes32,bytes)": {
                    "details": "`SignatureType.Wallet` callback, so that this bridge can be the maker      and sign for itself in orders. Always succeeds.",
                    "return": "magicValue Success bytes, always."
                }
            }
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60806040526000805460ff191690553480156200001b57600080fd5b5060405162002535380380620025358339810160408190526200003e91620000c6565b600280546001600160a01b0319908116909155600380549091166001600160a01b0383161790556040516200007390620000b8565b604051809103906000f08015801562000090573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039290921691909117905550620000f6565b6105e78062001f4e83390190565b600060208284031215620000d8578081fd5b81516001600160a01b0381168114620000ef578182fd5b9392505050565b611e4880620001066000396000f3fe60806040526004361061007b5760003560e01c8063c2df82e61161004e578063c2df82e614610133578063c47391f514610153578063ee9f173014610174578063f5f2e6a3146101745761007b565b8063065f00141461007d57806315344a93146100b95780631626ba7e146100e65780635bb30cfb14610113575b005b34801561008957600080fd5b5061009d610098366004611644565b610189565b6040516100b09796959493929190611d3e565b60405180910390f35b3480156100c557600080fd5b506100d96100d43660046114b8565b6101c8565b6040516100b09190611d1f565b3480156100f257600080fd5b5061010661010136600461165c565b610205565b6040516100b091906119ea565b34801561011f57600080fd5b5061007b61012e366004611480565b61022e565b34801561013f57600080fd5b5061010661014e366004611502565b6102da565b610166610161366004611585565b61042a565b6040516100b09291906119dc565b34801561018057600080fd5b506100d96105d5565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492939192909160ff1687565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611c65565b60405180910390fd5b7fb0671381000000000000000000000000000000000000000000000000000000005b9392505050565b600033838360405160200161024593929190611899565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600192839052908120818155918201819055600282018190556003820181905560048201819055600582015560060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b600080806102ea84860186611480565b9150915060006102fa83306105dc565b9050600061030b828985878f610726565b905080156103e3576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90610365908590600401611d1f565b600060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505060405185925073ffffffffffffffffffffffffffffffffffffffff8316915084156108fc029085906000818181858888f193505050501580156103dc573d6000803e3d6000fd5b50506103ee565b6103ee8484846109c3565b6103fa8b848b8b610a8a565b507fdc1600f3000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b6000806201518088101561046a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611b4d565b8973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156104d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611cc2565b338b8b6040516020016104e593929190611899565b6040516020818303038152906040528051906020012091506000808551111561051b576105168c8c8c88888b610b54565b925090505b6040805160e0810182528b815260208082018c81528284018c8152606084018c8152426080860190815260a086019788528c151560c0870190815260008b81526001968790529790972095518655925193850193909355516002840155905160038301555160048201559151600583015551600690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556105c7610d49565b995099975050505050505050565b6201518081565b604051600090819060609073ffffffffffffffffffffffffffffffffffffffff8616907f70a08231000000000000000000000000000000000000000000000000000000009061062f908790602401611878565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106b8919061185c565b600060405180830381855afa9150503d80600081146106f3576040519150601f19603f3d011682016040523d82523d6000602084013e6106f8565b606091505b509150915081801561070b575080516020145b1561071e5761071b816000610d5f565b92505b505092915050565b60008084838560405160200161073e93929190611899565b60405160208183030381529060405280519060200120905061075e611126565b50600081815260016020818152604092839020835160e081018552815480825293820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260069092015460ff16151560c08301526107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611aca565b600061080e8883600001518460400151610d74565b90508089101561084a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611c08565b6080820151610862906201518063ffffffff610dc116565b4210156108e457815160a0830151610880908a63ffffffff610dc116565b11156108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611baa565b60a08201516108cd908963ffffffff610dc116565b60008481526001602052604090206005015561095e565b620151808260200151610904846080015142610ddd90919063ffffffff16565b8161090b57fe5b0610610943576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611a47565b60008381526001602052604090204260048201556005018890555b610966610dfc565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156109a157508160c001515b156109b257600193505050506109ba565b600093505050505b95945050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906109fb90859085906024016118fa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610a848482610e18565b50505050565b6040516060907f23b872dd0000000000000000000000000000000000000000000000000000000090610ac4908690869086906024016118c9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610b4d8582610e18565b5050505050565b600080610b6388333089610a8a565b6000610b6f89306105dc565b6002546040517f369da09900000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063369da099903490610bcc908a908c908b90600401611920565b60a0604051808303818588803b158015610be557600080fd5b505af1158015610bf9573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250610c1e91908101906116a6565b506000610c2b8a306105dc565b9050610c388a33836109c3565b610c48828263ffffffff610ddd16565b9350610c5489306105dc565b925082610c635750610d3e9050565b848015610ca25750610c73610dfc565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b15610d30576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690632e1a7d4d90610cf9908690600401611d1f565b600060405180830381600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b50505050610d3b565b610d3b8933856109c3565b50505b965096945050505050565b610d51610ed4565b610d5d57610d5d610ee2565b565b6000610d6b8383610f19565b90505b92915050565b6000610d81848484610f43565b15610d9957610d99610d94858585610fa9565b61104e565b610db983610dad868563ffffffff61105616565b9063ffffffff61108716565b949350505050565b600082820183811015610d6b57610d6b610d94600086866110b1565b600082821115610df657610df6610d94600285856110b1565b50900390565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610e41919061185c565b6000604051808303816000865af19150503d8060008114610e7e576040519150601f19603f3d011682016040523d82523d6000602084013e610e83565b606091505b50915091508115610ec7578051610e9b575050610ed0565b805160201415610ec7576000610eb2826000610d5f565b90508060011415610ec557505050610ed0565b505b610a848161104e565b5050565b600054610100900460ff1690565b478015610f1657604051339082156108fc029083906000818181858888f19350505050158015610ed0573d6000803e3d6000fd5b50565b60008160200183511015610f3a57610f3a610d9460058551856020016110d0565b50016020015190565b600082610f5557610f55610d946110ef565b811580610f60575083155b15610f6d57506000610227565b60008380610f7757fe5b8584099050610f8c858463ffffffff61105616565b610f9e826103e863ffffffff61105616565b101595945050505050565b606063339f3de260e01b848484604051602401610fc893929190611d28565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60008261106557506000610d6e565b8282028284828161107257fe5b0414610d6b57610d6b610d94600186866110b1565b60008161109d5761109d610d94600385856110b1565b60008284816110a857fe5b04949350505050565b606063e946c1bb60e01b848484604051602401610fc893929190611a17565b6060632800659560e01b848484604051602401610fc893929190611a39565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8035610d6e81611de3565b600082601f830112611180578081fd5b813561119361118e82611d97565b611d70565b8181529150602080830190840160005b838110156111d0576111bb87602084358901016113f9565b835260209283019291909101906001016111a3565b5050505092915050565b600082601f8301126111ea578081fd5b81356111f861118e82611d97565b818152915060208083019084810160005b8481101561139757813587016101c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561124957600080fd5b61125281611d70565b61125e8b878501611165565b815261126d8b60408501611165565b8682015261127e8b60608501611165565b60408201526112908b60808501611165565b606082015260a0830135608082015260c083013560a082015260e083013560c08201526101008084013560e0830152610120808501358284015261014091508185013581840152506101608085013567ffffffffffffffff808211156112f557600080fd5b6113038f8b848a01016113f9565b8486015261018093508387013591508082111561131f57600080fd5b61132d8f8b848a01016113f9565b838601526101a092508287013591508082111561134957600080fd5b6113578f8b848a01016113f9565b848601528587013593508084111561136e57600080fd5b505061137e8d89848801016113f9565b9083015250865250509282019290820190600101611209565b505050505092915050565b80358015158114610d6e57600080fd5b60008083601f8401126113c3578182fd5b50813567ffffffffffffffff8111156113da578182fd5b6020830191508360208285010111156113f257600080fd5b9250929050565b600082601f830112611409578081fd5b813567ffffffffffffffff81111561141f578182fd5b61145060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611d70565b915080825283602082850101111561146757600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215611492578182fd5b823561149d81611de3565b915060208301356114ad81611de3565b809150509250929050565b6000806000606084860312156114cc578081fd5b83356114d781611de3565b925060208401356114e781611de3565b915060408401356114f781611de3565b809150509250925092565b60008060008060008060a0878903121561151a578182fd5b863561152581611de3565b9550602087013561153581611de3565b9450604087013561154581611de3565b935060608701359250608087013567ffffffffffffffff811115611567578283fd5b61157389828a016113b2565b979a9699509497509295939492505050565b60008060008060008060008060006101208a8c0312156115a3578283fd5b89356115ae81611de3565b985060208a01356115be81611de3565b975060408a0135965060608a0135955060808a0135945060a08a013593506115e98b60c08c016113a2565b925060e08a013567ffffffffffffffff80821115611605578384fd5b6116118d838e016111da565b93506101008c0135915080821115611627578283fd5b506116348c828d01611170565b9150509295985092959850929598565b600060208284031215611655578081fd5b5035919050565b600080600060408486031215611670578081fd5b83359250602084013567ffffffffffffffff81111561168d578182fd5b611699868287016113b2565b9497909650939450505050565b600060a082840312156116b7578081fd5b6116c160a0611d70565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006101c06117078484516117f8565b602083015161171960208601826117f8565b50604083015161172c60408601826117f8565b50606083015161173f60608601826117f8565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261179883870182611812565b915050610160915081840151858203838701526117b58282611812565b9250505061018080840151858303828701526117d18382611812565b9150506101a0915081840151858203838701526117ee8282611812565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261182a816020860160208601611db7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161186e818460208701611db7565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060608201606083528086516119378184611d1f565b915081925060208082028301818a01865b848110156119725786830386526119608383516116f7565b95840195925090830190600101611948565b505088828801528681036040880152809450875193506119928482611d1f565b9450508391508083028401818801865b858110156119cc5784830387526119ba838351611812565b968401969250908301906001016119a2565b50909a9950505050505050505050565b918252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810160048510611a2557fe5b938152602081019290925260409091015290565b6060810160088510611a2557fe5b60208082526042908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f4f5554534944455f4f465f4255595f57494e4460608201527f4f57000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252604a908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f4e4f5f4143544956455f524543555252494e4760608201527f5f4255595f464f554e4400000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f52697475616c4272696467653a3a736574526563757272696e674275792f494e60408201527f54455256414c5f544f4f5f53484f525400000000000000000000000000000000606082015260800190565b602080825260409082018190527f52697475616c4272696467653a3a5f76616c6964617465416e64557064617465908201527f526563757272696e674275792f455843454544535f53454c4c5f414d4f554e54606082015260800190565b6020808252603a908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f494e56414c49445f5052494345000000000000606082015260800190565b6020808252602c908201527f52697475616c4272696467653a3a666c6173684172626974726167652f4e4f5460408201527f5f494d504c454d454e5445440000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f52697475616c4272696467653a3a736574526563757272696e674275792f494e60408201527f56414c49445f544f4b454e5f5041495200000000000000000000000000000000606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b968752602087019590955260408601939093526060850191909152608084015260a0830152151560c082015260e00190565b60405181810167ffffffffffffffff81118282101715611d8f57600080fd5b604052919050565b600067ffffffffffffffff821115611dad578081fd5b5060209081020190565b60005b83811015611dd2578181015183820152602001611dba565b83811115610a845750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610f1657600080fdfea365627a7a72315820803da4cce1f7d906240017038171d1d7e71b532285ff43898126cd36e225cdfb6c6578706572696d656e74616cf564736f6c6343000511004060806040526000805460ff1916905534801561001a57600080fd5b506105bd8061002a6000396000f3fe60806040526004361061001e5760003560e01c8063369da09914610023575b600080fd5b6100366100313660046102e0565b61004c565b60405161004391906104eb565b60405180910390f35b610054610196565b61005c6100ef565b1561009f577f44937e661febac32797e691ee4efcd36bd6b487e2dfab1a87e6bda6f5df4542a8334604051610092929190610525565b60405180910390a16100e8565b6100a76100fd565b7f44937e661febac32797e691ee4efcd36bd6b487e2dfab1a87e6bda6f5df4542a83346040516100d8929190610525565b60405180910390a16100e861012b565b9392505050565b600054610100900460ff1690565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16610100179055565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905561015b61015d565b565b47801561019357604051339082156108fc029083906000818181858888f19350505050158015610191573d6000803e3d6000fd5b505b50565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b803573ffffffffffffffffffffffffffffffffffffffff811681146101e957600080fd5b92915050565b600082601f8301126101ff578081fd5b813561021261020d8261055a565b610533565b8181529150602080830190840160005b8381101561024f5761023a8760208435890101610259565b83526020928301929190910190600101610222565b5050505092915050565b600082601f830112610269578081fd5b813567ffffffffffffffff81111561027f578182fd5b6102b060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610533565b91508082528360208285010111156102c757600080fd5b8060208401602084013760009082016020015292915050565b6000806000606084860312156102f4578283fd5b67ffffffffffffffff808535111561030a578384fd5b8435850186601f82011261031c578485fd5b61032961020d823561055a565b8135815260208082019190808401885b85358110156104b657813586016101c07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828f03011215610378578a8bfd5b6103836101c0610533565b61038f8e8684016101c5565b815261039e8e604084016101c5565b858201526103af8e606084016101c5565b60408201526103c18e608084016101c5565b606082015260a0820135608082015260c082013560a082015260e082013560c082015261010082013560e082015261012082013561010082015261014082013561012082015261016082013589811115610419578c8dfd5b6104278f8783860101610259565b6101408301525061018082013589811115610440578c8dfd5b61044e8f8783860101610259565b610160830152506101a082013589811115610467578c8dfd5b6104758f8783860101610259565b610180830152506101c08201358981111561048e578c8dfd5b61049c8f8783860101610259565b6101a0830152508652509382019390820190600101610339565b509197508801359550505060408601359050818111156104d4578283fd5b6104e0878288016101ef565b925050509250925092565b600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561055257600080fd5b604052919050565b600067ffffffffffffffff821115610570578081fd5b506020908102019056fea365627a7a723158208e9f2f396869b360434ef0d3463c541c53c8ac6616abcbd1858ceda839a7788a6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2535 CODESIZE SUB DUP1 PUSH3 0x2535 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x3E SWAP2 PUSH3 0xC6 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE PUSH1 0x3 DUP1 SLOAD SWAP1 SWAP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH3 0x73 SWAP1 PUSH3 0xB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x90 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0xF6 JUMP JUMPDEST PUSH2 0x5E7 DUP1 PUSH3 0x1F4E DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xD8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xEF JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1E48 DUP1 PUSH3 0x106 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC2DF82E6 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0xC47391F5 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xEE9F1730 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xF5F2E6A3 EQ PUSH2 0x174 JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x65F0014 EQ PUSH2 0x7D JUMPI DUP1 PUSH4 0x15344A93 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x5BB30CFB EQ PUSH2 0x113 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x1644 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x1C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP2 SWAP1 PUSH2 0x1D1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x106 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x165C JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP2 SWAP1 PUSH2 0x19EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH2 0x12E CALLDATASIZE PUSH1 0x4 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x22E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x106 PUSH2 0x14E CALLDATASIZE PUSH1 0x4 PUSH2 0x1502 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP3 SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0x5D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND DUP8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1C65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x245 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0x6 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2EA DUP5 DUP7 ADD DUP7 PUSH2 0x1480 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2FA DUP4 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x30B DUP3 DUP10 DUP6 DUP8 DUP16 PUSH2 0x726 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x365 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP6 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x3EE DUP5 DUP5 DUP5 PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0x3FA DUP12 DUP5 DUP12 DUP12 PUSH2 0xA8A JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x15180 DUP9 LT ISZERO PUSH2 0x46A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1B4D JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1CC2 JUMP JUMPDEST CALLER DUP12 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH1 0x0 DUP1 DUP6 MLOAD GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x516 DUP13 DUP13 DUP13 DUP9 DUP9 DUP12 PUSH2 0xB54 JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP12 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP13 DUP2 MSTORE DUP3 DUP5 ADD DUP13 DUP2 MSTORE PUSH1 0x60 DUP5 ADD DUP13 DUP2 MSTORE TIMESTAMP PUSH1 0x80 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP8 DUP9 MSTORE DUP13 ISZERO ISZERO PUSH1 0xC0 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x1 SWAP7 DUP8 SWAP1 MSTORE SWAP8 SWAP1 SWAP8 KECCAK256 SWAP6 MLOAD DUP7 SSTORE SWAP3 MLOAD SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 SSTORE MLOAD PUSH1 0x2 DUP5 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP4 ADD SSTORE MLOAD PUSH1 0x4 DUP3 ADD SSTORE SWAP2 MLOAD PUSH1 0x5 DUP4 ADD SSTORE MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x5C7 PUSH2 0xD49 JUMP JUMPDEST SWAP10 POP SWAP10 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x15180 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x62F SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x1878 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x70B JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x71E JUMPI PUSH2 0x71B DUP2 PUSH1 0x0 PUSH2 0xD5F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x73E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x75E PUSH2 0x1126 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80E DUP9 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xD74 JUMP JUMPDEST SWAP1 POP DUP1 DUP10 LT ISZERO PUSH2 0x84A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x862 SWAP1 PUSH3 0x15180 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x8E4 JUMPI DUP2 MLOAD PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x880 SWAP1 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST GT ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1BAA JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x8CD SWAP1 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SSTORE PUSH2 0x95E JUMP JUMPDEST PUSH3 0x15180 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x904 DUP5 PUSH1 0x80 ADD MLOAD TIMESTAMP PUSH2 0xDDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x90B JUMPI INVALID JUMPDEST MOD LT PUSH2 0x943 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1A47 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x5 ADD DUP9 SWAP1 SSTORE JUMPDEST PUSH2 0x966 PUSH2 0xDFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x9A1 JUMPI POP DUP2 PUSH1 0xC0 ADD MLOAD JUMPDEST ISZERO PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9FB SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x18FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xA84 DUP5 DUP3 PUSH2 0xE18 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xAC4 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xB4D DUP6 DUP3 PUSH2 0xE18 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB63 DUP9 CALLER ADDRESS DUP10 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F DUP10 ADDRESS PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x369DA099 SWAP1 CALLVALUE SWAP1 PUSH2 0xBCC SWAP1 DUP11 SWAP1 DUP13 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1920 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC1E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16A6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xC2B DUP11 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP1 POP PUSH2 0xC38 DUP11 CALLER DUP4 PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0xC48 DUP3 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDDD AND JUMP JUMPDEST SWAP4 POP PUSH2 0xC54 DUP10 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC63 JUMPI POP PUSH2 0xD3E SWAP1 POP JUMP JUMPDEST DUP5 DUP1 ISZERO PUSH2 0xCA2 JUMPI POP PUSH2 0xC73 PUSH2 0xDFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xD30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xCF9 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD3B JUMP JUMPDEST PUSH2 0xD3B DUP10 CALLER DUP6 PUSH2 0x9C3 JUMP JUMPDEST POP POP JUMPDEST SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD51 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0xD5D JUMPI PUSH2 0xD5D PUSH2 0xEE2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B DUP4 DUP4 PUSH2 0xF19 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD81 DUP5 DUP5 DUP5 PUSH2 0xF43 JUMP JUMPDEST ISZERO PUSH2 0xD99 JUMPI PUSH2 0xD99 PUSH2 0xD94 DUP6 DUP6 DUP6 PUSH2 0xFA9 JUMP JUMPDEST PUSH2 0x104E JUMP JUMPDEST PUSH2 0xDB9 DUP4 PUSH2 0xDAD DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1087 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xD6B JUMPI PUSH2 0xD6B PUSH2 0xD94 PUSH1 0x0 DUP7 DUP7 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xDF6 JUMPI PUSH2 0xDF6 PUSH2 0xD94 PUSH1 0x2 DUP6 DUP6 PUSH2 0x10B1 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE41 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xEC7 JUMPI DUP1 MLOAD PUSH2 0xE9B JUMPI POP POP PUSH2 0xED0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 PUSH2 0xEB2 DUP3 PUSH1 0x0 PUSH2 0xD5F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xEC5 JUMPI POP POP POP PUSH2 0xED0 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA84 DUP2 PUSH2 0x104E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0xF16 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xED0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0xD94 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x10D0 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF55 JUMPI PUSH2 0xF55 PUSH2 0xD94 PUSH2 0x10EF JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0xF60 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF6D JUMPI POP PUSH1 0x0 PUSH2 0x227 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0xF77 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0xF8C DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1065 JUMPI POP PUSH1 0x0 PUSH2 0xD6E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1072 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xD6B JUMPI PUSH2 0xD6B PUSH2 0xD94 PUSH1 0x1 DUP7 DUP7 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x109D JUMPI PUSH2 0x109D PUSH2 0xD94 PUSH1 0x3 DUP6 DUP6 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x10A8 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A17 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A39 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD6E DUP2 PUSH2 0x1DE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1180 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1193 PUSH2 0x118E DUP3 PUSH2 0x1D97 JUMP JUMPDEST PUSH2 0x1D70 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11D0 JUMPI PUSH2 0x11BB DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11A3 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11EA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11F8 PUSH2 0x118E DUP3 PUSH2 0x1D97 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1397 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x1C0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x1249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1252 DUP2 PUSH2 0x1D70 JUMP JUMPDEST PUSH2 0x125E DUP12 DUP8 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x126D DUP12 PUSH1 0x40 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE PUSH2 0x127E DUP12 PUSH1 0x60 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1290 DUP12 PUSH1 0x80 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x120 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x160 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1303 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x180 SWAP4 POP DUP4 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132D DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP4 DUP7 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1357 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE DUP6 DUP8 ADD CALLDATALOAD SWAP4 POP DUP1 DUP5 GT ISZERO PUSH2 0x136E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x137E DUP14 DUP10 DUP5 DUP9 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1209 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13C3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x13F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1409 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x141F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1450 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x1D70 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1492 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x149D DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x14AD DUP2 PUSH2 0x1DE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x14CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x14D7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x14E7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x14F7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x151A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1525 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x1535 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x1545 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1567 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1573 DUP10 DUP3 DUP11 ADD PUSH2 0x13B2 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x15A3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH2 0x15AE DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH2 0x15BE DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD SWAP4 POP PUSH2 0x15E9 DUP12 PUSH1 0xC0 DUP13 ADD PUSH2 0x13A2 JUMP JUMPDEST SWAP3 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1605 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1611 DUP14 DUP4 DUP15 ADD PUSH2 0x11DA JUMP JUMPDEST SWAP4 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1627 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1634 DUP13 DUP3 DUP14 ADD PUSH2 0x1170 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1670 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x168D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1699 DUP7 DUP3 DUP8 ADD PUSH2 0x13B2 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x16C1 PUSH1 0xA0 PUSH2 0x1D70 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x1707 DUP5 DUP5 MLOAD PUSH2 0x17F8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1719 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x172C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x173F PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x1798 DUP4 DUP8 ADD DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x17B5 DUP3 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x17D1 DUP4 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x17EE DUP3 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x182A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x186E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1DB7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD PUSH2 0x1937 DUP2 DUP5 PUSH2 0x1D1F JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP PUSH1 0x20 DUP1 DUP3 MUL DUP4 ADD DUP2 DUP11 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1972 JUMPI DUP7 DUP4 SUB DUP7 MSTORE PUSH2 0x1960 DUP4 DUP4 MLOAD PUSH2 0x16F7 JUMP JUMPDEST SWAP6 DUP5 ADD SWAP6 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1948 JUMP JUMPDEST POP POP DUP9 DUP3 DUP9 ADD MSTORE DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP8 MLOAD SWAP4 POP PUSH2 0x1992 DUP5 DUP3 PUSH2 0x1D1F JUMP JUMPDEST SWAP5 POP POP DUP4 SWAP2 POP DUP1 DUP4 MUL DUP5 ADD DUP2 DUP9 ADD DUP7 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x19CC JUMPI DUP5 DUP4 SUB DUP8 MSTORE PUSH2 0x19BA DUP4 DUP4 MLOAD PUSH2 0x1812 JUMP JUMPDEST SWAP7 DUP5 ADD SWAP7 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19A2 JUMP JUMPDEST POP SWAP1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1A25 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1A25 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x42 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F4F5554534944455F4F465F4255595F57494E44 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4F57000000000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4A SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F4E4F5F4143544956455F524543555252494E47 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F4255595F464F554E4400000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A736574526563757272696E674275792F494E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54455256414C5F544F4F5F53484F525400000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 SWAP1 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F455843454544535F53454C4C5F414D4F554E54 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F494E56414C49445F5052494345000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A666C6173684172626974726167652F4E4F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F494D504C454D454E5445440000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A736574526563757272696E674275792F494E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x56414C49445F544F4B454E5F5041495200000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1DAD JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DD2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DBA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA84 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF16 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP1 RETURNDATASIZE LOG4 0xCC 0xE1 0xF7 0xD9 MOD 0x24 STOP OR SUB DUP2 PUSH18 0xD1D7E71B532285FF43898126CD36E225CDFB PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5BD DUP1 PUSH2 0x2A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x369DA099 EQ PUSH2 0x23 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x36 PUSH2 0x31 CALLDATASIZE PUSH1 0x4 PUSH2 0x2E0 JUMP JUMPDEST PUSH2 0x4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x43 SWAP2 SWAP1 PUSH2 0x4EB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x54 PUSH2 0x196 JUMP JUMPDEST PUSH2 0x5C PUSH2 0xEF JUMP JUMPDEST ISZERO PUSH2 0x9F JUMPI PUSH32 0x44937E661FEBAC32797E691EE4EFCD36BD6B487E2DFAB1A87E6BDA6F5DF4542A DUP4 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0x92 SWAP3 SWAP2 SWAP1 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xE8 JUMP JUMPDEST PUSH2 0xA7 PUSH2 0xFD JUMP JUMPDEST PUSH32 0x44937E661FEBAC32797E691EE4EFCD36BD6B487E2DFAB1A87E6BDA6F5DF4542A DUP4 CALLVALUE PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP3 SWAP2 SWAP1 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 0xE8 PUSH2 0x12B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND PUSH2 0x100 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FF AND SWAP1 SSTORE PUSH2 0x15B PUSH2 0x15D JUMP JUMPDEST JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x191 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMPDEST POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1FF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x212 PUSH2 0x20D DUP3 PUSH2 0x55A JUMP JUMPDEST PUSH2 0x533 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x24F JUMPI PUSH2 0x23A DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x259 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x222 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x269 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x2B0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x533 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2F4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP6 CALLDATALOAD GT ISZERO PUSH2 0x30A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD DUP6 ADD DUP7 PUSH1 0x1F DUP3 ADD SLT PUSH2 0x31C JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x329 PUSH2 0x20D DUP3 CALLDATALOAD PUSH2 0x55A JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP1 DUP5 ADD DUP9 JUMPDEST DUP6 CALLDATALOAD DUP2 LT ISZERO PUSH2 0x4B6 JUMPI DUP2 CALLDATALOAD DUP7 ADD PUSH2 0x1C0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP3 DUP16 SUB ADD SLT ISZERO PUSH2 0x378 JUMPI DUP11 DUP12 REVERT JUMPDEST PUSH2 0x383 PUSH2 0x1C0 PUSH2 0x533 JUMP JUMPDEST PUSH2 0x38F DUP15 DUP7 DUP5 ADD PUSH2 0x1C5 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x39E DUP15 PUSH1 0x40 DUP5 ADD PUSH2 0x1C5 JUMP JUMPDEST DUP6 DUP3 ADD MSTORE PUSH2 0x3AF DUP15 PUSH1 0x60 DUP5 ADD PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x3C1 DUP15 PUSH1 0x80 DUP5 ADD PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x120 DUP3 ADD CALLDATALOAD PUSH2 0x100 DUP3 ADD MSTORE PUSH2 0x140 DUP3 ADD CALLDATALOAD PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0x160 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x419 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x427 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x259 JUMP JUMPDEST PUSH2 0x140 DUP4 ADD MSTORE POP PUSH2 0x180 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x440 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x44E DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x259 JUMP JUMPDEST PUSH2 0x160 DUP4 ADD MSTORE POP PUSH2 0x1A0 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x467 JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x475 DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x259 JUMP JUMPDEST PUSH2 0x180 DUP4 ADD MSTORE POP PUSH2 0x1C0 DUP3 ADD CALLDATALOAD DUP10 DUP2 GT ISZERO PUSH2 0x48E JUMPI DUP13 DUP14 REVERT JUMPDEST PUSH2 0x49C DUP16 DUP8 DUP4 DUP7 ADD ADD PUSH2 0x259 JUMP JUMPDEST PUSH2 0x1A0 DUP4 ADD MSTORE POP DUP7 MSTORE POP SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x339 JUMP JUMPDEST POP SWAP2 SWAP8 POP DUP9 ADD CALLDATALOAD SWAP6 POP POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x4D4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x4E0 DUP8 DUP3 DUP9 ADD PUSH2 0x1EF JUMP JUMPDEST SWAP3 POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP DUP3 MLOAD DUP3 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP4 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x570 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP15 SWAP16 0x2F CODECOPY PUSH9 0x69B360434EF0D3463C SLOAD SHR MSTORE8 0xC8 0xAC PUSH7 0x16ABCBD1858CED 0xA8 CODECOPY 0xA7 PUSH25 0x8A6C6578706572696D656E74616CF564736F6C634300051100 BLOCKHASH ",
                "sourceMap": "1485:471:28:-;;;767:5:51;744:28;;-1:-1:-1;;744:28:51;;;1665:166:28;5:2:-1;;;;30:1;27;20:12;5:2;1665:166:28;;;;;;;;;;;;;;;;;;;;;2109:8:8;:31;;-1:-1:-1;;;;;;2109:31:8;;;;;;1753:5:28;:12;;;;;-1:-1:-1;;;;;1753:12:28;;;;;1804:18;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;1775:8:28;:49;;-1:-1:-1;;;;;;1775:49:28;-1:-1:-1;;;;;1775:49:28;;;;;;;;;;-1:-1:-1;1485:471:28;;;;;;;;;;:::o;146:263:-1:-;;261:2;249:9;240:7;236:23;232:32;229:2;;;-1:-1;;267:12;229:2;83:13;;-1:-1;;;;;576:54;;701:35;;691:2;;-1:-1;;740:12;691:2;319:74;223:186;-1:-1;;;223:186;;1485:471:28;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x60806040526004361061007b5760003560e01c8063c2df82e61161004e578063c2df82e614610133578063c47391f514610153578063ee9f173014610174578063f5f2e6a3146101745761007b565b8063065f00141461007d57806315344a93146100b95780631626ba7e146100e65780635bb30cfb14610113575b005b34801561008957600080fd5b5061009d610098366004611644565b610189565b6040516100b09796959493929190611d3e565b60405180910390f35b3480156100c557600080fd5b506100d96100d43660046114b8565b6101c8565b6040516100b09190611d1f565b3480156100f257600080fd5b5061010661010136600461165c565b610205565b6040516100b091906119ea565b34801561011f57600080fd5b5061007b61012e366004611480565b61022e565b34801561013f57600080fd5b5061010661014e366004611502565b6102da565b610166610161366004611585565b61042a565b6040516100b09291906119dc565b34801561018057600080fd5b506100d96105d5565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600690950154939492939192909160ff1687565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611c65565b60405180910390fd5b7fb0671381000000000000000000000000000000000000000000000000000000005b9392505050565b600033838360405160200161024593929190611899565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000908152600192839052908120818155918201819055600282018190556003820181905560048201819055600582015560060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055505050565b600080806102ea84860186611480565b9150915060006102fa83306105dc565b9050600061030b828985878f610726565b905080156103e3576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90610365908590600401611d1f565b600060405180830381600087803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505060405185925073ffffffffffffffffffffffffffffffffffffffff8316915084156108fc029085906000818181858888f193505050501580156103dc573d6000803e3d6000fd5b50506103ee565b6103ee8484846109c3565b6103fa8b848b8b610a8a565b507fdc1600f3000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b6000806201518088101561046a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611b4d565b8973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1614156104d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611cc2565b338b8b6040516020016104e593929190611899565b6040516020818303038152906040528051906020012091506000808551111561051b576105168c8c8c88888b610b54565b925090505b6040805160e0810182528b815260208082018c81528284018c8152606084018c8152426080860190815260a086019788528c151560c0870190815260008b81526001968790529790972095518655925193850193909355516002840155905160038301555160048201559151600583015551600690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790556105c7610d49565b995099975050505050505050565b6201518081565b604051600090819060609073ffffffffffffffffffffffffffffffffffffffff8616907f70a08231000000000000000000000000000000000000000000000000000000009061062f908790602401611878565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106b8919061185c565b600060405180830381855afa9150503d80600081146106f3576040519150601f19603f3d011682016040523d82523d6000602084013e6106f8565b606091505b509150915081801561070b575080516020145b1561071e5761071b816000610d5f565b92505b505092915050565b60008084838560405160200161073e93929190611899565b60405160208183030381529060405280519060200120905061075e611126565b50600081815260016020818152604092839020835160e081018552815480825293820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015460a082015260069092015460ff16151560c08301526107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611aca565b600061080e8883600001518460400151610d74565b90508089101561084a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611c08565b6080820151610862906201518063ffffffff610dc116565b4210156108e457815160a0830151610880908a63ffffffff610dc116565b11156108b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611baa565b60a08201516108cd908963ffffffff610dc116565b60008481526001602052604090206005015561095e565b620151808260200151610904846080015142610ddd90919063ffffffff16565b8161090b57fe5b0610610943576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc90611a47565b60008381526001602052604090204260048201556005018890555b610966610dfc565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156109a157508160c001515b156109b257600193505050506109ba565b600093505050505b95945050505050565b6040516060907fa9059cbb00000000000000000000000000000000000000000000000000000000906109fb90859085906024016118fa565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610a848482610e18565b50505050565b6040516060907f23b872dd0000000000000000000000000000000000000000000000000000000090610ac4908690869086906024016118c9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091529050610b4d8582610e18565b5050505050565b600080610b6388333089610a8a565b6000610b6f89306105dc565b6002546040517f369da09900000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063369da099903490610bcc908a908c908b90600401611920565b60a0604051808303818588803b158015610be557600080fd5b505af1158015610bf9573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250610c1e91908101906116a6565b506000610c2b8a306105dc565b9050610c388a33836109c3565b610c48828263ffffffff610ddd16565b9350610c5489306105dc565b925082610c635750610d3e9050565b848015610ca25750610c73610dfc565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16145b15610d30576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a1690632e1a7d4d90610cf9908690600401611d1f565b600060405180830381600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b50505050610d3b565b610d3b8933856109c3565b50505b965096945050505050565b610d51610ed4565b610d5d57610d5d610ee2565b565b6000610d6b8383610f19565b90505b92915050565b6000610d81848484610f43565b15610d9957610d99610d94858585610fa9565b61104e565b610db983610dad868563ffffffff61105616565b9063ffffffff61108716565b949350505050565b600082820183811015610d6b57610d6b610d94600086866110b1565b600082821115610df657610df6610d94600285856110b1565b50900390565b60035473ffffffffffffffffffffffffffffffffffffffff1690565b600060608373ffffffffffffffffffffffffffffffffffffffff1683604051610e41919061185c565b6000604051808303816000865af19150503d8060008114610e7e576040519150601f19603f3d011682016040523d82523d6000602084013e610e83565b606091505b50915091508115610ec7578051610e9b575050610ed0565b805160201415610ec7576000610eb2826000610d5f565b90508060011415610ec557505050610ed0565b505b610a848161104e565b5050565b600054610100900460ff1690565b478015610f1657604051339082156108fc029083906000818181858888f19350505050158015610ed0573d6000803e3d6000fd5b50565b60008160200183511015610f3a57610f3a610d9460058551856020016110d0565b50016020015190565b600082610f5557610f55610d946110ef565b811580610f60575083155b15610f6d57506000610227565b60008380610f7757fe5b8584099050610f8c858463ffffffff61105616565b610f9e826103e863ffffffff61105616565b101595945050505050565b606063339f3de260e01b848484604051602401610fc893929190611d28565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b60008261106557506000610d6e565b8282028284828161107257fe5b0414610d6b57610d6b610d94600186866110b1565b60008161109d5761109d610d94600385856110b1565b60008284816110a857fe5b04949350505050565b606063e946c1bb60e01b848484604051602401610fc893929190611a17565b6060632800659560e01b848484604051602401610fc893929190611a39565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b8035610d6e81611de3565b600082601f830112611180578081fd5b813561119361118e82611d97565b611d70565b8181529150602080830190840160005b838110156111d0576111bb87602084358901016113f9565b835260209283019291909101906001016111a3565b5050505092915050565b600082601f8301126111ea578081fd5b81356111f861118e82611d97565b818152915060208083019084810160005b8481101561139757813587016101c0807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0838c0301121561124957600080fd5b61125281611d70565b61125e8b878501611165565b815261126d8b60408501611165565b8682015261127e8b60608501611165565b60408201526112908b60808501611165565b606082015260a0830135608082015260c083013560a082015260e083013560c08201526101008084013560e0830152610120808501358284015261014091508185013581840152506101608085013567ffffffffffffffff808211156112f557600080fd5b6113038f8b848a01016113f9565b8486015261018093508387013591508082111561131f57600080fd5b61132d8f8b848a01016113f9565b838601526101a092508287013591508082111561134957600080fd5b6113578f8b848a01016113f9565b848601528587013593508084111561136e57600080fd5b505061137e8d89848801016113f9565b9083015250865250509282019290820190600101611209565b505050505092915050565b80358015158114610d6e57600080fd5b60008083601f8401126113c3578182fd5b50813567ffffffffffffffff8111156113da578182fd5b6020830191508360208285010111156113f257600080fd5b9250929050565b600082601f830112611409578081fd5b813567ffffffffffffffff81111561141f578182fd5b61145060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611d70565b915080825283602082850101111561146757600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215611492578182fd5b823561149d81611de3565b915060208301356114ad81611de3565b809150509250929050565b6000806000606084860312156114cc578081fd5b83356114d781611de3565b925060208401356114e781611de3565b915060408401356114f781611de3565b809150509250925092565b60008060008060008060a0878903121561151a578182fd5b863561152581611de3565b9550602087013561153581611de3565b9450604087013561154581611de3565b935060608701359250608087013567ffffffffffffffff811115611567578283fd5b61157389828a016113b2565b979a9699509497509295939492505050565b60008060008060008060008060006101208a8c0312156115a3578283fd5b89356115ae81611de3565b985060208a01356115be81611de3565b975060408a0135965060608a0135955060808a0135945060a08a013593506115e98b60c08c016113a2565b925060e08a013567ffffffffffffffff80821115611605578384fd5b6116118d838e016111da565b93506101008c0135915080821115611627578283fd5b506116348c828d01611170565b9150509295985092959850929598565b600060208284031215611655578081fd5b5035919050565b600080600060408486031215611670578081fd5b83359250602084013567ffffffffffffffff81111561168d578182fd5b611699868287016113b2565b9497909650939450505050565b600060a082840312156116b7578081fd5b6116c160a0611d70565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006101c06117078484516117f8565b602083015161171960208601826117f8565b50604083015161172c60408601826117f8565b50606083015161173f60608601826117f8565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261179883870182611812565b915050610160915081840151858203838701526117b58282611812565b9250505061018080840151858303828701526117d18382611812565b9150506101a0915081840151858203838701526117ee8282611812565b9695505050505050565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845261182a816020860160208601611db7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000825161186e818460208701611db7565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060608201606083528086516119378184611d1f565b915081925060208082028301818a01865b848110156119725786830386526119608383516116f7565b95840195925090830190600101611948565b505088828801528681036040880152809450875193506119928482611d1f565b9450508391508083028401818801865b858110156119cc5784830387526119ba838351611812565b968401969250908301906001016119a2565b50909a9950505050505050505050565b918252602082015260400190565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6060810160048510611a2557fe5b938152602081019290925260409091015290565b6060810160088510611a2557fe5b60208082526042908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f4f5554534944455f4f465f4255595f57494e4460608201527f4f57000000000000000000000000000000000000000000000000000000000000608082015260a00190565b6020808252604a908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f4e4f5f4143544956455f524543555252494e4760608201527f5f4255595f464f554e4400000000000000000000000000000000000000000000608082015260a00190565b60208082526030908201527f52697475616c4272696467653a3a736574526563757272696e674275792f494e60408201527f54455256414c5f544f4f5f53484f525400000000000000000000000000000000606082015260800190565b602080825260409082018190527f52697475616c4272696467653a3a5f76616c6964617465416e64557064617465908201527f526563757272696e674275792f455843454544535f53454c4c5f414d4f554e54606082015260800190565b6020808252603a908201527f52697475616c4272696467653a3a5f76616c6964617465416e6455706461746560408201527f526563757272696e674275792f494e56414c49445f5052494345000000000000606082015260800190565b6020808252602c908201527f52697475616c4272696467653a3a666c6173684172626974726167652f4e4f5460408201527f5f494d504c454d454e5445440000000000000000000000000000000000000000606082015260800190565b60208082526030908201527f52697475616c4272696467653a3a736574526563757272696e674275792f494e60408201527f56414c49445f544f4b454e5f5041495200000000000000000000000000000000606082015260800190565b90815260200190565b9283526020830191909152604082015260600190565b968752602087019590955260408601939093526060850191909152608084015260a0830152151560c082015260e00190565b60405181810167ffffffffffffffff81118282101715611d8f57600080fd5b604052919050565b600067ffffffffffffffff821115611dad578081fd5b5060209081020190565b60005b83811015611dd2578181015183820152602001611dba565b83811115610a845750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610f1657600080fdfea365627a7a72315820803da4cce1f7d906240017038171d1d7e71b532285ff43898126cd36e225cdfb6c6578706572696d656e74616cf564736f6c63430005110040",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC2DF82E6 GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xC2DF82E6 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0xC47391F5 EQ PUSH2 0x153 JUMPI DUP1 PUSH4 0xEE9F1730 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xF5F2E6A3 EQ PUSH2 0x174 JUMPI PUSH2 0x7B JUMP JUMPDEST DUP1 PUSH4 0x65F0014 EQ PUSH2 0x7D JUMPI DUP1 PUSH4 0x15344A93 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x1626BA7E EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x5BB30CFB EQ PUSH2 0x113 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x9D PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x1644 JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D3E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0xD4 CALLDATASIZE PUSH1 0x4 PUSH2 0x14B8 JUMP JUMPDEST PUSH2 0x1C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP2 SWAP1 PUSH2 0x1D1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x106 PUSH2 0x101 CALLDATASIZE PUSH1 0x4 PUSH2 0x165C JUMP JUMPDEST PUSH2 0x205 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP2 SWAP1 PUSH2 0x19EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7B PUSH2 0x12E CALLDATASIZE PUSH1 0x4 PUSH2 0x1480 JUMP JUMPDEST PUSH2 0x22E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x106 PUSH2 0x14E CALLDATASIZE PUSH1 0x4 PUSH2 0x1502 JUMP JUMPDEST PUSH2 0x2DA JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x1585 JUMP JUMPDEST PUSH2 0x42A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xB0 SWAP3 SWAP2 SWAP1 PUSH2 0x19DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD9 PUSH2 0x5D5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x4 DUP5 ADD SLOAD PUSH1 0x5 DUP6 ADD SLOAD PUSH1 0x6 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 0xFF AND DUP8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1C65 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0xB067138100000000000000000000000000000000000000000000000000000000 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x245 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 DUP2 DUP2 SSTORE SWAP2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x5 DUP3 ADD SSTORE PUSH1 0x6 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 PUSH2 0x2EA DUP5 DUP7 ADD DUP7 PUSH2 0x1480 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 PUSH2 0x2FA DUP4 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x30B DUP3 DUP10 DUP6 DUP8 DUP16 PUSH2 0x726 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0x365 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP6 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP2 POP DUP5 ISZERO PUSH2 0x8FC MUL SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x3DC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x3EE DUP5 DUP5 DUP5 PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0x3FA DUP12 DUP5 DUP12 DUP12 PUSH2 0xA8A JUMP JUMPDEST POP PUSH32 0xDC1600F300000000000000000000000000000000000000000000000000000000 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x15180 DUP9 LT ISZERO PUSH2 0x46A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1B4D JUMP JUMPDEST DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP12 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1CC2 JUMP JUMPDEST CALLER DUP12 DUP12 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP PUSH1 0x0 DUP1 DUP6 MLOAD GT ISZERO PUSH2 0x51B JUMPI PUSH2 0x516 DUP13 DUP13 DUP13 DUP9 DUP9 DUP12 PUSH2 0xB54 JUMP JUMPDEST SWAP3 POP SWAP1 POP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xE0 DUP2 ADD DUP3 MSTORE DUP12 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP13 DUP2 MSTORE DUP3 DUP5 ADD DUP13 DUP2 MSTORE PUSH1 0x60 DUP5 ADD DUP13 DUP2 MSTORE TIMESTAMP PUSH1 0x80 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP7 ADD SWAP8 DUP9 MSTORE DUP13 ISZERO ISZERO PUSH1 0xC0 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x1 SWAP7 DUP8 SWAP1 MSTORE SWAP8 SWAP1 SWAP8 KECCAK256 SWAP6 MLOAD DUP7 SSTORE SWAP3 MLOAD SWAP4 DUP6 ADD SWAP4 SWAP1 SWAP4 SSTORE MLOAD PUSH1 0x2 DUP5 ADD SSTORE SWAP1 MLOAD PUSH1 0x3 DUP4 ADD SSTORE MLOAD PUSH1 0x4 DUP3 ADD SSTORE SWAP2 MLOAD PUSH1 0x5 DUP4 ADD SSTORE MLOAD PUSH1 0x6 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0x5C7 PUSH2 0xD49 JUMP JUMPDEST SWAP10 POP SWAP10 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 0x15180 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x62F SWAP1 DUP8 SWAP1 PUSH1 0x24 ADD PUSH2 0x1878 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6B8 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6F3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6F8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x70B JUMPI POP DUP1 MLOAD PUSH1 0x20 EQ JUMPDEST ISZERO PUSH2 0x71E JUMPI PUSH2 0x71B DUP2 PUSH1 0x0 PUSH2 0xD5F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP4 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x73E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1899 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x75E PUSH2 0x1126 JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP3 DUP4 SWAP1 KECCAK256 DUP4 MLOAD PUSH1 0xE0 DUP2 ADD DUP6 MSTORE DUP2 SLOAD DUP1 DUP3 MSTORE SWAP4 DUP3 ADD SLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP4 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x6 SWAP1 SWAP3 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x7F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1ACA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x80E DUP9 DUP4 PUSH1 0x0 ADD MLOAD DUP5 PUSH1 0x40 ADD MLOAD PUSH2 0xD74 JUMP JUMPDEST SWAP1 POP DUP1 DUP10 LT ISZERO PUSH2 0x84A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x862 SWAP1 PUSH3 0x15180 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x8E4 JUMPI DUP2 MLOAD PUSH1 0xA0 DUP4 ADD MLOAD PUSH2 0x880 SWAP1 DUP11 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST GT ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1BAA JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x8CD SWAP1 DUP10 PUSH4 0xFFFFFFFF PUSH2 0xDC1 AND JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x5 ADD SSTORE PUSH2 0x95E JUMP JUMPDEST PUSH3 0x15180 DUP3 PUSH1 0x20 ADD MLOAD PUSH2 0x904 DUP5 PUSH1 0x80 ADD MLOAD TIMESTAMP PUSH2 0xDDD SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x90B JUMPI INVALID JUMPDEST MOD LT PUSH2 0x943 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x1A47 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP PUSH1 0x4 DUP3 ADD SSTORE PUSH1 0x5 ADD DUP9 SWAP1 SSTORE JUMPDEST PUSH2 0x966 PUSH2 0xDFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x9A1 JUMPI POP DUP2 PUSH1 0xC0 ADD MLOAD JUMPDEST ISZERO PUSH2 0x9B2 JUMPI PUSH1 0x1 SWAP4 POP POP POP POP PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 SWAP4 POP POP POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0x9FB SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x24 ADD PUSH2 0x18FA JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xA84 DUP5 DUP3 PUSH2 0xE18 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH2 0xAC4 SWAP1 DUP7 SWAP1 DUP7 SWAP1 DUP7 SWAP1 PUSH1 0x24 ADD PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP PUSH2 0xB4D DUP6 DUP3 PUSH2 0xE18 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB63 DUP9 CALLER ADDRESS DUP10 PUSH2 0xA8A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB6F DUP10 ADDRESS PUSH2 0x5DC JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0x369DA09900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0x369DA099 SWAP1 CALLVALUE SWAP1 PUSH2 0xBCC SWAP1 DUP11 SWAP1 DUP13 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x1920 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xBF9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0xC1E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x16A6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xC2B DUP11 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP1 POP PUSH2 0xC38 DUP11 CALLER DUP4 PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0xC48 DUP3 DUP3 PUSH4 0xFFFFFFFF PUSH2 0xDDD AND JUMP JUMPDEST SWAP4 POP PUSH2 0xC54 DUP10 ADDRESS PUSH2 0x5DC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xC63 JUMPI POP PUSH2 0xD3E SWAP1 POP JUMP JUMPDEST DUP5 DUP1 ISZERO PUSH2 0xCA2 JUMPI POP PUSH2 0xC73 PUSH2 0xDFC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST ISZERO PUSH2 0xD30 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2E1A7D4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH2 0xCF9 SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x1D1F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xD27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0xD3B JUMP JUMPDEST PUSH2 0xD3B DUP10 CALLER DUP6 PUSH2 0x9C3 JUMP JUMPDEST POP POP JUMPDEST SWAP7 POP SWAP7 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD51 PUSH2 0xED4 JUMP JUMPDEST PUSH2 0xD5D JUMPI PUSH2 0xD5D PUSH2 0xEE2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD6B DUP4 DUP4 PUSH2 0xF19 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD81 DUP5 DUP5 DUP5 PUSH2 0xF43 JUMP JUMPDEST ISZERO PUSH2 0xD99 JUMPI PUSH2 0xD99 PUSH2 0xD94 DUP6 DUP6 DUP6 PUSH2 0xFA9 JUMP JUMPDEST PUSH2 0x104E JUMP JUMPDEST PUSH2 0xDB9 DUP4 PUSH2 0xDAD DUP7 DUP6 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x1087 AND JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0xD6B JUMPI PUSH2 0xD6B PUSH2 0xD94 PUSH1 0x0 DUP7 DUP7 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xDF6 JUMPI PUSH2 0xDF6 PUSH2 0xD94 PUSH1 0x2 DUP6 DUP6 PUSH2 0x10B1 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0xE41 SWAP2 SWAP1 PUSH2 0x185C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xE7E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE83 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0xEC7 JUMPI DUP1 MLOAD PUSH2 0xE9B JUMPI POP POP PUSH2 0xED0 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 EQ ISZERO PUSH2 0xEC7 JUMPI PUSH1 0x0 PUSH2 0xEB2 DUP3 PUSH1 0x0 PUSH2 0xD5F JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xEC5 JUMPI POP POP POP PUSH2 0xED0 JUMP JUMPDEST POP JUMPDEST PUSH2 0xA84 DUP2 PUSH2 0x104E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 0xF16 JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xED0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0xF3A JUMPI PUSH2 0xF3A PUSH2 0xD94 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x10D0 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xF55 JUMPI PUSH2 0xF55 PUSH2 0xD94 PUSH2 0x10EF JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0xF60 JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0xF6D JUMPI POP PUSH1 0x0 PUSH2 0x227 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0xF77 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0xF8C DUP6 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x3E8 PUSH4 0xFFFFFFFF PUSH2 0x1056 AND JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1065 JUMPI POP PUSH1 0x0 PUSH2 0xD6E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x1072 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0xD6B JUMPI PUSH2 0xD6B PUSH2 0xD94 PUSH1 0x1 DUP7 DUP7 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x109D JUMPI PUSH2 0x109D PUSH2 0xD94 PUSH1 0x3 DUP6 DUP6 PUSH2 0x10B1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x10A8 JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A17 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFC8 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A39 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xE0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xD6E DUP2 PUSH2 0x1DE3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1180 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1193 PUSH2 0x118E DUP3 PUSH2 0x1D97 JUMP JUMPDEST PUSH2 0x1D70 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 ADD PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11D0 JUMPI PUSH2 0x11BB DUP8 PUSH1 0x20 DUP5 CALLDATALOAD DUP10 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x11A3 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11EA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11F8 PUSH2 0x118E DUP3 PUSH2 0x1D97 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1397 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH2 0x1C0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x1249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1252 DUP2 PUSH2 0x1D70 JUMP JUMPDEST PUSH2 0x125E DUP12 DUP8 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x126D DUP12 PUSH1 0x40 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST DUP7 DUP3 ADD MSTORE PUSH2 0x127E DUP12 PUSH1 0x60 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x1290 DUP12 PUSH1 0x80 DUP6 ADD PUSH2 0x1165 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xE0 DUP4 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD CALLDATALOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x120 DUP1 DUP6 ADD CALLDATALOAD DUP3 DUP5 ADD MSTORE PUSH2 0x140 SWAP2 POP DUP2 DUP6 ADD CALLDATALOAD DUP2 DUP5 ADD MSTORE POP PUSH2 0x160 DUP1 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1303 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE PUSH2 0x180 SWAP4 POP DUP4 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x131F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132D DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP4 DUP7 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1357 DUP16 DUP12 DUP5 DUP11 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST DUP5 DUP7 ADD MSTORE DUP6 DUP8 ADD CALLDATALOAD SWAP4 POP DUP1 DUP5 GT ISZERO PUSH2 0x136E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH2 0x137E DUP14 DUP10 DUP5 DUP9 ADD ADD PUSH2 0x13F9 JUMP JUMPDEST SWAP1 DUP4 ADD MSTORE POP DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1209 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x13C3 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x13DA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x13F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1409 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x141F JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1450 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND ADD PUSH2 0x1D70 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1492 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x149D DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x14AD DUP2 PUSH2 0x1DE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x14CC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x14D7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x14E7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x14F7 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x151A JUMPI DUP2 DUP3 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH2 0x1525 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH2 0x1535 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH2 0x1545 DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1567 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x1573 DUP10 DUP3 DUP11 ADD PUSH2 0x13B2 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x15A3 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP10 CALLDATALOAD PUSH2 0x15AE DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP9 POP PUSH1 0x20 DUP11 ADD CALLDATALOAD PUSH2 0x15BE DUP2 PUSH2 0x1DE3 JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH1 0xA0 DUP11 ADD CALLDATALOAD SWAP4 POP PUSH2 0x15E9 DUP12 PUSH1 0xC0 DUP13 ADD PUSH2 0x13A2 JUMP JUMPDEST SWAP3 POP PUSH1 0xE0 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1605 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x1611 DUP14 DUP4 DUP15 ADD PUSH2 0x11DA JUMP JUMPDEST SWAP4 POP PUSH2 0x100 DUP13 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1627 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x1634 DUP13 DUP3 DUP14 ADD PUSH2 0x1170 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x40 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1670 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x168D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x1699 DUP7 DUP3 DUP8 ADD PUSH2 0x13B2 JUMP JUMPDEST SWAP5 SWAP8 SWAP1 SWAP7 POP SWAP4 SWAP5 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x16B7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x16C1 PUSH1 0xA0 PUSH2 0x1D70 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP3 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x1707 DUP5 DUP5 MLOAD PUSH2 0x17F8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x1719 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x172C PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x173F PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x17F8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x1798 DUP4 DUP8 ADD DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x160 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x17B5 DUP3 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x17D1 DUP4 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A0 SWAP2 POP DUP2 DUP5 ADD MLOAD DUP6 DUP3 SUB DUP4 DUP8 ADD MSTORE PUSH2 0x17EE DUP3 DUP3 PUSH2 0x1812 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x182A DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1DB7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x186E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1DB7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD PUSH1 0x60 DUP4 MSTORE DUP1 DUP7 MLOAD PUSH2 0x1937 DUP2 DUP5 PUSH2 0x1D1F JUMP JUMPDEST SWAP2 POP DUP2 SWAP3 POP PUSH1 0x20 DUP1 DUP3 MUL DUP4 ADD DUP2 DUP11 ADD DUP7 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1972 JUMPI DUP7 DUP4 SUB DUP7 MSTORE PUSH2 0x1960 DUP4 DUP4 MLOAD PUSH2 0x16F7 JUMP JUMPDEST SWAP6 DUP5 ADD SWAP6 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x1948 JUMP JUMPDEST POP POP DUP9 DUP3 DUP9 ADD MSTORE DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP8 MLOAD SWAP4 POP PUSH2 0x1992 DUP5 DUP3 PUSH2 0x1D1F JUMP JUMPDEST SWAP5 POP POP DUP4 SWAP2 POP DUP1 DUP4 MUL DUP5 ADD DUP2 DUP9 ADD DUP7 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x19CC JUMPI DUP5 DUP4 SUB DUP8 MSTORE PUSH2 0x19BA DUP4 DUP4 MLOAD PUSH2 0x1812 JUMP JUMPDEST SWAP7 DUP5 ADD SWAP7 SWAP3 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x19A2 JUMP JUMPDEST POP SWAP1 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x4 DUP6 LT PUSH2 0x1A25 JUMPI INVALID JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x1A25 JUMPI INVALID JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x42 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F4F5554534944455F4F465F4255595F57494E44 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x4F57000000000000000000000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x4A SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F4E4F5F4143544956455F524543555252494E47 PUSH1 0x60 DUP3 ADD MSTORE PUSH32 0x5F4255595F464F554E4400000000000000000000000000000000000000000000 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A736574526563757272696E674275792F494E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x54455256414C5F544F4F5F53484F525400000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x40 SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 SWAP1 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F455843454544535F53454C4C5F414D4F554E54 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x3A SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A5F76616C6964617465416E64557064617465 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x526563757272696E674275792F494E56414C49445F5052494345000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2C SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A666C6173684172626974726167652F4E4F54 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F494D504C454D454E5445440000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x52697475616C4272696467653A3A736574526563757272696E674275792F494E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x56414C49445F544F4B454E5F5041495200000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP7 DUP8 MSTORE PUSH1 0x20 DUP8 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH1 0x40 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x1D8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1DAD JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1DD2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1DBA JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xA84 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF16 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP1 RETURNDATASIZE LOG4 0xCC 0xE1 0xF7 0xD9 MOD 0x24 STOP OR SUB DUP2 PUSH18 0xD1D7E71B532285FF43898126CD36E225CDFB PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
                "sourceMap": "1485:471:28:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1854:54:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1854:54:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;6253:241;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6253:241:8;;;;;;;;:::i;:::-;;;;;;;;4258:192;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4258:192:8;;;;;;;;:::i;:::-;;;;;;;;5950:297;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5950:297:8;;;;;;;;:::i;2730:1328::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2730:1328:8;;;;;;;;:::i;4456:1488::-;;;;;;;;;:::i;:::-;;;;;;;;;1793:54;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1793:54:8;;;:::i;1854:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;6253:241::-;6397:20;6433:54;;;;;;;;;;;;;;;;;;;4258:192;4418:25;4258:192;;;;;;:::o;5950:297::-;6068:22;6127:10;6151:9;6174:8;6103:89;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;6103:89:8;;;6093:100;;49:4:-1;6093:100:8;;;;6211:29;;;;:13;:29;;;;;;;6204:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5950:297:8:o;2730:1328::-;2947:14;;;3058:76;;;;3082:10;3058:76;;;2977:157;;;;3145:24;3172:84;3209:10;3241:4;3172:23;:84::i;:::-;3145:111;;3267:15;3285:176;3329:16;3359;3389:14;3417:10;3441;3285:30;:176::i;:::-;3267:194;;3476:10;3472:400;;;3502:50;;;;;:32;;;;;;:50;;3535:16;;3502:50;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3502:50:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;3652:48:8;;3622:14;;-1:-1:-1;3652:30:8;;;;-1:-1:-1;3652:48:8;;;;;3683:16;;3566:37;3652:48;3566:37;3652:48;3683:16;3652:30;:48;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3652:48:8;3472:400;;;;3731:130;3771:10;3799:14;3831:16;3731:22;:130::i;:::-;3882:137;3922:10;3946:14;3974:5;3993:16;3882:26;:137::i;:::-;-1:-1:-1;4037:14:8;;2730:1328;-1:-1:-1;;;;;;;;;;2730:1328:8:o;4456:1488::-;4831:22;4855:20;1839:8;4912;:31;;4891:126;;;;;;;;;;;;;;5061:8;5048:21;;:9;:21;;;;5027:116;;;;;;;;;;;;;;5205:10;5229:9;5252:8;5181:89;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;5181:89:8;;;5171:100;;;;;;5154:117;;5282:18;5330:1;5314:6;:13;:17;5310:270;;;5376:193;5412:9;5439:8;5465:10;5493:6;5517:10;5545;5376:18;:193::i;:::-;5347:222;-1:-1:-1;5347:222:8;-1:-1:-1;5310:270:8;5622:315;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5824:15;5622:315;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5590:29:8;;;:13;:29;;;;;;;;:347;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;862:32:52;:30;:32::i;:::-;4456:1488:8;;;;;;;;;;;;:::o;1793:54::-;1839:8;1793:54;:::o;5378:451:32:-;5580:110;;5474:15;;;;5523:23;;5550:16;;;;5620:33;;5580:110;;5671:5;;5580:110;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;5580:110:32;;;49:4:-1;25:18;;61:17;;5580:110:32;182:15:-1;5580:110:32;;;;179:29:-1;;;;160:49;;;5550:150:32;;;;5580:110;5550:150;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;5505:195:32;;;;5714:10;:37;;;;;5728:10;:17;5749:2;5728:23;5714:37;5710:113;;;5777:35;5798:10;5810:1;5777:20;:35::i;:::-;5767:45;;5710:113;5378:451;;;;;;:::o;6500:2051:8:-;6735:15;6766:22;6825:14;6853:10;6877;6801:96;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6801:96:8;;;6791:107;;;;;;6766:132;;6909:28;;:::i;:::-;-1:-1:-1;6940:29:8;;;;:13;:29;;;;;;;;;6909:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6980:144;;;;;;;;;;;;;;7135:26;7164:141;7211:16;7241:8;:19;;;7274:8;:21;;;7164:33;:141::i;:::-;7135:170;;7357:18;7337:16;:38;;7316:143;;;;;;;;;;;;;;7534:30;;;;:57;;1779:8;7534:57;:38;:57;:::i;:::-;7516:15;:75;7512:884;;;7696:19;;7632:34;;;;:60;;7675:16;7632:60;:42;:60;:::i;:::-;:83;;7607:206;;;;;;;;;;;;;;7886:34;;;;:77;;7946:16;7886:77;:59;:77;:::i;:::-;7828:29;;;;:13;:29;;;;;:55;;:135;7512:884;;;1779:8;8077;:17;;;8019:55;8043:8;:30;;;8019:15;:23;;:55;;;;:::i;:::-;:75;;;;;;:95;7994:220;;;;;;;;;;;;;;8228:29;;;;:13;:29;;;;;8282:15;8228:51;;;:69;8311:55;;:74;;;7512:884;8424:17;:15;:17::i;:::-;8410:31;;:10;:31;;;:54;;;;;8445:8;:19;;;8410:54;8406:139;;;8487:4;8480:11;;;;;;;8406:139;8529:5;8522:12;;;;;6500:2051;;;;;;;;:::o;2581:324:32:-;2727:114;;2703:21;;2763:32;;2727:114;;2809:2;;2825:6;;2727:114;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;2727:114:32;;;49:4:-1;25:18;;61:17;;2727:114:32;182:15:-1;2727:114:32;;;;179:29:-1;;;;160:49;;;2727:114:32;-1:-1:-1;2851:47:32;2882:5;2727:114;2851:30;:47::i;:::-;2581:324;;;;:::o;3290:372::-;3462:136;;3438:21;;3498:36;;3462:136;;3548:4;;3566:2;;3582:6;;3462:136;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;3462:136:32;;;49:4:-1;25:18;;61:17;;3462:136:32;182:15:-1;3462:136:32;;;;179:29:-1;;;;160:49;;;3462:136:32;-1:-1:-1;3608:47:32;3639:5;3462:136;3608:30;:47::i;:::-;3290:372;;;;;:::o;8557:1299:8:-;8805:18;8825:20;8861:76;8888:9;8899:10;8919:4;8926:10;8861:26;:76::i;:::-;8947:24;8974:49;8998:9;9017:4;8974:23;:49::i;:::-;9034:8;;:127;;;;;8947:76;;-1:-1:-1;9034:8:8;;;:32;;9073:9;;9034:127;;9097:6;;9117:10;;9141;;9034:127;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9034:127:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9034:127:8;;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;9034:127:8;;;;;;;;;;9172:26;9201:49;9225:9;9244:4;9201:23;:49::i;:::-;9172:78;;9260:65;9283:9;9294:10;9306:18;9260:22;:65::i;:::-;9348:44;:16;9373:18;9348:44;:24;:44;:::i;:::-;9335:57;;9418:48;9442:8;9460:4;9418:23;:48::i;:::-;9403:63;-1:-1:-1;9481:17:8;9477:81;;-1:-1:-1;9514:33:8;;-1:-1:-1;9514:33:8;9477:81;9572:10;:43;;;;;9598:17;:15;:17::i;:::-;9586:29;;:8;:29;;;9572:43;9568:282;;;9631:44;;;;;:30;;;;;;:44;;9662:12;;9631:44;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9631:44:8;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9631:44:8;;;;9568:282;;;9781:58;9804:8;9814:10;9826:12;9781:22;:58::i;:::-;8557:1299;;;;;;;;;;;;:::o;1292:155:52:-;1370:21;:19;:21::i;:::-;1365:76;;1407:23;:21;:23::i;:::-;1292:155::o;15929:220:44:-;16050:14;16097:21;16109:1;16112:5;16097:11;:21::i;:::-;16089:30;-1:-1:-1;15929:220:44;;;;;:::o;1141:603:37:-;1309:21;1350:110;1388:9;1415:11;1444:6;1350:20;:110::i;:::-;1346:289;;;1476:148;1498:125;1547:9;1574:11;1603:6;1498:31;:125::i;:::-;1476:21;:148::i;:::-;1661:46;1695:11;1661:25;:9;1679:6;1661:25;:17;:25;:::i;:::-;:33;:46;:33;:46;:::i;:::-;1645:62;1141:603;-1:-1:-1;;;;1141:603:37:o;1335:383:49:-;1421:7;1456:5;;;1475;;;1471:223;;;1496:187;1518:164;1575:55;1648:1;1667;1518:39;:164::i;965:364::-;1051:7;1082:1;1078;:5;1074:227;;;1099:191;1121:168;1178:59;1255:1;1274;1121:39;:168::i;1099:191::-;-1:-1:-1;1317:5:49;;;965:364::o;1837:116:28:-;1941:5;;;;1837:116;:::o;6120:571:32:-;6252:15;6269:23;6296:6;:11;;6308:8;6296:21;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;6251:66:32;;;;6331:10;6327:315;;;6361:17;;6357:67;;6403:7;;;;6357:67;6441:10;:17;6462:2;6441:23;6437:195;;;6484:14;6501:35;6522:10;6534:1;6501:20;:35::i;:::-;6484:52;;6558:6;6568:1;6558:11;6554:64;;;6593:7;;;;;6554:64;6437:195;;6651:33;6673:10;6651:21;:33::i;6120:571::-;;;:::o;1884:128:52:-;1962:4;1989:16;;;;;;;1884:128::o;1453:189::-;1535:21;1570:11;;1566:70;;1597:28;;:10;;:28;;;;;1617:7;;1597:28;;;;1617:7;1597:10;:28;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;1566:70:52;1453:189;:::o;14133:679:44:-;14254:14;14299:5;14307:2;14299:10;14288:1;:8;:21;14284:297;;;14325:245;14347:222;14409:92;14519:1;:8;14545:5;14553:2;14545:10;14347:44;:222::i;14325:245::-;-1:-1:-1;14759:13:44;14661:2;14759:13;14753:20;;14133:679::o;4566:1880:37:-;4729:12;4761:16;4757:109;;4793:62;4815:39;:37;:39::i;4793:62::-;5676:11;;;:29;;-1:-1:-1;5691:14:37;;5676:29;5672:72;;;-1:-1:-1;5728:5:37;5721:12;;5672:72;6239:17;6322:11;6259:84;;;;;6299:9;6279:6;6259:84;6239:104;-1:-1:-1;6390:25:37;:9;6408:6;6390:25;:17;:25;:::i;:::-;6363:23;:9;6381:4;6363:23;:17;:23;:::i;:::-;:52;;;4566:1880;-1:-1:-1;;;;;4566:1880:37:o;520:335:38:-;676:12;312:10;747:23;;784:9;807:11;832:6;711:137;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;711:137:38;;;49:4:-1;25:18;;61:17;;711:137:38;182:15:-1;711:137:38;;;;179:29:-1;;;;160:49;;;711:137:38;-1:-1:-1;520:335:38;;;;;:::o;1511:170:48:-;1654:9;1648:16;1641:4;1630:9;1626:20;1619:46;122:448:49;208:7;235:6;231:45;;-1:-1:-1;264:1:49;257:8;;231:45;297:5;;;301:1;297;:5;:1;316:5;;;;;:10;312:234;;342:193;364:170;421:61;500:1;519;364:39;:170::i;576:383::-;662:7;689:6;685:223;;711:186;733:163;790:54;862:1;881;733:39;:163::i;711:186::-;917:9;933:1;929;:5;;;;;;;576:383;-1:-1:-1;;;;576:383:49:o;731:322:50:-;884:12;196:10;955:28;;997:9;1020:1;1035;919:127;;;;;;;;;;;1292:378:45;1480:12;1232:10;1551:37;;1602:9;1625:6;1645:8;1515:148;;;;;;;;;;;372:142:38;485:22;;;;;;;;;;;;;;;;;372:142;:::o;1485:471:28:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;72:20;;97:33;72:20;97:33;;311:693;;433:3;426:4;418:6;414:17;410:27;400:2;;-1:-1;;441:12;400:2;488:6;475:20;510:85;525:69;587:6;525:69;;;510:85;;;623:21;;;501:94;-1:-1;667:4;680:14;;;;655:17;;775:1;760:238;785:6;782:1;779:13;760:238;;;892:42;930:3;667:4;868:3;855:17;659:6;843:30;;892:42;;;880:55;;667:4;949:14;;;;977;;;;;807:1;800:9;760:238;;;764:14;;;;393:611;;;;;1044:735;;1180:3;1173:4;1165:6;1161:17;1157:27;1147:2;;-1:-1;;1188:12;1147:2;1235:6;1222:20;1257:99;1272:83;1348:6;1272:83;;1257:99;1384:21;;;1248:108;-1:-1;1428:4;1441:14;;;;1416:17;;;1536:1;1521:252;1546:6;1543:1;1540:13;1521:252;;;1629:3;1616:17;1420:6;1604:30;4070:6;;4049:19;1604:30;4053:3;4049:19;;4045:32;4042:2;;;1536:1;;4080:12;4042:2;4108:22;4070:6;4108:22;;;4220:49;4265:3;1428:4;1604:30;;4220:49;;;4202:16;4195:75;4372:49;4417:3;4393:22;1604:30;4393:22;4372:49;;;1428:4;4358:5;4354:16;4347:75;4531:49;4576:3;4552:22;1604:30;4552:22;4531:49;;;4393:22;4517:5;4513:16;4506:75;4684:49;4729:3;4705:22;1604:30;4705:22;4684:49;;;4552:22;4670:5;4666:16;4659:75;4862:22;1604:30;4862:22;6750:20;4705:22;4827:5;4823:16;4816:75;5019:22;1604:30;5019:22;6750:20;4862:22;4984:5;4980:16;4973:75;5168:22;1604:30;5168:22;6750:20;5019:22;5133:5;5129:16;5122:75;5317:22;;1604:30;5317:22;6750:20;5168:22;5282:5;5278:16;5271:75;5481:22;;1604:30;5481:22;6750:20;5317:22;5444:5;5440:18;5433:77;5628:22;;;;1604:30;5628:22;6750:20;5481:22;5591:5;5587:18;5580:77;;5741:19;;1604:30;5741:19;5728:33;5781:18;;5773:6;5770:30;5767:2;;;1536:1;;5803:12;5767:2;5850:54;5900:3;1428:4;5891:6;1604:30;5876:22;;5850:54;;;5628:22;5834:5;5830:18;5823:82;5989:19;;;;1604:30;5989:19;5976:33;5962:47;;5781:18;6021:6;6018:30;6015:2;;;1536:1;;6051:12;6015:2;6098:54;6148:3;1428:4;6139:6;1604:30;6124:22;;6098:54;;;5741:19;6082:5;6078:18;6071:82;6240:19;;;;1604:30;6240:19;6227:33;6213:47;;5781:18;6272:6;6269:30;6266:2;;;1536:1;;6302:12;6266:2;6349:54;6399:3;1428:4;6390:6;1604:30;6375:22;;6349:54;;;5989:19;6333:5;6329:18;6322:82;4070:6;1604:30;6491:19;6478:33;6464:47;;5781:18;6523:6;6520:30;6517:2;;;1536:1;;6553:12;6517:2;;;6600:54;6650:3;1428:4;6641:6;1604:30;6626:22;;6600:54;;;6580:18;;;6573:82;-1:-1;1641:69;;-1:-1;;1724:14;;;;1752;;;;1568:1;1561:9;1521:252;;;1525:14;;;;;1140:639;;;;;1787:124;1851:20;;34428:13;;34421:21;36670:32;;36660:2;;36716:1;;36706:12;2069:336;;;2183:3;2176:4;2168:6;2164:17;2160:27;2150:2;;-1:-1;;2191:12;2150:2;-1:-1;2221:20;;2261:18;2250:30;;2247:2;;;-1:-1;;2283:12;2247:2;2327:4;2319:6;2315:17;2303:29;;2378:3;2327:4;2358:17;2319:6;2344:32;;2341:41;2338:2;;;2395:1;;2385:12;2338:2;2143:262;;;;;;2414:432;;2511:3;2504:4;2496:6;2492:17;2488:27;2478:2;;-1:-1;;2519:12;2478:2;2566:6;2553:20;31931:18;31923:6;31920:30;31917:2;;;-1:-1;;31953:12;31917:2;2588:60;32094:4;32026:9;2504:4;32011:6;32007:17;32003:33;32084:15;2588:60;;;2579:69;;2668:6;2661:5;2654:21;2772:3;32094:4;2763:6;2696;2754:16;;2751:25;2748:2;;;2789:1;;2779:12;2748:2;35645:6;32094:4;2696:6;2692:17;32094:4;2730:5;2726:16;35622:30;35701:1;35683:16;;;32094:4;35683:16;35676:27;2730:5;2471:375;-1:-1;;2471:375;6961:398;;;7098:2;7086:9;7077:7;7073:23;7069:32;7066:2;;;-1:-1;;7104:12;7066:2;230:6;217:20;242:41;277:5;242:41;;;7156:71;-1:-1;7264:2;7311:22;;217:20;242:41;217:20;242:41;;;7272:71;;;;7060:299;;;;;;7739:491;;;;7877:2;7865:9;7856:7;7852:23;7848:32;7845:2;;;-1:-1;;7883:12;7845:2;85:6;72:20;97:33;124:5;97:33;;;7935:63;-1:-1;8035:2;8074:22;;72:20;97:33;72:20;97:33;;;8043:63;-1:-1;8143:2;8182:22;;72:20;97:33;72:20;97:33;;;8151:63;;;;7839:391;;;;;;8237:867;;;;;;;8428:3;8416:9;8407:7;8403:23;8399:33;8396:2;;;-1:-1;;8435:12;8396:2;85:6;72:20;97:33;124:5;97:33;;;8487:63;-1:-1;8587:2;8626:22;;72:20;97:33;72:20;97:33;;;8595:63;-1:-1;8695:2;8734:22;;72:20;97:33;72:20;97:33;;;8703:63;-1:-1;8803:2;8842:22;;6750:20;;-1:-1;8939:3;8924:19;;8911:33;8964:18;8953:30;;8950:2;;;-1:-1;;8986:12;8950:2;9024:64;9080:7;9071:6;9060:9;9056:22;9024:64;;;8390:714;;;;-1:-1;8390:714;;-1:-1;8390:714;;9014:74;;8390:714;-1:-1;;;8390:714;9111:1561;;;;;;;;;;9422:3;9410:9;9401:7;9397:23;9393:33;9390:2;;;-1:-1;;9429:12;9390:2;85:6;72:20;97:33;124:5;97:33;;;9481:63;-1:-1;9581:2;9620:22;;72:20;97:33;72:20;97:33;;;9589:63;-1:-1;9689:2;9728:22;;6750:20;;-1:-1;9797:2;9836:22;;6750:20;;-1:-1;9905:3;9945:22;;6750:20;;-1:-1;10014:3;10054:22;;6750:20;;-1:-1;10142:50;10184:7;10123:3;10160:22;;10142:50;;;10132:60;;10257:3;10246:9;10242:19;10229:33;10282:18;;10274:6;10271:30;10268:2;;;-1:-1;;10304:12;10268:2;10334:97;10423:7;10414:6;10403:9;10399:22;10334:97;;;10324:107;;10496:3;10485:9;10481:19;10468:33;10454:47;;10282:18;10513:6;10510:30;10507:2;;;-1:-1;;10543:12;10507:2;;10573:83;10648:7;10639:6;10628:9;10624:22;10573:83;;;10563:93;;;9384:1288;;;;;;;;;;;;10679:241;;10783:2;10771:9;10762:7;10758:23;10754:32;10751:2;;;-1:-1;;10789:12;10751:2;-1:-1;1985:20;;10745:175;-1:-1;10745:175;10927:490;;;;11067:2;11055:9;11046:7;11042:23;11038:32;11035:2;;;-1:-1;;11073:12;11035:2;1998:6;1985:20;11125:63;;11253:2;11242:9;11238:18;11225:32;11277:18;11269:6;11266:30;11263:2;;;-1:-1;;11299:12;11263:2;11337:64;11393:7;11384:6;11373:9;11369:22;11337:64;;;11029:388;;11327:74;;-1:-1;11327:74;;-1:-1;;;;11029:388;11424:322;;11568:3;11556:9;11547:7;11543:23;11539:33;11536:2;;;-1:-1;;11575:12;11536:2;3059:20;11568:3;3059:20;;;6904:6;6898:13;3161:16;3154:86;3319:2;3388:9;3384:22;6898:13;3319:2;3338:5;3334:16;3327:86;3482:2;3551:9;3547:22;6898:13;3482:2;3501:5;3497:16;3490:86;3645:2;3714:9;3710:22;6898:13;3645:2;3664:5;3660:16;3653:86;3811:3;3881:9;3877:22;6898:13;3811:3;3831:5;3827:16;3820:86;11627:103;;;;11530:216;;;;;11940:233;;19030:6;19135:63;19183:14;19112:16;19106:23;19135:63;;;19285:4;19278:5;19274:16;19268:23;19297:63;19285:4;19349:3;19345:14;19331:12;19297:63;;;;19454:4;19447:5;19443:16;19437:23;19466:63;19454:4;19518:3;19514:14;19500:12;19466:63;;;;19617:4;19610:5;19606:16;19600:23;19629:63;19617:4;19681:3;19677:14;19663:12;19629:63;;;;19783:4;19776:5;19772:16;19766:23;19783:4;19847:3;19843:14;14727:37;19949:4;19942:5;19938:16;19932:23;19949:4;20013:3;20009:14;14727:37;20107:4;20100:5;20096:16;20090:23;20107:4;20171:3;20167:14;14727:37;20265:4;20258:5;20254:16;20248:23;20265:4;20329:3;20325:14;14727:37;20436:6;;20429:5;20425:18;20419:25;20436:6;20502:3;20498:16;14727:37;;20594:6;;20587:5;20583:18;20577:25;20594:6;20660:3;20656:16;14727:37;;20762:6;;20755:5;20751:18;20745:25;19030:6;20762;20794:3;20790:16;20783:40;20838:67;19030:6;19025:3;19021:16;20886:12;20838:67;;;20830:75;;;21000:6;;;;20993:5;20989:18;20983:25;21056:3;21050:4;21046:14;21000:6;21032:3;21028:16;21021:40;21076:67;21138:4;21124:12;21076:67;;;21068:75;;;;21241:6;;21234:5;21230:18;21224:25;21297:3;21291:4;21287:14;21241:6;21273:3;21269:16;21262:40;21317:67;21379:4;21365:12;21317:67;;;21309:75;;;21482:6;;;;21475:5;21471:18;21465:25;21538:3;21532:4;21528:14;21482:6;21514:3;21510:16;21503:40;21558:67;21620:4;21606:12;21558:67;;;12065:102;12058:115;-1:-1;;;;;;12058:115;12181:137;35093:42;35082:54;12268:45;;12262:56;15256:315;;15380:5;32564:12;33410:6;33405:3;33398:19;15463:52;15508:6;33447:4;33442:3;33438:14;33447:4;15489:5;15485:16;15463:52;;;36082:2;36062:14;36078:7;36058:28;15527:39;;;;33447:4;15527:39;;15332:239;-1:-1;;15332:239;21900:262;;15053:5;32564:12;15164:52;15209:6;15204:3;15197:4;15190:5;15186:16;15164:52;;;15228:16;;;;;22025:137;-1:-1;;22025:137;22169:213;35093:42;35082:54;;;;12268:45;;22287:2;22272:18;;22258:124;22389:467;35093:42;35082:54;;;12268:45;;35082:54;;;22759:2;22744:18;;12268:45;35082:54;;;22842:2;22827:18;;12268:45;22579:2;22564:18;;22550:306;23305:435;35093:42;35082:54;;;12268:45;;35082:54;;;;23643:2;23628:18;;12268:45;23726:2;23711:18;;14727:37;;;;23479:2;23464:18;;23450:290;23747:324;35093:42;35082:54;;;;12268:45;;24057:2;24042:18;;14727:37;23893:2;23878:18;;23864:207;24078:827;;24400:2;24389:9;24385:18;24400:2;24421:17;24414:47;24475:146;13787:5;32564:12;13806:105;13904:6;13899:3;13806:105;;;13799:112;;;;;13976:4;;13968:6;13964:17;13959:3;13955:27;13976:4;14072:5;32236:14;-1:-1;14111:387;14136:6;14133:1;14130:13;14111:387;;;14198:9;14192:4;14188:20;14183:3;14176:33;14265:102;14362:4;14243:6;14237:13;14265:102;;;14477:14;;;;14257:110;-1:-1;33114:14;;;;14158:1;14151:9;14111:387;;;14115:14;;14757:5;13976:4;24689:9;24685:18;14727:37;24752:9;24746:4;24742:20;24737:2;24726:9;24722:18;24715:48;24777:118;;;12790:5;32564:12;12723:73;;12809:91;12893:6;12888:3;12809:91;;;12802:98;;;;;;13976:4;12957:6;12953:17;12948:3;12944:27;13976:4;13047:5;32236:14;-1:-1;13086:345;13111:6;13108:1;13105:13;13086:345;;;13173:9;13167:4;13163:20;13158:3;13151:33;11865:60;11921:3;13218:6;13212:13;11865:60;;;13410:14;;;;13232:82;-1:-1;33114:14;;;;14158:1;13126:9;13086:345;;;-1:-1;24769:126;;24371:534;-1:-1;;;;;;;;;;24371:534;24912:324;14727:37;;;25222:2;25207:18;;14727:37;25058:2;25043:18;;25029:207;25243:209;34605:66;34594:78;;;;14845:36;;25359:2;25344:18;;25330:122;25459:471;25651:2;25636:18;;36188:1;36178:12;;36168:2;;36194:9;36168:2;15667:68;;;25833:2;25818:18;;14727:37;;;;25916:2;25901:18;;;14727:37;25622:308;;25937:501;26144:2;26129:18;;36321:1;36311:12;;36301:2;;36327:9;26445:407;26636:2;26650:47;;;16171:2;26621:18;;;33398:19;16207:34;33438:14;;;16187:55;16276:34;16262:12;;;16255:56;16345:4;16331:12;;;16324:26;16369:12;;;26607:245;26859:407;27050:2;27064:47;;;16620:2;27035:18;;;33398:19;16656:34;33438:14;;;16636:55;16725:34;16711:12;;;16704:56;16794:12;16780;;;16773:34;16826:12;;;27021:245;27273:407;27464:2;27478:47;;;17077:2;27449:18;;;33398:19;17113:34;33438:14;;;17093:55;17182:18;17168:12;;;17161:40;17220:12;;;27435:245;27687:407;27878:2;27892:47;;;17471:2;27863:18;;;33398:19;;;17507:34;33438:14;;;17487:55;17576:34;17562:12;;;17555:56;17630:12;;;27849:245;28101:407;28292:2;28306:47;;;17881:2;28277:18;;;33398:19;17917:34;33438:14;;;17897:55;17986:28;17972:12;;;17965:50;18034:12;;;28263:245;28515:407;28706:2;28720:47;;;18285:2;28691:18;;;33398:19;18321:34;33438:14;;;18301:55;18390:14;18376:12;;;18369:36;18424:12;;;28677:245;28929:407;29120:2;29134:47;;;18675:2;29105:18;;;33398:19;18711:34;33438:14;;;18691:55;18780:18;18766:12;;;18759:40;18818:12;;;29091:245;29343:213;14727:37;;;29461:2;29446:18;;29432:124;29563:435;14727:37;;;29901:2;29886:18;;14727:37;;;;29984:2;29969:18;;14727:37;29737:2;29722:18;;29708:290;30005:871;14727:37;;;30450:2;30435:18;;14727:37;;;;30533:2;30518:18;;14727:37;;;;30616:2;30601:18;;14727:37;;;;30699:3;30684:19;;14727:37;30783:3;30768:19;;14727:37;34428:13;34421:21;30861:3;30846:19;;14610:34;30285:3;30270:19;;30256:620;30883:256;30945:2;30939:9;30971:17;;;31046:18;31031:34;;31067:22;;;31028:62;31025:2;;;31103:1;;31093:12;31025:2;30945;31112:22;30923:216;;-1:-1;30923:216;31146:309;;31310:18;31302:6;31299:30;31296:2;;;-1:-1;;31332:12;31296:2;-1:-1;31377:4;31365:17;;;31430:15;;31233:222;35718:268;35783:1;35790:101;35804:6;35801:1;35798:13;35790:101;;;35871:11;;;35865:18;35852:11;;;35845:39;35826:2;35819:10;35790:101;;;35906:6;35903:1;35900:13;35897:2;;;-1:-1;;35783:1;35953:16;;35946:27;35767:219;36350:117;35093:42;36437:5;35082:54;36412:5;36409:35;36399:2;;36458:1;;36448:12"
            }
        }
    },
    "sourceTreeHashHex": "0x260666ec11bcc0a61966913ba74271a570b2b6d8d6701231d036352d0146a4ed",
    "sources": {
        "./TestRitualBridge.sol": {
            "id": 28
        },
        "../src/bridges/RitualBridge.sol": {
            "id": 8
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": {
            "id": 34
        },
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": {
            "id": 33
        },
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": {
            "id": 32
        },
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": {
            "id": 48
        },
        "@0x/contracts-utils/contracts/src/LibBytes.sol": {
            "id": 44
        },
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": {
            "id": 45
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": {
            "id": 54
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": {
            "id": 55
        },
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": {
            "id": 39
        },
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": {
            "id": 46
        },
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": {
            "id": 36
        },
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": {
            "id": 49
        },
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": {
            "id": 50
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": {
            "id": 37
        },
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": {
            "id": 38
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": {
            "id": 57
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": {
            "id": 56
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": {
            "id": 58
        },
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": {
            "id": 40
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": {
            "id": 59
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": {
            "id": 53
        },
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": {
            "id": 61
        },
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": {
            "id": 60
        },
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": {
            "id": 35
        },
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": {
            "id": 41
        },
        "@0x/contracts-utils/contracts/src/Refundable.sol": {
            "id": 52
        },
        "@0x/contracts-utils/contracts/src/ReentrancyGuard.sol": {
            "id": 51
        },
        "@0x/contracts-utils/contracts/src/LibReentrancyGuardRichErrors.sol": {
            "id": 47
        },
        "../src/interfaces/IERC20Bridge.sol": {
            "id": 16
        }
    },
    "sourceCodes": {
        "./TestRitualBridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"../src/bridges/RitualBridge.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/Refundable.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract TestExchange is\n    Refundable\n{\n    event MarketSellCalled(\n        uint256 takerAssetFillAmount,\n        uint256 msgValue\n    );\n\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        disableRefundUntilEnd\n        returns (LibFillResults.FillResults memory fillResults)\n    {\n        emit MarketSellCalled(\n            takerAssetFillAmount,\n            msg.value\n        );\n    }\n}\n\ncontract TestRitualBridge is\n    RitualBridge\n{\n    event MarketSellCalled(\n        uint256 takerAssetFillAmount,\n        uint256 msgValue\n    );\n\n    address internal _weth;\n\n    constructor(address weth)\n        public\n        RitualBridge(address(0))\n    {\n        _weth = weth;\n        EXCHANGE = IExchange(address(new TestExchange()));\n    }\n\n    function _getWethAddress()\n        internal\n        view\n        returns (address)\n    {\n        return _weth;\n    }\n\n}\n",
        "../src/bridges/RitualBridge.sol": "/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol\";\nimport \"@0x/contracts-erc20/contracts/src/LibERC20Token.sol\";\nimport \"@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/IWallet.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-utils/contracts/src/DeploymentConstants.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/Refundable.sol\";\nimport \"../interfaces/IERC20Bridge.sol\";\n\n\n// solhint-disable space-after-comma\n// solhint-disable not-rely-on-time\ncontract RitualBridge is\n    IERC20Bridge,\n    IWallet,\n    Refundable,\n    DeploymentConstants\n{\n    using LibSafeMath for uint256;\n\n    struct RecurringBuy {\n        uint256 sellAmount;\n        uint256 interval;\n        uint256 minBuyAmount;\n        uint256 maxSlippageBps;\n        uint256 currentBuyWindowStart;\n        uint256 currentIntervalAmountSold;\n        bool unwrapWeth;\n    }\n\n    uint256 public constant BUY_WINDOW_LENGTH = 24 hours;\n    uint256 public constant MIN_INTERVAL_LENGTH = 24 hours;\n\n    mapping (bytes32 => RecurringBuy) public recurringBuys;\n    IExchange internal EXCHANGE; // solhint-disable-line var-name-mixedcase\n\n    function ()\n        external\n        payable\n    {}\n\n    constructor (address _exchange)\n        public\n    {\n        EXCHANGE = IExchange(_exchange);\n    }\n\n    /// @dev Callback for `IERC20Bridge`. Tries to buy `makerAssetAmount` of\n    ///      `makerToken` by selling the entirety of the `takerToken`\n    ///      encoded in the bridge data.\n    /// @param makerToken The token to buy and transfer to `to`.\n    /// @param taker The recipient of the bought tokens.\n    /// @param makerAssetAmount Minimum amount of `makerToken` to buy.\n    /// @param bridgeData ABI-encoded addresses of the taker token and\n    ///        recurring buyer for whom the bridge order was created.\n    /// @return success The magic bytes if successful.\n    function bridgeTransferFrom(\n        address makerToken,\n        address /* maker */,\n        address taker,\n        uint256 makerAssetAmount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success)\n    {\n        (\n            address takerToken,\n            address recurringBuyer\n        ) = abi.decode(\n            bridgeData,\n            (address, address)\n        );\n\n        uint256 takerAssetAmount = LibERC20Token.balanceOf(\n            takerToken,\n            address(this)\n        );\n\n        bool unwrapWeth = _validateAndUpdateRecurringBuy(\n            takerAssetAmount,\n            makerAssetAmount,\n            recurringBuyer,\n            takerToken,\n            makerToken\n        );\n\n        if (unwrapWeth) {\n            IEtherToken(takerToken).withdraw(takerAssetAmount);\n            address payable recurringBuyerPayable = address(uint160(recurringBuyer));\n            recurringBuyerPayable.transfer(takerAssetAmount);\n        } else {\n            LibERC20Token.transfer(\n                takerToken,\n                recurringBuyer,\n                takerAssetAmount\n            );\n        }\n\n        LibERC20Token.transferFrom(\n            makerToken,\n            recurringBuyer,\n            taker,\n            makerAssetAmount\n        );\n\n        return BRIDGE_SUCCESS;\n    }\n\n    /// @dev `SignatureType.Wallet` callback, so that this bridge can be the maker\n    ///      and sign for itself in orders. Always succeeds.\n    /// @return magicValue Success bytes, always.\n    function isValidSignature(\n        bytes32,\n        bytes calldata\n    )\n        external\n        view\n        returns (bytes4 magicValue)\n    {\n        return LEGACY_WALLET_MAGIC_VALUE;\n    }\n\n    function setRecurringBuy(\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount,\n        uint256 interval,\n        uint256 minBuyAmount,\n        uint256 maxSlippageBps,\n        bool unwrapWeth,\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        refundFinalBalance\n        returns (bytes32 recurringBuyID, uint256 amountBought)\n    {\n        require(\n            interval >= MIN_INTERVAL_LENGTH,\n            \"RitualBridge::setRecurringBuy/INTERVAL_TOO_SHORT\"\n        );\n        require(\n            sellToken != buyToken,\n            \"RitualBridge::setRecurringBuy/INVALID_TOKEN_PAIR\"\n        );\n\n        recurringBuyID = keccak256(abi.encode(\n            msg.sender,\n            sellToken,\n            buyToken\n        ));\n\n        uint256 amountSold;\n        if (orders.length > 0) {\n            (amountSold, amountBought) = _initialMarketSell(\n                sellToken,\n                buyToken,\n                sellAmount,\n                orders,\n                signatures,\n                unwrapWeth\n            );\n        }\n\n        recurringBuys[recurringBuyID] = RecurringBuy({\n            sellAmount: sellAmount,\n            interval: interval,\n            minBuyAmount: minBuyAmount,\n            maxSlippageBps: maxSlippageBps,\n            currentBuyWindowStart: block.timestamp,\n            currentIntervalAmountSold: amountSold,\n            unwrapWeth: unwrapWeth\n        });\n    }\n\n    function cancelRecurringBuy(\n        address sellToken,\n        address buyToken\n    )\n        external\n    {\n        bytes32 recurringBuyID = keccak256(abi.encode(\n            msg.sender,\n            sellToken,\n            buyToken\n        ));\n\n        delete recurringBuys[recurringBuyID];\n    }\n\n    function flashArbitrage(\n        address recipient,\n        address sellToken,\n        address buyToken\n    )\n        external\n        returns (uint256 amountBought)\n    {\n        revert(\"RitualBridge::flashArbitrage/NOT_IMPLEMENTED\");\n    }\n\n    function _validateAndUpdateRecurringBuy(\n        uint256 takerAssetAmount,\n        uint256 makerAssetAmount,\n        address recurringBuyer,\n        address takerToken,\n        address makerToken\n    )\n        private\n        returns (bool unwrapWeth)\n    {\n        bytes32 recurringBuyID = keccak256(abi.encode(\n            recurringBuyer,\n            makerToken,\n            takerToken\n        ));\n\n        RecurringBuy memory buyState = recurringBuys[recurringBuyID];\n\n        require(\n            buyState.sellAmount > 0,\n            \"RitualBridge::_validateAndUpdateRecurringBuy/NO_ACTIVE_RECURRING_BUY_FOUND\"\n        );\n\n        uint256 minBuyAmountScaled = LibMath.safeGetPartialAmountFloor(\n            makerAssetAmount,\n            buyState.sellAmount,\n            buyState.minBuyAmount\n        );\n\n        require(\n            takerAssetAmount >= minBuyAmountScaled,\n            \"RitualBridge::_validateAndUpdateRecurringBuy/INVALID_PRICE\"\n        );\n\n        // TODO: Oracle price protection\n\n        if (block.timestamp < buyState.currentBuyWindowStart.safeAdd(BUY_WINDOW_LENGTH)) {\n            require(\n                buyState.currentIntervalAmountSold.safeAdd(makerAssetAmount) <= buyState.sellAmount,\n                \"RitualBridge::_validateAndUpdateRecurringBuy/EXCEEDS_SELL_AMOUNT\"\n            );\n\n            recurringBuys[recurringBuyID].currentIntervalAmountSold = buyState.currentIntervalAmountSold\n                .safeAdd(makerAssetAmount);\n        } else {\n            require(\n                block.timestamp.safeSub(buyState.currentBuyWindowStart) % buyState.interval < BUY_WINDOW_LENGTH,\n                \"RitualBridge::_validateAndUpdateRecurringBuy/OUTSIDE_OF_BUY_WINDOW\"\n            );\n            recurringBuys[recurringBuyID].currentBuyWindowStart = block.timestamp;\n            recurringBuys[recurringBuyID].currentIntervalAmountSold = makerAssetAmount;\n        }\n\n        if (takerToken == _getWethAddress() && buyState.unwrapWeth) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _initialMarketSell(\n        address sellToken,\n        address buyToken,\n        uint256 sellAmount,\n        LibOrder.Order[] memory orders,\n        bytes[] memory signatures,\n        bool unwrapWeth\n    )\n        private\n        returns (uint256 amountSold, uint256 amountBought)\n    {\n        LibERC20Token.transferFrom(sellToken, msg.sender, address(this), sellAmount);\n        uint256 sellTokenBalance = LibERC20Token.balanceOf(sellToken, address(this));\n\n        EXCHANGE.marketSellOrdersNoThrow.value(msg.value)(\n            orders,\n            sellAmount,\n            signatures\n        );\n\n        uint256 sellTokenRemaining = LibERC20Token.balanceOf(sellToken, address(this));\n        LibERC20Token.transfer(sellToken, msg.sender, sellTokenRemaining);\n        amountSold = sellTokenBalance.safeSub(sellTokenRemaining);\n\n        amountBought = LibERC20Token.balanceOf(buyToken, address(this));\n\n        if (amountBought == 0) {\n            return (amountSold, amountBought);\n        }\n\n        if (unwrapWeth && buyToken == _getWethAddress()) {\n            IEtherToken(buyToken).withdraw(amountBought);\n            // The `refundFinalBalance` modifier will handle the transfer.\n        } else {\n            LibERC20Token.transfer(buyToken, msg.sender, amountBought);\n        }\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IEtherToken.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./IERC20Token.sol\";\n\n\ncontract IEtherToken is\n    IERC20Token\n{\n    function deposit()\n        public\n        payable;\n    \n    function withdraw(uint256 amount)\n        public;\n}\n",
        "@0x/contracts-erc20/contracts/src/interfaces/IERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Token {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _value\n    );\n\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address _to, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address _spender, uint256 _value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address _owner)\n        external\n        view\n        returns (uint256);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender)\n        external\n        view\n        returns (uint256);\n}\n",
        "@0x/contracts-erc20/contracts/src/LibERC20Token.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibBytes.sol\";\nimport \"../src/interfaces/IERC20Token.sol\";\n\n\nlibrary LibERC20Token {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20Token(token).approve()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function approve(\n        address token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        address token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (IERC20Token(token).allowance(address(this), spender) < amount) {\n            approve(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20Token(token).transfer()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transfer(\n        address token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Calls `IERC20Token(token).transferFrom()`.\n    ///      Reverts if `false` is returned or if the return\n    ///      data length is nonzero and not 32 bytes.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function transferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            IERC20Token(0).transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(token, callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function decimals(address token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = token.staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length == 32) {\n            tokenDecimals = uint8(LibBytes.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance The allowance for a token, owner, and spender.\n    function allowance(address token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            allowance_ = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function balanceOf(address token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = token.staticcall(\n            abi.encodeWithSelector(\n                IERC20Token(0).balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length == 32) {\n            balance = LibBytes.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed) {\n            if (resultData.length == 0) {\n                return;\n            }\n            if (resultData.length == 32) {\n                uint256 result = LibBytes.readUint256(resultData, 0);\n                if (result == 1) {\n                    return;\n                }\n            }\n        }\n        LibRichErrors.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytes.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibBytesRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\nlibrary LibBytes {\n\n    using LibBytes for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibBytesRichErrors {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchange.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IExchangeCore.sol\";\nimport \"./IProtocolFees.sol\";\nimport \"./IMatchOrders.sol\";\nimport \"./ISignatureValidator.sol\";\nimport \"./ITransactions.sol\";\nimport \"./IAssetProxyDispatcher.sol\";\nimport \"./IWrapperFunctions.sol\";\nimport \"./ITransferSimulator.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IExchange is\n    IProtocolFees,\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    ITransferSimulator,\n    IWrapperFunctions\n{}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IExchangeCore.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IExchangeCore {\n\n    // Fill event is emitted whenever an order is filled.\n    event Fill(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that received fees.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        bytes makerFeeAssetData,              // Encoded data specific to makerFeeAsset.\n        bytes takerFeeAssetData,              // Encoded data specific to takerFeeAsset.\n        bytes32 indexed orderHash,            // EIP712 hash of order (see LibOrder.getTypedDataHash).\n        address takerAddress,                 // Address that filled the order.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        uint256 makerAssetFilledAmount,       // Amount of makerAsset sold by maker and bought by taker.\n        uint256 takerAssetFilledAmount,       // Amount of takerAsset sold by taker and bought by maker.\n        uint256 makerFeePaid,                 // Amount of makerFeeAssetData paid to feeRecipient by maker.\n        uint256 takerFeePaid,                 // Amount of takerFeeAssetData paid to feeRecipient by taker.\n        uint256 protocolFeePaid               // Amount of eth or weth paid to the staking contract.\n    );\n\n    // Cancel event is emitted whenever an individual order is cancelled.\n    event Cancel(\n        address indexed makerAddress,         // Address that created the order.\n        address indexed feeRecipientAddress,  // Address that would have recieved fees if order was filled.\n        bytes makerAssetData,                 // Encoded data specific to makerAsset.\n        bytes takerAssetData,                 // Encoded data specific to takerAsset.\n        address senderAddress,                // Address that called the Exchange contract (msg.sender).\n        bytes32 indexed orderHash             // EIP712 hash of order (see LibOrder.getTypedDataHash).\n    );\n\n    // CancelUpTo event is emitted whenever `cancelOrdersUpTo` is executed succesfully.\n    event CancelUpTo(\n        address indexed makerAddress,         // Orders cancelled must have been created by this address.\n        address indexed orderSenderAddress,   // Orders cancelled must have a `senderAddress` equal to this address.\n        uint256 orderEpoch                    // Orders with specified makerAddress and senderAddress with a salt less than this value are considered cancelled.\n    );\n\n    /// @dev Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch\n    ///      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).\n    /// @param targetOrderEpoch Orders created with a salt less or equal to this value will be cancelled.\n    function cancelOrdersUpTo(uint256 targetOrderEpoch)\n        external\n        payable;\n\n    /// @dev Fills the input order.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    /// @return Amounts filled and fees paid by maker and taker.\n    function fillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev After calling, the order can not be filled anymore.\n    /// @param order Order struct containing order specifications.\n    function cancelOrder(LibOrder.Order memory order)\n        public\n        payable;\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return OrderInfo Information about the order and its state.\n    ///                   See LibOrder.OrderInfo for a complete description.\n    function getOrderInfo(LibOrder.Order memory order)\n        public\n        view\n        returns (LibOrder.OrderInfo memory orderInfo);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibOrder.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibOrder {\n\n    using LibOrder for Order;\n\n    // Hash for the EIP712 Order Schema:\n    // keccak256(abi.encodePacked(\n    //     \"Order(\",\n    //     \"address makerAddress,\",\n    //     \"address takerAddress,\",\n    //     \"address feeRecipientAddress,\",\n    //     \"address senderAddress,\",\n    //     \"uint256 makerAssetAmount,\",\n    //     \"uint256 takerAssetAmount,\",\n    //     \"uint256 makerFee,\",\n    //     \"uint256 takerFee,\",\n    //     \"uint256 expirationTimeSeconds,\",\n    //     \"uint256 salt,\",\n    //     \"bytes makerAssetData,\",\n    //     \"bytes takerAssetData,\",\n    //     \"bytes makerFeeAssetData,\",\n    //     \"bytes takerFeeAssetData\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_ORDER_SCHEMA_HASH =\n        0xf80322eb8376aafb64eadf8f0d7623f22130fd9491a221e902b713cb984a7534;\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    // solhint-disable max-line-length\n    /// @dev Canonical order structure.\n    struct Order {\n        address makerAddress;           // Address that created the order.\n        address takerAddress;           // Address that is allowed to fill the order. If set to 0, any address is allowed to fill the order.\n        address feeRecipientAddress;    // Address that will recieve fees when order is filled.\n        address senderAddress;          // Address that is allowed to call Exchange contract methods that affect this order. If set to 0, any address is allowed to call these methods.\n        uint256 makerAssetAmount;       // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 takerAssetAmount;       // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 makerFee;               // Fee paid to feeRecipient by maker when order is filled.\n        uint256 takerFee;               // Fee paid to feeRecipient by taker when order is filled.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which order expires.\n        uint256 salt;                   // Arbitrary number to facilitate uniqueness of the order's hash.\n        bytes makerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;           // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset. The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset. The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset. The leading bytes4 references the id of the asset proxy.\n    }\n    // solhint-enable max-line-length\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;                    // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of an order with a given domain separator.\n    /// @param order The order structure.\n    /// @return EIP712 typed data hash of the order.\n    function getTypedDataHash(Order memory order, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 orderHash)\n    {\n        orderHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            order.getStructHash()\n        );\n        return orderHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the order struct.\n    /// @param order The order structure.\n    /// @return EIP712 hash of the order struct.\n    function getStructHash(Order memory order)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ORDER_SCHEMA_HASH;\n        bytes memory makerAssetData = order.makerAssetData;\n        bytes memory takerAssetData = order.takerAssetData;\n        bytes memory makerFeeAssetData = order.makerFeeAssetData;\n        bytes memory takerFeeAssetData = order.takerFeeAssetData;\n\n        // Assembly for more efficiently computing:\n        // keccak256(abi.encodePacked(\n        //     EIP712_ORDER_SCHEMA_HASH,\n        //     uint256(order.makerAddress),\n        //     uint256(order.takerAddress),\n        //     uint256(order.feeRecipientAddress),\n        //     uint256(order.senderAddress),\n        //     order.makerAssetAmount,\n        //     order.takerAssetAmount,\n        //     order.makerFee,\n        //     order.takerFee,\n        //     order.expirationTimeSeconds,\n        //     order.salt,\n        //     keccak256(order.makerAssetData),\n        //     keccak256(order.takerAssetData),\n        //     keccak256(order.makerFeeAssetData),\n        //     keccak256(order.takerFeeAssetData)\n        // ));\n\n        assembly {\n            // Assert order offset (this is an internal error that should never be triggered)\n            if lt(order, 32) {\n                invalid()\n            }\n\n            // Calculate memory addresses that will be swapped out before hashing\n            let pos1 := sub(order, 32)\n            let pos2 := add(order, 320)\n            let pos3 := add(order, 352)\n            let pos4 := add(order, 384)\n            let pos5 := add(order, 416)\n\n            // Backup\n            let temp1 := mload(pos1)\n            let temp2 := mload(pos2)\n            let temp3 := mload(pos3)\n            let temp4 := mload(pos4)\n            let temp5 := mload(pos5)\n\n            // Hash in place\n            mstore(pos1, schemaHash)\n            mstore(pos2, keccak256(add(makerAssetData, 32), mload(makerAssetData)))        // store hash of makerAssetData\n            mstore(pos3, keccak256(add(takerAssetData, 32), mload(takerAssetData)))        // store hash of takerAssetData\n            mstore(pos4, keccak256(add(makerFeeAssetData, 32), mload(makerFeeAssetData)))  // store hash of makerFeeAssetData\n            mstore(pos5, keccak256(add(takerFeeAssetData, 32), mload(takerFeeAssetData)))  // store hash of takerFeeAssetData\n            result := keccak256(pos1, 480)\n\n            // Restore\n            mstore(pos1, temp1)\n            mstore(pos2, temp2)\n            mstore(pos3, temp3)\n            mstore(pos4, temp4)\n            mstore(pos5, temp5)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibEIP712.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibEIP712 {\n\n    // Hash of the EIP712 Domain Separator Schema\n    // keccak256(abi.encodePacked(\n    //     \"EIP712Domain(\",\n    //     \"string name,\",\n    //     \"string version,\",\n    //     \"uint256 chainId,\",\n    //     \"address verifyingContract\",\n    //     \")\"\n    // ))\n    bytes32 constant internal _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\n\n    /// @dev Calculates a EIP712 domain separator.\n    /// @param name The EIP712 domain name.\n    /// @param version The EIP712 domain version.\n    /// @param verifyingContract The EIP712 verifying contract.\n    /// @return EIP712 domain separator.\n    function hashEIP712Domain(\n        string memory name,\n        string memory version,\n        uint256 chainId,\n        address verifyingContract\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\n\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\n        //     keccak256(bytes(name)),\n        //     keccak256(bytes(version)),\n        //     chainId,\n        //     uint256(verifyingContract)\n        // ))\n\n        assembly {\n            // Calculate hashes of dynamic data\n            let nameHash := keccak256(add(name, 32), mload(name))\n            let versionHash := keccak256(add(version, 32), mload(version))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            // Store params in memory\n            mstore(memPtr, schemaHash)\n            mstore(add(memPtr, 32), nameHash)\n            mstore(add(memPtr, 64), versionHash)\n            mstore(add(memPtr, 96), chainId)\n            mstore(add(memPtr, 128), verifyingContract)\n\n            // Compute hash\n            result := keccak256(memPtr, 160)\n        }\n        return result;\n    }\n\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\n    ///                         with getDomainHash().\n    /// @param hashStruct The EIP712 hash struct.\n    /// @return EIP712 hash applied to the given EIP712 Domain.\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        // Assembly for more efficient computing:\n        // keccak256(abi.encodePacked(\n        //     EIP191_HEADER,\n        //     EIP712_DOMAIN_HASH,\n        //     hashStruct\n        // ));\n\n        assembly {\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000)  // EIP191 header\n            mstore(add(memPtr, 2), eip712DomainHash)                                            // EIP712 domain hash\n            mstore(add(memPtr, 34), hashStruct)                                                 // Hash of struct\n\n            // Compute hash\n            result := keccak256(memPtr, 66)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"./LibMath.sol\";\nimport \"./LibOrder.sol\";\n\n\nlibrary LibFillResults {\n\n    using LibSafeMath for uint256;\n\n    struct BatchMatchedFillResults {\n        FillResults[] left;              // Fill results for left orders\n        FillResults[] right;             // Fill results for right orders\n        uint256 profitInLeftMakerAsset;  // Profit taken from left makers\n        uint256 profitInRightMakerAsset; // Profit taken from right makers\n    }\n\n    struct FillResults {\n        uint256 makerAssetFilledAmount;  // Total amount of makerAsset(s) filled.\n        uint256 takerAssetFilledAmount;  // Total amount of takerAsset(s) filled.\n        uint256 makerFeePaid;            // Total amount of fees paid by maker(s) to feeRecipient(s).\n        uint256 takerFeePaid;            // Total amount of fees paid by taker to feeRecipients(s).\n        uint256 protocolFeePaid;         // Total amount of fees paid by taker to the staking contract.\n    }\n\n    struct MatchedFillResults {\n        FillResults left;                // Amounts filled and fees paid of left order.\n        FillResults right;               // Amounts filled and fees paid of right order.\n        uint256 profitInLeftMakerAsset;  // Profit taken from the left maker\n        uint256 profitInRightMakerAsset; // Profit taken from the right maker\n    }\n\n    /// @dev Calculates amounts filled and fees paid by maker and taker.\n    /// @param order to be filled.\n    /// @param takerAssetFilledAmount Amount of takerAsset that will be filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @return fillResults Amounts filled and fees paid by maker and taker.\n    function calculateFillResults(\n        LibOrder.Order memory order,\n        uint256 takerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice\n    )\n        internal\n        pure\n        returns (FillResults memory fillResults)\n    {\n        // Compute proportional transfer amounts\n        fillResults.takerAssetFilledAmount = takerAssetFilledAmount;\n        fillResults.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerAssetAmount\n        );\n        fillResults.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.makerFee\n        );\n        fillResults.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            takerAssetFilledAmount,\n            order.takerAssetAmount,\n            order.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill.\n        fillResults.protocolFeePaid = gasPrice.safeMul(protocolFeeMultiplier);\n\n        return fillResults;\n    }\n\n    /// @dev Calculates fill amounts for the matched orders.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the leftOrder order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftOrderTakerAssetFilledAmount Amount of left order already filled.\n    /// @param rightOrderTakerAssetFilledAmount Amount of right order already filled.\n    /// @param protocolFeeMultiplier The current protocol fee of the exchange contract.\n    /// @param gasPrice The gasprice of the transaction. This is provided so that the function call can continue\n    ///        to be pure rather than view.\n    /// @param shouldMaximallyFillOrders A value that indicates whether or not this calculation should use\n    ///                                  the maximal fill order matching strategy.\n    /// @param matchedFillResults Amounts to fill and fees to pay by maker and taker of matched orders.\n    function calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftOrderTakerAssetFilledAmount,\n        uint256 rightOrderTakerAssetFilledAmount,\n        uint256 protocolFeeMultiplier,\n        uint256 gasPrice,\n        bool shouldMaximallyFillOrders\n    )\n        internal\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Derive maker asset amounts for left & right orders, given store taker assert amounts\n        uint256 leftTakerAssetAmountRemaining = leftOrder.takerAssetAmount.safeSub(leftOrderTakerAssetFilledAmount);\n        uint256 leftMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            leftTakerAssetAmountRemaining\n        );\n        uint256 rightTakerAssetAmountRemaining = rightOrder.takerAssetAmount.safeSub(rightOrderTakerAssetFilledAmount);\n        uint256 rightMakerAssetAmountRemaining = LibMath.safeGetPartialAmountFloor(\n            rightOrder.makerAssetAmount,\n            rightOrder.takerAssetAmount,\n            rightTakerAssetAmountRemaining\n        );\n\n        // Maximally fill the orders and pay out profits to the matcher in one or both of the maker assets.\n        if (shouldMaximallyFillOrders) {\n            matchedFillResults = _calculateMatchedFillResultsWithMaximalFill(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else {\n            matchedFillResults = _calculateMatchedFillResults(\n                leftOrder,\n                rightOrder,\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Compute fees for left order\n        matchedFillResults.left.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.makerAssetFilledAmount,\n            leftOrder.makerAssetAmount,\n            leftOrder.makerFee\n        );\n        matchedFillResults.left.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.left.takerAssetFilledAmount,\n            leftOrder.takerAssetAmount,\n            leftOrder.takerFee\n        );\n\n        // Compute fees for right order\n        matchedFillResults.right.makerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.makerAssetFilledAmount,\n            rightOrder.makerAssetAmount,\n            rightOrder.makerFee\n        );\n        matchedFillResults.right.takerFeePaid = LibMath.safeGetPartialAmountFloor(\n            matchedFillResults.right.takerAssetFilledAmount,\n            rightOrder.takerAssetAmount,\n            rightOrder.takerFee\n        );\n\n        // Compute the protocol fee that should be paid for a single fill. In this\n        // case this should be made the protocol fee for both the left and right orders.\n        uint256 protocolFee = gasPrice.safeMul(protocolFeeMultiplier);\n        matchedFillResults.left.protocolFeePaid = protocolFee;\n        matchedFillResults.right.protocolFeePaid = protocolFee;\n\n        // Return fill results\n        return matchedFillResults;\n    }\n\n    /// @dev Adds properties of both FillResults instances.\n    /// @param fillResults1 The first FillResults.\n    /// @param fillResults2 The second FillResults.\n    /// @return The sum of both fill results.\n    function addFillResults(\n        FillResults memory fillResults1,\n        FillResults memory fillResults2\n    )\n        internal\n        pure\n        returns (FillResults memory totalFillResults)\n    {\n        totalFillResults.makerAssetFilledAmount = fillResults1.makerAssetFilledAmount.safeAdd(fillResults2.makerAssetFilledAmount);\n        totalFillResults.takerAssetFilledAmount = fillResults1.takerAssetFilledAmount.safeAdd(fillResults2.takerAssetFilledAmount);\n        totalFillResults.makerFeePaid = fillResults1.makerFeePaid.safeAdd(fillResults2.makerFeePaid);\n        totalFillResults.takerFeePaid = fillResults1.takerFeePaid.safeAdd(fillResults2.takerFeePaid);\n        totalFillResults.protocolFeePaid = fillResults1.protocolFeePaid.safeAdd(fillResults2.protocolFeePaid);\n\n        return totalFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the fill strategy that only\n    ///      awards profit denominated in the left maker asset.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResults(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate fill results for maker and taker assets: at least one order will be fully filled.\n        // The maximum amount the left maker can buy is `leftTakerAssetAmountRemaining`\n        // The maximum amount the right maker can sell is `rightMakerAssetAmountRemaining`\n        // We have two distinct cases for calculating the fill results:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        //   If the left maker can buy exactly what the right maker can sell, then both orders are fully filled.\n        // Case 2.\n        //   If the left maker cannot buy more than the right maker can sell, then only the left order is fully filled.\n        // Case 3.\n        //   If the left maker can buy exactly as much as the right maker can sell, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (leftTakerAssetAmountRemaining < rightMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            matchedFillResults.right.makerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round up to ensure the maker's exchange rate does not exceed the price specified by the order.\n            // We favor the maker when the exchange rate must be rounded.\n            matchedFillResults.right.takerAssetFilledAmount = LibMath.safeGetPartialAmountCeil(\n                rightOrder.takerAssetAmount,\n                rightOrder.makerAssetAmount,\n                leftTakerAssetAmountRemaining // matchedFillResults.right.makerAssetFilledAmount\n            );\n        } else {\n            // leftTakerAssetAmountRemaining == rightMakerAssetAmountRemaining\n            // Case 3: Both orders are fully filled. Technically, this could be captured by the above cases, but\n            //         this calculation will be more precise since it does not include rounding.\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker\n        matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n            matchedFillResults.right.takerAssetFilledAmount\n        );\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates part of the matched fill results for a given situation using the maximal fill order matching\n    ///      strategy.\n    /// @param leftOrder The left order in the order matching situation.\n    /// @param rightOrder The right order in the order matching situation.\n    /// @param leftMakerAssetAmountRemaining The amount of the left order maker asset that can still be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left order taker asset that can still be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right order maker asset that can still be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right order taker asset that can still be filled.\n    /// @return MatchFillResults struct that does not include fees paid.\n    function _calculateMatchedFillResultsWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // If a maker asset is greater than the opposite taker asset, than there will be a spread denominated in that maker asset.\n        bool doesLeftMakerAssetProfitExist = leftMakerAssetAmountRemaining > rightTakerAssetAmountRemaining;\n        bool doesRightMakerAssetProfitExist = rightMakerAssetAmountRemaining > leftTakerAssetAmountRemaining;\n\n        // Calculate the maximum fill results for the maker and taker assets. At least one of the orders will be fully filled.\n        //\n        // The maximum that the left maker can possibly buy is the amount that the right order can sell.\n        // The maximum that the right maker can possibly buy is the amount that the left order can sell.\n        //\n        // If the left order is fully filled, profit will be paid out in the left maker asset. If the right order is fully filled,\n        // the profit will be out in the right maker asset.\n        //\n        // There are three cases to consider:\n        // Case 1.\n        //   If the left maker can buy more than the right maker can sell, then only the right order is fully filled.\n        // Case 2.\n        //   If the right maker can buy more than the left maker can sell, then only the right order is fully filled.\n        // Case 3.\n        //   If the right maker can sell the max of what the left maker can buy and the left maker can sell the max of\n        //   what the right maker can buy, then both orders are fully filled.\n        if (leftTakerAssetAmountRemaining > rightMakerAssetAmountRemaining) {\n            // Case 1: Right order is fully filled with the profit paid in the left makerAsset\n            matchedFillResults = _calculateCompleteRightFill(\n                leftOrder,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        } else if (rightTakerAssetAmountRemaining > leftMakerAssetAmountRemaining) {\n            // Case 2: Left order is fully filled with the profit paid in the right makerAsset.\n            matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n            matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n            // Round down to ensure the right maker's exchange rate does not exceed the price specified by the order.\n            // We favor the right maker when the exchange rate must be rounded and the profit is being paid in the\n            // right maker asset.\n            matchedFillResults.right.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n                rightOrder.makerAssetAmount,\n                rightOrder.takerAssetAmount,\n                leftMakerAssetAmountRemaining\n            );\n            matchedFillResults.right.takerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        } else {\n            // Case 3: The right and left orders are fully filled\n            matchedFillResults = _calculateCompleteFillBoth(\n                leftMakerAssetAmountRemaining,\n                leftTakerAssetAmountRemaining,\n                rightMakerAssetAmountRemaining,\n                rightTakerAssetAmountRemaining\n            );\n        }\n\n        // Calculate amount given to taker in the left order's maker asset if the left spread will be part of the profit.\n        if (doesLeftMakerAssetProfitExist) {\n            matchedFillResults.profitInLeftMakerAsset = matchedFillResults.left.makerAssetFilledAmount.safeSub(\n                matchedFillResults.right.takerAssetFilledAmount\n            );\n        }\n\n        // Calculate amount given to taker in the right order's maker asset if the right spread will be part of the profit.\n        if (doesRightMakerAssetProfitExist) {\n            matchedFillResults.profitInRightMakerAsset = matchedFillResults.right.makerAssetFilledAmount.safeSub(\n                matchedFillResults.left.takerAssetFilledAmount\n            );\n        }\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order. Both orders will be fully filled in this\n    ///      case.\n    /// @param leftMakerAssetAmountRemaining The amount of the left maker asset that is remaining to be filled.\n    /// @param leftTakerAssetAmountRemaining The amount of the left taker asset that is remaining to be filled.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteFillBoth(\n        uint256 leftMakerAssetAmountRemaining,\n        uint256 leftTakerAssetAmountRemaining,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        // Calculate the fully filled results for both orders.\n        matchedFillResults.left.makerAssetFilledAmount = leftMakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = leftTakerAssetAmountRemaining;\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n\n        return matchedFillResults;\n    }\n\n    /// @dev Calculates the fill results for the maker and taker in the order matching and writes the results\n    ///      to the fillResults that are being collected on the order.\n    /// @param leftOrder The left order that is being maximally filled. All of the information about fill amounts\n    ///                  can be derived from this order and the right asset remaining fields.\n    /// @param rightMakerAssetAmountRemaining The amount of the right maker asset that is remaining to be filled.\n    /// @param rightTakerAssetAmountRemaining The amount of the right taker asset that is remaining to be filled.\n    /// @return MatchFillResults struct that does not include fees paid or spreads taken.\n    function _calculateCompleteRightFill(\n        LibOrder.Order memory leftOrder,\n        uint256 rightMakerAssetAmountRemaining,\n        uint256 rightTakerAssetAmountRemaining\n    )\n        private\n        pure\n        returns (MatchedFillResults memory matchedFillResults)\n    {\n        matchedFillResults.right.makerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        matchedFillResults.right.takerAssetFilledAmount = rightTakerAssetAmountRemaining;\n        matchedFillResults.left.takerAssetFilledAmount = rightMakerAssetAmountRemaining;\n        // Round down to ensure the left maker's exchange rate does not exceed the price specified by the order.\n        // We favor the left maker when the exchange rate must be rounded and the profit is being paid in the\n        // left maker asset.\n        matchedFillResults.left.makerAssetFilledAmount = LibMath.safeGetPartialAmountFloor(\n            leftOrder.makerAssetAmount,\n            leftOrder.takerAssetAmount,\n            rightMakerAssetAmountRemaining\n        );\n\n        return matchedFillResults;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMath.sol": "pragma solidity ^0.5.9;\n\nimport \"./LibRichErrors.sol\";\nimport \"./LibSafeMathRichErrors.sol\";\n\n\nlibrary LibSafeMath {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrors.rrevert(LibSafeMathRichErrors.Uint256BinOpError(\n                LibSafeMathRichErrors.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibSafeMathRichErrors {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMath.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"@0x/contracts-utils/contracts/src/LibSafeMath.sol\";\nimport \"@0x/contracts-utils/contracts/src/LibRichErrors.sol\";\nimport \"./LibMathRichErrors.sol\";\n\n\nlibrary LibMath {\n\n    using LibSafeMath for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrors.rrevert(LibMathRichErrors.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrors.rrevert(LibMathRichErrors.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol": "pragma solidity ^0.5.9;\n\n\nlibrary LibMathRichErrors {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IProtocolFees.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IProtocolFees {\n\n    // Logs updates to the protocol fee multiplier.\n    event ProtocolFeeMultiplier(uint256 oldProtocolFeeMultiplier, uint256 updatedProtocolFeeMultiplier);\n\n    // Logs updates to the protocolFeeCollector address.\n    event ProtocolFeeCollectorAddress(address oldProtocolFeeCollector, address updatedProtocolFeeCollector);\n\n    /// @dev Allows the owner to update the protocol fee multiplier.\n    /// @param updatedProtocolFeeMultiplier The updated protocol fee multiplier.\n    function setProtocolFeeMultiplier(uint256 updatedProtocolFeeMultiplier)\n        external;\n\n    /// @dev Allows the owner to update the protocolFeeCollector address.\n    /// @param updatedProtocolFeeCollector The updated protocolFeeCollector contract address.\n    function setProtocolFeeCollectorAddress(address updatedProtocolFeeCollector)\n        external;\n\n    /// @dev Returns the protocolFeeMultiplier\n    function protocolFeeMultiplier()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Returns the protocolFeeCollector address\n    function protocolFeeCollector()\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IMatchOrders.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IMatchOrders {\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point, and\n    ///      the matcher receives a profit denominated in the left maker asset.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrders(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrders Set of orders with the same maker / taker asset.\n    /// @param rightOrders Set of orders to match against `leftOrders`\n    /// @param leftSignatures Proof that left orders were created by the left makers.\n    /// @param rightSignatures Proof that right orders were created by the right makers.\n    /// @return batchMatchedFillResults Amounts filled and profit generated.\n    function batchMatchOrdersWithMaximalFill(\n        LibOrder.Order[] memory leftOrders,\n        LibOrder.Order[] memory rightOrders,\n        bytes[] memory leftSignatures,\n        bytes[] memory rightSignatures\n    )\n        public\n        payable\n        returns (LibFillResults.BatchMatchedFillResults memory batchMatchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is filled at their respective price point. However, the calculations are\n    ///      carried out as though the orders are both being filled at the right order's price point.\n    ///      The profit made by the left order goes to the taker (who matched the two orders).\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled and fees paid by maker and taker of matched orders.\n    function matchOrders(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n\n    /// @dev Match two complementary orders that have a profitable spread.\n    ///      Each order is maximally filled at their respective price point, and\n    ///      the matcher receives a profit denominated in either the left maker asset,\n    ///      right maker asset, or a combination of both.\n    /// @param leftOrder First order to match.\n    /// @param rightOrder Second order to match.\n    /// @param leftSignature Proof that order was created by the left maker.\n    /// @param rightSignature Proof that order was created by the right maker.\n    /// @return matchedFillResults Amounts filled by maker and taker of matched orders.\n    function matchOrdersWithMaximalFill(\n        LibOrder.Order memory leftOrder,\n        LibOrder.Order memory rightOrder,\n        bytes memory leftSignature,\n        bytes memory rightSignature\n    )\n        public\n        payable\n        returns (LibFillResults.MatchedFillResults memory matchedFillResults);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ISignatureValidator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ISignatureValidator {\n\n   // Allowed signature types.\n    enum SignatureType {\n        Illegal,                     // 0x00, default value\n        Invalid,                     // 0x01\n        EIP712,                      // 0x02\n        EthSign,                     // 0x03\n        Wallet,                      // 0x04\n        Validator,                   // 0x05\n        PreSigned,                   // 0x06\n        EIP1271Wallet,               // 0x07\n        NSignatureTypes              // 0x08, number of signature types. Always leave at end.\n    }\n\n    event SignatureValidatorApproval(\n        address indexed signerAddress,     // Address that approves or disapproves a contract to verify signatures.\n        address indexed validatorAddress,  // Address of signature validator contract.\n        bool isApproved                    // Approval or disapproval of validator contract.\n    );\n\n    /// @dev Approves a hash on-chain.\n    ///      After presigning a hash, the preSign signature type will become valid for that hash and signer.\n    /// @param hash Any 32-byte hash.\n    function preSign(bytes32 hash)\n        external\n        payable;\n\n    /// @dev Approves/unnapproves a Validator contract to verify signatures on signer's behalf.\n    /// @param validatorAddress Address of Validator contract.\n    /// @param approval Approval or disapproval of  Validator contract.\n    function setSignatureValidatorApproval(\n        address validatorAddress,\n        bool approval\n    )\n        external\n        payable;\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for an order is valid.\n    /// @param order The order.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given order and signer.\n    function isValidOrderSignature(\n        LibOrder.Order memory order,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a signature for a transaction is valid.\n    /// @param transaction The transaction.\n    /// @param signature Proof that the order has been signed by signer.\n    /// @return isValid true if the signature is valid for the given transaction and signer.\n    function isValidTransactionSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that an order, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param order The order.\n    /// @param orderHash The hash of the order.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given order and signer.\n    function _isValidOrderWithHashSignature(\n        LibOrder.Order memory order,\n        bytes32 orderHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n\n    /// @dev Verifies that a transaction, with provided order hash, has been signed\n    ///      by the given signer.\n    /// @param transaction The transaction.\n    /// @param transactionHash The hash of the transaction.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid True if the signature is valid for the given transaction and signer.\n    function _isValidTransactionWithHashSignature(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes32 transactionHash,\n        bytes memory signature\n    )\n        internal\n        view\n        returns (bool isValid);\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/LibEIP712.sol\";\n\n\nlibrary LibZeroExTransaction {\n\n    using LibZeroExTransaction for ZeroExTransaction;\n\n    // Hash for the EIP712 0x transaction schema\n    // keccak256(abi.encodePacked(\n    //    \"ZeroExTransaction(\",\n    //    \"uint256 salt,\",\n    //    \"uint256 expirationTimeSeconds,\",\n    //    \"uint256 gasPrice,\",\n    //    \"address signerAddress,\",\n    //    \"bytes data\",\n    //    \")\"\n    // ));\n    bytes32 constant internal _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH = 0xec69816980a3a3ca4554410e60253953e9ff375ba4536a98adfa15cc71541508;\n\n    struct ZeroExTransaction {\n        uint256 salt;                   // Arbitrary number to ensure uniqueness of transaction hash.\n        uint256 expirationTimeSeconds;  // Timestamp in seconds at which transaction expires.\n        uint256 gasPrice;               // gasPrice that transaction is required to be executed with.\n        address signerAddress;          // Address of transaction signer.\n        bytes data;                     // AbiV2 encoded calldata.\n    }\n\n    /// @dev Calculates the EIP712 typed data hash of a transaction with a given domain separator.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 typed data hash of the transaction.\n    function getTypedDataHash(ZeroExTransaction memory transaction, bytes32 eip712ExchangeDomainHash)\n        internal\n        pure\n        returns (bytes32 transactionHash)\n    {\n        // Hash the transaction with the domain separator of the Exchange contract.\n        transactionHash = LibEIP712.hashEIP712Message(\n            eip712ExchangeDomainHash,\n            transaction.getStructHash()\n        );\n        return transactionHash;\n    }\n\n    /// @dev Calculates EIP712 hash of the 0x transaction struct.\n    /// @param transaction 0x transaction structure.\n    /// @return EIP712 hash of the transaction struct.\n    function getStructHash(ZeroExTransaction memory transaction)\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        bytes32 schemaHash = _EIP712_ZEROEX_TRANSACTION_SCHEMA_HASH;\n        bytes memory data = transaction.data;\n        uint256 salt = transaction.salt;\n        uint256 expirationTimeSeconds = transaction.expirationTimeSeconds;\n        uint256 gasPrice = transaction.gasPrice;\n        address signerAddress = transaction.signerAddress;\n\n        // Assembly for more efficiently computing:\n        // result = keccak256(abi.encodePacked(\n        //     schemaHash,\n        //     salt,\n        //     expirationTimeSeconds,\n        //     gasPrice,\n        //     uint256(signerAddress),\n        //     keccak256(data)\n        // ));\n\n        assembly {\n            // Compute hash of data\n            let dataHash := keccak256(add(data, 32), mload(data))\n\n            // Load free memory pointer\n            let memPtr := mload(64)\n\n            mstore(memPtr, schemaHash)                                                                // hash of schema\n            mstore(add(memPtr, 32), salt)                                                             // salt\n            mstore(add(memPtr, 64), expirationTimeSeconds)                                            // expirationTimeSeconds\n            mstore(add(memPtr, 96), gasPrice)                                                         // gasPrice\n            mstore(add(memPtr, 128), and(signerAddress, 0xffffffffffffffffffffffffffffffffffffffff))  // signerAddress\n            mstore(add(memPtr, 160), dataHash)                                                        // hash of data\n\n            // Compute hash\n            result := keccak256(memPtr, 192)\n        }\n        return result;\n    }\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransactions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibZeroExTransaction.sol\";\n\n\ncontract ITransactions {\n\n    // TransactionExecution event is emitted when a ZeroExTransaction is executed.\n    event TransactionExecution(bytes32 indexed transactionHash);\n\n    /// @dev Executes an Exchange method call in the context of signer.\n    /// @param transaction 0x transaction containing salt, signerAddress, and data.\n    /// @param signature Proof that transaction has been signed by signer.\n    /// @return ABI encoded return data of the underlying Exchange function call.\n    function executeTransaction(\n        LibZeroExTransaction.ZeroExTransaction memory transaction,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (bytes memory);\n\n    /// @dev Executes a batch of Exchange method calls in the context of signer(s).\n    /// @param transactions Array of 0x transactions containing salt, signerAddress, and data.\n    /// @param signatures Array of proofs that transactions have been signed by signer(s).\n    /// @return Array containing ABI encoded return data for each of the underlying Exchange function calls.\n    function batchExecuteTransactions(\n        LibZeroExTransaction.ZeroExTransaction[] memory transactions,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (bytes[] memory);\n\n    /// @dev The current function will be called in the context of this address (either 0x transaction signer or `msg.sender`).\n    ///      If calling a fill function, this address will represent the taker.\n    ///      If calling a cancel function, this address will represent the maker.\n    /// @return Signer of 0x transaction if entry point is `executeTransaction`.\n    ///         `msg.sender` if entry point is any other function.\n    function _getCurrentContextAddress()\n        internal\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IAssetProxyDispatcher.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IAssetProxyDispatcher {\n\n    // Logs registration of new asset proxy\n    event AssetProxyRegistered(\n        bytes4 id,              // Id of new registered AssetProxy.\n        address assetProxy      // Address of new registered AssetProxy.\n    );\n\n    /// @dev Registers an asset proxy to its asset proxy id.\n    ///      Once an asset proxy is registered, it cannot be unregistered.\n    /// @param assetProxy Address of new asset proxy to register.\n    function registerAssetProxy(address assetProxy)\n        external;\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/IWrapperFunctions.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\";\nimport \"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\";\n\n\ncontract IWrapperFunctions {\n\n    /// @dev Fills the input order. Reverts if exact takerAssetFillAmount not filled.\n    /// @param order Order struct containing order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signature Proof that order has been created by maker.\n    function fillOrKillOrder(\n        LibOrder.Order memory order,\n        uint256 takerAssetFillAmount,\n        bytes memory signature\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrKillOrder.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrKillOrders(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder. If any fill reverts, the error is caught and ignored.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmounts Array of desired amounts of takerAsset to sell in orders.\n    /// @param signatures Proofs that orders have been created by makers.\n    /// @return Array of amounts filled and fees paid by makers and taker.\n    function batchFillOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256[] memory takerAssetFillAmounts,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults[] memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Desired amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.\n    ///      If any fill reverts, the error is caught and ignored.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Desired amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersNoThrow(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketSellOrdersNoThrow then reverts if < takerAssetFillAmount has been sold.\n    ///      NOTE: This function does not enforce that the takerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param takerAssetFillAmount Minimum amount of takerAsset to sell.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketSellOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 takerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Calls marketBuyOrdersNoThrow then reverts if < makerAssetFillAmount has been bought.\n    ///      NOTE: This function does not enforce that the makerAsset is the same for each order.\n    /// @param orders Array of order specifications.\n    /// @param makerAssetFillAmount Minimum amount of makerAsset to buy.\n    /// @param signatures Proofs that orders have been signed by makers.\n    /// @return Amounts filled and fees paid by makers and taker.\n    function marketBuyOrdersFillOrKill(\n        LibOrder.Order[] memory orders,\n        uint256 makerAssetFillAmount,\n        bytes[] memory signatures\n    )\n        public\n        payable\n        returns (LibFillResults.FillResults memory fillResults);\n\n    /// @dev Executes multiple calls of cancelOrder.\n    /// @param orders Array of order specifications.\n    function batchCancelOrders(LibOrder.Order[] memory orders)\n        public\n        payable;\n}\n",
        "@0x/contracts-exchange/contracts/src/interfaces/ITransferSimulator.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract ITransferSimulator {\n\n    /// @dev This function may be used to simulate any amount of transfers\n    /// As they would occur through the Exchange contract. Note that this function\n    /// will always revert, even if all transfers are successful. However, it may\n    /// be used with eth_call or with a try/catch pattern in order to simulate\n    /// the results of the transfers.\n    /// @param assetData Array of asset details, each encoded per the AssetProxy contract specification.\n    /// @param fromAddresses Array containing the `from` addresses that correspond with each transfer.\n    /// @param toAddresses Array containing the `to` addresses that correspond with each transfer.\n    /// @param amounts Array containing the amounts that correspond to each transfer.\n    /// @return This function does not return a value. However, it will always revert with\n    /// `Error(\"TRANSFERS_SUCCESSFUL\")` if all of the transfers were successful.\n    function simulateDispatchTransferFromCalls(\n        bytes[] memory assetData,\n        address[] memory fromAddresses,\n        address[] memory toAddresses,\n        uint256[] memory amounts\n    )\n        public;\n}\n",
        "@0x/contracts-exchange-libs/contracts/src/IWallet.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\n\ncontract IWallet {\n\n    bytes4 internal constant LEGACY_WALLET_MAGIC_VALUE = 0xb0671381;\n\n    /// @dev Validates a hash with the `Wallet` signature type.\n    /// @param hash Message hash that is signed.\n    /// @param signature Proof of signing.\n    /// @return magicValue `bytes4(0xb0671381)` if the signature check succeeds.\n    function isValidSignature(\n        bytes32 hash,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bytes4 magicValue);\n}\n",
        "@0x/contracts-utils/contracts/src/DeploymentConstants.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n\n    // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xFb2DD2A1366dE37f7241C83d47DA58fd503E2C64;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/Refundable.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./ReentrancyGuard.sol\";\n\n\ncontract Refundable is\n    ReentrancyGuard\n{\n\n    // This bool is used by the refund modifier to allow for lazily evaluated refunds.\n    bool internal _shouldNotRefund;\n\n    modifier refundFinalBalance {\n        _;\n        _refundNonZeroBalanceIfEnabled();\n    }\n\n    modifier refundFinalBalanceNoReentry {\n        _lockMutexOrThrowIfAlreadyLocked();\n        _;\n        _refundNonZeroBalanceIfEnabled();\n        _unlockMutex();\n    }\n\n    modifier disableRefundUntilEnd {\n        if (_areRefundsDisabled()) {\n            _;\n        } else {\n            _disableRefund();\n            _;\n            _enableAndRefundNonZeroBalance();\n        }\n    }\n\n    function _refundNonZeroBalanceIfEnabled()\n        internal\n    {\n        if (!_areRefundsDisabled()) {\n            _refundNonZeroBalance();\n        }\n    }\n\n    function _refundNonZeroBalance()\n        internal\n    {\n        uint256 balance = address(this).balance;\n        if (balance > 0) {\n            msg.sender.transfer(balance);\n        }\n    }\n\n    function _disableRefund()\n        internal\n    {\n        _shouldNotRefund = true;\n    }\n\n    function _enableAndRefundNonZeroBalance()\n        internal\n    {\n        _shouldNotRefund = false;\n        _refundNonZeroBalance();\n    }\n\n    function _areRefundsDisabled()\n        internal\n        view\n        returns (bool)\n    {\n        return _shouldNotRefund;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/ReentrancyGuard.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibReentrancyGuardRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex.\n    bool private _locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        _lockMutexOrThrowIfAlreadyLocked();\n        _;\n        _unlockMutex();\n    }\n\n    function _lockMutexOrThrowIfAlreadyLocked()\n        internal\n    {\n        // Ensure mutex is unlocked.\n        if (_locked) {\n            LibRichErrors.rrevert(\n                LibReentrancyGuardRichErrors.IllegalReentrancyError()\n            );\n        }\n        // Lock mutex.\n        _locked = true;\n    }\n\n    function _unlockMutex()\n        internal\n    {\n        // Unlock mutex.\n        _locked = false;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/LibReentrancyGuardRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibReentrancyGuardRichErrors {\n\n    // bytes4(keccak256(\"IllegalReentrancyError()\"))\n    bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =\n        hex\"0c3b823f\";\n\n    // solhint-disable func-name-mixedcase\n    function IllegalReentrancyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES;\n    }\n}\n",
        "../src/interfaces/IERC20Bridge.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\ncontract IERC20Bridge {\n\n    /// @dev Result of a successful bridge call.\n    bytes4 constant internal BRIDGE_SUCCESS = 0xdc1600f3;\n\n    /// @dev Emitted when a trade occurs.\n    /// @param inputToken The token the bridge is converting from.\n    /// @param outputToken The token the bridge is converting to.\n    /// @param inputTokenAmount Amount of input token.\n    /// @param outputTokenAmount Amount of output token.\n    /// @param from The `from` address in `bridgeTransferFrom()`\n    /// @param to The `to` address in `bridgeTransferFrom()`\n    event ERC20BridgeTransfer(\n        address inputToken,\n        address outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        address from,\n        address to\n    );\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.5.17+commit.d19bba13",
        "settings": {
            "remappings": [
                "@0x/contracts-erc20=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-erc20",
                "@0x/contracts-utils=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-utils",
                "@0x/contracts-exchange-libs=/Users/michaelzhu/monorepo/contracts/asset-proxy/node_modules/@0x/contracts-exchange-libs",
                "@0x/contracts-exchange=/Users/michaelzhu/monorepo/node_modules/@0x/contracts-exchange"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
