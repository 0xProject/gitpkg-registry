{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes",
                        "name": "signature",
                        "type": "bytes"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "makerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "takerAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipientAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "senderAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerAssetAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "makerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "takerFee",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "expirationTimeSeconds",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "makerFeeAssetData",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bytes",
                                "name": "takerFeeAssetData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct IExchange.Order[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "orderSignatures",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[][]",
                        "name": "paths",
                        "type": "address[][]"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "reserveOffset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSushiSwap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address[][]",
                        "name": "paths",
                        "type": "address[][]"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "reserveOffset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSushiSwap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getOrderFillableMakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getOrderFillableTakerAmount((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes),bytes,address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getOrderFillableTakerAssetAmounts((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V3 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor(address[][],address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "paths": "The paths to check for Bancor. Only the best is used",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO(address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork(uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "reserveOffset": "The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSushiSwap(address,address[],uint256[])": {
                    "details": "Sample buy quotes from SushiSwap",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor(address[][],address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "paths": "The paths to check for Bancor. Only the best is used",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO(address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberNetwork(uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "reserveOffset": "The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable mUSD contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSushiSwap(address,address[],uint256[])": {
                    "details": "Sample sell quotes from SushiSwap.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60a06040527feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200003557600080fd5b5060805160601c61835b620000546000398061282f525061835b6000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80638e5a0e071161017b578063be5b12b4116100d8578063e78ac0451161008c578063e9a8e44211610071578063e9a8e44214610620578063f5a4994d14610633578063fc9fe41b14610646576102c8565b8063e78ac045146105fa578063e8e4af091461060d576102c8565b8063c8c74a37116100bd578063c8c74a37146105c1578063ca7893ba146105d4578063d442057b146105e7576102c8565b8063be5b12b41461058c578063c25c4138146105ae576102c8565b8063ada517471161012f578063bc61a69511610114578063bc61a69514610546578063bccc34c614610559578063bd71ecf614610579576102c8565b8063ada5174714610512578063adc636bf14610525576102c8565b8063987777481161016057806398777748146104d95780639ea0ff13146104ec578063a4698417146104ff576102c8565b80638e5a0e07146104a45780639209483b146104c6576102c8565b806357494b1d116102295780636dd6b78d116101dd57806370bba11a116101c257806370bba11a1461045c578063742bd0501461046f57806387a74bdb14610482576102c8565b80636dd6b78d14610436578063706e2f9b14610449576102c8565b806360ee052a1161020e57806360ee052a146103f057806364ee6ade1461040357806368be3cf214610416576102c8565b806357494b1d146103ca5780635d5b674f146103dd576102c8565b80633105fec1116102805780633b77ebae116102655780633b77ebae1461039157806340bc03ae146103a45780634703a7e6146103b7576102c8565b80633105fec11461036b57806339b085ad1461037e576102c8565b806315e42a61116102b157806315e42a611461030b578063162790551461032b5780632d753aa41461034b576102c8565b80630b054f8d146102cd5780630fe3fe5b146102f8575b600080fd5b6102e06102db366004617053565b610659565b6040516102ef93929190617bff565b60405180910390f35b6102e0610306366004617053565b6108b3565b61031e610319366004617562565b6108c2565b6040516102ef9190617e91565b61033e610339366004616d35565b610aa7565b6040516102ef9190617e4f565b61035e610359366004616e41565b610ab1565b6040516102ef9190617e3c565b61035e610379366004616fea565b610c83565b61035e61038c366004617391565b610df3565b61031e61039f366004617727565b610f74565b61035e6103b2366004617643565b6115c1565b61035e6103c5366004616f8a565b61176f565b61035e6103d8366004616ec7565b6118c0565b61035e6103eb366004616ec7565b611efb565b61035e6103fe366004616f8a565b612048565b61035e610411366004616f8a565b6122c5565b6104296104243660046171e9565b612416565b6040516102ef9190617da9565b61035e610444366004616f8a565b612576565b61035e6104573660046172c2565b6127db565b61035e61046a366004616fea565b6128f5565b61035e61047d366004616fea565b612a50565b610495610490366004617791565b612ba8565b6040516102ef93929190617efb565b6104b76104b2366004617258565b612d96565b6040516102ef939291906180ba565b61035e6104d4366004617643565b612fc5565b61035e6104e7366004616ec7565b613200565b61031e6104fa366004616f3a565b613814565b61035e61050d366004616ec7565b613aaa565b610495610520366004617791565b613beb565b610538610533366004616ec7565b613d1b565b6040516102ef929190617f97565b61035e610554366004616f8a565b613f0a565b61056c610567366004617509565b614059565b6040516102ef9190617f41565b61035e6105873660046172f5565b614392565b61059f61059a366004616f8a565b61443f565b6040516102ef93929190617e5a565b61035e6105bc366004616ec7565b614742565b61035e6105cf366004616fea565b6147a8565b61035e6105e2366004616f8a565b614900565b61059f6105f5366004616f8a565b614966565b61035e61060836600461733a565b614c33565b61035e61061b366004616ec7565b614ce2565b61035e61062e366004617391565b614e23565b610538610641366004616ec7565b614ec6565b6104b7610654366004617258565b615067565b60006060806106666152ce565b9250865160001415610677576108a9565b6000805b885181101561078d57600289828151811061069257fe5b60200260200101515110156106a657610785565b8473ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08b84815181106106d257fe5b60200260200101518960018b5103815181106106ea57fe5b60200260200101516040518463ffffffff1660e01b815260040161070f929190617d87565b60206040518083038187803b15801561072757600080fd5b5086fa93505050508015610758575060408051601f3d908101601f19168201909252610755918101906174f1565b60015b61076157610785565b828111156107835780925089828151811061077857fe5b602002602001015194505b505b60010161067b565b5084518067ffffffffffffffff811180156107a757600080fd5b506040519080825280602002602001820160405280156107d1578160200160208202803683370190505b50925060005b818110156108a5578573ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e0878a858151811061080c57fe5b60200260200101516040518463ffffffff1660e01b8152600401610831929190617d87565b60206040518083038187803b15801561084957600080fd5b5086fa9350505050801561087a575060408051601f3d908101601f19168201909252610877918101906174f1565b60015b610883576108a5565b8085838151811061089057fe5b602002602001018181525050506001016107d7565b5050505b9450945094915050565b60006060809450945094915050565b60008451600014156108d657506000610a9f565b6108de6153e7565b73ffffffffffffffffffffffffffffffffffffffff1663418436bc6207a1206109056153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461093d5786610953565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61095b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461099357866109a9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b6040518763ffffffff1660e01b81526004016109cd959493929190617baf565b60206040518083038187803b1580156109e557600080fd5b5086fa93505050508015610a16575060408051601f3d908101601f19168201909252610a13918101906174f1565b60015b610a54573d808015610a44576040519150601f19603f3d011682016040523d82523d6000602084013e610a49565b606091505b506000915050610a9f565b6000610a5f85615417565b60ff1690506000610a6f87615417565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281610a9057fe5b0481610a9857fe5b0493505050505b949350505050565b803b15155b919050565b80516060908067ffffffffffffffff81118015610acd57600080fd5b50604051908082528060200260200182016040528015610af7578160200160208202803683370190505b50915073ffffffffffffffffffffffffffffffffffffffff8716610b1b5750610c7a565b60005b81811015610c7757600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80636e79e13360e01b8b8b8b8b8981518110610b5c57fe5b6020026020010151604051602401610b779493929190617acd565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610be291906179f8565b6000604051808303818686fa925050503d8060008114610c1e576040519150601f19603f3d011682016040523d82523d6000602084013e610c23565b606091505b509150915060008215610c475781806020019051810190610c4491906174f1565b90505b80610c5457505050610c77565b80868581518110610c6157fe5b6020908102919091010152505050600101610b1e565b50505b95945050505050565b80516060908067ffffffffffffffff81118015610c9f57600080fd5b50604051908082528060200260200182016040528015610cc9578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620249f0868481518110610d0357fe5b6020026020010151886040518463ffffffff1660e01b8152600401610d2992919061814f565b60006040518083038187803b158015610d4157600080fd5b5086fa93505050508015610d7757506040513d6000823e601f3d908101601f19168201604052610d74919081019061744a565b60015b610db1573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b606091505b5050610dea565b80600187510381518110610dc157fe5b6020026020010151848381518110610dd557fe5b60200260200101818152505050600101610ccf565b50509392505050565b6060835167ffffffffffffffff81118015610e0d57600080fd5b50604051908082528060200260200182016040528015610e37578160200160208202803683370190505b50905060005b84518114610f6c573073ffffffffffffffffffffffffffffffffffffffff16633b77ebae62030d40878481518110610e7157fe5b6020026020010151878581518110610e8557fe5b6020026020010151876040518563ffffffff1660e01b8152600401610eac93929190618103565b60206040518083038187803b158015610ec457600080fd5b5086fa93505050508015610ef5575060408051601f3d908101601f19168201909252610ef2918101906174f1565b60015b610f49573d808015610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b506000838381518110610f3757fe5b60200260200101818152505050610f64565b80838381518110610f5657fe5b602002602001018181525050505b600101610e3d565b509392505050565b6000825160001480610f8857506080840151155b80610f95575060a0840151155b15610fa2575060006115ba565b610faa6168a3565b6040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690639d3fa4b990610ffc9088906004016180f0565b60606040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906176df565b905060038151600681111561105d57fe5b1461106c5760009150506115ba565b602081015185516040517f8171c40700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638171c407926110c5928990600401617ec6565b60206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611115919061747d565b6111235760009150506115ba565b6040517f6070410800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff851690636070410890611198907ff47261b00000000000000000000000000000000000000000000000000000000090600401617f14565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e89190616d51565b905060006111fa876101400151615428565b905073ffffffffffffffffffffffffffffffffffffffff811661122357600093505050506115ba565b6000808860c0015111611237576000611245565b611245886101800151615428565b9050600061126485604001518a60a001516154b190919063ffffffff16565b905080955060006112c9828b60a001518673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146112b1578c608001516112c4565b60c08d015160808e01516112c4916154d5565b6154f1565b8a516040517f70a0823100000000000000000000000000000000000000000000000000000000815291925060009161141f9173ffffffffffffffffffffffffffffffffffffffff8816916370a082319161132591600401617a14565b60206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906174f1565b8c516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916113ca91908c90600401617a35565b60206040518083038186803b1580156113e257600080fd5b505afa1580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906174f1565b615525565b9050818110156114375761143481838561553b565b97505b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611488575073ffffffffffffffffffffffffffffffffffffffff841615155b156115b2578a516040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161158c9173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916114e79190600401617a14565b60206040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153791906174f1565b8d516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916113ca91908d90600401617a35565b90508b60c001518110156115b0576115ad8961141a838f60c001518861553b565b98505b505b505050505050505b9392505050565b80516060908067ffffffffffffffff811180156115dd57600080fd5b50604051908082528060200260200182016040528015611607578160200160208202803683370190505b50915060005b818110156117655760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a602001518a8a8a888151811061164b57fe5b602002602001015160405160240161166593929190617ff5565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516116d091906179f8565b6000604051808303818686fa925050503d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b509150915060008215611735578180602001905181019061173291906174f1565b90505b8061174257505050611765565b8086858151811061174f57fe5b602090810291909101015250505060010161160d565b5050949350505050565b606061177b838561555f565b81518067ffffffffffffffff8111801561179457600080fd5b506040519080825280602002602001820160405280156117be578160200160208202803683370190505b50915060005b81811015610dea576117d46155d2565b73ffffffffffffffffffffffffffffffffffffffff1663ff1fd974620f4240888888868151811061180157fe5b60200260200101516040518563ffffffff1660e01b815260040161182793929190617b7e565b60206040518083038187803b15801561183f57600080fd5b5086fa93505050508015611870575060408051601f3d908101601f1916820190925261186d918101906174f1565b60015b61189e573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b808483815181106118ab57fe5b602002602001018181525050506001016117c4565b805160609085908067ffffffffffffffff811180156118de57600080fd5b50604051908082528060200260200182016040528015611908578160200160208202803683370190505b506040517f2f37b62400000000000000000000000000000000000000000000000000000000815290935073ffffffffffffffffffffffffffffffffffffffff831690632f37b6249061195e908990600401617a14565b60206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae919061747d565b1580611a5957506040517f2f37b62400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632f37b62490611a07908890600401617a14565b60206040518083038186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a57919061747d565b155b15611a65575050610a9f565b611a6d6168c5565b6040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f90611abf908a90600401617a14565b60206040518083038186803b158015611ad757600080fd5b505afa158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906174f1565b81526040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f90611b63908990600401617a14565b60206040518083038186803b158015611b7b57600080fd5b505afa158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb391906174f1565b60208201526040517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce690611c0a908a90600401617a14565b60206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a91906174f1565b604080830191909152517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce690611cb3908990600401617a14565b60206040518083038186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0391906174f1565b8160600181815250508273ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5257600080fd5b505afa158015611d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8a91906174f1565b608082015260005b82811015611eef57611dbd82602001516003670de0b6b3a764000081611db457fe5b046001016155ea565b868281518110611dc957fe5b60200260200101511115611ddc57611eef565b8373ffffffffffffffffffffffffffffffffffffffff1663f8d6aed4620493e084600001518560400151866020015187606001518c8881518110611e1c57fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401611e4a9695949392919061817e565b60206040518083038187803b158015611e6257600080fd5b5086fa93505050508015611e93575060408051601f3d908101601f19168201909252611e90918101906174f1565b60015b611ecd573d808015611ec1576040519150601f19603f3d011682016040523d82523d6000602084013e611ec6565b606091505b5050611eef565b80868381518110611eda57fe5b60200260200101818152505050600101611d92565b50505050949350505050565b80516060908067ffffffffffffffff81118015611f1757600080fd5b50604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663525d0da7620493e08888888681518110611f7d57fe5b60200260200101516040518563ffffffff1660e01b8152600401611fa393929190617b7e565b60206040518083038187803b158015611fbb57600080fd5b5086fa93505050508015611fec575060408051601f3d908101601f19168201909252611fe9918101906174f1565b60015b612026573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b606091505b5050611765565b8084838151811061203357fe5b60200260200101818152505050600101611f47565b6060612054838561555f565b81518067ffffffffffffffff8111801561206d57600080fd5b50604051908082528060200260200182016040528015612097578160200160208202803683370190505b50915060006120a46153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146120e4576120df86615647565b6120e7565b60005b905060006120f36153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146121335761212e86615647565b612136565b60005b905060005b838110156122ba57600161214d6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156121c6576121a584632640f62c60e01b89858151811061219857fe5b60200260200101516156d9565b8784815181106121b157fe5b602002602001018193508281525050506122a6565b6121ce6153ff565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415612219576121a5836359e9486260e01b89858151811061219857fe5b6000612233846359e9486260e01b8a868151811061219857fe5b92509050801561228957612268857f2640f62c00000000000000000000000000000000000000000000000000000000836156d9565b88858151811061227457fe5b602002602001018194508281525050506122a4565b600087848151811061229757fe5b6020026020010181815250505b505b806122b157506122ba565b5060010161213b565b505050509392505050565b60606122d1838561555f565b81518067ffffffffffffffff811180156122ea57600080fd5b50604051908082528060200260200182016040528015612314578160200160208202803683370190505b50915060005b81811015610dea5761232a6155d2565b73ffffffffffffffffffffffffffffffffffffffff1663144a2752620f4240878988868151811061235757fe5b60200260200101516040518563ffffffff1660e01b815260040161237d93929190617b7e565b60206040518083038187803b15801561239557600080fd5b5086fa935050505080156123c6575060408051601f3d908101601f191682019092526123c3918101906174f1565b60015b6123f4573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b8084838151811061240157fe5b6020026020010181815250505060010161231a565b60608167ffffffffffffffff8111801561242f57600080fd5b5060405190808252806020026020018201604052801561246957816020015b6124566168f4565b81526020019060019003908161244e5790505b50905060005b80831461256f57600182828151811061248457fe5b6020908102919091018101519115159101528383828181106124a257fe5b90506020028101906124b491906181a6565b151590506124c157612567565b308484838181106124ce57fe5b90506020028101906124e091906181a6565b6040516124ee9291906179e8565b600060405180830381855afa9150503d8060008114612529576040519150601f19603f3d011682016040523d82523d6000602084013e61252e565b606091505b5083838151811061253b57fe5b602002602001015160200184848151811061255257fe5b60209081029190910101519190915290151590525b60010161246f565b5092915050565b6060612582838561555f565b81518067ffffffffffffffff8111801561259b57600080fd5b506040519080825280602002602001820160405280156125c5578160200160208202803683370190505b50915060006125d26153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126125761260d86615647565b612615565b60005b905060006126216153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126615761265c86615647565b612664565b60005b905060005b838110156122ba57600161267b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156126e7576126c6846395b68fe760e01b89858151811061219857fe5b8784815181106126d257fe5b602002602001018193508281525050506127c7565b6126ef6153ff565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561273a576126c68363cd7724c360e01b89858151811061219857fe5b6000612754856395b68fe760e01b8a868151811061219857fe5b9250905080156127aa57612789847fcd7724c300000000000000000000000000000000000000000000000000000000836156d9565b88858151811061279557fe5b602002602001018194508281525050506127c5565b60008784815181106127b857fe5b6020026020010181815250505b505b806127d257506122ba565b50600101612669565b6060815167ffffffffffffffff811180156127f557600080fd5b5060405190808252806020026020018201604052801561281f578160200160208202803683370190505b50905060005b825181146128ef577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1683828151811061287057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146128ca576128c58382815181106128a257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16615804565b6128cd565b60125b60ff168282815181106128dc57fe5b6020908102919091010152600101612825565b50919050565b80516060908067ffffffffffffffff8111801561291157600080fd5b5060405190808252806020026020018201604052801561293b578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620249f086848151811061297557fe5b6020026020010151886040518463ffffffff1660e01b815260040161299b92919061814f565b60006040518083038187803b1580156129b357600080fd5b5086fa935050505080156129e957506040513d6000823e601f3d908101601f191682016040526129e6919081019061744a565b60015b612a17573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b80600187510381518110612a2757fe5b6020026020010151848381518110612a3b57fe5b60200260200101818152505050600101612941565b80516060908067ffffffffffffffff81118015612a6c57600080fd5b50604051908082528060200260200182016040528015612a96578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff16631f00ca74620249f0868481518110612ad057fe5b6020026020010151886040518463ffffffff1660e01b8152600401612af692919061814f565b60006040518083038187803b158015612b0e57600080fd5b5086fa93505050508015612b4457506040513d6000823e601f3d908101601f19168201604052612b41919081019061744a565b60015b612b72573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b80600081518110612b7f57fe5b6020026020010151848381518110612b9357fe5b60200260200101818152505050600101612a9c565b6000606080612bb7858761555f565b612bc28686896158d6565b925082612bce576108a9565b6040517fbccc34c6000000000000000000000000000000000000000000000000000000008152309063bccc34c690612c0e9086908a908a90600401617e9a565b60006040518083038186803b158015612c2657600080fd5b505afa158015612c3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c62919081019061752f565b84519092508067ffffffffffffffff81118015612c7e57600080fd5b50604051908082528060200260200182016040528015612ca8578160200160208202803683370190505b50915060005b81811015612d8a5760003073ffffffffffffffffffffffffffffffffffffffff166315e42a61868b8b8b8781518110612ce357fe5b60200260200101516040518563ffffffff1660e01b8152600401612d0a9493929190617f54565b60206040518083038186803b158015612d2257600080fd5b505afa158015612d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5a91906174f1565b905080612d69575050506108a9565b80848381518110612d7657fe5b602090810291909101015250600101612cae565b50509450945094915050565b612d9e61690c565b612da661690c565b600080805b87518114612eb657612df26020898381518110612dc457fe5b60200260200101515103878a8481518110612ddb57fe5b6020026020010151615a979092919063ffffffff16565b600060603073ffffffffffffffffffffffffffffffffffffffff168a8481518110612e1957fe5b6020026020010151604051612e2e91906179f8565b600060405180830381855afa9150503d8060008114612e69576040519150601f19603f3d011682016040523d82523d6000602084013e612e6e565b606091505b50915091508115612eac576000612e92602083510383615aa790919063ffffffff16565b905084811115612eaa57838852602088018290529350835b505b5050600101612dab565b5080612ec25750612fbc565b60005b86518114612fb957612ef56020888381518110612ede57fe5b6020026020010151510383898481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff16898481518110612f1c57fe5b6020026020010151604051612f3191906179f8565b600060405180830381855afa9150503d8060008114612f6c576040519150601f19603f3d011682016040523d82523d6000602084013e612f71565b606091505b50915091508115612faf576000612f95602083510383615aa790919063ffffffff16565b905085811115612fad57838752602087018290529450845b505b5050600101612ec5565b50505b93509350939050565b60408401516060907fffffffff000000000000000000000000000000000000000000000000000000001661305f5760408051606081019091526130589080613011868960808401618013565b60405160208183030381529060405281526020018688604051602001613038929190618013565b6040516020818303038152906040528152602001615ab381525083615c2c565b9050610a9f565b81518067ffffffffffffffff8111801561307857600080fd5b506040519080825280602002602001820160405280156130a2578160200160208202803683370190505b50915060005b818110156117655760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a604001518a8a8a88815181106130e657fe5b602002602001015160405160240161310093929190617ff5565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161316b91906179f8565b6000604051808303818686fa925050503d80600081146131a7576040519150601f19603f3d011682016040523d82523d6000602084013e6131ac565b606091505b5091509150600082156131d057818060200190518101906131cd91906174f1565b90505b806131dd57505050611765565b808685815181106131ea57fe5b60209081029190910101525050506001016130a8565b805160609085908067ffffffffffffffff8111801561321e57600080fd5b50604051908082528060200260200182016040528015613248578160200160208202803683370190505b506040517f2f37b62400000000000000000000000000000000000000000000000000000000815290935073ffffffffffffffffffffffffffffffffffffffff831690632f37b6249061329e908990600401617a14565b60206040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ee919061747d565b158061339957506040517f2f37b62400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632f37b62490613347908890600401617a14565b60206040518083038186803b15801561335f57600080fd5b505afa158015613373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613397919061747d565b155b156133a5575050610a9f565b6133ad6168c5565b6040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f906133ff908a90600401617a14565b60206040518083038186803b15801561341757600080fd5b505afa15801561342b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344f91906174f1565b81526040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f906134a3908990600401617a14565b60206040518083038186803b1580156134bb57600080fd5b505afa1580156134cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f391906174f1565b60208201526040517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce69061354a908a90600401617a14565b60206040518083038186803b15801561356257600080fd5b505afa158015613576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359a91906174f1565b604080830191909152517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce6906135f3908990600401617a14565b60206040518083038186803b15801561360b57600080fd5b505afa15801561361f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364391906174f1565b8160600181815250508273ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561369257600080fd5b505afa1580156136a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ca91906174f1565b608082015260005b82811015611eef5781516136ee906706f05b59d3b200006155ea565b8682815181106136fa57fe5b6020026020010151111561370d57611eef565b8373ffffffffffffffffffffffffffffffffffffffff1663ba9530a6620493e084600001518560400151866020015187606001518c888151811061374d57fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161377b9695949392919061817e565b60206040518083038187803b15801561379357600080fd5b5086fa935050505080156137c4575060408051601f3d908101601f191682019092526137c1918101906174f1565b60015b6137f2573d808015611ec1576040519150601f19603f3d011682016040523d82523d6000602084013e611ec6565b808683815181106137ff57fe5b602002602001018181525050506001016136d2565b6000808573ffffffffffffffffffffffffffffffffffffffff1663901754d786866040518363ffffffff1660e01b8152600401613852929190617a35565b60206040518083038186803b15801561386a57600080fd5b505afa15801561387e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a29190616d51565b905073ffffffffffffffffffffffffffffffffffffffff81166138c9576000915050610a9f565b600073ffffffffffffffffffffffffffffffffffffffff86161561398e576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190613939908590600401617a14565b60206040518083038186803b15801561395157600080fd5b505afa158015613965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398991906174f1565b6139a7565b8173ffffffffffffffffffffffffffffffffffffffff16315b9050838110156139bc57600092505050610a9f565b6040517f1e1401f800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690631e1401f890620249f090613a17908a908a908a90600401617b7e565b60206040518083038187803b158015613a2f57600080fd5b5086fa93505050508015613a60575060408051601f3d908101601f19168201909252613a5d918101906174f1565b60015b613aa0573d808015613a8e576040519150601f19603f3d011682016040523d82523d6000602084013e613a93565b606091505b5060009350505050610a9f565b9250610a9f915050565b80516060908067ffffffffffffffff81118015613ac657600080fd5b50604051908082528060200260200182016040528015613af0578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663343fbcdd62061a808888888681518110613b2c57fe5b60200260200101516040518563ffffffff1660e01b8152600401613b5293929190617b7e565b60206040518083038187803b158015613b6a57600080fd5b5086fa93505050508015613b9b575060408051601f3d908101601f19168201909252613b98918101906174f1565b60015b613bc9573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b80848381518110613bd657fe5b60200260200101818152505050600101613af6565b6000606080613bfa858761555f565b613c058686896158d6565b925082613c11576108a9565b6040517fbccc34c6000000000000000000000000000000000000000000000000000000008152309063bccc34c690613c519086908a908a90600401617e9a565b60006040518083038186803b158015613c6957600080fd5b505afa158015613c7d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ca5919081019061752f565b9150613d0f60405180606001604052808785604051602001613cc8929190617c40565b60405160208183030381529060405281526020018885604051602001613cef929190617c40565b6040516020818303038152906040528152602001615e2a81525085615c2c565b90509450945094915050565b60006060613d29848661555f565b82518067ffffffffffffffff81118015613d4257600080fd5b50604051908082528060200260200182016040528015613d6c578160200160208202803683370190505b5091506000613d796153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614613db15786613db4565b60005b90506000613dc06153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614613df85786613dfb565b60005b905060005b83811015613e57576000613e298b85858b8681518110613e1c57fe5b6020026020010151613814565b905080613e365750613e57565b80868381518110613e4357fe5b602090810291909101015250600101613e00565b506040517f901754d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a169063901754d790613eac9085908590600401617a35565b60206040518083038186803b158015613ec457600080fd5b505afa158015613ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efc9190616d51565b945050505094509492505050565b80516060908067ffffffffffffffff81118015613f2657600080fd5b50604051908082528060200260200182016040528015613f50578160200160208202803683370190505b50915060005b81811015610dea57613f66615f2c565b73ffffffffffffffffffffffffffffffffffffffff166372ea9076620c35008888888681518110613f9357fe5b60200260200101516040518563ffffffff1660e01b8152600401613fb993929190617b7e565b60006040518083038187803b158015613fd157600080fd5b5086fa9350505050801561400757506040513d6000823e601f3d908101601f191682016040526140049190810190617499565b60015b614035573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b8086858151811061404257fe5b602002602001018181525050505050600101613f56565b60606000614065615f44565b6040805160018082528183019092529192506060919060208083019080368337019050509050858160008151811061409957fe5b6020908102919091010152606060006040519080825280602002602001820160405280156140d1578160200160208202803683370190505b5090506140dc6153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415614205576040517f81efcbdd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906381efcbdd906207a1209061416d90899060019088908890600401617c6f565b60006040518083038187803b15801561418557600080fd5b5086fa935050505080156141bb57506040513d6000823e601f3d908101601f191682016040526141b8919081019061752f565b60015b6141f5573d8080156141e9576040519150601f19603f3d011682016040523d82523d6000602084013e6141ee565b606091505b5050614200565b93506115ba92505050565b614388565b61420d6153ff565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561429e576040517f61e597f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906361e597f9906207a1209061416d908a9060019088908890600401617c6f565b6040517f05734d9a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906305734d9a906207a12090614304908a90600190889088908d90849084908490600401617cbf565b60006040518083038187803b15801561431c57600080fd5b5086fa9350505050801561435257506040513d6000823e601f3d908101601f1916820160405261434f919081019061752f565b60015b6141f5573d808015614380576040519150601f19603f3d011682016040523d82523d6000602084013e614385565b606091505b50505b5050509392505050565b6060825167ffffffffffffffff811180156143ac57600080fd5b506040519080825280602002602001820160405280156143d6578160200160208202803683370190505b50905060005b8351811461256f57614420838583815181106143f457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16615f5c90919063ffffffff16565b82828151811061442c57fe5b60209081029190910101526001016143dc565b600080606061444e858761555f565b83518067ffffffffffffffff8111801561446757600080fd5b50604051908082528060200260200182016040528015614491578160200160208202803683370190505b50915061449c61606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b81526004016144d6929190617a35565b60206040518083038186803b1580156144ee57600080fd5b505afa158015614502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145269190616d51565b9250600073ffffffffffffffffffffffffffffffffffffffff8416156145515750600193508661460e565b61455961606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c6888a6040518363ffffffff1660e01b8152600401614593929190617a35565b60206040518083038186803b1580156145ab57600080fd5b505afa1580156145bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e39190616d51565b935073ffffffffffffffffffffffffffffffffffffffff8416614607575050612fbc565b5060009350855b8373ffffffffffffffffffffffffffffffffffffffff1663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561465457600080fd5b505afa158015614668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468c919061747d565b614697575050612fbc565b60005b828110156147365760006147088a87856040516020016146bc93929190617a5c565b6040516020818303038152906040528a88866040516020016146e093929190617a5c565b6040516020818303038152906040528a85815181106146fb57fe5b6020026020010151616083565b9050806147155750614736565b8085838151811061472257fe5b60209081029190910101525060010161469a565b50505093509350939050565b604080516060818101909252610c7a9080614761868960808401617a35565b60405160208183030381529060405281526020018688604051602001614788929190617a35565b60405160208183030381529060405281526020016161ba81525083615c2c565b80516060908067ffffffffffffffff811180156147c457600080fd5b506040519080825280602002602001820160405280156147ee578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff16631f00ca74620249f086848151811061482857fe5b6020026020010151886040518463ffffffff1660e01b815260040161484e92919061814f565b60006040518083038187803b15801561486657600080fd5b5086fa9350505050801561489c57506040513d6000823e601f3d908101601f19168201604052614899919081019061744a565b60015b6148ca573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b806000815181106148d757fe5b60200260200101518483815181106148eb57fe5b602002602001018181525050506001016147f4565b6060610a9f6040518060600160405280856040516020016149219190617a14565b6040516020818303038152906040528152602001866040516020016149469190617a14565b60405160208183030381529060405281526020016162c081525083615c2c565b6000806060614975858761555f565b83518067ffffffffffffffff8111801561498e57600080fd5b506040519080825280602002602001820160405280156149b8578160200160208202803683370190505b5091506149c361606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b81526004016149fd929190617a35565b60206040518083038186803b158015614a1557600080fd5b505afa158015614a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4d9190616d51565b9250600073ffffffffffffffffffffffffffffffffffffffff841615614a7857506001935086614b35565b614a8061606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c6888a6040518363ffffffff1660e01b8152600401614aba929190617a35565b60206040518083038186803b158015614ad257600080fd5b505afa158015614ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0a9190616d51565b935073ffffffffffffffffffffffffffffffffffffffff8416614b2e575050612fbc565b5060009350855b8373ffffffffffffffffffffffffffffffffffffffff1663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b7b57600080fd5b505afa158015614b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb3919061747d565b614bbe575050612fbc565b6040805160608101909152614c269080614bdd8a888660808501617a5c565b60405160208183030381529060405281526020018a8785604051602001614c0693929190617a5c565b604051602081830303815290604052815260200161608381525087615c2c565b9250505093509350939050565b6060835167ffffffffffffffff81118015614c4d57600080fd5b50604051908082528060200260200182016040528015614c77578160200160208202803683370190505b50905060005b84518114610f6c57614cc38484878481518110614c9657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166163cc9092919063ffffffff16565b828281518110614ccf57fe5b6020908102919091010152600101614c7d565b80516060908067ffffffffffffffff81118015614cfe57600080fd5b50604051908082528060200260200182016040528015614d28578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663838e6a22620493e08888888681518110614d6457fe5b60200260200101516040518563ffffffff1660e01b8152600401614d8a93929190617b7e565b60206040518083038187803b158015614da257600080fd5b5086fa93505050508015614dd3575060408051601f3d908101601f19168201909252614dd0918101906174f1565b60015b614e01573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b80848381518110614e0e57fe5b60200260200101818152505050600101614d2e565b6060614e30848484610df3565b905060005b8451811015610f6c57818181518110614e4a57fe5b6020026020010151600014614ebe57614ea5828281518110614e6857fe5b6020026020010151868381518110614e7c57fe5b602002602001015160a00151878481518110614e9457fe5b60200260200101516080015161553b565b828281518110614eb157fe5b6020026020010181815250505b600101614e35565b60006060614ed4848661555f565b82518067ffffffffffffffff81118015614eed57600080fd5b50604051908082528060200260200182016040528015614f17578160200160208202803683370190505b5091506000614f246153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614614f5c5786614f5f565b60005b90506000614f6b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614614fa35786614fa6565b60005b905061501060405180606001604052808b84604051602001614fc9929190617a35565b60405160208183030381529060405281526020018b85604051602001614ff0929190617a35565b60405160208183030381529060405281526020016164dc81525087615c2c565b6040517f901754d700000000000000000000000000000000000000000000000000000000815290945073ffffffffffffffffffffffffffffffffffffffff8a169063901754d790613eac9085908590600401617a35565b61506f61690c565b61507761690c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060005b8651811461519c576150cc60208883815181106150b557fe5b6020026020010151510387898481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168984815181106150f357fe5b602002602001015160405161510891906179f8565b600060405180830381855afa9150503d8060008114615143576040519150601f19603f3d011682016040523d82523d6000602084013e615148565b606091505b5091509150811561519257600061516c602083510383615aa790919063ffffffff16565b905060008111801561517d57508481105b1561519057838752602087018290529350835b505b505060010161509c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156151cb5750612fbc565b60005b87518114612fb9576151fe60208983815181106151e757fe5b60200260200101515103838a8481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168a848151811061522557fe5b602002602001015160405161523a91906179f8565b600060405180830381855afa9150503d8060008114615275576040519150601f19603f3d011682016040523d82523d6000602084013e61527a565b606091505b509150915081156152c457600061529e602083510383615aa790919063ffffffff16565b90506000811180156152af57508581105b156152c257838852602088018290529450845b505b50506001016151ce565b6000806152d961652c565b90508073ffffffffffffffffffffffffffffffffffffffff166321f8a7218273ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561533d57600080fd5b505afa158015615351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061537591906174f1565b6040518263ffffffff1660e01b81526004016153919190617e91565b60206040518083038186803b1580156153a957600080fd5b505afa1580156153bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153e19190616d51565b91505090565b739aab3f75489902f3a48495025729a0af77d4b11e90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b600061542282615804565b92915050565b600081516000141561543c57506000610aac565b8151602414158061549957507ff47261b000000000000000000000000000000000000000000000000000000000615474836000616544565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156154a657506000610aac565b615422826010616590565b6000828211156154cf576154cf6154ca600285856165d0565b616657565b50900390565b6000828201838110156115ba576115ba6154ca600086866165d0565b60006154fe84848461665f565b15615511576155116154ca8585856166b9565b610a9f8361551f86856166d8565b90616709565b600081831061553457816115ba565b5090919050565b6000610a9f8361551f61554f8260016154b1565b61555988876166d8565b906154d5565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156155ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016155c59061802b565b60405180910390fd5b5050565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b6000828202831580159061560757508284828161560357fe5b0414155b15615616576000915050615422565b6706f05b59d3b2000081018181101561563457600092505050615422565b670de0b6b3a76400009004949350505050565b6000615651616733565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b81526004016156899190617a14565b60206040518083038186803b1580156156a157600080fd5b505afa1580156156b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154229190616d51565b60008073ffffffffffffffffffffffffffffffffffffffff85166156fc576157fc565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f0868660405160240161572b9190617e91565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161579691906179f8565b6000604051808303818686fa925050503d80600081146157d2576040519150601f19603f3d011682016040523d82523d6000602084013e6157d7565b606091505b50909250905081156157fa57808060200190518101906157f791906174f1565b92505b505b935093915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce5670000000000000000000000000000000000000000000000000000000081525060405161586891906179f8565b600060405180830381855afa9150503d80600081146158a3576040519150601f19603f3d011682016040523d82523d6000602084013e6158a8565b606091505b50915091508180156158bc57506020815110155b156158cf576158cc816000615aa7565b92505b5050919050565b6000806158e1615f44565b905060608173ffffffffffffffffffffffffffffffffffffffff1663910ffc716159096153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146159415787615957565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61595f6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461599757876159ad565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290527fffffffff0000000000000000000000000000000000000000000000000000000060e086901b169091526159f992919060019060248101617b3d565b60006040518083038186803b158015615a1157600080fd5b505afa158015615a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615a4d919081019061711e565b5050905080518410615a655750600091506115ba9050565b808481518110615a7157fe5b6020026020010151925060f883901c60001c60bb1415610dea5750600091506115ba9050565b615aa283838361674b565b505050565b60006115ba8383616772565b600080615abe616926565b85806020019051810190615ad291906175c6565b91509150600085806020019051810190615aec91906175aa565b905060006060307f40bc03ae00000000000000000000000000000000000000000000000000000000858786615b208c61679c565b604051602401615b339493929190618088565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051615b9e91906179f8565b600060405180830381855afa9150503d8060008114615bd9576040519150601f19603f3d011682016040523d82523d6000602084013e615bde565b606091505b509150915081615bf6576000955050505050506115ba565b80806020019051810190615c0a919061744a565b600081518110615c1657fe5b6020026020010151955050505050509392505050565b6060815167ffffffffffffffff81118015615c4657600080fd5b50604051908082528060200260200182016040528015615c70578160200160208202803683370190505b509050815160001415615c8257615422565b6000615cb38460000151856020015185600081518110615c9e57fe5b6020026020010151876040015163ffffffff16565b905080615cc05750615422565b6000615cdd8560200151866000015184886040015163ffffffff16565b905080615ceb575050615422565b60005b8451811015615e215760005b6005811015615de357615d21868381518110615d1257fe5b602002602001015184866167dd565b935083615d2d57615de3565b615d3c612715612710866167dd565b935083615d4857615de3565b6000615d6588602001518960000151878b6040015163ffffffff16565b905080615d725750615de3565b809350868381518110615d8157fe5b60200260200101518410615dda576000878481518110615d9d57fe5b6020026020010151612710898681518110615db457fe5b602002602001015187030281615dc657fe5b04905060058111615dd8575050615de3565b505b50600101615cfa565b50615e02858281518110615df357fe5b602002602001015183856167dd565b848281518110615e0e57fe5b6020908102919091010152600101615cee565b50505092915050565b600080606084806020019051810190615e439190616df2565b91509150600086806020019051810190615e5d9190616df2565b506040517f15e42a6100000000000000000000000000000000000000000000000000000000815290915030906315e42a6190615ea3908590859088908b90600401617f54565b60206040518083038186803b158015615ebb57600080fd5b505afa925050508015615eeb575060408051601f3d908101601f19168201909252615ee8918101906174f1565b60015b6141f5573d808015615f19576040519150601f19603f3d011682016040523d82523d6000602084013e615f1e565b606091505b5060009450505050506115ba565b73e2f2a5c287993345a840db3b0845fbc70f5935a590565b73a1c0fa73c39cfbcc11ec9eb1afc665aba9996e2c90565b60008060608473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b85604051602401615f919190617a14565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051615ffc91906179f8565b600060405180830381855afa9150503d8060008114616037576040519150601f19603f3d011682016040523d82523d6000602084013e61603c565b606091505b509150915081801561605057506020815110155b1561606357616060816000615aa7565b92505b505092915050565b733a97247df274a17c59a3bd12735ea3fcdfb4995090565b6000806000808680602001905181019061609d9190616da6565b9250925092508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415616174576040517fa2801e1600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063a2801e1690620493e09061612e908990600401617e91565b60206040518083038187803b15801561614657600080fd5b5086fa93505050508015615eeb575060408051601f3d908101601f19168201909252615ee8918101906174f1565b61617c616835565b73ffffffffffffffffffffffffffffffffffffffff1663ca19ebd9620493e084886040518463ffffffff1660e01b815260040161612e929190617d61565b6000806000858060200190518101906161d39190616d6d565b915091506000858060200190518101906161ed9190616d51565b90503063a469841762061a808486856162058b61679c565b6040518663ffffffff1660e01b81526004016162249493929190617a8c565b60006040518083038187803b15801561623c57600080fd5b5086fa9350505050801561627257506040513d6000823e601f3d908101601f1916820160405261626f919081019061744a565b60015b6162a0573d808015615f19576040519150601f19603f3d011682016040523d82523d6000602084013e615f1e565b806000815181106162ad57fe5b60200260200101519450505050506115ba565b600080848060200190518101906162d79190616d51565b90506000848060200190518101906162ef9190616d51565b90503063bc61a69583836163028861679c565b6040518463ffffffff1660e01b815260040161632093929190617b04565b60006040518083038186803b15801561633857600080fd5b505afa92505050801561636d57506040513d6000823e601f3d908101601f1916820160405261636a919081019061744a565b60015b6163ad573d80801561639b576040519150601f19603f3d011682016040523d82523d6000602084013e6163a0565b606091505b50600093505050506115ba565b806000815181106163ba57fe5b602002602001015193505050506115ba565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e60e01b8686604051602401616403929190617a35565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161646e91906179f8565b600060405180830381855afa9150503d80600081146164a9576040519150601f19603f3d011682016040523d82523d6000602084013e6164ae565b606091505b50915091508180156164c257506020815110155b15610dea576164d2816000615aa7565b9695505050505050565b6000806000858060200190518101906164f59190616d6d565b91509150600080868060200190518101906165109190616d6d565b9150915061652084848389613814565b98975050505050505050565b7352ae12abe5d8bd778bd5397f99ca900624cfadd490565b60008160040183511015616565576165656154ca600385518560040161684d565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b600081601401835110156165b1576165b16154ca600485518560140161684d565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b606063e946c1bb60e01b8484846040516024016165ef93929190617fc6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600082616671576166716154ca61686c565b81158061667c575083155b15616689575060006115ba565b6000838061669357fe5b85840990506166a285846166d8565b6166ae826103e86166d8565b101595945050505050565b606063339f3de260e01b8484846040516024016165ef93929190618168565b6000826166e757506000615422565b828202828482816166f457fe5b04146115ba576115ba6154ca600186866165d0565b60008161671f5761671f6154ca600385856165d0565b600082848161672a57fe5b04949350505050565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b816020018351101561676a5761676a6154ca600585518560200161684d565b910160200152565b60008160200183511015616793576167936154ca600585518560200161684d565b50016020015190565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106167cc57fe5b602002602001018181525050919050565b60008315806167ea575081155b806167f3575082155b15616800575060006115ba565b8382028285828161680d57fe5b041461681d5760009150506115ba565b836001850382018161682b57fe5b0495945050505050565b73533da777aedce766ceae696bf90f8541a4ba80eb90565b6060632800659560e01b8484846040516024016165ef93929190617fe7565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b6040805160608101909152806000815260006020820181905260409091015290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b8035615422816182b8565b600082601f830112616961578081fd5b813561697461696f82618237565b618210565b81815291506020808301908481018184028601820187101561699557600080fd5b60005b848110156169bd5781356169ab816182b8565b84529282019290820190600101616998565b505050505092915050565b600082601f8301126169d8578081fd5b81356169e661696f82618237565b818152915060208083019084810160005b848110156169bd57616a0e888484358a0101616b43565b845292820192908201906001016169f7565b600082601f830112616a30578081fd5b8135616a3e61696f82618237565b818152915060208083019084810181840286018201871015616a5f57600080fd5b60005b848110156169bd578135616a75816182b8565b84529282019290820190600101616a62565b600082601f830112616a97578081fd5b8135616aa561696f82618237565b818152915060208083019084810181840286018201871015616ac657600080fd5b60005b848110156169bd57813584529282019290820190600101616ac9565b600082601f830112616af5578081fd5b8151616b0361696f82618237565b818152915060208083019084810181840286018201871015616b2457600080fd5b60005b848110156169bd57815184529282019290820190600101616b27565b600082601f830112616b53578081fd5b8135616b6161696f82618257565b9150808252836020828501011115616b7857600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112616ba1578081fd5b8151616baf61696f82618257565b9150808252836020828501011115616bc657600080fd5b61256f81602084016020860161827b565b80516002811061542257600080fd5b60006101c0808385031215616bf9578182fd5b616c0281618210565b915050616c0f8383616946565b8152616c1e8360208401616946565b6020820152616c308360408401616946565b6040820152616c428360608401616946565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff80821115616ca457600080fd5b616cb086838701616b43565b83850152610160925082850135915080821115616ccc57600080fd5b616cd886838701616b43565b83850152610180925082850135915080821115616cf457600080fd5b616d0086838701616b43565b838501526101a0925082850135915080821115616d1c57600080fd5b50616d2985828601616b43565b82840152505092915050565b600060208284031215616d46578081fd5b81356115ba816182b8565b600060208284031215616d62578081fd5b81516115ba816182b8565b60008060408385031215616d7f578081fd5b8251616d8a816182b8565b6020840151909250616d9b816182b8565b809150509250929050565b600080600060608486031215616dba578081fd5b8351616dc5816182b8565b6020850151909350616dd6816182b8565b6040850151909250616de7816182b8565b809150509250925092565b60008060408385031215616e04578182fd5b8251616e0f816182b8565b602084015190925067ffffffffffffffff811115616e2b578182fd5b616e3785828601616b91565b9150509250929050565b600080600080600060a08688031215616e58578283fd5b8535616e63816182b8565b94506020860135616e73816182b8565b93506040860135616e83816182b8565b92506060860135616e93816182b8565b9150608086013567ffffffffffffffff811115616eae578182fd5b616eba88828901616a87565b9150509295509295909350565b60008060008060808587031215616edc578182fd5b8435616ee7816182b8565b93506020850135616ef7816182b8565b92506040850135616f07816182b8565b9150606085013567ffffffffffffffff811115616f22578182fd5b616f2e87828801616a87565b91505092959194509250565b60008060008060808587031215616f4f578182fd5b8435616f5a816182b8565b93506020850135616f6a816182b8565b92506040850135616f7a816182b8565b9396929550929360600135925050565b600080600060608486031215616f9e578081fd5b8335616fa9816182b8565b92506020840135616fb9816182b8565b9150604084013567ffffffffffffffff811115616fd4578182fd5b616fe086828701616a87565b9150509250925092565b600080600060608486031215616ffe578081fd5b8335617009816182b8565b9250602084013567ffffffffffffffff80821115617025578283fd5b61703187838801616951565b93506040860135915080821115617046578283fd5b50616fe086828701616a87565b60008060008060808587031215617068578182fd5b843567ffffffffffffffff8082111561707f578384fd5b818701915087601f830112617092578384fd5b81356170a061696f82618237565b81815260208082019190858101885b858110156170d8576170c68e8484358b0101616951565b855293820193908201906001016170af565b50508199506170e98c828d01616946565b9850505050506170fc8860408901616946565b93506060870135915080821115617111578283fd5b50616f2e87828801616a87565b600080600060608486031215617132578081fd5b835167ffffffffffffffff80821115617149578283fd5b818601915086601f83011261715c578283fd5b815161716a61696f82618237565b80828252602080830192508086018b82838702890101111561718a578788fd5b8796505b848710156171ac57805184526001969096019592810192810161718e565b5089015190975093505050808211156171c3578283fd5b506171d086828701616ae5565b9250506171e08560408601616bd7565b90509250925092565b600080602083850312156171fb578182fd5b823567ffffffffffffffff80821115617212578384fd5b818501915085601f830112617225578384fd5b813581811115617233578485fd5b8660208083028501011115617246578485fd5b60209290920196919550909350505050565b60008060006060848603121561726c578081fd5b833567ffffffffffffffff80821115617283578283fd5b61728f878388016169c8565b945060208601359150808211156172a4578283fd5b506172b1868287016169c8565b925050604084013590509250925092565b6000602082840312156172d3578081fd5b813567ffffffffffffffff8111156172e9578182fd5b610a9f84828501616a20565b60008060408385031215617307578182fd5b823567ffffffffffffffff81111561731d578283fd5b61732985828601616a20565b9250506020830135616d9b816182b8565b60008060006060848603121561734e578081fd5b833567ffffffffffffffff811115617364578182fd5b61737086828701616a20565b9350506020840135617381816182b8565b91506040840135616de7816182b8565b6000806000606084860312156173a5578081fd5b833567ffffffffffffffff808211156173bc578283fd5b818601915086601f8301126173cf578283fd5b81356173dd61696f82618237565b81815260208082019190858101875b85811015617415576174038d8484358b0101616be6565b855293820193908201906001016173ec565b5091985089013594505050508082111561742d578283fd5b5061743a868287016169c8565b9250506171e08560408601616946565b60006020828403121561745b578081fd5b815167ffffffffffffffff811115617471578182fd5b610a9f84828501616ae5565b60006020828403121561748e578081fd5b81516115ba816182da565b6000806000606084860312156174ad578081fd5b83516174b8816182da565b602085015190935067ffffffffffffffff8111156174d4578182fd5b6174e086828701616b91565b925050604084015190509250925092565b600060208284031215617502578081fd5b5051919050565b60008060006060848603121561751d578081fd5b833592506020840135617381816182b8565b600060208284031215617540578081fd5b815167ffffffffffffffff811115617556578182fd5b610a9f84828501616b91565b60008060008060808587031215617577578182fd5b843567ffffffffffffffff81111561758d578283fd5b61759987828801616b43565b9450506020850135616f6a816182b8565b6000602082840312156175bb578081fd5b81516115ba81618316565b60008082840360808112156175d9578283fd5b83516175e481618316565b92506060601f19820112156175f7578182fd5b506176026060618210565b6020840151617610816182b8565b81526040840151617620816182e8565b60208201526060840151617633816182e8565b6040820152919491935090915050565b60008060008084860360c0811215617659578283fd5b6060811215617666578283fd5b506176716060618210565b853561767c816182b8565b8152602086013561768c816182e8565b6020820152604086013561769f816182e8565b6040820152935060608501356176b481618316565b925060808501356176c481618316565b915060a085013567ffffffffffffffff811115616f22578182fd5b6000606082840312156176f0578081fd5b6176fa6060618210565b825160078110617708578283fd5b8152602083810151908201526040928301519281019290925250919050565b60008060006060848603121561773b578081fd5b833567ffffffffffffffff80821115617752578283fd5b61775e87838801616be6565b94506020860135915080821115617773578283fd5b5061778086828701616b43565b9250506040840135616de7816182b8565b600080600080608085870312156177a6578182fd5b843593506020850135616ef7816182b8565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b8381101561781757815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016177e5565b509495945050505050565b6000815180845260208085019450808401835b8381101561781757815187529582019590820190600101617835565b6000815180845261786981602086016020860161827b565b601f01601f19169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020808201517fffffffff000000000000000000000000000000000000000000000000000000009081169184019190915260409182015116910152565b600081518352602082015160406020850152610a9f6040850182617851565b60006101c06179038484516177b8565b602083015161791560208601826177b8565b50604083015161792860408601826177b8565b50606083015161793b60608601826177b8565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261799483870182617851565b9250505061016080840151858303828701526179b08382617851565b9250505061018080840151858303828701526179cc8382617851565b925050506101a080840151858303828701526164d28382617851565b6000828483379101908152919050565b60008251617a0a81846020870161827b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152808516604084015250608060608301526164d26080830184617822565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152610c7a6060830184617822565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508315156040830152608060608301526164d26080830184617851565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a06080830152617bf460a0830184617851565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152617c2e60608301856177d2565b82810360408401526164d28185617822565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152610a9f6040830184617851565b600073ffffffffffffffffffffffffffffffffffffffff86168252617c93856182ab565b84602083015260806040830152617cad6080830185617822565b8281036060840152617bf48185617822565b600061010073ffffffffffffffffffffffffffffffffffffffff808c168452617ce78b6182ab565b8a6020850152816040850152617cff8285018b617822565b91508382036060850152617d13828a617822565b90881660808501529050617d26866182ab565b8560a084015282810360c0840152617d3e8186617822565b905082810360e0840152617d528185617822565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060408252617d9a60408301856177d2565b90508260208301529392505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015617e2e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552617e0f88860182617851565b9189015115159489019490945294870194925090860190600101617dcd565b509098975050505050505050565b6000602082526115ba6020830184617822565b901515815260200190565b6000841515825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610c7a6060830184617822565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610c7a6060830184617851565b600084825260606020830152617c2e6060830185617851565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602082526115ba6020830184617851565b600060808252617f676080830187617851565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529390941660408201526060015292915050565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152610a9f6040830184617822565b60608101617fd3856182ab565b938152602081019290925260409091015290565b6060810160088510617fd357fe5b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016115ba602083018461787d565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b6000618094828761787d565b84600f0b606083015283600f0b608083015260c060a08301526164d260c0830184617822565b6000606082526180cd60608301866178d4565b82810360208401526180df81866178d4565b915050826040830152949350505050565b6000602082526115ba60208301846178f3565b60006060825261811660608301866178f3565b82810360208401526181288186617851565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b600083825260406020830152610a9f60408301846177d2565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126181da578283fd5b83018035915067ffffffffffffffff8211156181f4578283fd5b60200191503681900382131561820957600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561822f57600080fd5b604052919050565b600067ffffffffffffffff82111561824d578081fd5b5060209081020190565b600067ffffffffffffffff82111561826d578081fd5b50601f01601f191660200190565b60005b8381101561829657818101518382015260200161827e565b838111156182a5576000848401525b50505050565b600481106182b557fe5b50565b73ffffffffffffffffffffffffffffffffffffffff811681146182b557600080fd5b80151581146182b557600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146182b557600080fd5b80600f0b81146182b557600080fdfea2646970667358221220a4ac5719ba2a0609e59fa677c79ab3758068dc5433e1ad30f3504ecf1cb1c94164736f6c634300060c0033",
                "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0x835B PUSH3 0x54 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x282F MSTORE POP PUSH2 0x835B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x17B JUMPI DUP1 PUSH4 0xBE5B12B4 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xE78AC045 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE9A8E442 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x620 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x633 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x646 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x60D JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xC8C74A37 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x5C1 JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x5D4 JUMPI DUP1 PUSH4 0xD442057B EQ PUSH2 0x5E7 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x5AE JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xADA51747 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0xBC61A695 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xBCCC34C6 EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x579 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xADA51747 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x525 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x98777748 GT PUSH2 0x160 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x4FF JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x4A4 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x4C6 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x57494B1D GT PUSH2 0x229 JUMPI DUP1 PUSH4 0x6DD6B78D GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x70BBA11A GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x70BBA11A EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x742BD050 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x87A74BDB EQ PUSH2 0x482 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x449 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x60EE052A GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x416 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x57494B1D EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x3DD JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x280 JUMPI DUP1 PUSH4 0x3B77EBAE GT PUSH2 0x265 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x3B7 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x37E JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x15E42A61 GT PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x15E42A61 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x34B JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xB054F8D EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0xFE3FE5B EQ PUSH2 0x2F8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x7053 JUMP JUMPDEST PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E0 PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x7053 JUMP JUMPDEST PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x7562 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH2 0x33E PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x6D35 JUMP JUMPDEST PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E4F JUMP JUMPDEST PUSH2 0x35E PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E41 JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E3C JUMP JUMPDEST PUSH2 0x35E PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0xC83 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x7391 JUMP JUMPDEST PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x7727 JUMP JUMPDEST PUSH2 0xF74 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7643 JUMP JUMPDEST PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x176F JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x18C0 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x1EFB JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3FE CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x2048 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x22C5 JUMP JUMPDEST PUSH2 0x429 PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x71E9 JUMP JUMPDEST PUSH2 0x2416 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7DA9 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x2576 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x72C2 JUMP JUMPDEST PUSH2 0x27DB JUMP JUMPDEST PUSH2 0x35E PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x28F5 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x495 PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x7791 JUMP JUMPDEST PUSH2 0x2BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EFB JUMP JUMPDEST PUSH2 0x4B7 PUSH2 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7258 JUMP JUMPDEST PUSH2 0x2D96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80BA JUMP JUMPDEST PUSH2 0x35E PUSH2 0x4D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x7643 JUMP JUMPDEST PUSH2 0x2FC5 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3200 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x4FA CALLDATASIZE PUSH1 0x4 PUSH2 0x6F3A JUMP JUMPDEST PUSH2 0x3814 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x50D CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3AAA JUMP JUMPDEST PUSH2 0x495 PUSH2 0x520 CALLDATASIZE PUSH1 0x4 PUSH2 0x7791 JUMP JUMPDEST PUSH2 0x3BEB JUMP JUMPDEST PUSH2 0x538 PUSH2 0x533 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3D1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP3 SWAP2 SWAP1 PUSH2 0x7F97 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x554 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x3F0A JUMP JUMPDEST PUSH2 0x56C PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x7509 JUMP JUMPDEST PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7F41 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x72F5 JUMP JUMPDEST PUSH2 0x4392 JUMP JUMPDEST PUSH2 0x59F PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x443F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E5A JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5BC CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4742 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5CF CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x47A8 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x4900 JUMP JUMPDEST PUSH2 0x59F PUSH2 0x5F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x4966 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x733A JUMP JUMPDEST PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x61B CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4CE2 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x62E CALLDATASIZE PUSH1 0x4 PUSH2 0x7391 JUMP JUMPDEST PUSH2 0x4E23 JUMP JUMPDEST PUSH2 0x538 PUSH2 0x641 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4EC6 JUMP JUMPDEST PUSH2 0x4B7 PUSH2 0x654 CALLDATASIZE PUSH1 0x4 PUSH2 0x7258 JUMP JUMPDEST PUSH2 0x5067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x666 PUSH2 0x52CE JUMP JUMPDEST SWAP3 POP DUP7 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x677 JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x78D JUMPI PUSH1 0x2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x692 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x6A6 JUMPI PUSH2 0x785 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70F SWAP3 SWAP2 SWAP1 PUSH2 0x7D87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x758 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x755 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x761 JUMPI PUSH2 0x785 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x783 JUMPI DUP1 SWAP3 POP DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x778 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x67B JUMP JUMPDEST POP DUP5 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8A5 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP8 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x80C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x831 SWAP3 SWAP2 SWAP1 PUSH2 0x7D87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x87A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x877 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x883 JUMPI PUSH2 0x8A5 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x890 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x7D7 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8D6 JUMPI POP PUSH1 0x0 PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x53E7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x418436BC PUSH3 0x7A120 PUSH2 0x905 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x93D JUMPI DUP7 PUSH2 0x953 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x95B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x993 JUMPI DUP7 PUSH2 0x9A9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CD SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA16 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA13 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA54 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA44 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 PUSH2 0x5417 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xA6F DUP8 PUSH2 0x5417 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0xA90 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0xA98 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAF7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0xB1B JUMPI POP PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xB5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB77 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7ACD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xBE2 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC1E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xC47 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xC44 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xC54 JUMPI POP POP POP PUSH2 0xC77 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC61 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xB1E JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCC9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xD77 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD74 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDB1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xDEA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xDC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xCCF JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE37 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF6C JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B77EBAE PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEAC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8103 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xEF5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEF2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF49 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF28 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xF64 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE3D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xF88 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0xF95 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xFA2 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST PUSH2 0xFAA PUSH2 0x68A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0xFFC SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x80F0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1028 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104C SWAP2 SWAP1 PUSH2 0x76DF JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x105D JUMPI INVALID JUMPDEST EQ PUSH2 0x106C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x10C5 SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1115 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x1123 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x1198 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11FA DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1223 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0x1237 JUMPI PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x1245 DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1264 DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x54B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x12C9 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12B1 JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x12C4 SWAP2 PUSH2 0x54D5 JUMP JUMPDEST PUSH2 0x54F1 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x141F SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x1325 SWAP2 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1375 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x13CA SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x141A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x5525 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1437 JUMPI PUSH2 0x1434 DUP2 DUP4 DUP6 PUSH2 0x553B JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1488 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x15B2 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x158C SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x14E7 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1513 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1537 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x13CA SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15AD DUP10 PUSH2 0x141A DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x553B JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x15DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1607 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x164B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1665 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x16D0 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1711 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1735 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1732 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1742 JUMPI POP POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x174F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x160D JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x177B DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17BE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x17D4 PUSH2 0x55D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1801 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1827 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x183F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1870 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x186D SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x189E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x18AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x17C4 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1908 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x195E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x198A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19AE SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1A59 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1A07 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A33 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A57 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A65 JUMPI POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x1A6D PUSH2 0x68C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1ABF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B0F SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1B63 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB3 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1C0A SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C5A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1CB3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D8A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EEF JUMPI PUSH2 0x1DBD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1DB4 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x55EA JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DC9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1EEF JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E4A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x817E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E93 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E90 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1ECD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1EC1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1EEF JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1EDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1D92 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x525D0DA7 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1F7D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1FEC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1FE9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2026 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2033 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1F47 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2054 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x206D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2097 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x20A4 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x20E4 JUMPI PUSH2 0x20DF DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x20E7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20F3 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2133 JUMPI PUSH2 0x212E DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22BA JUMPI PUSH1 0x1 PUSH2 0x214D PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x21C6 JUMPI PUSH2 0x21A5 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x56D9 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x22A6 JUMP JUMPDEST PUSH2 0x21CE PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2219 JUMPI PUSH2 0x21A5 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2233 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x2289 JUMPI PUSH2 0x2268 DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x56D9 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2274 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x22A4 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2297 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x22B1 JUMPI POP PUSH2 0x22BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x213B JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22D1 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x22EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2314 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x232A PUSH2 0x55D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2357 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x237D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x23C6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x23C3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x23F4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x231A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x242F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2469 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2456 PUSH2 0x68F4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x244E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x256F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2484 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x24A2 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x24B4 SWAP2 SWAP1 PUSH2 0x81A6 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x24C1 JUMPI PUSH2 0x2567 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x24CE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x24E0 SWAP2 SWAP1 PUSH2 0x81A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24EE SWAP3 SWAP2 SWAP1 PUSH2 0x79E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2529 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x252E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x253B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2552 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x246F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2582 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x25D2 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2612 JUMPI PUSH2 0x260D DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2615 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2621 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2661 JUMPI PUSH2 0x265C DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2664 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22BA JUMPI PUSH1 0x1 PUSH2 0x267B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x26E7 JUMPI PUSH2 0x26C6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x26D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x26EF PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x273A JUMPI PUSH2 0x26C6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2754 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x27AA JUMPI PUSH2 0x2789 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x56D9 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x27C5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x27B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x27D2 JUMPI POP PUSH2 0x22BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2669 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x27F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x281F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x28EF JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2870 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28CA JUMPI PUSH2 0x28C5 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5804 JUMP JUMPDEST PUSH2 0x28CD JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28DC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2825 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x293B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2975 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x299B SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x29E9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29E6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A17 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2A27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2A3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2941 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A96 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AF6 SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2B44 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B41 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B72 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2B7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2A9C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2BB7 DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST PUSH2 0x2BC2 DUP7 DUP7 DUP10 PUSH2 0x58D6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2BCE JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x2C0E SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2C62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2C7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CA8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D8A JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 DUP7 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x2CE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D0A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F54 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D5A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2D69 JUMPI POP POP POP PUSH2 0x8A9 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2D76 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2CAE JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D9E PUSH2 0x690C JUMP JUMPDEST PUSH2 0x2DA6 PUSH2 0x690C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2EB6 JUMPI PUSH2 0x2DF2 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2DC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A97 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2E19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2E2E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2EAC JUMPI PUSH1 0x0 PUSH2 0x2E92 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2EAA JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2DAB JUMP JUMPDEST POP DUP1 PUSH2 0x2EC2 JUMPI POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x2FB9 JUMPI PUSH2 0x2EF5 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2F31 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F6C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2FAF JUMPI PUSH1 0x0 PUSH2 0x2F95 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x2FAD JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2EC5 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x305F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3058 SWAP1 DUP1 PUSH2 0x3011 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8013 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3038 SWAP3 SWAP2 SWAP1 PUSH2 0x8013 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AB3 DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x30A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x30E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3100 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x316B SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x31D0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x31CD SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x31DD JUMPI POP POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x31EA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x30A8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x321E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3248 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x329E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32EE SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x3399 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3347 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x335F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3397 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x33A5 JUMPI POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x33AD PUSH2 0x68C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x33FF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x342B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x344F SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x34A3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34F3 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x354A SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3576 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x359A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x35F3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x360B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x361F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3643 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36CA SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EEF JUMPI DUP2 MLOAD PUSH2 0x36EE SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x55EA JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x36FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x370D JUMPI PUSH2 0x1EEF JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x377B SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x817E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x37C4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x37C1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x37F2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1EC1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC6 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x37FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3852 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x386A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x387E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38A2 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38C9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x398E JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3939 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3965 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3989 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x39A7 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x39BC JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1E1401F800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3A17 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3A60 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3A5D SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3AA0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3A8E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A93 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xA9F JUMP JUMPDEST SWAP3 POP PUSH2 0xA9F SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AF0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3B2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B52 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3B9B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3B98 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3BC9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3AF6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3BFA DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST PUSH2 0x3C05 DUP7 DUP7 DUP10 PUSH2 0x58D6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3C11 JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x3C51 SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3CA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP2 POP PUSH2 0x3D0F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CC8 SWAP3 SWAP2 SWAP1 PUSH2 0x7C40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CEF SWAP3 SWAP2 SWAP1 PUSH2 0x7C40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5E2A DUP2 MSTORE POP DUP6 PUSH2 0x5C2C JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x3D29 DUP5 DUP7 PUSH2 0x555F JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3D42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D6C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x3D79 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DB1 JUMPI DUP7 PUSH2 0x3DB4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3DC0 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DF8 JUMPI DUP7 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3E57 JUMPI PUSH1 0x0 PUSH2 0x3E29 DUP12 DUP6 DUP6 DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3814 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3E36 JUMPI POP PUSH2 0x3E57 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3E43 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3E00 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x901754D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3EAC SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3ED8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EFC SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP5 POP POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3F26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F50 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x3F66 PUSH2 0x5F2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4007 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4004 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7499 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4035 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4042 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4065 PUSH2 0x5F44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4099 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x40D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x40DC PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4205 JUMPI PUSH1 0x40 MLOAD PUSH32 0x81EFCBDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x416D SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7C6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x41BB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x41B8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x41E9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41EE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x4200 JUMP JUMPDEST SWAP4 POP PUSH2 0x15BA SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4388 JUMP JUMPDEST PUSH2 0x420D PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x429E JUMPI PUSH1 0x40 MLOAD PUSH32 0x61E597F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x416D SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7C6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5734D9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x4304 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x7CBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x431C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4352 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x434F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x43AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x43D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x256F JUMPI PUSH2 0x4420 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5F5C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x442C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x43DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x444E DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4491 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x449C PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D6 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4502 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4526 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4551 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x460E JUMP JUMPDEST PUSH2 0x4559 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4593 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x45E3 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4607 JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4668 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x468C SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x4697 JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4736 JUMPI PUSH1 0x0 PUSH2 0x4708 DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46BC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46E0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6083 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4715 JUMPI POP PUSH2 0x4736 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4722 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x469A JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC7A SWAP1 DUP1 PUSH2 0x4761 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4788 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x61BA DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x47C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47EE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x484E SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x489C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4899 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x48CA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x47F4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA9F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4921 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4946 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x62C0 DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4975 DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x498E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x49C3 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x49FD SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A4D SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4A78 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4B35 JUMP JUMPDEST PUSH2 0x4A80 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4ABA SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B0A SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4B2E JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB3 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x4BBE JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4C26 SWAP1 DUP1 PUSH2 0x4BDD DUP11 DUP9 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C06 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6083 DUP2 MSTORE POP DUP8 PUSH2 0x5C2C JUMP JUMPDEST SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C77 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF6C JUMPI PUSH2 0x4CC3 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C96 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x63CC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CCF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4C7D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4CFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D28 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4D64 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D8A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4DD3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4DD0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4E01 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4D2E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E30 DUP5 DUP5 DUP5 PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF6C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4E4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x4EBE JUMPI PUSH2 0x4EA5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4E94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x553B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4E35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4ED4 DUP5 DUP7 PUSH2 0x555F JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x4F24 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4F5C JUMPI DUP7 PUSH2 0x4F5F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4F6B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4FA3 JUMPI DUP7 PUSH2 0x4FA6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH2 0x5010 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FC9 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FF0 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x64DC DUP2 MSTORE POP DUP8 PUSH2 0x5C2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x901754D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3EAC SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH2 0x506F PUSH2 0x690C JUMP JUMPDEST PUSH2 0x5077 PUSH2 0x690C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x519C JUMPI PUSH2 0x50CC PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x50B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x50F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5108 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5143 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5148 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5192 JUMPI PUSH1 0x0 PUSH2 0x516C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x517D JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5190 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x509C JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ ISZERO PUSH2 0x51CB JUMPI POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2FB9 JUMPI PUSH2 0x51FE PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5225 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x523A SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5275 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x527A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x52C4 JUMPI PUSH1 0x0 PUSH2 0x529E PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x52AF JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x52C2 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x51CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x52D9 PUSH2 0x652C JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x533D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5375 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5391 SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53E1 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5422 DUP3 PUSH2 0x5804 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x543C JUMPI POP PUSH1 0x0 PUSH2 0xAAC JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x5499 JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x5474 DUP4 PUSH1 0x0 PUSH2 0x6544 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x54A6 JUMPI POP PUSH1 0x0 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x5422 DUP3 PUSH1 0x10 PUSH2 0x6590 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x54CF JUMPI PUSH2 0x54CF PUSH2 0x54CA PUSH1 0x2 DUP6 DUP6 PUSH2 0x65D0 JUMP JUMPDEST PUSH2 0x6657 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x15BA JUMPI PUSH2 0x15BA PUSH2 0x54CA PUSH1 0x0 DUP7 DUP7 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54FE DUP5 DUP5 DUP5 PUSH2 0x665F JUMP JUMPDEST ISZERO PUSH2 0x5511 JUMPI PUSH2 0x5511 PUSH2 0x54CA DUP6 DUP6 DUP6 PUSH2 0x66B9 JUMP JUMPDEST PUSH2 0xA9F DUP4 PUSH2 0x551F DUP7 DUP6 PUSH2 0x66D8 JUMP JUMPDEST SWAP1 PUSH2 0x6709 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x5534 JUMPI DUP2 PUSH2 0x15BA JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9F DUP4 PUSH2 0x551F PUSH2 0x554F DUP3 PUSH1 0x1 PUSH2 0x54B1 JUMP JUMPDEST PUSH2 0x5559 DUP9 DUP8 PUSH2 0x66D8 JUMP JUMPDEST SWAP1 PUSH2 0x54D5 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55C5 SWAP1 PUSH2 0x802B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5607 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x5603 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5616 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x5634 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5651 PUSH2 0x6733 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5689 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5422 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x56FC JUMPI PUSH2 0x57FC JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x572B SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5796 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x57D2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x57D7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x57FA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x57F7 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5868 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x58A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x58A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x58BC JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x58CF JUMPI PUSH2 0x58CC DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x58E1 PUSH2 0x5F44 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x910FFC71 PUSH2 0x5909 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5941 JUMPI DUP8 PUSH2 0x5957 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x595F PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5997 JUMPI DUP8 PUSH2 0x59AD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x59F9 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x7B3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5A4D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x711E JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP5 LT PUSH2 0x5A65 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x15BA SWAP1 POP JUMP JUMPDEST DUP1 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5A71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0xDEA JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x15BA SWAP1 POP JUMP JUMPDEST PUSH2 0x5AA2 DUP4 DUP4 DUP4 PUSH2 0x674B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15BA DUP4 DUP4 PUSH2 0x6772 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5ABE PUSH2 0x6926 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5AD2 SWAP2 SWAP1 PUSH2 0x75C6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5AEC SWAP2 SWAP1 PUSH2 0x75AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5B20 DUP13 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5B33 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8088 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5B9E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5BD9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BDE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5BF6 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5C0A SWAP2 SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x5C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C70 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5C82 JUMPI PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CB3 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C9E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5CC0 JUMPI POP PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CDD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5CEB JUMPI POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5E21 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5DE3 JUMPI PUSH2 0x5D21 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D12 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x67DD JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5D2D JUMPI PUSH2 0x5DE3 JUMP JUMPDEST PUSH2 0x5D3C PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x67DD JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5D48 JUMPI PUSH2 0x5DE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D65 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5D72 JUMPI POP PUSH2 0x5DE3 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5DDA JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5D9D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5DB4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5DC6 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5DD8 JUMPI POP POP PUSH2 0x5DE3 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CFA JUMP JUMPDEST POP PUSH2 0x5E02 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5DF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x67DD JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5E0E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5CEE JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E43 SWAP2 SWAP1 PUSH2 0x6DF2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E5D SWAP2 SWAP1 PUSH2 0x6DF2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x15E42A6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0x15E42A61 SWAP1 PUSH2 0x5EA3 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F54 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5EEB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5EE8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5F19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH20 0xA1C0FA73C39CFBCC11EC9EB1AFC665ABA9996E2C SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F91 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5FFC SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6037 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x603C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6050 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6063 JUMPI PUSH2 0x6060 DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x609D SWAP2 SWAP1 PUSH2 0x6DA6 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6174 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x612E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5EEB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5EE8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x617C PUSH2 0x6835 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCA19EBD9 PUSH3 0x493E0 DUP5 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x612E SWAP3 SWAP2 SWAP1 PUSH2 0x7D61 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61D3 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61ED SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x6205 DUP12 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6224 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x623C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6272 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x626F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x62A0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5F19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F1E JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x62AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62D7 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62EF SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xBC61A695 DUP4 DUP4 PUSH2 0x6302 DUP9 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6320 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x636D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x636A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x63AD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x639B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x63A0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x63BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6403 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x646E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x64A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x64AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x64C2 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xDEA JUMPI PUSH2 0x64D2 DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x64F5 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6510 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6520 DUP5 DUP5 DUP4 DUP10 PUSH2 0x3814 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0x52AE12ABE5D8BD778BD5397F99CA900624CFADD4 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6565 JUMPI PUSH2 0x6565 PUSH2 0x54CA PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x65B1 JUMPI PUSH2 0x65B1 PUSH2 0x54CA PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6671 JUMPI PUSH2 0x6671 PUSH2 0x54CA PUSH2 0x686C JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x667C JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x6689 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x6693 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x66A2 DUP6 DUP5 PUSH2 0x66D8 JUMP JUMPDEST PUSH2 0x66AE DUP3 PUSH2 0x3E8 PUSH2 0x66D8 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8168 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x66E7 JUMPI POP PUSH1 0x0 PUSH2 0x5422 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x66F4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x15BA JUMPI PUSH2 0x15BA PUSH2 0x54CA PUSH1 0x1 DUP7 DUP7 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x671F JUMPI PUSH2 0x671F PUSH2 0x54CA PUSH1 0x3 DUP6 DUP6 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x672A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x676A JUMPI PUSH2 0x676A PUSH2 0x54CA PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x684D JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6793 JUMPI PUSH2 0x6793 PUSH2 0x54CA PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x67CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x67EA JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x67F3 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x6800 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x680D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x681D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x682B JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0x533DA777AEDCE766CEAE696BF90F8541A4BA80EB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FE7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5422 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6961 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6974 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST PUSH2 0x8210 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD PUSH2 0x69AB DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6998 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x69D8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x69E6 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI PUSH2 0x6A0E DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x6B43 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x69F7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6A30 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6A3E PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6A5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD PUSH2 0x6A75 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6A62 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6A97 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6AA5 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6AC9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6AF5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6B03 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6B24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6B27 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6B53 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6B61 PUSH2 0x696F DUP3 PUSH2 0x8257 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6B78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6BA1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6BAF PUSH2 0x696F DUP3 PUSH2 0x8257 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x827B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x5422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6BF9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6C02 DUP2 PUSH2 0x8210 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C0F DUP4 DUP4 PUSH2 0x6946 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6C1E DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6C30 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6C42 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CB0 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6CCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CD8 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6CF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D00 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6D1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D29 DUP6 DUP3 DUP7 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6D46 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15BA DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6D62 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6D8A DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6D9B DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6DBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x6DC5 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x6DD6 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6E04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6E0F DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6E2B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6E37 DUP6 DUP3 DUP7 ADD PUSH2 0x6B91 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x6E58 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x6E63 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x6E73 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x6E83 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x6E93 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6EAE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6EBA DUP9 DUP3 DUP10 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6EDC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x6EE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6EF7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x6F07 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F22 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6F2E DUP8 DUP3 DUP9 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6F4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x6F5A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6F6A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x6F7A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6F9E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x6FA9 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x6FB9 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6FD4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6FE0 DUP7 DUP3 DUP8 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6FFE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x7009 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7025 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7031 DUP8 DUP4 DUP9 ADD PUSH2 0x6951 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7046 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6FE0 DUP7 DUP3 DUP8 ADD PUSH2 0x6A87 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7068 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x707F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7092 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x70A0 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x70D8 JUMPI PUSH2 0x70C6 DUP15 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x6951 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x70AF JUMP JUMPDEST POP POP DUP2 SWAP10 POP PUSH2 0x70E9 DUP13 DUP3 DUP14 ADD PUSH2 0x6946 JUMP JUMPDEST SWAP9 POP POP POP POP POP PUSH2 0x70FC DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x6946 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7111 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6F2E DUP8 DUP3 DUP9 ADD PUSH2 0x6A87 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7132 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7149 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x715C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x716A PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x718A JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x71AC JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x718E JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x71C3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x71D0 DUP7 DUP3 DUP8 ADD PUSH2 0x6AE5 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x71E0 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6BD7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x71FB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7212 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7225 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7233 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7246 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x726C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7283 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x728F DUP8 DUP4 DUP9 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x72A4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x72B1 DUP7 DUP3 DUP8 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x72E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6A20 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7307 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x731D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7329 DUP6 DUP3 DUP7 ADD PUSH2 0x6A20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x6D9B DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x734E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7364 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7370 DUP7 DUP3 DUP8 ADD PUSH2 0x6A20 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x7381 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x73BC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x73CF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x73DD PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7415 JUMPI PUSH2 0x7403 DUP14 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x6BE6 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x73EC JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x742D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x743A DUP7 DUP3 DUP8 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x71E0 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x745B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7471 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6AE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x748E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x82DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74AD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x74B8 DUP2 PUSH2 0x82DA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74D4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x74E0 DUP7 DUP3 DUP8 ADD PUSH2 0x6B91 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7502 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x7381 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7556 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6B91 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7577 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x758D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7599 DUP8 DUP3 DUP9 ADD PUSH2 0x6B43 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6F6A DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x75BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x8316 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x75D9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x75E4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x75F7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x7602 PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x7610 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x7620 DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x7633 DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7659 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x7666 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7671 PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x767C DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x768C DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x769F DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x76B4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x76C4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F22 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76F0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x76FA PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x7708 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x773B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7752 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x775E DUP8 DUP4 DUP9 ADD PUSH2 0x6BE6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7773 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7780 DUP7 DUP3 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x77A6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6EF7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7817 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x77E5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7817 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7835 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7869 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x827B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x7903 DUP5 DUP5 MLOAD PUSH2 0x77B8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x7915 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x7928 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x793B PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x7994 DUP4 DUP8 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79B0 DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79CC DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x64D2 DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7A0A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x827B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x7BF4 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7C2E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x77D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x64D2 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH2 0x7C93 DUP6 PUSH2 0x82AB JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7CAD PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7822 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7BF4 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE PUSH2 0x7CE7 DUP12 PUSH2 0x82AB JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7CFF DUP3 DUP6 ADD DUP12 PUSH2 0x7822 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x7D13 DUP3 DUP11 PUSH2 0x7822 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x7D26 DUP7 PUSH2 0x82AB JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7D3E DUP2 DUP7 PUSH2 0x7822 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x7D52 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7D9A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x77D2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7E2E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x7E0F DUP9 DUP7 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DCD JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7C2E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7851 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x7F67 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7851 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x7FD3 DUP6 PUSH2 0x82AB JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x7FD3 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x787D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8094 DUP3 DUP8 PUSH2 0x787D JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x80CD PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78D4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x80DF DUP2 DUP7 PUSH2 0x78D4 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x78F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8116 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78F3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x8128 DUP2 DUP7 PUSH2 0x7851 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x77D2 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x81DA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81F4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x822F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x824D JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x826D JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8296 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x827E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x82A5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x82B5 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xAC JUMPI NOT 0xBA 0x2A MOD MULMOD 0xE5 SWAP16 0xA6 PUSH24 0xC79AB3758068DC5433E1AD30F3504ECF1CB1C94164736F6C PUSH4 0x4300060C STOP CALLER ",
                "sourceMap": "1219:1185:7:-:0;;;826:113:21;;;1219:1185:7;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "5715": [
                        {
                            "length": 32,
                            "start": 10287
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c80638e5a0e071161017b578063be5b12b4116100d8578063e78ac0451161008c578063e9a8e44211610071578063e9a8e44214610620578063f5a4994d14610633578063fc9fe41b14610646576102c8565b8063e78ac045146105fa578063e8e4af091461060d576102c8565b8063c8c74a37116100bd578063c8c74a37146105c1578063ca7893ba146105d4578063d442057b146105e7576102c8565b8063be5b12b41461058c578063c25c4138146105ae576102c8565b8063ada517471161012f578063bc61a69511610114578063bc61a69514610546578063bccc34c614610559578063bd71ecf614610579576102c8565b8063ada5174714610512578063adc636bf14610525576102c8565b8063987777481161016057806398777748146104d95780639ea0ff13146104ec578063a4698417146104ff576102c8565b80638e5a0e07146104a45780639209483b146104c6576102c8565b806357494b1d116102295780636dd6b78d116101dd57806370bba11a116101c257806370bba11a1461045c578063742bd0501461046f57806387a74bdb14610482576102c8565b80636dd6b78d14610436578063706e2f9b14610449576102c8565b806360ee052a1161020e57806360ee052a146103f057806364ee6ade1461040357806368be3cf214610416576102c8565b806357494b1d146103ca5780635d5b674f146103dd576102c8565b80633105fec1116102805780633b77ebae116102655780633b77ebae1461039157806340bc03ae146103a45780634703a7e6146103b7576102c8565b80633105fec11461036b57806339b085ad1461037e576102c8565b806315e42a61116102b157806315e42a611461030b578063162790551461032b5780632d753aa41461034b576102c8565b80630b054f8d146102cd5780630fe3fe5b146102f8575b600080fd5b6102e06102db366004617053565b610659565b6040516102ef93929190617bff565b60405180910390f35b6102e0610306366004617053565b6108b3565b61031e610319366004617562565b6108c2565b6040516102ef9190617e91565b61033e610339366004616d35565b610aa7565b6040516102ef9190617e4f565b61035e610359366004616e41565b610ab1565b6040516102ef9190617e3c565b61035e610379366004616fea565b610c83565b61035e61038c366004617391565b610df3565b61031e61039f366004617727565b610f74565b61035e6103b2366004617643565b6115c1565b61035e6103c5366004616f8a565b61176f565b61035e6103d8366004616ec7565b6118c0565b61035e6103eb366004616ec7565b611efb565b61035e6103fe366004616f8a565b612048565b61035e610411366004616f8a565b6122c5565b6104296104243660046171e9565b612416565b6040516102ef9190617da9565b61035e610444366004616f8a565b612576565b61035e6104573660046172c2565b6127db565b61035e61046a366004616fea565b6128f5565b61035e61047d366004616fea565b612a50565b610495610490366004617791565b612ba8565b6040516102ef93929190617efb565b6104b76104b2366004617258565b612d96565b6040516102ef939291906180ba565b61035e6104d4366004617643565b612fc5565b61035e6104e7366004616ec7565b613200565b61031e6104fa366004616f3a565b613814565b61035e61050d366004616ec7565b613aaa565b610495610520366004617791565b613beb565b610538610533366004616ec7565b613d1b565b6040516102ef929190617f97565b61035e610554366004616f8a565b613f0a565b61056c610567366004617509565b614059565b6040516102ef9190617f41565b61035e6105873660046172f5565b614392565b61059f61059a366004616f8a565b61443f565b6040516102ef93929190617e5a565b61035e6105bc366004616ec7565b614742565b61035e6105cf366004616fea565b6147a8565b61035e6105e2366004616f8a565b614900565b61059f6105f5366004616f8a565b614966565b61035e61060836600461733a565b614c33565b61035e61061b366004616ec7565b614ce2565b61035e61062e366004617391565b614e23565b610538610641366004616ec7565b614ec6565b6104b7610654366004617258565b615067565b60006060806106666152ce565b9250865160001415610677576108a9565b6000805b885181101561078d57600289828151811061069257fe5b60200260200101515110156106a657610785565b8473ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e08b84815181106106d257fe5b60200260200101518960018b5103815181106106ea57fe5b60200260200101516040518463ffffffff1660e01b815260040161070f929190617d87565b60206040518083038187803b15801561072757600080fd5b5086fa93505050508015610758575060408051601f3d908101601f19168201909252610755918101906174f1565b60015b61076157610785565b828111156107835780925089828151811061077857fe5b602002602001015194505b505b60010161067b565b5084518067ffffffffffffffff811180156107a757600080fd5b506040519080825280602002602001820160405280156107d1578160200160208202803683370190505b50925060005b818110156108a5578573ffffffffffffffffffffffffffffffffffffffff16637f9c0ecd620493e0878a858151811061080c57fe5b60200260200101516040518463ffffffff1660e01b8152600401610831929190617d87565b60206040518083038187803b15801561084957600080fd5b5086fa9350505050801561087a575060408051601f3d908101601f19168201909252610877918101906174f1565b60015b610883576108a5565b8085838151811061089057fe5b602002602001018181525050506001016107d7565b5050505b9450945094915050565b60006060809450945094915050565b60008451600014156108d657506000610a9f565b6108de6153e7565b73ffffffffffffffffffffffffffffffffffffffff1663418436bc6207a1206109056153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461093d5786610953565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61095b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161461099357866109a9565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b6040518763ffffffff1660e01b81526004016109cd959493929190617baf565b60206040518083038187803b1580156109e557600080fd5b5086fa93505050508015610a16575060408051601f3d908101601f19168201909252610a13918101906174f1565b60015b610a54573d808015610a44576040519150601f19603f3d011682016040523d82523d6000602084013e610a49565b606091505b506000915050610a9f565b6000610a5f85615417565b60ff1690506000610a6f87615417565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281610a9057fe5b0481610a9857fe5b0493505050505b949350505050565b803b15155b919050565b80516060908067ffffffffffffffff81118015610acd57600080fd5b50604051908082528060200260200182016040528015610af7578160200160208202803683370190505b50915073ffffffffffffffffffffffffffffffffffffffff8716610b1b5750610c7a565b60005b81811015610c7757600060608973ffffffffffffffffffffffffffffffffffffffff1662061a80636e79e13360e01b8b8b8b8b8981518110610b5c57fe5b6020026020010151604051602401610b779493929190617acd565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610be291906179f8565b6000604051808303818686fa925050503d8060008114610c1e576040519150601f19603f3d011682016040523d82523d6000602084013e610c23565b606091505b509150915060008215610c475781806020019051810190610c4491906174f1565b90505b80610c5457505050610c77565b80868581518110610c6157fe5b6020908102919091010152505050600101610b1e565b50505b95945050505050565b80516060908067ffffffffffffffff81118015610c9f57600080fd5b50604051908082528060200260200182016040528015610cc9578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620249f0868481518110610d0357fe5b6020026020010151886040518463ffffffff1660e01b8152600401610d2992919061814f565b60006040518083038187803b158015610d4157600080fd5b5086fa93505050508015610d7757506040513d6000823e601f3d908101601f19168201604052610d74919081019061744a565b60015b610db1573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b606091505b5050610dea565b80600187510381518110610dc157fe5b6020026020010151848381518110610dd557fe5b60200260200101818152505050600101610ccf565b50509392505050565b6060835167ffffffffffffffff81118015610e0d57600080fd5b50604051908082528060200260200182016040528015610e37578160200160208202803683370190505b50905060005b84518114610f6c573073ffffffffffffffffffffffffffffffffffffffff16633b77ebae62030d40878481518110610e7157fe5b6020026020010151878581518110610e8557fe5b6020026020010151876040518563ffffffff1660e01b8152600401610eac93929190618103565b60206040518083038187803b158015610ec457600080fd5b5086fa93505050508015610ef5575060408051601f3d908101601f19168201909252610ef2918101906174f1565b60015b610f49573d808015610f23576040519150601f19603f3d011682016040523d82523d6000602084013e610f28565b606091505b506000838381518110610f3757fe5b60200260200101818152505050610f64565b80838381518110610f5657fe5b602002602001018181525050505b600101610e3d565b509392505050565b6000825160001480610f8857506080840151155b80610f95575060a0840151155b15610fa2575060006115ba565b610faa6168a3565b6040517f9d3fa4b900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690639d3fa4b990610ffc9088906004016180f0565b60606040518083038186803b15801561101457600080fd5b505afa158015611028573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104c91906176df565b905060038151600681111561105d57fe5b1461106c5760009150506115ba565b602081015185516040517f8171c40700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692638171c407926110c5928990600401617ec6565b60206040518083038186803b1580156110dd57600080fd5b505afa1580156110f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611115919061747d565b6111235760009150506115ba565b6040517f6070410800000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff851690636070410890611198907ff47261b00000000000000000000000000000000000000000000000000000000090600401617f14565b60206040518083038186803b1580156111b057600080fd5b505afa1580156111c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e89190616d51565b905060006111fa876101400151615428565b905073ffffffffffffffffffffffffffffffffffffffff811661122357600093505050506115ba565b6000808860c0015111611237576000611245565b611245886101800151615428565b9050600061126485604001518a60a001516154b190919063ffffffff16565b905080955060006112c9828b60a001518673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146112b1578c608001516112c4565b60c08d015160808e01516112c4916154d5565b6154f1565b8a516040517f70a0823100000000000000000000000000000000000000000000000000000000815291925060009161141f9173ffffffffffffffffffffffffffffffffffffffff8816916370a082319161132591600401617a14565b60206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137591906174f1565b8c516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916113ca91908c90600401617a35565b60206040518083038186803b1580156113e257600080fd5b505afa1580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906174f1565b615525565b9050818110156114375761143481838561553b565b97505b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611488575073ffffffffffffffffffffffffffffffffffffffff841615155b156115b2578a516040517f70a0823100000000000000000000000000000000000000000000000000000000815260009161158c9173ffffffffffffffffffffffffffffffffffffffff8816916370a08231916114e79190600401617a14565b60206040518083038186803b1580156114ff57600080fd5b505afa158015611513573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153791906174f1565b8d516040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89169163dd62ed3e916113ca91908d90600401617a35565b90508b60c001518110156115b0576115ad8961141a838f60c001518861553b565b98505b505b505050505050505b9392505050565b80516060908067ffffffffffffffff811180156115dd57600080fd5b50604051908082528060200260200182016040528015611607578160200160208202803683370190505b50915060005b818110156117655760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a602001518a8a8a888151811061164b57fe5b602002602001015160405160240161166593929190617ff5565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516116d091906179f8565b6000604051808303818686fa925050503d806000811461170c576040519150601f19603f3d011682016040523d82523d6000602084013e611711565b606091505b509150915060008215611735578180602001905181019061173291906174f1565b90505b8061174257505050611765565b8086858151811061174f57fe5b602090810291909101015250505060010161160d565b5050949350505050565b606061177b838561555f565b81518067ffffffffffffffff8111801561179457600080fd5b506040519080825280602002602001820160405280156117be578160200160208202803683370190505b50915060005b81811015610dea576117d46155d2565b73ffffffffffffffffffffffffffffffffffffffff1663ff1fd974620f4240888888868151811061180157fe5b60200260200101516040518563ffffffff1660e01b815260040161182793929190617b7e565b60206040518083038187803b15801561183f57600080fd5b5086fa93505050508015611870575060408051601f3d908101601f1916820190925261186d918101906174f1565b60015b61189e573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b808483815181106118ab57fe5b602002602001018181525050506001016117c4565b805160609085908067ffffffffffffffff811180156118de57600080fd5b50604051908082528060200260200182016040528015611908578160200160208202803683370190505b506040517f2f37b62400000000000000000000000000000000000000000000000000000000815290935073ffffffffffffffffffffffffffffffffffffffff831690632f37b6249061195e908990600401617a14565b60206040518083038186803b15801561197657600080fd5b505afa15801561198a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ae919061747d565b1580611a5957506040517f2f37b62400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632f37b62490611a07908890600401617a14565b60206040518083038186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a57919061747d565b155b15611a65575050610a9f565b611a6d6168c5565b6040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f90611abf908a90600401617a14565b60206040518083038186803b158015611ad757600080fd5b505afa158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f91906174f1565b81526040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f90611b63908990600401617a14565b60206040518083038186803b158015611b7b57600080fd5b505afa158015611b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb391906174f1565b60208201526040517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce690611c0a908a90600401617a14565b60206040518083038186803b158015611c2257600080fd5b505afa158015611c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5a91906174f1565b604080830191909152517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce690611cb3908990600401617a14565b60206040518083038186803b158015611ccb57600080fd5b505afa158015611cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0391906174f1565b8160600181815250508273ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5257600080fd5b505afa158015611d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8a91906174f1565b608082015260005b82811015611eef57611dbd82602001516003670de0b6b3a764000081611db457fe5b046001016155ea565b868281518110611dc957fe5b60200260200101511115611ddc57611eef565b8373ffffffffffffffffffffffffffffffffffffffff1663f8d6aed4620493e084600001518560400151866020015187606001518c8881518110611e1c57fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401611e4a9695949392919061817e565b60206040518083038187803b158015611e6257600080fd5b5086fa93505050508015611e93575060408051601f3d908101601f19168201909252611e90918101906174f1565b60015b611ecd573d808015611ec1576040519150601f19603f3d011682016040523d82523d6000602084013e611ec6565b606091505b5050611eef565b80868381518110611eda57fe5b60200260200101818152505050600101611d92565b50505050949350505050565b80516060908067ffffffffffffffff81118015611f1757600080fd5b50604051908082528060200260200182016040528015611f41578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663525d0da7620493e08888888681518110611f7d57fe5b60200260200101516040518563ffffffff1660e01b8152600401611fa393929190617b7e565b60206040518083038187803b158015611fbb57600080fd5b5086fa93505050508015611fec575060408051601f3d908101601f19168201909252611fe9918101906174f1565b60015b612026573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b606091505b5050611765565b8084838151811061203357fe5b60200260200101818152505050600101611f47565b6060612054838561555f565b81518067ffffffffffffffff8111801561206d57600080fd5b50604051908082528060200260200182016040528015612097578160200160208202803683370190505b50915060006120a46153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146120e4576120df86615647565b6120e7565b60005b905060006120f36153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146121335761212e86615647565b612136565b60005b905060005b838110156122ba57600161214d6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156121c6576121a584632640f62c60e01b89858151811061219857fe5b60200260200101516156d9565b8784815181106121b157fe5b602002602001018193508281525050506122a6565b6121ce6153ff565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415612219576121a5836359e9486260e01b89858151811061219857fe5b6000612233846359e9486260e01b8a868151811061219857fe5b92509050801561228957612268857f2640f62c00000000000000000000000000000000000000000000000000000000836156d9565b88858151811061227457fe5b602002602001018194508281525050506122a4565b600087848151811061229757fe5b6020026020010181815250505b505b806122b157506122ba565b5060010161213b565b505050509392505050565b60606122d1838561555f565b81518067ffffffffffffffff811180156122ea57600080fd5b50604051908082528060200260200182016040528015612314578160200160208202803683370190505b50915060005b81811015610dea5761232a6155d2565b73ffffffffffffffffffffffffffffffffffffffff1663144a2752620f4240878988868151811061235757fe5b60200260200101516040518563ffffffff1660e01b815260040161237d93929190617b7e565b60206040518083038187803b15801561239557600080fd5b5086fa935050505080156123c6575060408051601f3d908101601f191682019092526123c3918101906174f1565b60015b6123f4573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b8084838151811061240157fe5b6020026020010181815250505060010161231a565b60608167ffffffffffffffff8111801561242f57600080fd5b5060405190808252806020026020018201604052801561246957816020015b6124566168f4565b81526020019060019003908161244e5790505b50905060005b80831461256f57600182828151811061248457fe5b6020908102919091018101519115159101528383828181106124a257fe5b90506020028101906124b491906181a6565b151590506124c157612567565b308484838181106124ce57fe5b90506020028101906124e091906181a6565b6040516124ee9291906179e8565b600060405180830381855afa9150503d8060008114612529576040519150601f19603f3d011682016040523d82523d6000602084013e61252e565b606091505b5083838151811061253b57fe5b602002602001015160200184848151811061255257fe5b60209081029190910101519190915290151590525b60010161246f565b5092915050565b6060612582838561555f565b81518067ffffffffffffffff8111801561259b57600080fd5b506040519080825280602002602001820160405280156125c5578160200160208202803683370190505b50915060006125d26153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126125761260d86615647565b612615565b60005b905060006126216153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146126615761265c86615647565b612664565b60005b905060005b838110156122ba57600161267b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614156126e7576126c6846395b68fe760e01b89858151811061219857fe5b8784815181106126d257fe5b602002602001018193508281525050506127c7565b6126ef6153ff565b73ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561273a576126c68363cd7724c360e01b89858151811061219857fe5b6000612754856395b68fe760e01b8a868151811061219857fe5b9250905080156127aa57612789847fcd7724c300000000000000000000000000000000000000000000000000000000836156d9565b88858151811061279557fe5b602002602001018194508281525050506127c5565b60008784815181106127b857fe5b6020026020010181815250505b505b806127d257506122ba565b50600101612669565b6060815167ffffffffffffffff811180156127f557600080fd5b5060405190808252806020026020018201604052801561281f578160200160208202803683370190505b50905060005b825181146128ef577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1683828151811061287057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146128ca576128c58382815181106128a257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16615804565b6128cd565b60125b60ff168282815181106128dc57fe5b6020908102919091010152600101612825565b50919050565b80516060908067ffffffffffffffff8111801561291157600080fd5b5060405190808252806020026020018201604052801561293b578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f620249f086848151811061297557fe5b6020026020010151886040518463ffffffff1660e01b815260040161299b92919061814f565b60006040518083038187803b1580156129b357600080fd5b5086fa935050505080156129e957506040513d6000823e601f3d908101601f191682016040526129e6919081019061744a565b60015b612a17573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b80600187510381518110612a2757fe5b6020026020010151848381518110612a3b57fe5b60200260200101818152505050600101612941565b80516060908067ffffffffffffffff81118015612a6c57600080fd5b50604051908082528060200260200182016040528015612a96578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff16631f00ca74620249f0868481518110612ad057fe5b6020026020010151886040518463ffffffff1660e01b8152600401612af692919061814f565b60006040518083038187803b158015612b0e57600080fd5b5086fa93505050508015612b4457506040513d6000823e601f3d908101601f19168201604052612b41919081019061744a565b60015b612b72573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b80600081518110612b7f57fe5b6020026020010151848381518110612b9357fe5b60200260200101818152505050600101612a9c565b6000606080612bb7858761555f565b612bc28686896158d6565b925082612bce576108a9565b6040517fbccc34c6000000000000000000000000000000000000000000000000000000008152309063bccc34c690612c0e9086908a908a90600401617e9a565b60006040518083038186803b158015612c2657600080fd5b505afa158015612c3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612c62919081019061752f565b84519092508067ffffffffffffffff81118015612c7e57600080fd5b50604051908082528060200260200182016040528015612ca8578160200160208202803683370190505b50915060005b81811015612d8a5760003073ffffffffffffffffffffffffffffffffffffffff166315e42a61868b8b8b8781518110612ce357fe5b60200260200101516040518563ffffffff1660e01b8152600401612d0a9493929190617f54565b60206040518083038186803b158015612d2257600080fd5b505afa158015612d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5a91906174f1565b905080612d69575050506108a9565b80848381518110612d7657fe5b602090810291909101015250600101612cae565b50509450945094915050565b612d9e61690c565b612da661690c565b600080805b87518114612eb657612df26020898381518110612dc457fe5b60200260200101515103878a8481518110612ddb57fe5b6020026020010151615a979092919063ffffffff16565b600060603073ffffffffffffffffffffffffffffffffffffffff168a8481518110612e1957fe5b6020026020010151604051612e2e91906179f8565b600060405180830381855afa9150503d8060008114612e69576040519150601f19603f3d011682016040523d82523d6000602084013e612e6e565b606091505b50915091508115612eac576000612e92602083510383615aa790919063ffffffff16565b905084811115612eaa57838852602088018290529350835b505b5050600101612dab565b5080612ec25750612fbc565b60005b86518114612fb957612ef56020888381518110612ede57fe5b6020026020010151510383898481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff16898481518110612f1c57fe5b6020026020010151604051612f3191906179f8565b600060405180830381855afa9150503d8060008114612f6c576040519150601f19603f3d011682016040523d82523d6000602084013e612f71565b606091505b50915091508115612faf576000612f95602083510383615aa790919063ffffffff16565b905085811115612fad57838752602087018290529450845b505b5050600101612ec5565b50505b93509350939050565b60408401516060907fffffffff000000000000000000000000000000000000000000000000000000001661305f5760408051606081019091526130589080613011868960808401618013565b60405160208183030381529060405281526020018688604051602001613038929190618013565b6040516020818303038152906040528152602001615ab381525083615c2c565b9050610a9f565b81518067ffffffffffffffff8111801561307857600080fd5b506040519080825280602002602001820160405280156130a2578160200160208202803683370190505b50915060005b818110156117655760006060886000015173ffffffffffffffffffffffffffffffffffffffff16621e84808a604001518a8a8a88815181106130e657fe5b602002602001015160405160240161310093929190617ff5565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161316b91906179f8565b6000604051808303818686fa925050503d80600081146131a7576040519150601f19603f3d011682016040523d82523d6000602084013e6131ac565b606091505b5091509150600082156131d057818060200190518101906131cd91906174f1565b90505b806131dd57505050611765565b808685815181106131ea57fe5b60209081029190910101525050506001016130a8565b805160609085908067ffffffffffffffff8111801561321e57600080fd5b50604051908082528060200260200182016040528015613248578160200160208202803683370190505b506040517f2f37b62400000000000000000000000000000000000000000000000000000000815290935073ffffffffffffffffffffffffffffffffffffffff831690632f37b6249061329e908990600401617a14565b60206040518083038186803b1580156132b657600080fd5b505afa1580156132ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ee919061747d565b158061339957506040517f2f37b62400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690632f37b62490613347908890600401617a14565b60206040518083038186803b15801561335f57600080fd5b505afa158015613373573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613397919061747d565b155b156133a5575050610a9f565b6133ad6168c5565b6040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f906133ff908a90600401617a14565b60206040518083038186803b15801561341757600080fd5b505afa15801561342b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344f91906174f1565b81526040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f8b2cb4f906134a3908990600401617a14565b60206040518083038186803b1580156134bb57600080fd5b505afa1580156134cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134f391906174f1565b60208201526040517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce69061354a908a90600401617a14565b60206040518083038186803b15801561356257600080fd5b505afa158015613576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061359a91906174f1565b604080830191909152517f948d8ce600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063948d8ce6906135f3908990600401617a14565b60206040518083038186803b15801561360b57600080fd5b505afa15801561361f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061364391906174f1565b8160600181815250508273ffffffffffffffffffffffffffffffffffffffff1663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561369257600080fd5b505afa1580156136a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136ca91906174f1565b608082015260005b82811015611eef5781516136ee906706f05b59d3b200006155ea565b8682815181106136fa57fe5b6020026020010151111561370d57611eef565b8373ffffffffffffffffffffffffffffffffffffffff1663ba9530a6620493e084600001518560400151866020015187606001518c888151811061374d57fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161377b9695949392919061817e565b60206040518083038187803b15801561379357600080fd5b5086fa935050505080156137c4575060408051601f3d908101601f191682019092526137c1918101906174f1565b60015b6137f2573d808015611ec1576040519150601f19603f3d011682016040523d82523d6000602084013e611ec6565b808683815181106137ff57fe5b602002602001018181525050506001016136d2565b6000808573ffffffffffffffffffffffffffffffffffffffff1663901754d786866040518363ffffffff1660e01b8152600401613852929190617a35565b60206040518083038186803b15801561386a57600080fd5b505afa15801561387e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138a29190616d51565b905073ffffffffffffffffffffffffffffffffffffffff81166138c9576000915050610a9f565b600073ffffffffffffffffffffffffffffffffffffffff86161561398e576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8716906370a0823190613939908590600401617a14565b60206040518083038186803b15801561395157600080fd5b505afa158015613965573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061398991906174f1565b6139a7565b8173ffffffffffffffffffffffffffffffffffffffff16315b9050838110156139bc57600092505050610a9f565b6040517f1e1401f800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831690631e1401f890620249f090613a17908a908a908a90600401617b7e565b60206040518083038187803b158015613a2f57600080fd5b5086fa93505050508015613a60575060408051601f3d908101601f19168201909252613a5d918101906174f1565b60015b613aa0573d808015613a8e576040519150601f19603f3d011682016040523d82523d6000602084013e613a93565b606091505b5060009350505050610a9f565b9250610a9f915050565b80516060908067ffffffffffffffff81118015613ac657600080fd5b50604051908082528060200260200182016040528015613af0578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663343fbcdd62061a808888888681518110613b2c57fe5b60200260200101516040518563ffffffff1660e01b8152600401613b5293929190617b7e565b60206040518083038187803b158015613b6a57600080fd5b5086fa93505050508015613b9b575060408051601f3d908101601f19168201909252613b98918101906174f1565b60015b613bc9573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b80848381518110613bd657fe5b60200260200101818152505050600101613af6565b6000606080613bfa858761555f565b613c058686896158d6565b925082613c11576108a9565b6040517fbccc34c6000000000000000000000000000000000000000000000000000000008152309063bccc34c690613c519086908a908a90600401617e9a565b60006040518083038186803b158015613c6957600080fd5b505afa158015613c7d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613ca5919081019061752f565b9150613d0f60405180606001604052808785604051602001613cc8929190617c40565b60405160208183030381529060405281526020018885604051602001613cef929190617c40565b6040516020818303038152906040528152602001615e2a81525085615c2c565b90509450945094915050565b60006060613d29848661555f565b82518067ffffffffffffffff81118015613d4257600080fd5b50604051908082528060200260200182016040528015613d6c578160200160208202803683370190505b5091506000613d796153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614613db15786613db4565b60005b90506000613dc06153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614613df85786613dfb565b60005b905060005b83811015613e57576000613e298b85858b8681518110613e1c57fe5b6020026020010151613814565b905080613e365750613e57565b80868381518110613e4357fe5b602090810291909101015250600101613e00565b506040517f901754d700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a169063901754d790613eac9085908590600401617a35565b60206040518083038186803b158015613ec457600080fd5b505afa158015613ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613efc9190616d51565b945050505094509492505050565b80516060908067ffffffffffffffff81118015613f2657600080fd5b50604051908082528060200260200182016040528015613f50578160200160208202803683370190505b50915060005b81811015610dea57613f66615f2c565b73ffffffffffffffffffffffffffffffffffffffff166372ea9076620c35008888888681518110613f9357fe5b60200260200101516040518563ffffffff1660e01b8152600401613fb993929190617b7e565b60006040518083038187803b158015613fd157600080fd5b5086fa9350505050801561400757506040513d6000823e601f3d908101601f191682016040526140049190810190617499565b60015b614035573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b8086858151811061404257fe5b602002602001018181525050505050600101613f56565b60606000614065615f44565b6040805160018082528183019092529192506060919060208083019080368337019050509050858160008151811061409957fe5b6020908102919091010152606060006040519080825280602002602001820160405280156140d1578160200160208202803683370190505b5090506140dc6153ff565b73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415614205576040517f81efcbdd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906381efcbdd906207a1209061416d90899060019088908890600401617c6f565b60006040518083038187803b15801561418557600080fd5b5086fa935050505080156141bb57506040513d6000823e601f3d908101601f191682016040526141b8919081019061752f565b60015b6141f5573d8080156141e9576040519150601f19603f3d011682016040523d82523d6000602084013e6141ee565b606091505b5050614200565b93506115ba92505050565b614388565b61420d6153ff565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561429e576040517f61e597f900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906361e597f9906207a1209061416d908a9060019088908890600401617c6f565b6040517f05734d9a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906305734d9a906207a12090614304908a90600190889088908d90849084908490600401617cbf565b60006040518083038187803b15801561431c57600080fd5b5086fa9350505050801561435257506040513d6000823e601f3d908101601f1916820160405261434f919081019061752f565b60015b6141f5573d808015614380576040519150601f19603f3d011682016040523d82523d6000602084013e614385565b606091505b50505b5050509392505050565b6060825167ffffffffffffffff811180156143ac57600080fd5b506040519080825280602002602001820160405280156143d6578160200160208202803683370190505b50905060005b8351811461256f57614420838583815181106143f457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16615f5c90919063ffffffff16565b82828151811061442c57fe5b60209081029190910101526001016143dc565b600080606061444e858761555f565b83518067ffffffffffffffff8111801561446757600080fd5b50604051908082528060200260200182016040528015614491578160200160208202803683370190505b50915061449c61606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b81526004016144d6929190617a35565b60206040518083038186803b1580156144ee57600080fd5b505afa158015614502573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145269190616d51565b9250600073ffffffffffffffffffffffffffffffffffffffff8416156145515750600193508661460e565b61455961606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c6888a6040518363ffffffff1660e01b8152600401614593929190617a35565b60206040518083038186803b1580156145ab57600080fd5b505afa1580156145bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145e39190616d51565b935073ffffffffffffffffffffffffffffffffffffffff8416614607575050612fbc565b5060009350855b8373ffffffffffffffffffffffffffffffffffffffff1663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561465457600080fd5b505afa158015614668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061468c919061747d565b614697575050612fbc565b60005b828110156147365760006147088a87856040516020016146bc93929190617a5c565b6040516020818303038152906040528a88866040516020016146e093929190617a5c565b6040516020818303038152906040528a85815181106146fb57fe5b6020026020010151616083565b9050806147155750614736565b8085838151811061472257fe5b60209081029190910101525060010161469a565b50505093509350939050565b604080516060818101909252610c7a9080614761868960808401617a35565b60405160208183030381529060405281526020018688604051602001614788929190617a35565b60405160208183030381529060405281526020016161ba81525083615c2c565b80516060908067ffffffffffffffff811180156147c457600080fd5b506040519080825280602002602001820160405280156147ee578160200160208202803683370190505b50915060005b81811015610dea578573ffffffffffffffffffffffffffffffffffffffff16631f00ca74620249f086848151811061482857fe5b6020026020010151886040518463ffffffff1660e01b815260040161484e92919061814f565b60006040518083038187803b15801561486657600080fd5b5086fa9350505050801561489c57506040513d6000823e601f3d908101601f19168201604052614899919081019061744a565b60015b6148ca573d808015610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b806000815181106148d757fe5b60200260200101518483815181106148eb57fe5b602002602001018181525050506001016147f4565b6060610a9f6040518060600160405280856040516020016149219190617a14565b6040516020818303038152906040528152602001866040516020016149469190617a14565b60405160208183030381529060405281526020016162c081525083615c2c565b6000806060614975858761555f565b83518067ffffffffffffffff8111801561498e57600080fd5b506040519080825280602002602001820160405280156149b8578160200160208202803683370190505b5091506149c361606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c688886040518363ffffffff1660e01b81526004016149fd929190617a35565b60206040518083038186803b158015614a1557600080fd5b505afa158015614a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a4d9190616d51565b9250600073ffffffffffffffffffffffffffffffffffffffff841615614a7857506001935086614b35565b614a8061606b565b73ffffffffffffffffffffffffffffffffffffffff16631273b0c6888a6040518363ffffffff1660e01b8152600401614aba929190617a35565b60206040518083038186803b158015614ad257600080fd5b505afa158015614ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b0a9190616d51565b935073ffffffffffffffffffffffffffffffffffffffff8416614b2e575050612fbc565b5060009350855b8373ffffffffffffffffffffffffffffffffffffffff1663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614b7b57600080fd5b505afa158015614b8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bb3919061747d565b614bbe575050612fbc565b6040805160608101909152614c269080614bdd8a888660808501617a5c565b60405160208183030381529060405281526020018a8785604051602001614c0693929190617a5c565b604051602081830303815290604052815260200161608381525087615c2c565b9250505093509350939050565b6060835167ffffffffffffffff81118015614c4d57600080fd5b50604051908082528060200260200182016040528015614c77578160200160208202803683370190505b50905060005b84518114610f6c57614cc38484878481518110614c9657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166163cc9092919063ffffffff16565b828281518110614ccf57fe5b6020908102919091010152600101614c7d565b80516060908067ffffffffffffffff81118015614cfe57600080fd5b50604051908082528060200260200182016040528015614d28578160200160208202803683370190505b50915060005b81811015611765578673ffffffffffffffffffffffffffffffffffffffff1663838e6a22620493e08888888681518110614d6457fe5b60200260200101516040518563ffffffff1660e01b8152600401614d8a93929190617b7e565b60206040518083038187803b158015614da257600080fd5b5086fa93505050508015614dd3575060408051601f3d908101601f19168201909252614dd0918101906174f1565b60015b614e01573d80801561201a576040519150601f19603f3d011682016040523d82523d6000602084013e61201f565b80848381518110614e0e57fe5b60200260200101818152505050600101614d2e565b6060614e30848484610df3565b905060005b8451811015610f6c57818181518110614e4a57fe5b6020026020010151600014614ebe57614ea5828281518110614e6857fe5b6020026020010151868381518110614e7c57fe5b602002602001015160a00151878481518110614e9457fe5b60200260200101516080015161553b565b828281518110614eb157fe5b6020026020010181815250505b600101614e35565b60006060614ed4848661555f565b82518067ffffffffffffffff81118015614eed57600080fd5b50604051908082528060200260200182016040528015614f17578160200160208202803683370190505b5091506000614f246153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614614f5c5786614f5f565b60005b90506000614f6b6153ff565b73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614614fa35786614fa6565b60005b905061501060405180606001604052808b84604051602001614fc9929190617a35565b60405160208183030381529060405281526020018b85604051602001614ff0929190617a35565b60405160208183030381529060405281526020016164dc81525087615c2c565b6040517f901754d700000000000000000000000000000000000000000000000000000000815290945073ffffffffffffffffffffffffffffffffffffffff8a169063901754d790613eac9085908590600401617a35565b61506f61690c565b61507761690c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8060005b8651811461519c576150cc60208883815181106150b557fe5b6020026020010151510387898481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168984815181106150f357fe5b602002602001015160405161510891906179f8565b600060405180830381855afa9150503d8060008114615143576040519150601f19603f3d011682016040523d82523d6000602084013e615148565b606091505b5091509150811561519257600061516c602083510383615aa790919063ffffffff16565b905060008111801561517d57508481105b1561519057838752602087018290529350835b505b505060010161509c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114156151cb5750612fbc565b60005b87518114612fb9576151fe60208983815181106151e757fe5b60200260200101515103838a8481518110612ddb57fe5b600060603073ffffffffffffffffffffffffffffffffffffffff168a848151811061522557fe5b602002602001015160405161523a91906179f8565b600060405180830381855afa9150503d8060008114615275576040519150601f19603f3d011682016040523d82523d6000602084013e61527a565b606091505b509150915081156152c457600061529e602083510383615aa790919063ffffffff16565b90506000811180156152af57508581105b156152c257838852602088018290529450845b505b50506001016151ce565b6000806152d961652c565b90508073ffffffffffffffffffffffffffffffffffffffff166321f8a7218273ffffffffffffffffffffffffffffffffffffffff16639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561533d57600080fd5b505afa158015615351573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061537591906174f1565b6040518263ffffffff1660e01b81526004016153919190617e91565b60206040518083038186803b1580156153a957600080fd5b505afa1580156153bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906153e19190616d51565b91505090565b739aab3f75489902f3a48495025729a0af77d4b11e90565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b600061542282615804565b92915050565b600081516000141561543c57506000610aac565b8151602414158061549957507ff47261b000000000000000000000000000000000000000000000000000000000615474836000616544565b7fffffffff000000000000000000000000000000000000000000000000000000001614155b156154a657506000610aac565b615422826010616590565b6000828211156154cf576154cf6154ca600285856165d0565b616657565b50900390565b6000828201838110156115ba576115ba6154ca600086866165d0565b60006154fe84848461665f565b15615511576155116154ca8585856166b9565b610a9f8361551f86856166d8565b90616709565b600081831061553457816115ba565b5090919050565b6000610a9f8361551f61554f8260016154b1565b61555988876166d8565b906154d5565b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156155ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016155c59061802b565b60405180910390fd5b5050565b73794e6e91555438afc3ccf1c5076a74f42133d08d90565b6000828202831580159061560757508284828161560357fe5b0414155b15615616576000915050615422565b6706f05b59d3b2000081018181101561563457600092505050615422565b670de0b6b3a76400009004949350505050565b6000615651616733565b73ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b81526004016156899190617a14565b60206040518083038186803b1580156156a157600080fd5b505afa1580156156b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906154229190616d51565b60008073ffffffffffffffffffffffffffffffffffffffff85166156fc576157fc565b60608573ffffffffffffffffffffffffffffffffffffffff16620249f0868660405160240161572b9190617e91565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161579691906179f8565b6000604051808303818686fa925050503d80600081146157d2576040519150601f19603f3d011682016040523d82523d6000602084013e6157d7565b606091505b50909250905081156157fa57808060200190518101906157f791906174f1565b92505b505b935093915050565b600060129050600060608373ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600481526020017f313ce5670000000000000000000000000000000000000000000000000000000081525060405161586891906179f8565b600060405180830381855afa9150503d80600081146158a3576040519150601f19603f3d011682016040523d82523d6000602084013e6158a8565b606091505b50915091508180156158bc57506020815110155b156158cf576158cc816000615aa7565b92505b5050919050565b6000806158e1615f44565b905060608173ffffffffffffffffffffffffffffffffffffffff1663910ffc716159096153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146159415787615957565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b61595f6153ff565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461599757876159ad565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290527fffffffff0000000000000000000000000000000000000000000000000000000060e086901b169091526159f992919060019060248101617b3d565b60006040518083038186803b158015615a1157600080fd5b505afa158015615a25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052615a4d919081019061711e565b5050905080518410615a655750600091506115ba9050565b808481518110615a7157fe5b6020026020010151925060f883901c60001c60bb1415610dea5750600091506115ba9050565b615aa283838361674b565b505050565b60006115ba8383616772565b600080615abe616926565b85806020019051810190615ad291906175c6565b91509150600085806020019051810190615aec91906175aa565b905060006060307f40bc03ae00000000000000000000000000000000000000000000000000000000858786615b208c61679c565b604051602401615b339493929190618088565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051615b9e91906179f8565b600060405180830381855afa9150503d8060008114615bd9576040519150601f19603f3d011682016040523d82523d6000602084013e615bde565b606091505b509150915081615bf6576000955050505050506115ba565b80806020019051810190615c0a919061744a565b600081518110615c1657fe5b6020026020010151955050505050509392505050565b6060815167ffffffffffffffff81118015615c4657600080fd5b50604051908082528060200260200182016040528015615c70578160200160208202803683370190505b509050815160001415615c8257615422565b6000615cb38460000151856020015185600081518110615c9e57fe5b6020026020010151876040015163ffffffff16565b905080615cc05750615422565b6000615cdd8560200151866000015184886040015163ffffffff16565b905080615ceb575050615422565b60005b8451811015615e215760005b6005811015615de357615d21868381518110615d1257fe5b602002602001015184866167dd565b935083615d2d57615de3565b615d3c612715612710866167dd565b935083615d4857615de3565b6000615d6588602001518960000151878b6040015163ffffffff16565b905080615d725750615de3565b809350868381518110615d8157fe5b60200260200101518410615dda576000878481518110615d9d57fe5b6020026020010151612710898681518110615db457fe5b602002602001015187030281615dc657fe5b04905060058111615dd8575050615de3565b505b50600101615cfa565b50615e02858281518110615df357fe5b602002602001015183856167dd565b848281518110615e0e57fe5b6020908102919091010152600101615cee565b50505092915050565b600080606084806020019051810190615e439190616df2565b91509150600086806020019051810190615e5d9190616df2565b506040517f15e42a6100000000000000000000000000000000000000000000000000000000815290915030906315e42a6190615ea3908590859088908b90600401617f54565b60206040518083038186803b158015615ebb57600080fd5b505afa925050508015615eeb575060408051601f3d908101601f19168201909252615ee8918101906174f1565b60015b6141f5573d808015615f19576040519150601f19603f3d011682016040523d82523d6000602084013e615f1e565b606091505b5060009450505050506115ba565b73e2f2a5c287993345a840db3b0845fbc70f5935a590565b73a1c0fa73c39cfbcc11ec9eb1afc665aba9996e2c90565b60008060608473ffffffffffffffffffffffffffffffffffffffff166370a0823160e01b85604051602401615f919190617a14565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051615ffc91906179f8565b600060405180830381855afa9150503d8060008114616037576040519150601f19603f3d011682016040523d82523d6000602084013e61603c565b606091505b509150915081801561605057506020815110155b1561606357616060816000615aa7565b92505b505092915050565b733a97247df274a17c59a3bd12735ea3fcdfb4995090565b6000806000808680602001905181019061609d9190616da6565b9250925092508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415616174576040517fa2801e1600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063a2801e1690620493e09061612e908990600401617e91565b60206040518083038187803b15801561614657600080fd5b5086fa93505050508015615eeb575060408051601f3d908101601f19168201909252615ee8918101906174f1565b61617c616835565b73ffffffffffffffffffffffffffffffffffffffff1663ca19ebd9620493e084886040518463ffffffff1660e01b815260040161612e929190617d61565b6000806000858060200190518101906161d39190616d6d565b915091506000858060200190518101906161ed9190616d51565b90503063a469841762061a808486856162058b61679c565b6040518663ffffffff1660e01b81526004016162249493929190617a8c565b60006040518083038187803b15801561623c57600080fd5b5086fa9350505050801561627257506040513d6000823e601f3d908101601f1916820160405261626f919081019061744a565b60015b6162a0573d808015615f19576040519150601f19603f3d011682016040523d82523d6000602084013e615f1e565b806000815181106162ad57fe5b60200260200101519450505050506115ba565b600080848060200190518101906162d79190616d51565b90506000848060200190518101906162ef9190616d51565b90503063bc61a69583836163028861679c565b6040518463ffffffff1660e01b815260040161632093929190617b04565b60006040518083038186803b15801561633857600080fd5b505afa92505050801561636d57506040513d6000823e601f3d908101601f1916820160405261636a919081019061744a565b60015b6163ad573d80801561639b576040519150601f19603f3d011682016040523d82523d6000602084013e6163a0565b606091505b50600093505050506115ba565b806000815181106163ba57fe5b602002602001015193505050506115ba565b60008060608573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e60e01b8686604051602401616403929190617a35565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161646e91906179f8565b600060405180830381855afa9150503d80600081146164a9576040519150601f19603f3d011682016040523d82523d6000602084013e6164ae565b606091505b50915091508180156164c257506020815110155b15610dea576164d2816000615aa7565b9695505050505050565b6000806000858060200190518101906164f59190616d6d565b91509150600080868060200190518101906165109190616d6d565b9150915061652084848389613814565b98975050505050505050565b7352ae12abe5d8bd778bd5397f99ca900624cfadd490565b60008160040183511015616565576165656154ca600385518560040161684d565b5001602001517fffffffff000000000000000000000000000000000000000000000000000000001690565b600081601401835110156165b1576165b16154ca600485518560140161684d565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b606063e946c1bb60e01b8484846040516024016165ef93929190617fc6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915290509392505050565b805160208201fd5b600082616671576166716154ca61686c565b81158061667c575083155b15616689575060006115ba565b6000838061669357fe5b85840990506166a285846166d8565b6166ae826103e86166d8565b101595945050505050565b606063339f3de260e01b8484846040516024016165ef93929190618168565b6000826166e757506000615422565b828202828482816166f457fe5b04146115ba576115ba6154ca600186866165d0565b60008161671f5761671f6154ca600385856165d0565b600082848161672a57fe5b04949350505050565b73c0a47dfe034b400b47bdad5fecda2621de6c4d9590565b816020018351101561676a5761676a6154ca600585518560200161684d565b910160200152565b60008160200183511015616793576167936154ca600585518560200161684d565b50016020015190565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106167cc57fe5b602002602001018181525050919050565b60008315806167ea575081155b806167f3575082155b15616800575060006115ba565b8382028285828161680d57fe5b041461681d5760009150506115ba565b836001850382018161682b57fe5b0495945050505050565b73533da777aedce766ceae696bf90f8541a4ba80eb90565b6060632800659560e01b8484846040516024016165ef93929190617fe7565b60408051808201909152600481527fa791837c00000000000000000000000000000000000000000000000000000000602082015290565b6040805160608101909152806000815260006020820181905260409091015290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b8035615422816182b8565b600082601f830112616961578081fd5b813561697461696f82618237565b618210565b81815291506020808301908481018184028601820187101561699557600080fd5b60005b848110156169bd5781356169ab816182b8565b84529282019290820190600101616998565b505050505092915050565b600082601f8301126169d8578081fd5b81356169e661696f82618237565b818152915060208083019084810160005b848110156169bd57616a0e888484358a0101616b43565b845292820192908201906001016169f7565b600082601f830112616a30578081fd5b8135616a3e61696f82618237565b818152915060208083019084810181840286018201871015616a5f57600080fd5b60005b848110156169bd578135616a75816182b8565b84529282019290820190600101616a62565b600082601f830112616a97578081fd5b8135616aa561696f82618237565b818152915060208083019084810181840286018201871015616ac657600080fd5b60005b848110156169bd57813584529282019290820190600101616ac9565b600082601f830112616af5578081fd5b8151616b0361696f82618237565b818152915060208083019084810181840286018201871015616b2457600080fd5b60005b848110156169bd57815184529282019290820190600101616b27565b600082601f830112616b53578081fd5b8135616b6161696f82618257565b9150808252836020828501011115616b7857600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112616ba1578081fd5b8151616baf61696f82618257565b9150808252836020828501011115616bc657600080fd5b61256f81602084016020860161827b565b80516002811061542257600080fd5b60006101c0808385031215616bf9578182fd5b616c0281618210565b915050616c0f8383616946565b8152616c1e8360208401616946565b6020820152616c308360408401616946565b6040820152616c428360608401616946565b60608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013567ffffffffffffffff80821115616ca457600080fd5b616cb086838701616b43565b83850152610160925082850135915080821115616ccc57600080fd5b616cd886838701616b43565b83850152610180925082850135915080821115616cf457600080fd5b616d0086838701616b43565b838501526101a0925082850135915080821115616d1c57600080fd5b50616d2985828601616b43565b82840152505092915050565b600060208284031215616d46578081fd5b81356115ba816182b8565b600060208284031215616d62578081fd5b81516115ba816182b8565b60008060408385031215616d7f578081fd5b8251616d8a816182b8565b6020840151909250616d9b816182b8565b809150509250929050565b600080600060608486031215616dba578081fd5b8351616dc5816182b8565b6020850151909350616dd6816182b8565b6040850151909250616de7816182b8565b809150509250925092565b60008060408385031215616e04578182fd5b8251616e0f816182b8565b602084015190925067ffffffffffffffff811115616e2b578182fd5b616e3785828601616b91565b9150509250929050565b600080600080600060a08688031215616e58578283fd5b8535616e63816182b8565b94506020860135616e73816182b8565b93506040860135616e83816182b8565b92506060860135616e93816182b8565b9150608086013567ffffffffffffffff811115616eae578182fd5b616eba88828901616a87565b9150509295509295909350565b60008060008060808587031215616edc578182fd5b8435616ee7816182b8565b93506020850135616ef7816182b8565b92506040850135616f07816182b8565b9150606085013567ffffffffffffffff811115616f22578182fd5b616f2e87828801616a87565b91505092959194509250565b60008060008060808587031215616f4f578182fd5b8435616f5a816182b8565b93506020850135616f6a816182b8565b92506040850135616f7a816182b8565b9396929550929360600135925050565b600080600060608486031215616f9e578081fd5b8335616fa9816182b8565b92506020840135616fb9816182b8565b9150604084013567ffffffffffffffff811115616fd4578182fd5b616fe086828701616a87565b9150509250925092565b600080600060608486031215616ffe578081fd5b8335617009816182b8565b9250602084013567ffffffffffffffff80821115617025578283fd5b61703187838801616951565b93506040860135915080821115617046578283fd5b50616fe086828701616a87565b60008060008060808587031215617068578182fd5b843567ffffffffffffffff8082111561707f578384fd5b818701915087601f830112617092578384fd5b81356170a061696f82618237565b81815260208082019190858101885b858110156170d8576170c68e8484358b0101616951565b855293820193908201906001016170af565b50508199506170e98c828d01616946565b9850505050506170fc8860408901616946565b93506060870135915080821115617111578283fd5b50616f2e87828801616a87565b600080600060608486031215617132578081fd5b835167ffffffffffffffff80821115617149578283fd5b818601915086601f83011261715c578283fd5b815161716a61696f82618237565b80828252602080830192508086018b82838702890101111561718a578788fd5b8796505b848710156171ac57805184526001969096019592810192810161718e565b5089015190975093505050808211156171c3578283fd5b506171d086828701616ae5565b9250506171e08560408601616bd7565b90509250925092565b600080602083850312156171fb578182fd5b823567ffffffffffffffff80821115617212578384fd5b818501915085601f830112617225578384fd5b813581811115617233578485fd5b8660208083028501011115617246578485fd5b60209290920196919550909350505050565b60008060006060848603121561726c578081fd5b833567ffffffffffffffff80821115617283578283fd5b61728f878388016169c8565b945060208601359150808211156172a4578283fd5b506172b1868287016169c8565b925050604084013590509250925092565b6000602082840312156172d3578081fd5b813567ffffffffffffffff8111156172e9578182fd5b610a9f84828501616a20565b60008060408385031215617307578182fd5b823567ffffffffffffffff81111561731d578283fd5b61732985828601616a20565b9250506020830135616d9b816182b8565b60008060006060848603121561734e578081fd5b833567ffffffffffffffff811115617364578182fd5b61737086828701616a20565b9350506020840135617381816182b8565b91506040840135616de7816182b8565b6000806000606084860312156173a5578081fd5b833567ffffffffffffffff808211156173bc578283fd5b818601915086601f8301126173cf578283fd5b81356173dd61696f82618237565b81815260208082019190858101875b85811015617415576174038d8484358b0101616be6565b855293820193908201906001016173ec565b5091985089013594505050508082111561742d578283fd5b5061743a868287016169c8565b9250506171e08560408601616946565b60006020828403121561745b578081fd5b815167ffffffffffffffff811115617471578182fd5b610a9f84828501616ae5565b60006020828403121561748e578081fd5b81516115ba816182da565b6000806000606084860312156174ad578081fd5b83516174b8816182da565b602085015190935067ffffffffffffffff8111156174d4578182fd5b6174e086828701616b91565b925050604084015190509250925092565b600060208284031215617502578081fd5b5051919050565b60008060006060848603121561751d578081fd5b833592506020840135617381816182b8565b600060208284031215617540578081fd5b815167ffffffffffffffff811115617556578182fd5b610a9f84828501616b91565b60008060008060808587031215617577578182fd5b843567ffffffffffffffff81111561758d578283fd5b61759987828801616b43565b9450506020850135616f6a816182b8565b6000602082840312156175bb578081fd5b81516115ba81618316565b60008082840360808112156175d9578283fd5b83516175e481618316565b92506060601f19820112156175f7578182fd5b506176026060618210565b6020840151617610816182b8565b81526040840151617620816182e8565b60208201526060840151617633816182e8565b6040820152919491935090915050565b60008060008084860360c0811215617659578283fd5b6060811215617666578283fd5b506176716060618210565b853561767c816182b8565b8152602086013561768c816182e8565b6020820152604086013561769f816182e8565b6040820152935060608501356176b481618316565b925060808501356176c481618316565b915060a085013567ffffffffffffffff811115616f22578182fd5b6000606082840312156176f0578081fd5b6176fa6060618210565b825160078110617708578283fd5b8152602083810151908201526040928301519281019290925250919050565b60008060006060848603121561773b578081fd5b833567ffffffffffffffff80821115617752578283fd5b61775e87838801616be6565b94506020860135915080821115617773578283fd5b5061778086828701616b43565b9250506040840135616de7816182b8565b600080600080608085870312156177a6578182fd5b843593506020850135616ef7816182b8565b73ffffffffffffffffffffffffffffffffffffffff169052565b6000815180845260208085019450808401835b8381101561781757815173ffffffffffffffffffffffffffffffffffffffff16875295820195908201906001016177e5565b509495945050505050565b6000815180845260208085019450808401835b8381101561781757815187529582019590820190600101617835565b6000815180845261786981602086016020860161827b565b601f01601f19169290920160200192915050565b805173ffffffffffffffffffffffffffffffffffffffff1682526020808201517fffffffff000000000000000000000000000000000000000000000000000000009081169184019190915260409182015116910152565b600081518352602082015160406020850152610a9f6040850182617851565b60006101c06179038484516177b8565b602083015161791560208601826177b8565b50604083015161792860408601826177b8565b50606083015161793b60608601826177b8565b506080830151608085015260a083015160a085015260c083015160c085015260e083015160e085015261010080840151818601525061012080840151818601525061014080840151828287015261799483870182617851565b9250505061016080840151858303828701526179b08382617851565b9250505061018080840151858303828701526179cc8382617851565b925050506101a080840151858303828701526164d28382617851565b6000828483379101908152919050565b60008251617a0a81846020870161827b565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681529183166020830152909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152808516604084015250608060608301526164d26080830184617822565b73ffffffffffffffffffffffffffffffffffffffff9485168152928416602084015292166040820152606081019190915260800190565b600073ffffffffffffffffffffffffffffffffffffffff808616835280851660208401525060606040830152610c7a6060830184617822565b600073ffffffffffffffffffffffffffffffffffffffff80871683528086166020840152508315156040830152608060608301526164d26080830184617851565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015283606083015260a06080830152617bf460a0830184617851565b979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8516825260606020830152617c2e60608301856177d2565b82810360408401526164d28185617822565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152610a9f6040830184617851565b600073ffffffffffffffffffffffffffffffffffffffff86168252617c93856182ab565b84602083015260806040830152617cad6080830185617822565b8281036060840152617bf48185617822565b600061010073ffffffffffffffffffffffffffffffffffffffff808c168452617ce78b6182ab565b8a6020850152816040850152617cff8285018b617822565b91508382036060850152617d13828a617822565b90881660808501529050617d26866182ab565b8560a084015282810360c0840152617d3e8186617822565b905082810360e0840152617d528185617822565b9b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b600060408252617d9a60408301856177d2565b90508260208301529392505050565b60208082528251828201819052600091906040908185019080840286018301878501865b83811015617e2e577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc089840301855281518051878552617e0f88860182617851565b9189015115159489019490945294870194925090860190600101617dcd565b509098975050505050505050565b6000602082526115ba6020830184617822565b901515815260200190565b6000841515825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610c7a6060830184617822565b90815260200190565b92835273ffffffffffffffffffffffffffffffffffffffff918216602084015216604082015260600190565b600084825273ffffffffffffffffffffffffffffffffffffffff8416602083015260606040830152610c7a6060830184617851565b600084825260606020830152617c2e6060830185617851565b7fffffffff0000000000000000000000000000000000000000000000000000000091909116815260200190565b6000602082526115ba6020830184617851565b600060808252617f676080830187617851565b73ffffffffffffffffffffffffffffffffffffffff95861660208401529390941660408201526060015292915050565b600073ffffffffffffffffffffffffffffffffffffffff8416825260406020830152610a9f6040830184617822565b60608101617fd3856182ab565b938152602081019290925260409091015290565b6060810160088510617fd357fe5b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016115ba602083018461787d565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e60408201527f5f50414952000000000000000000000000000000000000000000000000000000606082015260800190565b6000618094828761787d565b84600f0b606083015283600f0b608083015260c060a08301526164d260c0830184617822565b6000606082526180cd60608301866178d4565b82810360208401526180df81866178d4565b915050826040830152949350505050565b6000602082526115ba60208301846178f3565b60006060825261811660608301866178f3565b82810360208401526181288186617851565b91505073ffffffffffffffffffffffffffffffffffffffff83166040830152949350505050565b600083825260406020830152610a9f60408301846177d2565b9283526020830191909152604082015260600190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126181da578283fd5b83018035915067ffffffffffffffff8211156181f4578283fd5b60200191503681900382131561820957600080fd5b9250929050565b60405181810167ffffffffffffffff8111828210171561822f57600080fd5b604052919050565b600067ffffffffffffffff82111561824d578081fd5b5060209081020190565b600067ffffffffffffffff82111561826d578081fd5b50601f01601f191660200190565b60005b8381101561829657818101518382015260200161827e565b838111156182a5576000848401525b50505050565b600481106182b557fe5b50565b73ffffffffffffffffffffffffffffffffffffffff811681146182b557600080fd5b80151581146182b557600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000811681146182b557600080fd5b80600f0b81146182b557600080fdfea2646970667358221220a4ac5719ba2a0609e59fa677c79ab3758068dc5433e1ad30f3504ecf1cb1c94164736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C8 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E5A0E07 GT PUSH2 0x17B JUMPI DUP1 PUSH4 0xBE5B12B4 GT PUSH2 0xD8 JUMPI DUP1 PUSH4 0xE78AC045 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE9A8E442 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE9A8E442 EQ PUSH2 0x620 JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x633 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x646 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x5FA JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x60D JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xC8C74A37 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x5C1 JUMPI DUP1 PUSH4 0xCA7893BA EQ PUSH2 0x5D4 JUMPI DUP1 PUSH4 0xD442057B EQ PUSH2 0x5E7 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xBE5B12B4 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x5AE JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xADA51747 GT PUSH2 0x12F JUMPI DUP1 PUSH4 0xBC61A695 GT PUSH2 0x114 JUMPI DUP1 PUSH4 0xBC61A695 EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0xBCCC34C6 EQ PUSH2 0x559 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x579 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xADA51747 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x525 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x98777748 GT PUSH2 0x160 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x4D9 JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x4FF JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x4A4 JUMPI DUP1 PUSH4 0x9209483B EQ PUSH2 0x4C6 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x57494B1D GT PUSH2 0x229 JUMPI DUP1 PUSH4 0x6DD6B78D GT PUSH2 0x1DD JUMPI DUP1 PUSH4 0x70BBA11A GT PUSH2 0x1C2 JUMPI DUP1 PUSH4 0x70BBA11A EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x742BD050 EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x87A74BDB EQ PUSH2 0x482 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x6DD6B78D EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x449 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x60EE052A GT PUSH2 0x20E JUMPI DUP1 PUSH4 0x60EE052A EQ PUSH2 0x3F0 JUMPI DUP1 PUSH4 0x64EE6ADE EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x416 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x57494B1D EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x3DD JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x280 JUMPI DUP1 PUSH4 0x3B77EBAE GT PUSH2 0x265 JUMPI DUP1 PUSH4 0x3B77EBAE EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x4703A7E6 EQ PUSH2 0x3B7 JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x39B085AD EQ PUSH2 0x37E JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0x15E42A61 GT PUSH2 0x2B1 JUMPI DUP1 PUSH4 0x15E42A61 EQ PUSH2 0x30B JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x32B JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x34B JUMPI PUSH2 0x2C8 JUMP JUMPDEST DUP1 PUSH4 0xB054F8D EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0xFE3FE5B EQ PUSH2 0x2F8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2E0 PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x7053 JUMP JUMPDEST PUSH2 0x659 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BFF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E0 PUSH2 0x306 CALLDATASIZE PUSH1 0x4 PUSH2 0x7053 JUMP JUMPDEST PUSH2 0x8B3 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x319 CALLDATASIZE PUSH1 0x4 PUSH2 0x7562 JUMP JUMPDEST PUSH2 0x8C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH2 0x33E PUSH2 0x339 CALLDATASIZE PUSH1 0x4 PUSH2 0x6D35 JUMP JUMPDEST PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E4F JUMP JUMPDEST PUSH2 0x35E PUSH2 0x359 CALLDATASIZE PUSH1 0x4 PUSH2 0x6E41 JUMP JUMPDEST PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7E3C JUMP JUMPDEST PUSH2 0x35E PUSH2 0x379 CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0xC83 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x38C CALLDATASIZE PUSH1 0x4 PUSH2 0x7391 JUMP JUMPDEST PUSH2 0xDF3 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x39F CALLDATASIZE PUSH1 0x4 PUSH2 0x7727 JUMP JUMPDEST PUSH2 0xF74 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7643 JUMP JUMPDEST PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x176F JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x18C0 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3EB CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x1EFB JUMP JUMPDEST PUSH2 0x35E PUSH2 0x3FE CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x2048 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x411 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x22C5 JUMP JUMPDEST PUSH2 0x429 PUSH2 0x424 CALLDATASIZE PUSH1 0x4 PUSH2 0x71E9 JUMP JUMPDEST PUSH2 0x2416 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7DA9 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x444 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x2576 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x457 CALLDATASIZE PUSH1 0x4 PUSH2 0x72C2 JUMP JUMPDEST PUSH2 0x27DB JUMP JUMPDEST PUSH2 0x35E PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x28F5 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x47D CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x2A50 JUMP JUMPDEST PUSH2 0x495 PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x7791 JUMP JUMPDEST PUSH2 0x2BA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EFB JUMP JUMPDEST PUSH2 0x4B7 PUSH2 0x4B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7258 JUMP JUMPDEST PUSH2 0x2D96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80BA JUMP JUMPDEST PUSH2 0x35E PUSH2 0x4D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x7643 JUMP JUMPDEST PUSH2 0x2FC5 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3200 JUMP JUMPDEST PUSH2 0x31E PUSH2 0x4FA CALLDATASIZE PUSH1 0x4 PUSH2 0x6F3A JUMP JUMPDEST PUSH2 0x3814 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x50D CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3AAA JUMP JUMPDEST PUSH2 0x495 PUSH2 0x520 CALLDATASIZE PUSH1 0x4 PUSH2 0x7791 JUMP JUMPDEST PUSH2 0x3BEB JUMP JUMPDEST PUSH2 0x538 PUSH2 0x533 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x3D1B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP3 SWAP2 SWAP1 PUSH2 0x7F97 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x554 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x3F0A JUMP JUMPDEST PUSH2 0x56C PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x7509 JUMP JUMPDEST PUSH2 0x4059 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP2 SWAP1 PUSH2 0x7F41 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x72F5 JUMP JUMPDEST PUSH2 0x4392 JUMP JUMPDEST PUSH2 0x59F PUSH2 0x59A CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x443F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E5A JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5BC CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4742 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5CF CALLDATASIZE PUSH1 0x4 PUSH2 0x6FEA JUMP JUMPDEST PUSH2 0x47A8 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x4900 JUMP JUMPDEST PUSH2 0x59F PUSH2 0x5F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x6F8A JUMP JUMPDEST PUSH2 0x4966 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x608 CALLDATASIZE PUSH1 0x4 PUSH2 0x733A JUMP JUMPDEST PUSH2 0x4C33 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x61B CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4CE2 JUMP JUMPDEST PUSH2 0x35E PUSH2 0x62E CALLDATASIZE PUSH1 0x4 PUSH2 0x7391 JUMP JUMPDEST PUSH2 0x4E23 JUMP JUMPDEST PUSH2 0x538 PUSH2 0x641 CALLDATASIZE PUSH1 0x4 PUSH2 0x6EC7 JUMP JUMPDEST PUSH2 0x4EC6 JUMP JUMPDEST PUSH2 0x4B7 PUSH2 0x654 CALLDATASIZE PUSH1 0x4 PUSH2 0x7258 JUMP JUMPDEST PUSH2 0x5067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x666 PUSH2 0x52CE JUMP JUMPDEST SWAP3 POP DUP7 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x677 JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 0x78D JUMPI PUSH1 0x2 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x692 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x6A6 JUMPI PUSH2 0x785 JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x1 DUP12 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6EA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x70F SWAP3 SWAP2 SWAP1 PUSH2 0x7D87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x727 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x758 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x755 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x761 JUMPI PUSH2 0x785 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x783 JUMPI DUP1 SWAP3 POP DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x778 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x67B JUMP JUMPDEST POP DUP5 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8A5 JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP8 DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x80C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x831 SWAP3 SWAP2 SWAP1 PUSH2 0x7D87 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x849 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x87A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x877 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x883 JUMPI PUSH2 0x8A5 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x890 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x7D7 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8D6 JUMPI POP PUSH1 0x0 PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x8DE PUSH2 0x53E7 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x418436BC PUSH3 0x7A120 PUSH2 0x905 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x93D JUMPI DUP7 PUSH2 0x953 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x95B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x993 JUMPI DUP7 PUSH2 0x9A9 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9CD SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7BAF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA16 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA13 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xA54 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xA44 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA49 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA5F DUP6 PUSH2 0x5417 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0xA6F DUP8 PUSH2 0x5417 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0xA90 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0xA98 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xACD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xAF7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH2 0xB1B JUMPI POP PUSH2 0xC7A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xC77 JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xB5C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xB77 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7ACD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0xBE2 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC1E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC23 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0xC47 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xC44 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0xC54 JUMPI POP POP POP PUSH2 0xC77 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xC61 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xB1E JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xCC9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xD03 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD29 SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xD77 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xD74 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xDB1 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xDEA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0xDC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDD5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xCCF JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0xE0D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xE37 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF6C JUMPI ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x3B77EBAE PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE85 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEAC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8103 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xEF5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xEF2 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xF49 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xF23 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xF28 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF37 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xF64 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xF56 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0xE3D JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0xF88 JUMPI POP PUSH1 0x80 DUP5 ADD MLOAD ISZERO JUMPDEST DUP1 PUSH2 0xF95 JUMPI POP PUSH1 0xA0 DUP5 ADD MLOAD ISZERO JUMPDEST ISZERO PUSH2 0xFA2 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST PUSH2 0xFAA PUSH2 0x68A3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x9D3FA4B900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x9D3FA4B9 SWAP1 PUSH2 0xFFC SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x80F0 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1014 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1028 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104C SWAP2 SWAP1 PUSH2 0x76DF JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 MLOAD PUSH1 0x6 DUP2 GT ISZERO PUSH2 0x105D JUMPI INVALID JUMPDEST EQ PUSH2 0x106C JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD DUP6 MLOAD PUSH1 0x40 MLOAD PUSH32 0x8171C40700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP3 PUSH4 0x8171C407 SWAP3 PUSH2 0x10C5 SWAP3 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EC6 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1115 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x1123 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6070410800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH4 0x60704108 SWAP1 PUSH2 0x1198 SWAP1 PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x11B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x11C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11E8 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x11FA DUP8 PUSH2 0x140 ADD MLOAD PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1223 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP9 PUSH1 0xC0 ADD MLOAD GT PUSH2 0x1237 JUMPI PUSH1 0x0 PUSH2 0x1245 JUMP JUMPDEST PUSH2 0x1245 DUP9 PUSH2 0x180 ADD MLOAD PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1264 DUP6 PUSH1 0x40 ADD MLOAD DUP11 PUSH1 0xA0 ADD MLOAD PUSH2 0x54B1 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP6 POP PUSH1 0x0 PUSH2 0x12C9 DUP3 DUP12 PUSH1 0xA0 ADD MLOAD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x12B1 JUMPI DUP13 PUSH1 0x80 ADD MLOAD PUSH2 0x12C4 JUMP JUMPDEST PUSH1 0xC0 DUP14 ADD MLOAD PUSH1 0x80 DUP15 ADD MLOAD PUSH2 0x12C4 SWAP2 PUSH2 0x54D5 JUMP JUMPDEST PUSH2 0x54F1 JUMP JUMPDEST DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x141F SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x1325 SWAP2 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x133D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1375 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP13 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x13CA SWAP2 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x141A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x5525 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x1437 JUMPI PUSH2 0x1434 DUP2 DUP4 DUP6 PUSH2 0x553B JUMP JUMPDEST SWAP8 POP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x1488 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x15B2 JUMPI DUP11 MLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH2 0x158C SWAP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH2 0x14E7 SWAP2 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1513 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1537 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP14 MLOAD PUSH1 0x40 MLOAD PUSH32 0xDD62ED3E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP2 PUSH4 0xDD62ED3E SWAP2 PUSH2 0x13CA SWAP2 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0xC0 ADD MLOAD DUP2 LT ISZERO PUSH2 0x15B0 JUMPI PUSH2 0x15AD DUP10 PUSH2 0x141A DUP4 DUP16 PUSH1 0xC0 ADD MLOAD DUP9 PUSH2 0x553B JUMP JUMPDEST SWAP9 POP JUMPDEST POP JUMPDEST POP POP POP POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x15DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1607 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x164B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1665 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x16D0 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x170C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1711 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1735 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1732 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1742 JUMPI POP POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x174F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x160D JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x177B DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17BE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x17D4 PUSH2 0x55D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1801 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1827 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x183F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1870 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x186D SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x189E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x18AB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x17C4 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x18DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1908 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x195E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1976 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x198A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x19AE SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x1A59 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x1A07 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1A33 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1A57 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A65 JUMPI POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x1A6D PUSH2 0x68C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1ABF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AD7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AEB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1B0F SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x1B63 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1BB3 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1C0A SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1C5A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x1CB3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1CDF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1D66 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D8A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EEF JUMPI PUSH2 0x1DBD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x1DB4 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x55EA JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1DC9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x1DDC JUMPI PUSH2 0x1EEF JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1E4A SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x817E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E93 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1E90 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1ECD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1EC1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1EEF JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1EDA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1D92 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x1F17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1F41 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x525D0DA7 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x1F7D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FA3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1FEC JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1FE9 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2026 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2033 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x1F47 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2054 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x206D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2097 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x20A4 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x20E4 JUMPI PUSH2 0x20DF DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x20E7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x20F3 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2133 JUMPI PUSH2 0x212E DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2136 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22BA JUMPI PUSH1 0x1 PUSH2 0x214D PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x21C6 JUMPI PUSH2 0x21A5 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x56D9 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x21B1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x22A6 JUMP JUMPDEST PUSH2 0x21CE PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x2219 JUMPI PUSH2 0x21A5 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2233 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x2289 JUMPI PUSH2 0x2268 DUP6 PUSH32 0x2640F62C00000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x56D9 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2274 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x22A4 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2297 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x22B1 JUMPI POP PUSH2 0x22BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x213B JUMP JUMPDEST POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22D1 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x22EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2314 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x232A PUSH2 0x55D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2357 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x237D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2395 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x23C6 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x23C3 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x23F4 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2401 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x231A JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x242F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2469 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2456 PUSH2 0x68F4 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x244E JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x256F JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2484 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x24A2 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x24B4 SWAP2 SWAP1 PUSH2 0x81A6 JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x24C1 JUMPI PUSH2 0x2567 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x24CE JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x24E0 SWAP2 SWAP1 PUSH2 0x81A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24EE SWAP3 SWAP2 SWAP1 PUSH2 0x79E8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2529 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x252E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x253B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2552 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x246F JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2582 DUP4 DUP6 PUSH2 0x555F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x259B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x25C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x25D2 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2612 JUMPI PUSH2 0x260D DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2615 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2621 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x2661 JUMPI PUSH2 0x265C DUP7 PUSH2 0x5647 JUMP JUMPDEST PUSH2 0x2664 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x22BA JUMPI PUSH1 0x1 PUSH2 0x267B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x26E7 JUMPI PUSH2 0x26C6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x26D2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x27C7 JUMP JUMPDEST PUSH2 0x26EF PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x273A JUMPI PUSH2 0x26C6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x2754 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2198 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x27AA JUMPI PUSH2 0x2789 DUP5 PUSH32 0xCD7724C300000000000000000000000000000000000000000000000000000000 DUP4 PUSH2 0x56D9 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2795 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x27C5 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x27B8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 PUSH2 0x27D2 JUMPI POP PUSH2 0x22BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2669 JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x27F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x281F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x28EF JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2870 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x28CA JUMPI PUSH2 0x28C5 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5804 JUMP JUMPDEST PUSH2 0x28CD JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x28DC JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2825 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2911 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x293B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2975 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x299B SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x29E9 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29E6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A17 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x2A27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2A3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2941 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2A6C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2A96 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2AD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AF6 SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2B44 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B41 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2B72 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2B7F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2B93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x2A9C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2BB7 DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST PUSH2 0x2BC2 DUP7 DUP7 DUP10 PUSH2 0x58D6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x2BCE JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x2C0E SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C3A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2C62 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x2C7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2CA8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2D8A JUMPI PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x15E42A61 DUP7 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x2CE3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D0A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F54 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2D36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2D5A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x2D69 JUMPI POP POP POP PUSH2 0x8A9 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2D76 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x2CAE JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D9E PUSH2 0x690C JUMP JUMPDEST PUSH2 0x2DA6 PUSH2 0x690C JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2EB6 JUMPI PUSH2 0x2DF2 PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2DC4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5A97 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2E19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2E2E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E69 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2EAC JUMPI PUSH1 0x0 PUSH2 0x2E92 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT ISZERO PUSH2 0x2EAA JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2DAB JUMP JUMPDEST POP DUP1 PUSH2 0x2EC2 JUMPI POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x2FB9 JUMPI PUSH2 0x2EF5 PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2F1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2F31 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2F6C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2F71 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x2FAF JUMPI PUSH1 0x0 PUSH2 0x2F95 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x2FAD JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x2EC5 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH2 0x305F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3058 SWAP1 DUP1 PUSH2 0x3011 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8013 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3038 SWAP3 SWAP2 SWAP1 PUSH2 0x8013 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5AB3 DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST SWAP1 POP PUSH2 0xA9F JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x30A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x30E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3100 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x316B SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x31A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x31AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x31D0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x31CD SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x31DD JUMPI POP POP POP PUSH2 0x1765 JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x31EA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x30A8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x321E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3248 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x329E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x32CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x32EE SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO DUP1 PUSH2 0x3399 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x2F37B62400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x3347 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x335F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3373 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3397 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x33A5 JUMPI POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH2 0x33AD PUSH2 0x68C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x33FF SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3417 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x342B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x344F SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH32 0xF8B2CB4F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x34A3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x34BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x34CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x34F3 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x354A SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3576 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x359A SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH32 0x948D8CE600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x35F3 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x360B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x361F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3643 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3692 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x36A6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x36CA SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1EEF JUMPI DUP2 MLOAD PUSH2 0x36EE SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x55EA JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x36FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x370D JUMPI PUSH2 0x1EEF JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x374D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x377B SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x817E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3793 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x37C4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x37C1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x37F2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1EC1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1EC6 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x37FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3852 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x386A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x387E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x38A2 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x38C9 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND ISZERO PUSH2 0x398E JUMPI PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3939 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3965 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3989 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x39A7 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x39BC JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0xA9F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1E1401F800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3A17 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3A2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3A60 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3A5D SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3AA0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3A8E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3A93 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xA9F JUMP JUMPDEST SWAP3 POP PUSH2 0xA9F SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3AF0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3B2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B52 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3B6A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3B9B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3B98 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3BC9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3BD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x3AF6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x3BFA DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST PUSH2 0x3C05 DUP7 DUP7 DUP10 PUSH2 0x58D6 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x3C11 JUMPI PUSH2 0x8A9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBCCC34C600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS SWAP1 PUSH4 0xBCCC34C6 SWAP1 PUSH2 0x3C51 SWAP1 DUP7 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C7D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3CA5 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST SWAP2 POP PUSH2 0x3D0F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CC8 SWAP3 SWAP2 SWAP1 PUSH2 0x7C40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3CEF SWAP3 SWAP2 SWAP1 PUSH2 0x7C40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5E2A DUP2 MSTORE POP DUP6 PUSH2 0x5C2C JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x3D29 DUP5 DUP7 PUSH2 0x555F JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3D42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D6C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x3D79 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DB1 JUMPI DUP7 PUSH2 0x3DB4 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x3DC0 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3DF8 JUMPI DUP7 PUSH2 0x3DFB JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3E57 JUMPI PUSH1 0x0 PUSH2 0x3E29 DUP12 DUP6 DUP6 DUP12 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3E1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3814 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x3E36 JUMPI POP PUSH2 0x3E57 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3E43 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x3E00 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x901754D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3EAC SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3EC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3ED8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3EFC SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP5 POP POP POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x3F26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3F50 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI PUSH2 0x3F66 PUSH2 0x5F2C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3F93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3FB9 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3FD1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4007 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4004 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7499 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4035 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4042 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x3F56 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x4065 PUSH2 0x5F44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x60 SWAP2 SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x4099 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x40D1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH2 0x40DC PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x4205 JUMPI PUSH1 0x40 MLOAD PUSH32 0x81EFCBDD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x416D SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7C6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x41BB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x41B8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x41E9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x41EE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x4200 JUMP JUMPDEST SWAP4 POP PUSH2 0x15BA SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x4388 JUMP JUMPDEST PUSH2 0x420D PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x429E JUMPI PUSH1 0x40 MLOAD PUSH32 0x61E597F900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x416D SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7C6F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5734D9A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x4304 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x7CBF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x431C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4352 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x434F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x752F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4380 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4385 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x43AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x43D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x256F JUMPI PUSH2 0x4420 DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5F5C SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x442C JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x43DC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x444E DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4467 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4491 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x449C PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D6 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4502 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4526 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4551 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x460E JUMP JUMPDEST PUSH2 0x4559 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4593 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x45BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x45E3 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4607 JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4668 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x468C SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x4697 JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x4736 JUMPI PUSH1 0x0 PUSH2 0x4708 DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46BC SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x46E0 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46FB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6083 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x4715 JUMPI POP PUSH2 0x4736 JUMP JUMPDEST DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4722 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x469A JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0xC7A SWAP1 DUP1 PUSH2 0x4761 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4788 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x61BA DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x47C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47EE JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xDEA JUMPI DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4828 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x484E SWAP3 SWAP2 SWAP1 PUSH2 0x814F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4866 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x489C JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4899 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x48CA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xDA5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xDAA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x48D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x48EB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x47F4 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xA9F PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4921 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4946 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x62C0 DUP2 MSTORE POP DUP4 PUSH2 0x5C2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4975 DUP6 DUP8 PUSH2 0x555F JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x498E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x49B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x49C3 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x49FD SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A29 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A4D SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND ISZERO PUSH2 0x4A78 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x4B35 JUMP JUMPDEST PUSH2 0x4A80 PUSH2 0x606B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x1273B0C6 DUP9 DUP11 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4ABA SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AE6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B0A SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP4 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH2 0x4B2E JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BB3 SWAP2 SWAP1 PUSH2 0x747D JUMP JUMPDEST PUSH2 0x4BBE JUMPI POP POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x4C26 SWAP1 DUP1 PUSH2 0x4BDD DUP11 DUP9 DUP7 PUSH1 0x80 DUP6 ADD PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4C06 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A5C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6083 DUP2 MSTORE POP DUP8 PUSH2 0x5C2C JUMP JUMPDEST SWAP3 POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4C77 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xF6C JUMPI PUSH2 0x4CC3 DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4C96 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x63CC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4CCF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4C7D JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4CFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D28 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1765 JUMPI DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4D64 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D8A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B7E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4DD3 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4DD0 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4E01 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x201A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x201F JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E0E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4D2E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4E30 DUP5 DUP5 DUP5 PUSH2 0xDF3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xF6C JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x4E4A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x4EBE JUMPI PUSH2 0x4EA5 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4E68 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4E7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0xA0 ADD MLOAD DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4E94 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x80 ADD MLOAD PUSH2 0x553B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EB1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x4E35 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4ED4 DUP5 DUP7 PUSH2 0x555F JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x4EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F17 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH2 0x4F24 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4F5C JUMPI DUP7 PUSH2 0x4F5F JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x4F6B PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x4FA3 JUMPI DUP7 PUSH2 0x4FA6 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH2 0x5010 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP12 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FC9 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP12 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FF0 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x64DC DUP2 MSTORE POP DUP8 PUSH2 0x5C2C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x901754D700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3EAC SWAP1 DUP6 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7A35 JUMP JUMPDEST PUSH2 0x506F PUSH2 0x690C JUMP JUMPDEST PUSH2 0x5077 PUSH2 0x690C JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 PUSH1 0x0 JUMPDEST DUP7 MLOAD DUP2 EQ PUSH2 0x519C JUMPI PUSH2 0x50CC PUSH1 0x20 DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x50B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP8 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x50F3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x5108 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5143 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5148 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x5192 JUMPI PUSH1 0x0 PUSH2 0x516C PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x517D JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 0x5190 JUMPI DUP4 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP3 SWAP1 MSTORE SWAP4 POP DUP4 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x509C JUMP JUMPDEST POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ ISZERO PUSH2 0x51CB JUMPI POP PUSH2 0x2FBC JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP8 MLOAD DUP2 EQ PUSH2 0x2FB9 JUMPI PUSH2 0x51FE PUSH1 0x20 DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x51E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD SUB DUP4 DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2DDB JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP11 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5225 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x523A SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5275 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x527A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x52C4 JUMPI PUSH1 0x0 PUSH2 0x529E PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x5AA7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x52AF JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x52C2 JUMPI DUP4 DUP9 MSTORE PUSH1 0x20 DUP9 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x51CE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x52D9 PUSH2 0x652C JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x21F8A721 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x533D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5351 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5375 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5391 SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x53A9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53BD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x53E1 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH20 0x9AAB3F75489902F3A48495025729A0AF77D4B11E SWAP1 JUMP JUMPDEST PUSH20 0xC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5422 DUP3 PUSH2 0x5804 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x543C JUMPI POP PUSH1 0x0 PUSH2 0xAAC JUMP JUMPDEST DUP2 MLOAD PUSH1 0x24 EQ ISZERO DUP1 PUSH2 0x5499 JUMPI POP PUSH32 0xF47261B000000000000000000000000000000000000000000000000000000000 PUSH2 0x5474 DUP4 PUSH1 0x0 PUSH2 0x6544 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x54A6 JUMPI POP PUSH1 0x0 PUSH2 0xAAC JUMP JUMPDEST PUSH2 0x5422 DUP3 PUSH1 0x10 PUSH2 0x6590 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x54CF JUMPI PUSH2 0x54CF PUSH2 0x54CA PUSH1 0x2 DUP6 DUP6 PUSH2 0x65D0 JUMP JUMPDEST PUSH2 0x6657 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x15BA JUMPI PUSH2 0x15BA PUSH2 0x54CA PUSH1 0x0 DUP7 DUP7 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54FE DUP5 DUP5 DUP5 PUSH2 0x665F JUMP JUMPDEST ISZERO PUSH2 0x5511 JUMPI PUSH2 0x5511 PUSH2 0x54CA DUP6 DUP6 DUP6 PUSH2 0x66B9 JUMP JUMPDEST PUSH2 0xA9F DUP4 PUSH2 0x551F DUP7 DUP6 PUSH2 0x66D8 JUMP JUMPDEST SWAP1 PUSH2 0x6709 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x5534 JUMPI DUP2 PUSH2 0x15BA JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA9F DUP4 PUSH2 0x551F PUSH2 0x554F DUP3 PUSH1 0x1 PUSH2 0x54B1 JUMP JUMPDEST PUSH2 0x5559 DUP9 DUP8 PUSH2 0x66D8 JUMP JUMPDEST SWAP1 PUSH2 0x54D5 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x55CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x55C5 SWAP1 PUSH2 0x802B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH20 0x794E6E91555438AFC3CCF1C5076A74F42133D08D SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5607 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x5603 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5616 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x5634 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5651 PUSH2 0x6733 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x6F2BF62 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5689 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x56A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5422 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH2 0x56FC JUMPI PUSH2 0x57FC JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x572B SWAP2 SWAP1 PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5796 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x57D2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x57D7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x57FA JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x57F7 SWAP2 SWAP1 PUSH2 0x74F1 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x313CE56700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5868 SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x58A3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x58A8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x58BC JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x58CF JUMPI PUSH2 0x58CC DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x58E1 PUSH2 0x5F44 JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x910FFC71 PUSH2 0x5909 PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5941 JUMPI DUP8 PUSH2 0x5957 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH2 0x595F PUSH2 0x53FF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP9 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x5997 JUMPI DUP8 PUSH2 0x59AD JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x59F9 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x7B3D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5A4D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x711E JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP5 LT PUSH2 0x5A65 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x15BA SWAP1 POP JUMP JUMPDEST DUP1 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5A71 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0xDEA JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x15BA SWAP1 POP JUMP JUMPDEST PUSH2 0x5AA2 DUP4 DUP4 DUP4 PUSH2 0x674B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15BA DUP4 DUP4 PUSH2 0x6772 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5ABE PUSH2 0x6926 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5AD2 SWAP2 SWAP1 PUSH2 0x75C6 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5AEC SWAP2 SWAP1 PUSH2 0x75AA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH32 0x40BC03AE00000000000000000000000000000000000000000000000000000000 DUP6 DUP8 DUP7 PUSH2 0x5B20 DUP13 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5B33 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8088 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5B9E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5BD9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5BDE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5BF6 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5C0A SWAP2 SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C16 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x5C46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C70 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5C82 JUMPI PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CB3 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5C9E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5CC0 JUMPI POP PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CDD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5CEB JUMPI POP POP PUSH2 0x5422 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5E21 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5DE3 JUMPI PUSH2 0x5D21 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D12 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x67DD JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5D2D JUMPI PUSH2 0x5DE3 JUMP JUMPDEST PUSH2 0x5D3C PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x67DD JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5D48 JUMPI PUSH2 0x5DE3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5D65 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5D72 JUMPI POP PUSH2 0x5DE3 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5D81 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5DDA JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5D9D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5DB4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5DC6 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5DD8 JUMPI POP POP PUSH2 0x5DE3 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5CFA JUMP JUMPDEST POP PUSH2 0x5E02 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5DF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x67DD JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5E0E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5CEE JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E43 SWAP2 SWAP1 PUSH2 0x6DF2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E5D SWAP2 SWAP1 PUSH2 0x6DF2 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH32 0x15E42A6100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0x15E42A61 SWAP1 PUSH2 0x5EA3 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F54 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5EBB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5EEB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5EE8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x41F5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5F19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F1E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH20 0xE2F2A5C287993345A840DB3B0845FBC70F5935A5 SWAP1 JUMP JUMPDEST PUSH20 0xA1C0FA73C39CFBCC11EC9EB1AFC665ABA9996E2C SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5F91 SWAP2 SWAP1 PUSH2 0x7A14 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x5FFC SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6037 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x603C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6050 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6063 JUMPI PUSH2 0x6060 DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0x3A97247DF274A17C59A3BD12735EA3FCDFB49950 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x609D SWAP2 SWAP1 PUSH2 0x6DA6 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x6174 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA2801E1600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x612E SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E91 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6146 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5EEB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5EE8 SWAP2 DUP2 ADD SWAP1 PUSH2 0x74F1 JUMP JUMPDEST PUSH2 0x617C PUSH2 0x6835 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCA19EBD9 PUSH3 0x493E0 DUP5 DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x612E SWAP3 SWAP2 SWAP1 PUSH2 0x7D61 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61D3 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61ED SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x6205 DUP12 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6224 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7A8C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x623C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6272 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x626F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x62A0 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5F19 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5F1E JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x62AD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62D7 SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x62EF SWAP2 SWAP1 PUSH2 0x6D51 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xBC61A695 DUP4 DUP4 PUSH2 0x6302 DUP9 PUSH2 0x679C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6320 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7B04 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6338 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x636D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x636A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x744A JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x63AD JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x639B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x63A0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x63BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP POP POP POP PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6403 SWAP3 SWAP2 SWAP1 PUSH2 0x7A35 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x646E SWAP2 SWAP1 PUSH2 0x79F8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x64A9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x64AE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x64C2 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0xDEA JUMPI PUSH2 0x64D2 DUP2 PUSH1 0x0 PUSH2 0x5AA7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x64F5 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6510 SWAP2 SWAP1 PUSH2 0x6D6D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x6520 DUP5 DUP5 DUP4 DUP10 PUSH2 0x3814 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0x52AE12ABE5D8BD778BD5397F99CA900624CFADD4 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6565 JUMPI PUSH2 0x6565 PUSH2 0x54CA PUSH1 0x3 DUP6 MLOAD DUP6 PUSH1 0x4 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x14 ADD DUP4 MLOAD LT ISZERO PUSH2 0x65B1 JUMPI PUSH2 0x65B1 PUSH2 0x54CA PUSH1 0x4 DUP6 MLOAD DUP6 PUSH1 0x14 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x14 ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FC6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x6671 JUMPI PUSH2 0x6671 PUSH2 0x54CA PUSH2 0x686C JUMP JUMPDEST DUP2 ISZERO DUP1 PUSH2 0x667C JUMPI POP DUP4 ISZERO JUMPDEST ISZERO PUSH2 0x6689 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST PUSH1 0x0 DUP4 DUP1 PUSH2 0x6693 JUMPI INVALID JUMPDEST DUP6 DUP5 MULMOD SWAP1 POP PUSH2 0x66A2 DUP6 DUP5 PUSH2 0x66D8 JUMP JUMPDEST PUSH2 0x66AE DUP3 PUSH2 0x3E8 PUSH2 0x66D8 JUMP JUMPDEST LT ISZERO SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x339F3DE2 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8168 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x66E7 JUMPI POP PUSH1 0x0 PUSH2 0x5422 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x66F4 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x15BA JUMPI PUSH2 0x15BA PUSH2 0x54CA PUSH1 0x1 DUP7 DUP7 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x671F JUMPI PUSH2 0x671F PUSH2 0x54CA PUSH1 0x3 DUP6 DUP6 PUSH2 0x65D0 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x672A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xC0A47DFE034B400B47BDAD5FECDA2621DE6C4D95 SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x676A JUMPI PUSH2 0x676A PUSH2 0x54CA PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x684D JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6793 JUMPI PUSH2 0x6793 PUSH2 0x54CA PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x684D JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x67CC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x67EA JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x67F3 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x6800 JUMPI POP PUSH1 0x0 PUSH2 0x15BA JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x680D JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x681D JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x15BA JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x682B JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH20 0x533DA777AEDCE766CEAE696BF90F8541A4BA80EB SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x65EF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7FE7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH32 0xA791837C00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x5422 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6961 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6974 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST PUSH2 0x8210 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6995 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD PUSH2 0x69AB DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6998 JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x69D8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x69E6 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI PUSH2 0x6A0E DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x6B43 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x69F7 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6A30 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6A3E PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6A5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD PUSH2 0x6A75 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6A62 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6A97 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6AA5 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6AC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6AC9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6AF5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6B03 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6B24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x69BD JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6B27 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6B53 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6B61 PUSH2 0x696F DUP3 PUSH2 0x8257 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6B78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6BA1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6BAF PUSH2 0x696F DUP3 PUSH2 0x8257 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6BC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x256F DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x827B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x5422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C0 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6BF9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6C02 DUP2 PUSH2 0x8210 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C0F DUP4 DUP4 PUSH2 0x6946 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x6C1E DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6C30 DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x6C42 DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP3 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP3 ADD CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 DUP3 ADD CALLDATALOAD PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x120 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP PUSH2 0x140 DUP1 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x6CA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CB0 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x160 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6CCC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CD8 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x180 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6CF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D00 DUP7 DUP4 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP4 DUP6 ADD MSTORE PUSH2 0x1A0 SWAP3 POP DUP3 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x6D1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6D29 DUP6 DUP3 DUP7 ADD PUSH2 0x6B43 JUMP JUMPDEST DUP3 DUP5 ADD MSTORE POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6D46 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x15BA DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6D62 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6D7F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6D8A DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6D9B DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6DBA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x6DC5 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x6DD6 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6E04 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x6E0F DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6E2B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6E37 DUP6 DUP3 DUP7 ADD PUSH2 0x6B91 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x6E58 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x6E63 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x6E73 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x6E83 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x6E93 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6EAE JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6EBA DUP9 DUP3 DUP10 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6EDC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x6EE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6EF7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x6F07 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F22 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6F2E DUP8 DUP3 DUP9 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x6F4F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x6F5A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6F6A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x6F7A DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6F9E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x6FA9 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x6FB9 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6FD4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x6FE0 DUP7 DUP3 DUP8 ADD PUSH2 0x6A87 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x6FFE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x7009 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7025 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7031 DUP8 DUP4 DUP9 ADD PUSH2 0x6951 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7046 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6FE0 DUP7 DUP3 DUP8 ADD PUSH2 0x6A87 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7068 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x707F JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7092 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x70A0 PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP9 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x70D8 JUMPI PUSH2 0x70C6 DUP15 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x6951 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x70AF JUMP JUMPDEST POP POP DUP2 SWAP10 POP PUSH2 0x70E9 DUP13 DUP3 DUP14 ADD PUSH2 0x6946 JUMP JUMPDEST SWAP9 POP POP POP POP POP PUSH2 0x70FC DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x6946 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7111 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x6F2E DUP8 DUP3 DUP9 ADD PUSH2 0x6A87 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7132 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7149 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x715C JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x716A PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x718A JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x71AC JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x718E JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x71C3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x71D0 DUP7 DUP3 DUP8 ADD PUSH2 0x6AE5 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x71E0 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6BD7 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x71FB JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7212 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7225 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x7233 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x7246 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x726C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7283 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x728F DUP8 DUP4 DUP9 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x72A4 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x72B1 DUP7 DUP3 DUP8 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72D3 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x72E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6A20 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7307 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x731D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7329 DUP6 DUP3 DUP7 ADD PUSH2 0x6A20 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x6D9B DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x734E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7364 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7370 DUP7 DUP3 DUP8 ADD PUSH2 0x6A20 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x7381 DUP2 PUSH2 0x82B8 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x73A5 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x73BC JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x73CF JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x73DD PUSH2 0x696F DUP3 PUSH2 0x8237 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD SWAP2 SWAP1 DUP6 DUP2 ADD DUP8 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x7415 JUMPI PUSH2 0x7403 DUP14 DUP5 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x6BE6 JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP3 ADD SWAP4 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x73EC JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x742D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x743A DUP7 DUP3 DUP8 ADD PUSH2 0x69C8 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x71E0 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6946 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x745B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7471 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6AE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x748E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x82DA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x74AD JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x74B8 DUP2 PUSH2 0x82DA JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x74D4 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x74E0 DUP7 DUP3 DUP8 ADD PUSH2 0x6B91 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7502 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x7381 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7540 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x7556 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA9F DUP5 DUP3 DUP6 ADD PUSH2 0x6B91 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7577 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x758D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7599 DUP8 DUP3 DUP9 ADD PUSH2 0x6B43 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6F6A DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x75BB JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x15BA DUP2 PUSH2 0x8316 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0x75D9 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x75E4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 PUSH1 0x1F NOT DUP3 ADD SLT ISZERO PUSH2 0x75F7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0x7602 PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x7610 DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH2 0x7620 DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH2 0x7633 DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP2 SWAP5 SWAP2 SWAP4 POP SWAP1 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7659 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x7666 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7671 PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x767C DUP2 PUSH2 0x82B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x768C DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x769F DUP2 PUSH2 0x82E8 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x76B4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x76C4 DUP2 PUSH2 0x8316 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6F22 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76F0 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x76FA PUSH1 0x60 PUSH2 0x8210 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x7 DUP2 LT PUSH2 0x7708 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD MLOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 SWAP3 DUP4 ADD MLOAD SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x773B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x7752 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x775E DUP8 DUP4 DUP9 ADD PUSH2 0x6BE6 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7773 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7780 DUP7 DUP3 DUP8 ADD PUSH2 0x6B43 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x6DE7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x77A6 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x6EF7 DUP2 PUSH2 0x82B8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7817 JUMPI DUP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x77E5 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7817 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7835 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7869 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x827B JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C0 PUSH2 0x7903 DUP5 DUP5 MLOAD PUSH2 0x77B8 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MLOAD PUSH2 0x7915 PUSH1 0x20 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x40 DUP4 ADD MLOAD PUSH2 0x7928 PUSH1 0x40 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x793B PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x77B8 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP4 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP4 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP4 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x120 DUP1 DUP5 ADD MLOAD DUP2 DUP7 ADD MSTORE POP PUSH2 0x140 DUP1 DUP5 ADD MLOAD DUP3 DUP3 DUP8 ADD MSTORE PUSH2 0x7994 DUP4 DUP8 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x160 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79B0 DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x180 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x79CC DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 0x1A0 DUP1 DUP5 ADD MLOAD DUP6 DUP4 SUB DUP3 DUP8 ADD MSTORE PUSH2 0x64D2 DUP4 DUP3 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7A0A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x827B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 DUP4 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE DUP1 DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE POP PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND DUP4 MSTORE DUP1 DUP6 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP4 MSTORE DUP1 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP4 ISZERO ISZERO PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE DUP4 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE PUSH2 0x7BF4 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7C2E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x77D2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x64D2 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP3 MSTORE PUSH2 0x7C93 DUP6 PUSH2 0x82AB JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7CAD PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7822 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7BF4 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP13 AND DUP5 MSTORE PUSH2 0x7CE7 DUP12 PUSH2 0x82AB JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7CFF DUP3 DUP6 ADD DUP12 PUSH2 0x7822 JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x7D13 DUP3 DUP11 PUSH2 0x7822 JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x7D26 DUP7 PUSH2 0x82AB JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7D3E DUP2 DUP7 PUSH2 0x7822 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x7D52 DUP2 DUP6 PUSH2 0x7822 JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7D9A PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x77D2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7E2E JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC0 DUP10 DUP5 SUB ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x7E0F DUP9 DUP7 ADD DUP3 PUSH2 0x7851 JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DCD JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 ISZERO ISZERO DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x20 DUP5 ADD MSTORE AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xC7A PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7C2E PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7851 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7851 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x7F67 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7851 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x7FD3 DUP6 PUSH2 0x82AB JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x7FD3 JUMPI INVALID JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x787D JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F50414952000000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8094 DUP3 DUP8 PUSH2 0x787D JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x64D2 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7822 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x80CD PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78D4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x80DF DUP2 DUP7 PUSH2 0x78D4 JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x15BA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x78F3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0x8116 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x78F3 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x8128 DUP2 DUP7 PUSH2 0x7851 JUMP JUMPDEST SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xA9F PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x77D2 JUMP JUMPDEST SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x81DA JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x81F4 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8209 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x822F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x824D JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x826D JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8296 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x827E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x82A5 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x82B5 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x82B5 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xAC JUMPI NOT 0xBA 0x2A MOD MULMOD 0xE5 SWAP16 0xA6 PUSH24 0xC79AB3758068DC5433E1AD30F3504ECF1CB1C94164736F6C PUSH4 0x4300060C STOP CALLER ",
                "sourceMap": "1219:1185:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1562:1910:3;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;4036:308;;;;;;:::i;:::-;;:::i;7548:1345:9:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2007:196:21:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1410:1411:13:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1277:840:20:-;;;;;;:::i;:::-;;:::i;5983:948:14:-;;;;;;:::i;:::-;;:::i;8448:3400::-;;;;;;:::i;:::-;;:::i;1731:1145:4:-;;;;;;:::i;:::-;;:::i;2571:879:8:-;;;;;;:::i;:::-;;:::i;4117:1928:2:-;;;;;;:::i;:::-;;:::i;2651:886:16:-;;;;;;:::i;:::-;;:::i;4197:2252:19:-;;;;;;:::i;:::-;;:::i;1326:880:8:-;;;;;;:::i;:::-;;:::i;1909:493:7:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1581:2257:19:-;;;;;;:::i;:::-;;:::i;946:349:21:-;;;;;;:::i;:::-;;:::i;1277:840:17:-;;;;;;:::i;:::-;;:::i;2467:824::-;;;;;;:::i;:::-;;:::i;1521:1172:9:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;888:1674:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;3302:1666:4:-;;;;;;:::i;:::-;;:::i;1764:1928:2:-;;;;;;:::i;:::-;;:::i;2731:1290:12:-;;;;;;:::i;:::-;;:::i;1540:931:10:-;;;;;;:::i;:::-;;:::i;3204:1004:9:-;;;;;;:::i;:::-;;:::i;1493:1232:12:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1394:902:11:-;;;;;;:::i;:::-;;:::i;4214:2586:9:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1301:330:21:-;;;;;;:::i;:::-;;:::i;1841:1718:5:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2928:653:10:-;;;;;;:::i;:::-;;:::i;2468:824:20:-;;;;;;:::i;:::-;;:::i;2667:553:11:-;;;;;;:::i;:::-;;:::i;4031:1711:5:-;;;;;;:::i;:::-;;:::i;1637:364:21:-;;;;;;:::i;:::-;;:::i;1340:887:16:-;;;;;;:::i;:::-;;:::i;7372:936:14:-;;;;;;:::i;:::-;;:::i;4496:1135:12:-;;;;;;:::i;:::-;;:::i;2568:1873:18:-;;;;;;:::i;:::-;;:::i;1562:1910:3:-;1778:21;1801;1824:34;1890:19;:17;:19::i;:::-;1874:35;;1923:5;:12;1939:1;1923:17;1919:95;;;1956:47;;1919:95;2023:23;2131:9;2126:689;2150:5;:12;2146:1;:16;2126:689;;;2205:1;2187:5;2193:1;2187:8;;;;;;;;;;;;;;:15;:19;2183:66;;;2226:8;;2183:66;2298:13;2283:61;;;900:5;2417;2423:1;2417:8;;;;;;;;;;;;;;2427:17;2470:1;2445:17;:24;:26;2427:45;;;;;;;;;;;;;;2283:190;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2283:190:3;;;;;;;;-1:-1:-1;;2283:190:3;;;;;;;;;;;;:::i;:::-;;;2263:542;;2782:8;;2263:542;2558:15;2549:6;:24;2545:132;;;2615:6;2597:24;;2650:5;2656:1;2650:8;;;;;;;;;;;;;;2643:15;;2545:132;2490:201;2263:542;2164:3;;2126:689;;;-1:-1:-1;2846:24:3;;;2900:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2900:25:3;;2880:45;;2941:9;2936:473;2960:10;2956:1;:14;2936:473;;;3026:13;3011:61;;;900:5;3145:4;3151:17;3169:1;3151:20;;;;;;;;;;;;;;3011:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3011:161:3;;;;;;;;-1:-1:-1;;3011:161:3;;;;;;;;;;;;:::i;:::-;;;2991:408;;3379:5;;2991:408;3267:6;3244:17;3262:1;3244:20;;;;;;;;;;;;;:29;;;;;3189:99;2972:3;;2936:473;;;;3418:47;;1562:1910;;;;;;;;;:::o;4036:308::-;4251:21;4274;4297:34;4036:308;;;;;;;;:::o;7548:1345:9:-;7752:24;7843:4;:11;7858:1;7843:16;7839:55;;;-1:-1:-1;7882:1:9;7875:8;;7839:55;7939:30;:28;:30::i;:::-;7920:74;;;992:5;8085:17;:15;:17::i;:::-;8071:31;;:10;:31;;;:64;;8125:10;8071:64;;;2497:42:6;8071:64:9;8171:17;:15;:17::i;:::-;8157:31;;:10;:31;;;:64;;8211:10;8157:64;;;2497:42:6;8157:64:9;8243:16;8281:1;8311:4;7920:413;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7920:413:9;;;;;;;;-1:-1:-1;;7920:413:9;;;;;;;;;;;;:::i;:::-;;;7904:983;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8875:1;8868:8;;;;;7904:983;8391:26;8420:29;8438:10;8420:17;:29::i;:::-;8391:58;;;;8463:26;8492:29;8510:10;8492:17;:29::i;:::-;8463:58;;;;8714:8;8677:18;8671:2;:24;8634:18;8628:2;:24;8593:16;8570:4;:39;:82;:125;;;;;;:152;;;;;;8535:187;;8736:23;;;7904:983;7548:1345;;;;;;:::o;2007:196:21:-;2150:20;;2188:8;;2007:196;;;;:::o;1410:1411:13:-;1784:24;;1661:34;;1784:24;1838:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:13;-1:-1:-1;1818:45:13;-1:-1:-1;1931:25:13;;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;:22;;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:13;;;;;;;;;;;;;;;;;;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:13;;2017:798;;;;1410:1411;;;;;;;;;:::o;1277:840:20:-;1532:24;;1461:34;;1532:24;1586:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1586:25:20;;1566:45;;1626:9;1621:490;1645:10;1641:1;:14;1621:490;;;1715:6;1696:40;;;909:5;1804:17;1822:1;1804:20;;;;;;;;;;;;;;1826:4;1696:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1696:135:20;;;;;;;;;;;;:::i;:::-;;;1676:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2081:5;;;1676:425;1936:7;1958:1;1944:4;:11;:15;1936:24;;;;;;;;;;;;;;1913:17;1931:1;1913:20;;;;;;;;;;;;;:47;;;;;1848:127;1657:3;;1621:490;;;;1277:840;;;;;;:::o;5983:948:14:-;6186:47;6296:6;:13;6282:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6282:28:14;;6249:61;;6325:9;6320:605;6345:6;:13;6340:1;:18;6320:605;;6399:4;:32;;;5474:5;6521:6;6528:1;6521:9;;;;;;;;;;;;;;6555:15;6571:1;6555:18;;;;;;;;;;;;;;6598:8;6399:229;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6399:229:14;;;;;;;;-1:-1:-1;;6399:229:14;;;;;;;;;;;;:::i;:::-;;;6379:536;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6899:1;6863:30;6894:1;6863:33;;;;;;;;;;;;;:37;;;;;6758:157;6379:536;;;6736:6;6700:30;6731:1;6700:33;;;;;;;;;;;;;:42;;;;;6645:112;6379:536;6360:3;;6320:605;;;;5983:948;;;;;:::o;8448:3400::-;8650:27;8697:9;:16;8717:1;8697:21;:64;;;-1:-1:-1;8734:22:14;;;;:27;8697:64;:107;;;-1:-1:-1;8777:22:14;;;;:27;8697:107;8693:154;;;-1:-1:-1;8835:1:14;8828:8;;8693:154;8857:36;;:::i;:::-;8896:28;;;;;:21;;;;;;:28;;8918:5;;8896:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8857:67;-1:-1:-1;8963:30:14;8938:21;;:55;;;;;;;;;8934:94;;9016:1;9009:8;;;;;8934:94;9072:19;;;;9093:18;;9042:81;;;;;:29;;;;;;:81;;9113:9;;9042:81;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9037:121;;9146:1;9139:8;;;;;9037:121;9185:44;;;;;9167:15;;9185:22;;;;;;:44;;9208:20;;9185:44;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9167:62;;9239:25;9267:49;9295:5;:20;;;9267:27;:49::i;:::-;9239:77;-1:-1:-1;9330:31:14;;;9326:70;;9384:1;9377:8;;;;;;;9326:70;9405:28;9453:1;9436:5;:14;;;:18;:117;;9551:1;9436:117;;;9469:52;9497:5;:23;;;9469:27;:52::i;:::-;9405:148;;9563:28;9594:82;9638:9;:37;;;9594:5;:22;;;:43;;:82;;;;:::i;:::-;9563:113;;9708:20;9686:42;;9898:32;9933:263;9983:20;10017:5;:22;;;10070:10;10053:27;;:13;:27;;;:133;;10164:5;:22;;;10053:133;;;10130:14;;;;10099:22;;;;:46;;:30;:46::i;:::-;9933:36;:263::i;:::-;10457:18;;10436:40;;;;;9898:298;;-1:-1:-1;10370:28:14;;10401:148;;10436:20;;;;;;:40;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10511:18;;10490:49;;;;;:20;;;;;;:49;;10511:18;10531:7;;10490:49;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10401:21;:148::i;:::-;10370:179;;10729:24;10706:20;:47;10702:263;;;10791:163;10840:20;10878:24;10920:20;10791:31;:163::i;:::-;10769:185;;10702:263;11148:10;11131:27;;:13;:27;;;;:65;;;;-1:-1:-1;11162:34:14;;;;;11131:65;11127:715;;;11314:18;;11290:43;;;;;11212:36;;11251:166;;11290:23;;;;;;:43;;11314:18;11290:43;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11375:18;;11351:52;;;;;:23;;;;;;:52;;11375:18;11395:7;;11351:52;;;:::i;11251:166::-;11212:205;;11466:5;:14;;;11435:28;:45;11431:401;;;11522:295;11565:19;11606:193;11663:28;11717:5;:14;;;11757:20;11606:31;:193::i;11522:295::-;11500:317;;11431:401;11127:715;;8448:3400;;;;;;;;;;;;;:::o;1731:1145:4:-;2019:24;;1948:34;;2019:24;2073:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:4;;2053:45;;2113:9;2108:762;2132:10;2128:1;:14;2108:762;;;2164:15;2181:23;2224:9;:21;;;:32;;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:4;;;;;;;;;;;;;;;;;;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2760:14;2756:58;;2794:5;;;;;2756:58;2850:9;2827:17;2845:1;2827:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2144:3:4;;2108:762;;;;1731:1145;;;;;;;:::o;2571:879:8:-;2753:34;2803:40;2820:10;2832;2803:16;:40::i;:::-;2874:24;;;2928:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2928:25:8;;2908:45;;2968:9;2963:481;2987:10;2983:1;:14;2963:481;;;3047:20;:18;:20::i;:::-;3038:43;;;945:6;3147:10;3159;3171:17;3189:1;3171:20;;;;;;;;;;;;;;3038:154;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3038:154:8;;;;;;;;-1:-1:-1;;3038:154:8;;;;;;;;;;;;:::i;:::-;;;3018:416;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3287:6;3264:17;3282:1;3264:20;;;;;;;;;;;;;:29;;;;;3209:99;2999:3;;2963:481;;4117:1928:2;4449:24;;4329:34;;4406:11;;4449:24;4503:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4503:25:2;-1:-1:-1;4543:24:2;;;;;4483:45;;-1:-1:-1;4543:12:2;;;;;;:24;;4556:10;;4543:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4542:25;:54;;;-1:-1:-1;4572:24:2;;;;;:12;;;;;;:24;;4585:10;;4572:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4571:25;4542:54;4538:109;;;4612:24;;;;4538:109;4657:30;;:::i;:::-;4727:27;;;;;:15;;;;;;:27;;4743:10;;4727:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4697:57;;4794:27;;;;;:15;;;;;;:27;;4810:10;;4794:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4764;;;:57;4860:38;;;;;:26;;;;;;:38;;4887:10;;4860:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4831:26;;;;:67;;;;4937:38;;;;:26;;;;;;:38;;4964:10;;4937:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4908:9;:26;;:67;;;;;5005:4;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4985;;;:37;5038:9;5033:1006;5057:10;5053:1;:14;5033:1006;;;5259:49;5265:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5259:5;:49::i;:::-;5236:17;5254:1;5236:20;;;;;;;;;;;;;;:72;5232:116;;;5328:5;;5232:116;5381:4;:19;;;840:5;5492:9;:27;;;5545:9;:26;;;5597:9;:27;;;5650:9;:26;;;5702:17;5720:1;5702:20;;;;;;;;;;;;;;5748:9;:17;;;5381:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5381:406:2;;;;;;;;-1:-1:-1;;5381:406:2;;;;;;;;;;;;:::i;:::-;;;5361:668;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6009:5;;;5361:668;5882:6;5859:17;5877:1;5859:20;;;;;;;;;;;;;:29;;;;;5804:99;5069:3;;5033:1006;;;;4117:1928;;;;;;;;;:::o;2651:886:16:-;2976:24;;2853:34;;2976:24;3030:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3030:25:16;;3010:45;;3071:9;3066:465;3090:10;3086:1;:14;3066:465;;;3148:4;3141:27;;;894:5;3234:10;3246;3258:17;3276:1;3258:20;;;;;;;;;;;;;;3141:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3141:138:16;;;;;;;;-1:-1:-1;;3141:138:16;;;;;;;;;;;;:::i;:::-;;;3121:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3501:5;;;3121:400;3374:6;3351:17;3369:1;3351:20;;;;;;;;;;;;;:29;;;;;3296:99;3102:3;;3066:465;;4197:2252:19;4379:34;4429:40;4446:10;4458;4429:16;:40::i;:::-;4500:24;;;4554:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4554:25:19;;4534:45;;4589:41;4647:17;:15;:17::i;:::-;4633:31;;:10;:31;;;:105;;4707:31;4727:10;4707:19;:31::i;:::-;4633:105;;;4702:1;4633:105;4589:149;;4748:41;4806:17;:15;:17::i;:::-;4792:31;;:10;:31;;;:105;;4866:31;4886:10;4866:19;:31::i;:::-;4792:105;;;4861:1;4792:105;4748:149;;4912:9;4907:1536;4931:10;4927:1;:14;4907:1536;;;4980:4;5016:17;:15;:17::i;:::-;5002:31;;:10;:31;;;4998:1367;;;5090:216;5153:18;5194:52;;;5268:17;5286:1;5268:20;;;;;;;;;;;;;;5090:33;:216::i;:::-;5054:17;5072:1;5054:20;;;;;;;;;;;;;5053:253;;;;;;;;;4998:1367;;;5345:17;:15;:17::i;:::-;5331:31;;:10;:31;;;5327:1038;;;5419:216;5482:18;5523:52;;;5597:17;5615:1;5597:20;;;;;;;5327:1038;5674:15;5731:216;5794:18;5835:52;;;5909:17;5927:1;5909:20;;;;;;;5731:216;5707:240;-1:-1:-1;5707:240:19;-1:-1:-1;5969:12:19;;5965:386;;6042:219;6109:18;6154:52;6232:7;6042:33;:219::i;:::-;6006:17;6024:1;6006:20;;;;;;;;;;;;;6005:256;;;;;;;;;5965:386;;;6331:1;6308:17;6326:1;6308:20;;;;;;;;;;;;;:24;;;;;5965:386;5327:1038;;6383:10;6378:55;;6413:5;;;6378:55;-1:-1:-1;4943:3:19;;4907:1536;;;;4197:2252;;;;;;;;:::o;1326:880:8:-;1509:34;1559:40;1576:10;1588;1559:16;:40::i;:::-;1630:24;;;1684:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1684:25:8;;1664:45;;1724:9;1719:481;1743:10;1739:1;:14;1719:481;;;1803:20;:18;:20::i;:::-;1794:43;;;945:6;1903:10;1915;1927:17;1945:1;1927:20;;;;;;;;;;;;;;1794:154;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1794:154:8;;;;;;;;-1:-1:-1;;1794:154:8;;;;;;;;;;;;:::i;:::-;;;1774:416;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2043:6;2020:17;2038:1;2020:20;;;;;;;;;;;;;:29;;;;;1965:99;1755:3;;1719:481;;1909:493:7;2003:32;2083:9;2065:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2051:49;;2115:9;2110:286;2130:21;;;2110:286;;2197:4;2172:11;2184:1;2172:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2219:9;;2229:1;2219:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2215:71;;-1:-1:-1;2215:71:7;;2263:8;;2215:71;2355:4;2372:9;;2382:1;2372:12;;;;;;;;;;;;;;;;;;:::i;:::-;2347:38;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2300:11;2312:1;2300:14;;;;;;;;;;;;;;:22;;2324:11;2336:1;2324:14;;;;;;;;;;;;;;;;;;2299:86;;;;;;;;;2110:286;2153:3;;2110:286;;;;1909:493;;;;:::o;1581:2257:19:-;1764:34;1814:40;1831:10;1843;1814:16;:40::i;:::-;1885:24;;;1939:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1939:25:19;;1919:45;;1974:41;2032:17;:15;:17::i;:::-;2018:31;;:10;:31;;;:105;;2092:31;2112:10;2092:19;:31::i;:::-;2018:105;;;2087:1;2018:105;1974:149;;2133:41;2191:17;:15;:17::i;:::-;2177:31;;:10;:31;;;:105;;2251:31;2271:10;2251:19;:31::i;:::-;2177:105;;;2246:1;2177:105;2133:149;;2297:9;2292:1540;2316:10;2312:1;:14;2292:1540;;;2365:4;2401:17;:15;:17::i;:::-;2387:31;;:10;:31;;;2383:1371;;;2475:215;2538:18;2579:51;;;2652:17;2670:1;2652:20;;;;;;;2475:215;2439:17;2457:1;2439:20;;;;;;;;;;;;;2438:252;;;;;;;;;2383:1371;;;2729:17;:15;:17::i;:::-;2715:31;;:10;:31;;;2711:1043;;;2803:215;2866:18;2907:51;;;2980:17;2998:1;2980:20;;;;;;;2711:1043;3057:17;3118:215;3181:18;3222:51;;;3295:17;3313:1;3295:20;;;;;;;3118:215;3092:241;-1:-1:-1;3092:241:19;-1:-1:-1;3355:14:19;;3351:389;;3430:220;3497:18;3542:51;3619:9;3430:33;:220::i;:::-;3394:17;3412:1;3394:20;;;;;;;;;;;;;3393:257;;;;;;;;;3351:389;;;3720:1;3697:17;3715:1;3697:20;;;;;;;;;;;;;:24;;;;;3351:389;2711:1043;;3772:10;3767:55;;3802:5;;;3767:55;-1:-1:-1;2328:3:19;;2292:1540;;946:349:21;1049:25;1115:6;:13;1101:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:21;;1090:39;;1144:9;1139:150;1164:6;:13;1159:1;:18;1139:150;;1225:19;1212:32;;:6;1219:1;1212:9;;;;;;;;;;;;;;:32;;;:66;;1252:26;:6;1259:1;1252:9;;;;;;;;;;;;;;:24;;;:26::i;:::-;1212:66;;;1247:2;1212:66;1198:80;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:80;1179:3;;1139:150;;;;946:349;;;:::o;1277:840:17:-;1532:24;;1461:34;;1532:24;1586:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1586:25:17;;1566:45;;1626:9;1621:490;1645:10;1641:1;:14;1621:490;;;1715:6;1696:40;;;909:5;1804:17;1822:1;1804:20;;;;;;;;;;;;;;1826:4;1696:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1696:135:17;;;;;;;;;;;;:::i;:::-;;;1676:425;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1936:7;1958:1;1944:4;:11;:15;1936:24;;;;;;;;;;;;;;1913:17;1931:1;1913:20;;;;;;;;;;;;;:47;;;;;1848:127;1657:3;;1621:490;;2467:824;2721:24;;2650:34;;2721:24;2775:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2775:25:17;;2755:45;;2815:9;2810:475;2834:10;2830:1;:14;2810:475;;;2904:6;2885:39;;;909:5;2992:17;3010:1;2992:20;;;;;;;;;;;;;;3014:4;2885:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2885:134:17;;;;;;;;;;;;:::i;:::-;;;2865:410;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3124:7;3132:1;3124:10;;;;;;;;;;;;;;3101:17;3119:1;3101:20;;;;;;;;;;;;;:33;;;;;3036:113;2846:3;;2810:475;;1521:1172:9;1740:17;1759;1778:34;1828:40;1845:10;1857;1828:16;:40::i;:::-;1890:56;1908:10;1920;1932:13;1890:17;:56::i;:::-;1878:68;-1:-1:-1;1960:16:9;1956:90;;1992:43;;1956:90;2062:55;;;;;:4;;:20;;:55;;2083:9;;2094:10;;2106;;2062:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2062:55:9;;;;;;;;;;;;:::i;:::-;2149:24;;2055:62;;-1:-1:-1;2149:24:9;2203:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2203:25:9;;2183:45;;2243:9;2238:449;2262:10;2258:1;:14;2238:449;;;2293:13;2309:4;:31;;;2358:4;2380:10;2408;2436:17;2454:1;2436:20;;;;;;;;;;;;;;2309:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2293:177;-1:-1:-1;2547:10:9;2543:92;;2577:43;;;;;2543:92;2671:5;2648:17;2666:1;2648:20;;;;;;;;;;;;;;;;;:28;-1:-1:-1;2274:3:9;;2238:449;;;;1521:1172;;;;;;;;;:::o;888:1674:18:-;1083:23;;:::i;:::-;1120:24;;:::i;:::-;1158:17;;;1245:602;1270:13;:20;1265:1;:25;1245:602;;1311:71;1367:2;1341:13;1355:1;1341:16;;;;;;;;;;;;;;:23;:28;1371:10;1311:13;1325:1;1311:16;;;;;;;;;;;;;;:29;;:71;;;;;:::i;:::-;1397:15;1414:23;1449:4;1441:24;;1466:13;1480:1;1466:16;;;;;;;;;;;;;;1441:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:87;;;;1501:10;1497:340;;;1531:14;1548:46;1591:2;1571:10;:17;:22;1548:10;:22;;:46;;;;:::i;:::-;1531:63;;1625:23;1616:6;:32;1612:211;;;1726:24;;;1772:19;;;:32;;;1698:6;-1:-1:-1;1698:6:18;1612:211;1497:340;;-1:-1:-1;;1292:3:18;;1245:602;;;-1:-1:-1;1860:28:18;1856:98;;1904:39;;;1856:98;1968:9;1963:593;1988:14;:21;1983:1;:26;1963:593;;2030:86;2088:2;2061:14;2076:1;2061:17;;;;;;;;;;;;;;:24;:29;2092:23;2030:14;2045:1;2030:17;;;;;;;:86;2131:15;2148:23;2183:4;2175:24;;2200:14;2215:1;2200:17;;;;;;;;;;;;;;2175:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2130:88;;;;2236:10;2232:314;;;2266:14;2283:46;2326:2;2306:10;:17;:22;2283:10;:22;;:46;;;;:::i;:::-;2266:63;;2360:9;2351:6;:18;2347:185;;;2433:25;;;2480:20;;;:33;;;2405:6;-1:-1:-1;2405:6:18;2347:185;2232:314;;-1:-1:-1;;2011:3:18;;1963:593;;;;888:1674;;;;;;;;;:::o;3302:1666:4:-;3572:34;;;;3518;;3572:47;;3568:510;;3750:268;;;;;;;;;3710:357;;3750:268;3812:33;3823:10;3835:9;3812:33;;;;:::i;:::-;;;;;;;;;;;;;3750:268;;;;3894:12;3908:9;3883:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3750:268;;;;3962:37;3750:268;;;4036:17;3710:22;:357::i;:::-;3703:364;;;;3568:510;4108:24;;;4162:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4162:25:4;;4142:45;;4202:9;4197:765;4221:10;4217:1;:14;4197:765;;;4253:15;4270:23;4313:9;:21;;;:32;;1243:6;4435:9;:34;;;4495:12;4533:10;4569:17;4587:1;4569:20;;;;;;;;;;;;;;4387:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4387:224:4;;;;;;;;;;;;;;;;;;;;;;;;;;;4313:299;;;;4387:224;4313:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4252:360;;;;4626:18;4666:10;4662:95;;;4720:10;4709:33;;;;;;;;;;;;:::i;:::-;4696:46;;4662:95;4850:15;4846:59;;4885:5;;;;;4846:59;4941:10;4918:17;4936:1;4918:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;;;4233:3:4;;4197:765;;1764:1928:2;2097:24;;1977:34;;2054:11;;2097:24;2151:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:2;-1:-1:-1;2191:24:2;;;;;2131:45;;-1:-1:-1;2191:12:2;;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:2;;;;;:12;;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;;;;:15;;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;;;;:15;;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;;;;:26;;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;;;;:26;;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;:15;;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1005;2705:10;2701:1;:14;2681:1005;;;2913:27;;2907:48;;1064:8;2907:5;:48::i;:::-;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;:19;;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:2;;;;;;;;-1:-1:-1;;3028:406:2;;;;;;;;;;;;:::i;:::-;;;3008:668;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3451:99;2717:3;;2681:1005;;2731:1290:12;2959:7;3021:15;3082:8;3063:34;;;3098:19;3119;3063:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3021:128;-1:-1:-1;3212:27:12;;;3208:66;;3262:1;3255:8;;;;;3208:66;3283:19;3305:33;;;;:144;;3389:60;;;;;:45;;;;;;:60;;3443:4;;3389:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3305:144;;;3361:4;3353:21;;;3305:144;3283:166;;3605:16;3591:11;:30;3587:69;;;3644:1;3637:8;;;;;;3587:69;3681:133;;;;;:14;;;;;;1001:5;;3681:133;;3755:19;;3776;;3797:16;;3681:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3681:133:12;;;;;;;;-1:-1:-1;;3681:133:12;;;;;;;;;;;;:::i;:::-;;;3665:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4003:1;3996:8;;;;;;;3665:350;3881:6;-1:-1:-1;3874:13:12;;-1:-1:-1;;3874:13:12;1540:931:10;1889:24;;1766:34;;1889:24;1943:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:10;;1923:45;;1984:9;1979:486;2003:10;1999:1;:14;1979:486;;;2073:15;2054:48;;;1065:5;2168:10;2180;2192:17;2210:1;2192:20;;;;;;;;;;;;;;2054:159;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:159:10;;;;;;;;-1:-1:-1;;2054:159:10;;;;;;;;;;;;:::i;:::-;;;2034:421;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2308:6;2285:17;2303:1;2285:20;;;;;;;;;;;;;:29;;;;;2230:99;2015:3;;1979:486;;3204:1004:9;3422:17;3441;3460:34;3510:40;3527:10;3539;3510:16;:40::i;:::-;3573:56;3591:10;3603;3615:13;3573:17;:56::i;:::-;3561:68;-1:-1:-1;3643:16:9;3639:90;;3675:43;;3639:90;3745:55;;;;;:4;;:20;;:55;;3766:9;;3777:10;;3789;;3745:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3745:55:9;;;;;;;;;;;;:::i;:::-;3738:62;;3831:317;3867:240;;;;;;;;3936:10;3948:4;3925:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3867:240;;;;3998:10;4010:4;3987:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3867:240;;;;4055:37;3867:240;;;4121:17;3831:22;:317::i;:::-;3811:337;;3204:1004;;;;;;;;:::o;1493:1232:12:-;1704:15;1721:34;1771:40;1788:10;1800;1771:16;:40::i;:::-;1842:24;;;1896:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1896:25:12;;1876:45;;1932:27;1976:17;:15;:17::i;:::-;1962:31;;:10;:31;;;:57;;2009:10;1962:57;;;2004:1;1962:57;1932:87;;2029:27;2073:17;:15;:17::i;:::-;2059:31;;:10;:31;;;:57;;2106:10;2059:57;;;2101:1;2059:57;2029:87;;2132:9;2127:464;2151:10;2147:1;:14;2127:464;;;2182:17;2202:185;2253:8;2279:19;2316;2353:17;2371:1;2353:20;;;;;;;;;;;;;;2202:33;:185::i;:::-;2182:205;-1:-1:-1;2481:14:12;2477:58;;2515:5;;;2477:58;2571:9;2548:17;2566:1;2548:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;2163:3:12;;2127:464;;;-1:-1:-1;2632:76:12;;;;;:34;;;;;;:76;;2667:19;;2688;;2632:76;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2601:117;;1493:1232;;;;;;;;;;:::o;1394:902:11:-;1700:24;;1577:34;;1700:24;1754:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1754:25:11;;1734:45;;1795:9;1790:500;1814:10;1810:1;:14;1790:500;;;1874:17;:15;:17::i;:::-;1865:41;;;1001:5;1972:10;1984;1996:17;2014:1;1996:20;;;;;;;;;;;;;;1865:152;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1865:152:11;;;;;;;;;;;;:::i;:::-;;;1845:435;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2133:6;2110:17;2128:1;2110:20;;;;;;;;;;;;;:29;;;;;2034:120;;;1826:3;;1790:500;;4214:2586:9;4373:17;4459:27;4507:29;:27;:29::i;:::-;4647:16;;;4661:1;4647:16;;;;;;;;;4459:78;;-1:-1:-1;4611:33:9;;4647:16;;;;;;;;;;;;-1:-1:-1;4647:16:9;4611:52;;4695:9;4673:16;4690:1;4673:19;;;;;;;;;;;;;;;;;:31;4714:28;4759:1;4745:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4745:16:9;;4714:47;;4790:17;:15;:17::i;:::-;4776:31;;:10;:31;;;4772:2022;;;4871:289;;;;;:29;;;;;;992:5;;4871:289;;4989:10;;5025:34;;5085:16;;5127:11;;4871:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4871:289:9;;;;;;;;;;;;:::i;:::-;;;4851:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5266:102;4851:517;;;5244:6;-1:-1:-1;5237:13:9;;-1:-1:-1;;;5237:13:9;4851:517;4772:2022;;;5402:17;:15;:17::i;:::-;5388:31;;:10;:31;;;5384:1410;;;5483:289;;;;;:29;;;;;;992:5;;5483:289;;5601:10;;5637:34;;5697:16;;5739:11;;5483:289;;;:::i;5384:1410::-;6110:466;;;;;:31;;;;;;992:5;;6110:466;;6230:10;;6266:34;;6326:16;;6368:11;;6405:10;;6266:34;;6326:16;;6368:11;;6110:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6110:466:9;;;;;;;;;;;;:::i;:::-;;;6090:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6682:102;6090:694;4214:2586;;;;;;;;:::o;1301:330:21:-;1417:25;1483:6;:13;1469:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1469:28:21;;1458:39;;1512:9;1507:118;1532:6;:13;1527:1;:18;1507:118;;1580:34;1606:7;1580:6;1587:1;1580:9;;;;;;;;;;;;;;:25;;;;:34;;;;:::i;:::-;1566:8;1575:1;1566:11;;;;;;;;;;;;;;;;;:48;1547:3;;1507:118;;1841:1718:5;2021:13;2036:12;2050:34;2100:40;2117:10;2129;2100:16;:40::i;:::-;2171:24;;;2225:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2225:25:5;;2205:45;;2277:25;:23;:25::i;:::-;2268:43;;;2312:10;2324;2268:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2261:74;-1:-1:-1;2345:17:5;2442:18;;;;2438:432;;-1:-1:-1;2523:4:5;;-1:-1:-1;2488:10:5;2438:432;;;2574:25;:23;:25::i;:::-;2565:43;;;2609:10;2621;2565:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2558:74;-1:-1:-1;2690:27:5;;;2686:108;;2737:42;;;;2686:108;-1:-1:-1;2854:5:5;;-1:-1:-1;2819:10:5;2438:432;2930:4;2924:27;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2919:103;;2969:42;;;;2919:103;3037:9;3032:521;3056:10;3052:1;:14;3032:521;;;3087:17;3107:242;3172:10;3184:4;3190:9;3161:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3249:10;3261:4;3267:9;3238:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3315:17;3333:1;3315:20;;;;;;;;;;;;;;3107:36;:242::i;:::-;3087:262;-1:-1:-1;3443:14:5;3439:58;;3477:5;;;3439:58;3533:9;3510:17;3528:1;3510:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;3068:3:5;;3032:521;;;;1841:1718;;;;;;;;;:::o;2928:653:10:-;3259:274;;;3153:34;3259:274;;;;;;3223:351;;3259:274;3317:39;3328:10;3340:15;3317:39;;;;:::i;:::-;;;;;;;;;;;;;3259:274;;;;3401:10;3413:15;3390:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3259:274;;;;3469:49;3259:274;;;3547:17;3223:22;:351::i;2468:824:20:-;2722:24;;2651:34;;2722:24;2776:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2776:25:20;;2756:45;;2816:9;2811:475;2835:10;2831:1;:14;2811:475;;;2905:6;2886:39;;;909:5;2993:17;3011:1;2993:20;;;;;;;;;;;;;;3015:4;2886:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2886:134:20;;;;;;;;;;;;:::i;:::-;;;2866:410;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3125:7;3133:1;3125:10;;;;;;;;;;;;;;3102:17;3120:1;3102:20;;;;;;;;;;;;;:33;;;;;3037:113;2847:3;;2811:475;;2667:553:11;2849:34;2906:307;2942:230;;;;;;;;3011:10;3000:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;2942:230;;;;3067:10;3056:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;2942:230;;;;3118:39;2942:230;;;3186:17;2906:22;:307::i;4031:1711:5:-;4210:13;4225:12;4239:34;4289:40;4306:10;4318;4289:16;:40::i;:::-;4360:24;;;4414:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4414:25:5;;4394:45;;4557:25;:23;:25::i;:::-;4548:43;;;4592:10;4604;4548:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4541:74;-1:-1:-1;4625:17:5;4722:18;;;;4718:497;;-1:-1:-1;4803:4:5;;-1:-1:-1;4768:10:5;4718:497;;;4919:25;:23;:25::i;:::-;4910:43;;;4954:10;4966;4910:67;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4903:74;-1:-1:-1;5035:27:5;;;5031:108;;5082:42;;;;5031:108;-1:-1:-1;5199:5:5;;-1:-1:-1;5164:10:5;4718:497;5275:4;5269:27;;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5264:103;;5314:42;;;;5264:103;5433:261;;;;;;;;;5397:338;;5433:261;5491:39;5502:10;5514:4;5520:9;5491:39;;;;:::i;:::-;;;;;;;;;;;;;5433:261;;;;5575:10;5587:4;5593:9;5564:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5433:261;;;;5643:36;5433:261;;;5708:17;5397:22;:338::i;:::-;5377:358;;4031:1711;;;;;;;;;:::o;1637:364:21:-;1772:27;1842:6;:13;1828:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1828:28:21;;1815:41;;1871:9;1866:129;1891:6;:13;1886:1;:18;1866:129;;1941:43;1967:7;1976;1941:6;1948:1;1941:9;;;;;;;;;;;;;;:25;;;;:43;;;;;:::i;:::-;1925:10;1936:1;1925:13;;;;;;;;;;;;;;;;;:59;1906:3;;1866:129;;1340:887:16;1666:24;;1543:34;;1666:24;1720:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1720:25:16;;1700:45;;1761:9;1756:465;1780:10;1776:1;:14;1756:465;;;1838:4;1831:27;;;894:5;1924:10;1936;1948:17;1966:1;1948:20;;;;;;;;;;;;;;1831:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1831:138:16;;;;;;;;-1:-1:-1;;1831:138:16;;;;;;;;;;;;:::i;:::-;;;1811:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2064:6;2041:17;2059:1;2041:20;;;;;;;;;;;;;:29;;;;;1986:99;1792:3;;1756:465;;7372:936:14;7575:47;7671:114;7718:6;7738:15;7767:8;7671:33;:114::i;:::-;7638:147;;7926:9;7921:381;7945:6;:13;7941:1;:17;7921:381;;;7983:30;8014:1;7983:33;;;;;;;;;;;;;;8020:1;7983:38;7979:313;;8077:200;8130:30;8161:1;8130:33;;;;;;;;;;;;;;8185:6;8192:1;8185:9;;;;;;;;;;;;;;:26;;;8233:6;8240:1;8233:9;;;;;;;;;;;;;;:26;;;8077:31;:200::i;:::-;8041:30;8072:1;8041:33;;;;;;;;;;;;;:236;;;;;7979:313;7960:3;;7921:381;;4496:1135:12;4706:15;4723:34;4773:40;4790:10;4802;4773:16;:40::i;:::-;4844:24;;;4898:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4898:25:12;;4878:45;;4934:27;4978:17;:15;:17::i;:::-;4964:31;;:10;:31;;;:57;;5011:10;4964:57;;;5006:1;4964:57;4934:87;;5031:27;5075:17;:15;:17::i;:::-;5061:31;;:10;:31;;;:57;;5108:10;5061:57;;;5103:1;5061:57;5031:87;;5149:347;5185:270;;;;;;;;5254:8;5264:19;5243:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5185:270;;;;5329:8;5339:19;5318:41;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5185:270;;;;5399:41;5185:270;;;5469:17;5149:22;:347::i;:::-;5538:76;;;;;5129:367;;-1:-1:-1;5538:34:12;;;;;;:76;;5573:19;;5594;;5538:76;;;:::i;2568:1873:18:-;2761:23;;:::i;:::-;2798:24;;:::i;:::-;2900:2;;2836:18;2968:679;2993:14;:21;2988:1;:26;2968:679;;3035:72;3093:2;3066:14;3081:1;3066:17;;;;;;;;;;;;;;:24;:29;3097:9;3035:14;3050:1;3035:17;;;;;;;:72;3122:15;3139:23;3174:4;3166:24;;3191:14;3206:1;3191:17;;;;;;;;;;;;;;3166:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3121:88;;;;3227:10;3223:414;;;3257:14;3274:46;3317:2;3297:10;:17;:22;3274:10;:22;;:46;;;;:::i;:::-;3257:63;;3372:1;3363:6;:10;:66;;;;;3406:23;3397:6;:32;3363:66;3338:285;;;3524:25;;;3571:20;;;:33;;;3496:6;-1:-1:-1;3496:6:18;3338:285;3223:414;;-1:-1:-1;;3016:3:18;;2968:679;;;;3695:2;3660:23;:38;3656:109;;;3714:40;;;3656:109;3779:9;3774:661;3799:13;:20;3794:1;:25;3774:661;;3840:84;3896:2;3870:13;3884:1;3870:16;;;;;;;;;;;;;;:23;:28;3900:23;3840:13;3854:1;3840:16;;;;;;;:84;3939:15;3956:23;3991:4;3983:24;;4008:13;4022:1;4008:16;;;;;;;;;;;;;;3983:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3938:87;;;;4043:10;4039:386;;;4073:14;4090:46;4133:2;4113:10;:17;:22;4090:10;:22;;:46;;;;:::i;:::-;4073:63;;4188:1;4179:6;:10;:53;;;;;4222:10;4213:6;:19;4179:53;4154:257;;;4314:24;;;4360:19;;;:32;;;4286:6;-1:-1:-1;4286:6:18;4154:257;4039:386;;-1:-1:-1;;3821:3:18;;3774:661;;4350:239:3;4425:7;4448:24;4491:27;:25;:27::i;:::-;4448:71;;4536:8;:19;;;4556:8;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4536:46;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4529:53;;;4350:239;:::o;10304:180:6:-;1075:42;10304:180;:::o;10916:135::-;908:42;10916:135;:::o;937:217:15:-;1049:14;1086:61;1133:12;1086:31;:61::i;:::-;1079:68;937:217;-1:-1:-1;;937:217:15:o;11854:458:14:-;11961:20;12001:9;:16;12021:1;12001:21;11997:85;;;-1:-1:-1;12068:1:14;12038:33;;11997:85;12095:9;:16;12115:2;12095:22;;:85;;;-1:-1:-1;12160:20:14;12133:23;:9;12154:1;12133:20;:23::i;:::-;:47;;;;12095:85;12091:157;;;-1:-1:-1;12234:1:14;12204:33;;12091:157;12279:25;:9;12301:2;12279:21;:25::i;1625:373:40:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:40;;;1625:373::o;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1159:609:39:-;1327:21;1368:110;1406:9;1433:11;1462:6;1368:20;:110::i;:::-;1364:295;;;1494:154;1519:128;1571:9;1598:11;1627:6;1519:34;:128::i;1494:154::-;1685:46;1719:11;1685:25;:9;1703:6;1685:17;:25::i;:::-;:33;;:46::i;2544:135:40:-;2629:7;2663:1;2659;:5;:13;;2671:1;2659:13;;;-1:-1:-1;2667:1:40;;2652:20;-1:-1:-1;2544:135:40:o;3834:545:39:-;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;1509:191:15:-;1641:10;1627:24;;:10;:24;;;;1619:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;1509:191;;:::o;11885:160:6:-;1751:42;11885:160;:::o;6414:337:2:-;6497:9;6532:5;;;6551:6;;;;;:21;;;6571:1;6566;6561:2;:6;;;;;;:11;;6551:21;6547:60;;;6595:1;6588:8;;;;;6547:60;6632:8;6626:15;;6655:7;;;6651:46;;;6685:1;6678:8;;;;;;6651:46;1010:8;6716:9;;;;-1:-1:-1;;;;6414:337:2:o;7870:316:19:-;7967:31;8093:35;:33;:35::i;:::-;8069:85;;;8155:12;8069:99;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;6907:721::-;7104:20;;7161:36;;;7157:100;;7213:33;;7157:100;7266:23;7338:22;:33;;1205:5;7455:16;7493:11;7411:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7411:111:19;;;;;;;;;;;;;;;;;;;;;;;;;;;7338:185;;;;7411:111;7338:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7299:224:19;;-1:-1:-1;7299:224:19;-1:-1:-1;7533:89:19;;;;7589:10;7578:33;;;;;;;;;;;;:::i;:::-;7563:48;;7533:89;6907:721;;;;;;;;:::o;3886:391:37:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;4087:25;;4113:18;;;;;;;;;;;;;;;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;8899:928:9:-;9066:17;9154:27;9202:29;:27;:29::i;:::-;9154:78;;9243:27;9277:9;:28;;;9333:17;:15;:17::i;:::-;9319:31;;:10;:31;;;:64;;9373:10;9319:64;;;2497:42:6;9319:64:9;9411:17;:15;:17::i;:::-;9397:31;;:10;:31;;;:64;;9451:10;9397:64;;;2497:42:6;9397:64:9;9493:12;;;9503:1;9493:12;;;;;;;;;9277:252;;;;;;;;;;;;;9475:4;;9277:252;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9277:252:9;;;;;;;;;;;;:::i;:::-;9242:287;;;;9561:10;:17;9544:13;:34;9540:75;;-1:-1:-1;9601:3:9;;-1:-1:-1;9594:10:9;;-1:-1:-1;9594:10:9;9540:75;9637:10;9648:13;9637:25;;;;;;;;;;;;;;9625:37;;9745:3;9732:9;:16;;9724:25;;9753:4;9724:33;9720:74;;;-1:-1:-1;9780:3:9;;-1:-1:-1;9773:10:9;;-1:-1:-1;9773:10:9;16578:187:38;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;4974:907:4:-;5175:17;5209:20;5231:26;;:::i;:::-;5284:14;5273:47;;;;;;;;;;;;:::i;:::-;5208:112;;;;5331:20;5378:14;5367:36;;;;;;;;;;;;:::i;:::-;5330:73;-1:-1:-1;5414:12:4;5428:23;5475:4;5532:34;5584:9;5611:13;5330:73;5673:31;5693:10;5673:19;:31::i;:::-;5492:226;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5492:226:4;;;;;;;;;;;;;;;;;;;;;;;;;;;5467:252;;;;5492:226;5467:252;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5413:306;;;;5734:7;5729:47;;5764:1;5757:8;;;;;;;;;5729:47;5847:10;5836:35;;;;;;;;;;;;:::i;:::-;5872:1;5836:38;;;;;;;;;;;;;;5829:45;;;;;;;4974:907;;;;;:::o;1691:2958:0:-;1865:34;1949:17;:24;1935:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2085;2582:17;:24;2578:1;:28;2558:2085;;;2632:12;2627:1604;1683:1;2650:4;:37;2627:1604;;;2823:148;2870:17;2888:1;2870:20;;;;;;;;;;;;;;2912:9;2943:10;2823:25;:148::i;:::-;2810:161;-1:-1:-1;2993:15:0;2989:67;;3032:5;;2989:67;3086:202;3134:59;1378:3;3260:10;3086:25;:202::i;:::-;3073:215;-1:-1:-1;3310:15:0;3306:67;;3349:5;;3306:67;3390:18;3411:157;3458:4;:19;;;3499:4;:19;;;3540:10;3411:4;:25;;;:157;;:::i;:::-;3390:178;-1:-1:-1;3590:15:0;3586:67;;3629:5;;;3586:67;3786:10;3774:22;;3888:17;3906:1;3888:20;;;;;;;;;;;;;;3875:9;:33;3871:346;;3932:11;4056:17;4074:1;4056:20;;;;;;;;;;;;;;1378:3;3983:17;4001:1;3983:20;;;;;;;;;;;;;;3971:9;:32;3970:59;:106;;;;;;3932:144;;1536:8;4102:3;:41;4098:101;;4171:5;;;;4098:101;3871:346;;-1:-1:-1;2689:6:0;;2627:1604;;;;4500:132;4543:17;4561:1;4543:20;;;;;;;;;;;;;;4581:9;4608:10;4500:25;:132::i;:::-;4477:17;4495:1;4477:20;;;;;;;;;;;;;;;;;:155;2608:3;;2558:2085;;;;1691:2958;;;;;;:::o;6806:736:9:-;7007:7;7031:18;7051:17;7095:14;7084:44;;;;;;;;;;;;:::i;:::-;7030:98;;;;7139:18;7186:14;7175:44;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7245:90:9;;;;;7138:81;;-1:-1:-1;7245:4:9;;:31;;:90;;7294:4;;7138:81;;7312:10;;7324;;7245:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7245:90:9;;;;;;;;-1:-1:-1;;7245:90:9;;;;;;;;;;;;:::i;:::-;;;7229:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7524:1;7517:8;;;;;;;;14070:128:6;3067:42;14070:128;:::o;10626:184::-;1240:42;10626:184;:::o;5401:467:37:-;5510:15;5542;5559:23;5594:5;5586:25;;5665:24;;;5707:5;5625:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5625:101:37;;;;;;;;;;;;;;;;;;;;;;;;;;;5586:150;;;;5625:101;5586:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5541:195;;;;5750:10;:37;;;;;5785:2;5764:10;:17;:23;;5750:37;5746:116;;;5813:38;5837:10;5849:1;5813:23;:38::i;:::-;5803:48;;5746:116;5401:467;;;;;;:::o;14884:141:6:-;3520:42;14884:141;:::o;5748:1442:5:-;5954:7;5978:18;5998:12;6012:17;6057:14;6033:89;;;;;;;;;;;;:::i;:::-;5977:145;;;;;;6243:9;6229:23;;:10;:23;;;6225:959;;;6357:104;;;;;:30;;;;;;1352:5;;6357:104;;6450:10;;6357:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6357:104:5;;;;;;;;-1:-1:-1;;6357:104:5;;;;;;;;;;;;:::i;6225:959::-;6821:23;:21;:23::i;:::-;6809:56;;;1352:5;6928:4;6934:10;6809:136;;;;;;;;;;;;;;;;:::i;3587:849:10:-;3800:17;3834:18;3854:23;3904:14;3893:46;;;;;;;;;;;;:::i;:::-;3833:106;;;;3950:18;3995:14;3984:37;;;;;;;;;;;;:::i;:::-;3949:72;-1:-1:-1;4047:4:10;:37;1065:5;4142:15;4159:10;3949:72;4183:31;4203:10;4183:19;:31::i;:::-;4047:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4047:168:10;;;;;;;;;;;;:::i;:::-;;;4031:399;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4292:7;4300:1;4292:10;;;;;;;;;;;;;;4285:17;;;;;;;;3226:738:11;3429:17;3463:18;3508:14;3497:37;;;;;;;;;;;;:::i;:::-;3462:72;;3545:18;3590:14;3579:37;;;;;;;;;;;;:::i;:::-;3544:72;-1:-1:-1;3642:4:11;:27;3687:10;3544:72;3711:31;3731:10;3711:19;:31::i;:::-;3642:101;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3642:101:11;;;;;;;;;;;;:::i;:::-;;;3626:332;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3946:1;3939:8;;;;;;;3626:332;3820:7;3828:1;3820:10;;;;;;;;;;;;;;3813:17;;;;;;;4623:515:37;4749:18;4784:15;4801:23;4836:5;4828:25;;4907:24;;;4949:5;4972:7;4867:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4867:126:37;;;;;;;;;;;;;;;;;;;;;;;;;;;4828:175;;;;4867:126;4828:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4783:220;;;;5017:10;:37;;;;;5052:2;5031:10;:17;:23;;5017:37;5013:119;;;5083:38;5107:10;5119:1;5083:23;:38::i;:::-;5070:51;4623:515;-1:-1:-1;;;;;;4623:515:37:o;5637:620:12:-;5842:17;5876:16;5894:27;5936:14;5925:46;;;;;;;;;;;;:::i;:::-;5875:96;;;;5982:17;6001:27;6043:14;6032:46;;;;;;;;;;;;:::i;:::-;5981:97;;;;6095:155;6142:8;6164:19;6197;6230:10;6095:33;:155::i;:::-;6088:162;5637:620;-1:-1:-1;;;;;;;;5637:620:12:o;15456:145:6:-;3816:42;15456:145;:::o;17014:880:38:-;17134:13;17178:5;17186:1;17178:9;17167:1;:8;:20;17163:299;;;17203:248;17228:222;17293:90;17401:1;:8;17427:5;17435:1;17427:9;17228:47;:222::i;17203:248::-;-1:-1:-1;17635:13:38;17538:2;17635:13;17629:20;17788:66;17776:79;;17014:880::o;10896:1080::-;11017:14;11062:5;11070:2;11062:10;11051:1;:8;:21;11047:330;;;11088:278;11113:252;11178:92;11288:1;:8;11314:5;11322:2;11314:10;11113:47;:252::i;11088:278::-;-1:-1:-1;11878:13:38;11623:2;11878:13;11872:20;11894:42;11868:69;;10896:1080::o;1401:322:44:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:322:44;;;;;:::o;1531:170:43:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;4646:1886:39;4809:12;4841:16;4837:115;;4873:68;4898:42;:40;:42::i;4873:68::-;5762:11;;;:29;;-1:-1:-1;5777:14:39;;5762:29;5758:72;;;-1:-1:-1;5814:5:39;5807:12;;5758:72;6325:17;6408:11;6345:84;;;;;6385:9;6365:6;6345:84;6325:104;-1:-1:-1;6476:25:39;:9;6494:6;6476:17;:25::i;:::-;6449:23;:9;6467:4;6449:17;:23::i;:::-;:52;;;4646:1886;-1:-1:-1;;;;;4646:1886:39:o;1142:335:42:-;1298:12;934:10;1369:23;;1406:9;1429:11;1454:6;1333:137;;;;;;;;;;:::i;764:457:40:-;850:7;877:6;873:45;;-1:-1:-1;906:1:40;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:40:o;11200:192:6:-;1419:42;11200:192;:::o;15225:654:38:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;15408:254::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:38;14838:2;14936:13;14930:20;;14301:688::o;1160:172:15:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:15;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4655:416:0:-;4823:21;4864:14;;;:29;;-1:-1:-1;4882:11:0;;4864:29;:49;;;-1:-1:-1;4897:16:0;;4864:49;4860:63;;;-1:-1:-1;4922:1:0;4915:8;;4860:63;4945:18;;;4957:6;4945:9;:18;:9;4977:13;;;;;:23;4973:37;;5009:1;5002:8;;;;;4973:37;5053:11;5047:1;5033:11;:15;5028:1;:21;5027:37;;;;;;;4655:416;-1:-1:-1;;;;;4655:416:0:o;15168:137:6:-;3664:42;15168:137;:::o;1334:378:41:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;994:142:42:-;1107:22;;;;;;;;;;;;;;;;;994:142;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;3105:705::-;;3231:3;3224:4;3216:6;3212:17;3208:27;3198:2;;-1:-1;;3239:12;3198:2;3286:6;3273:20;3308:89;3323:73;3389:6;3323:73;:::i;3308:89::-;3425:21;;;3299:98;-1:-1;3469:4;3482:14;;;;3457:17;;;3577:1;3562:242;3587:6;3584:1;3581:13;3562:242;;;3694:46;3736:3;3469:4;3670:3;3657:17;3461:6;3645:30;;3694:46;:::i;:::-;3682:59;;3755:14;;;;3783;;;;3609:1;3602:9;3562:242;;3852:776;;3992:3;3985:4;3977:6;3973:17;3969:27;3959:2;;-1:-1;;4000:12;3959:2;4047:6;4034:20;4069:103;4084:87;4164:6;4084:87;:::i;4069:103::-;4200:21;;;4060:112;-1:-1;4244:4;4257:14;;;;4232:17;;;4346;;;4337:27;;;;4334:36;-1:-1;4331:2;;;4383:1;;4373:12;4331:2;4408:1;4393:229;4418:6;4415:1;4412:13;4393:229;;;8595:6;8582:20;8607:56;8657:5;8607:56;:::i;:::-;4486:73;;4573:14;;;;4601;;;;4440:1;4433:9;4393:229;;5442:707;;5559:3;5552:4;5544:6;5540:17;5536:27;5526:2;;-1:-1;;5567:12;5526:2;5614:6;5601:20;5636:80;5651:64;5708:6;5651:64;:::i;5636:80::-;5744:21;;;5627:89;-1:-1;5788:4;5801:14;;;;5776:17;;;5890;;;5881:27;;;;5878:36;-1:-1;5875:2;;;5927:1;;5917:12;5875:2;5952:1;5937:206;5962:6;5959:1;5956:13;5937:206;;;14962:20;;6030:50;;6094:14;;;;6122;;;;5984:1;5977:9;5937:206;;6175:722;;6303:3;6296:4;6288:6;6284:17;6280:27;6270:2;;-1:-1;;6311:12;6270:2;6351:6;6345:13;6373:80;6388:64;6445:6;6388:64;:::i;6373:80::-;6481:21;;;6364:89;-1:-1;6525:4;6538:14;;;;6513:17;;;6627;;;6618:27;;;;6615:36;-1:-1;6612:2;;;6664:1;;6654:12;6612:2;6689:1;6674:217;6699:6;6696:1;6693:13;6674:217;;;15110:13;;6767:61;;6842:14;;;;6870;;;;6721:1;6714:9;6674:217;;7593:440;;7694:3;7687:4;7679:6;7675:17;7671:27;7661:2;;-1:-1;;7702:12;7661:2;7749:6;7736:20;7771:64;7786:48;7827:6;7786:48;:::i;7771:64::-;7762:73;;7855:6;7848:5;7841:21;7959:3;7891:4;7950:6;7883;7941:16;;7938:25;7935:2;;;7976:1;;7966:12;7935:2;78596:6;7891:4;7883:6;7879:17;7891:4;7917:5;7913:16;78573:30;78652:1;78634:16;;;7891:4;78634:16;78627:27;7917:5;7654:379;-1:-1;;7654:379::o;8042:442::-;;8154:3;8147:4;8139:6;8135:17;8131:27;8121:2;;-1:-1;;8162:12;8121:2;8202:6;8196:13;8224:64;8239:48;8280:6;8239:48;:::i;8224:64::-;8215:73;;8308:6;8301:5;8294:21;8412:3;8344:4;8403:6;8336;8394:16;;8391:25;8388:2;;;8429:1;;8419:12;8388:2;8439:39;8471:6;8344:4;8370:5;8366:16;8344:4;8336:6;8332:17;8439:39;:::i;9021:174::-;9119:13;;80577:1;80567:12;;80557:2;;80593:1;;80583:12;12154:2734;;12266:6;;12254:9;12249:3;12245:19;12241:32;12238:2;;;-1:-1;;12276:12;12238:2;12304:22;12266:6;12304:22;:::i;:::-;12295:31;;;12416:49;12461:3;12437:22;12416:49;:::i;:::-;12398:16;12391:75;12568:49;12613:3;12535:2;12593:9;12589:22;12568:49;:::i;:::-;12535:2;12554:5;12550:16;12543:75;12727:49;12772:3;12694:2;12752:9;12748:22;12727:49;:::i;:::-;12694:2;12713:5;12709:16;12702:75;12880:49;12925:3;12847:2;12905:9;12901:22;12880:49;:::i;:::-;12847:2;12866:5;12862:16;12855:75;13003:3;13062:9;13058:22;14962:20;13003:3;13023:5;13019:16;13012:75;13160:3;13219:9;13215:22;14962:20;13160:3;13180:5;13176:16;13169:75;13309:3;13368:9;13364:22;14962:20;13309:3;13329:5;13325:16;13318:75;13458:3;13517:9;13513:22;14962:20;13458:3;13478:5;13474:16;13467:75;13620:3;;13681:9;13677:22;14962:20;13620:3;13640:5;13636:18;13629:77;;13767:3;;13828:9;13824:22;14962:20;13767:3;13787:5;13783:18;13776:77;;13952:3;;13941:9;13937:19;13924:33;13977:18;;13969:6;13966:30;13963:2;;;12384:1;;13999:12;13963:2;14046:58;14100:3;14091:6;14080:9;14076:22;14046:58;:::i;:::-;13952:3;14030:5;14026:18;14019:86;14204:3;;;;14193:9;14189:19;14176:33;14162:47;;13977:18;14221:6;14218:30;14215:2;;;12384:1;;14251:12;14215:2;14298:58;14352:3;14343:6;14332:9;14328:22;14298:58;:::i;:::-;14204:3;14282:5;14278:18;14271:86;14459:3;;;;14448:9;14444:19;14431:33;14417:47;;13977:18;14476:6;14473:30;14470:2;;;12384:1;;14506:12;14470:2;14553:58;14607:3;14598:6;14587:9;14583:22;14553:58;:::i;:::-;14459:3;14537:5;14533:18;14526:86;14714:3;;;;14703:9;14699:19;14686:33;14672:47;;13977:18;14731:6;14728:30;14725:2;;;12384:1;;14761:12;14725:2;;14808:58;14862:3;14853:6;14842:9;14838:22;14808:58;:::i;:::-;14714:3;14792:5;14788:18;14781:86;;;12232:2656;;;;:::o;15173:241::-;;15277:2;15265:9;15256:7;15252:23;15248:32;15245:2;;;-1:-1;;15283:12;15245:2;85:6;72:20;97:33;124:5;97:33;:::i;15421:263::-;;15536:2;15524:9;15515:7;15511:23;15507:32;15504:2;;;-1:-1;;15542:12;15504:2;226:6;220:13;238:33;265:5;238:33;:::i;15977:431::-;;;16125:2;16113:9;16104:7;16100:23;16096:32;16093:2;;;-1:-1;;16131:12;16093:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;16302:2;16360:22;;369:13;16183:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;16310:82;;;;16087:321;;;;;:::o;16415:583::-;;;;16588:2;16576:9;16567:7;16563:23;16559:32;16556:2;;;-1:-1;;16594:12;16556:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;16765:2;16823:22;;369:13;16646:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;16892:2;16950:22;;369:13;16773:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;16900:82;;;;16550:448;;;;;:::o;17005:512::-;;;17154:2;17142:9;17133:7;17129:23;17125:32;17122:2;;;-1:-1;;17160:12;17122:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;17352:2;17337:18;;17331:25;17212:82;;-1:-1;17376:18;17365:30;;17362:2;;;-1:-1;;17398:12;17362:2;17428:73;17493:7;17484:6;17473:9;17469:22;17428:73;:::i;:::-;17418:83;;;17116:401;;;;;:::o;17524:879::-;;;;;;17721:3;17709:9;17700:7;17696:23;17692:33;17689:2;;;-1:-1;;17728:12;17689:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;17780:63;-1:-1;17880:2;17919:22;;72:20;97:33;72:20;97:33;:::i;:::-;17888:63;-1:-1;17988:2;18027:22;;72:20;97:33;72:20;97:33;:::i;:::-;17996:63;-1:-1;18096:2;18135:22;;72:20;97:33;72:20;97:33;:::i;:::-;18104:63;-1:-1;18232:3;18217:19;;18204:33;18257:18;18246:30;;18243:2;;;-1:-1;;18279:12;18243:2;18309:78;18379:7;18370:6;18359:9;18355:22;18309:78;:::i;:::-;18299:88;;;17683:720;;;;;;;;:::o;18410:753::-;;;;;18590:3;18578:9;18569:7;18565:23;18561:33;18558:2;;;-1:-1;;18597:12;18558:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;18649:63;-1:-1;18749:2;18788:22;;72:20;97:33;72:20;97:33;:::i;:::-;18757:63;-1:-1;18857:2;18896:22;;72:20;97:33;72:20;97:33;:::i;:::-;18865:63;-1:-1;18993:2;18978:18;;18965:32;19017:18;19006:30;;19003:2;;;-1:-1;;19039:12;19003:2;19069:78;19139:7;19130:6;19119:9;19115:22;19069:78;:::i;:::-;19059:88;;;18552:611;;;;;;;:::o;19170:617::-;;;;;19325:3;19313:9;19304:7;19300:23;19296:33;19293:2;;;-1:-1;;19332:12;19293:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;19384:63;-1:-1;19484:2;19523:22;;72:20;97:33;72:20;97:33;:::i;:::-;19492:63;-1:-1;19592:2;19631:22;;72:20;97:33;72:20;97:33;:::i;:::-;19287:500;;;;-1:-1;19600:63;;19700:2;19739:22;14962:20;;-1:-1;;19287:500::o;19794:627::-;;;;19957:2;19945:9;19936:7;19932:23;19928:32;19925:2;;;-1:-1;;19963:12;19925:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;20015:63;-1:-1;20115:2;20154:22;;72:20;97:33;72:20;97:33;:::i;:::-;20123:63;-1:-1;20251:2;20236:18;;20223:32;20275:18;20264:30;;20261:2;;;-1:-1;;20297:12;20261:2;20327:78;20397:7;20388:6;20377:9;20373:22;20327:78;:::i;:::-;20317:88;;;19919:502;;;;;:::o;20428:763::-;;;;20616:2;20604:9;20595:7;20591:23;20587:32;20584:2;;;-1:-1;;20622:12;20584:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;20674:63;-1:-1;20802:2;20787:18;;20774:32;20826:18;20815:30;;;20812:2;;;-1:-1;;20848:12;20812:2;20878:78;20948:7;20939:6;20928:9;20924:22;20878:78;:::i;:::-;20868:88;;21021:2;21010:9;21006:18;20993:32;20979:46;;20826:18;21037:6;21034:30;21031:2;;;-1:-1;;21067:12;21031:2;;21097:78;21167:7;21158:6;21147:9;21143:22;21097:78;:::i;21198:939::-;;;;;21428:3;21416:9;21407:7;21403:23;21399:33;21396:2;;;-1:-1;;21435:12;21396:2;21493:17;21480:31;21531:18;;21523:6;21520:30;21517:2;;;-1:-1;;21553:12;21517:2;21669:6;21658:9;21654:22;;;1335:3;1328:4;1320:6;1316:17;1312:27;1302:2;;-1:-1;;1343:12;1302:2;1390:6;1377:20;1412:105;1427:89;1509:6;1427:89;:::i;1412:105::-;1545:21;;;1589:4;1602:14;;;;1523:16;1577:17;;;-1:-1;1682:258;1707:6;1704:1;1701:13;1682:258;;;1814:62;1872:3;1589:4;1790:3;1777:17;1581:6;1765:30;;1814:62;:::i;:::-;1802:75;;1891:14;;;;1919;;;;1729:1;1722:9;1682:258;;;1686:14;;21573:113;;;21741:53;21786:7;1589:4;21766:9;21762:22;21741:53;:::i;:::-;21731:63;;;;;;21849:53;21894:7;21831:2;21874:9;21870:22;21849:53;:::i;:::-;21839:63;;21967:2;21956:9;21952:18;21939:32;21925:46;;21531:18;21983:6;21980:30;21977:2;;;-1:-1;;22013:12;21977:2;;22043:78;22113:7;22104:6;22093:9;22089:22;22043:78;:::i;22144:833::-;;;;22363:2;22351:9;22342:7;22338:23;22334:32;22331:2;;;-1:-1;;22369:12;22331:2;22420:17;22414:24;22458:18;;22450:6;22447:30;22444:2;;;-1:-1;;22480:12;22444:2;22582:6;22571:9;22567:22;;;2100:3;2093:4;2085:6;2081:17;2077:27;2067:2;;-1:-1;;2108:12;2067:2;2148:6;2142:13;2170:80;2185:64;2242:6;2185:64;:::i;2170:80::-;2256:16;2292:6;2285:5;2278:21;2322:4;;2339:3;2335:14;2328:21;;2322:4;2314:6;2310:17;2444:3;2322:4;;2428:6;2424:17;2314:6;2415:27;;2412:36;2409:2;;;-1:-1;;2451:12;2409:2;-1:-1;2477:10;;2471:217;2496:6;2493:1;2490:13;2471:217;;;7255:13;;2564:61;;2518:1;2511:9;;;;;2639:14;;;;2667;;2471:217;;;-1:-1;22642:18;;22636:25;22500:99;;-1:-1;22636:25;-1:-1;;;22670:30;;;22667:2;;;-1:-1;;22703:12;22667:2;;22733:89;22814:7;22805:6;22794:9;22790:22;22733:89;:::i;:::-;22723:99;;;22877:84;22953:7;22859:2;22933:9;22929:22;22877:84;:::i;:::-;22867:94;;22325:652;;;;;:::o;22984:419::-;;;23134:2;23122:9;23113:7;23109:23;23105:32;23102:2;;;-1:-1;;23140:12;23102:2;23198:17;23185:31;23236:18;;23228:6;23225:30;23222:2;;;-1:-1;;23258:12;23222:2;23370:6;23359:9;23355:22;;;2859:3;2852:4;2844:6;2840:17;2836:27;2826:2;;-1:-1;;2867:12;2826:2;2910:6;2897:20;23236:18;2929:6;2926:30;2923:2;;;-1:-1;;2959:12;2923:2;3054:3;23134:2;;3038:6;3034:17;2995:6;3020:32;;3017:41;3014:2;;;-1:-1;;3061:12;3014:2;23134;2991:17;;;;;23278:109;;-1:-1;23096:307;;-1:-1;;;;23096:307::o;23410:799::-;;;;23616:2;23604:9;23595:7;23591:23;23587:32;23584:2;;;-1:-1;;23622:12;23584:2;23680:17;23667:31;23718:18;;23710:6;23707:30;23704:2;;;-1:-1;;23740:12;23704:2;23770:87;23849:7;23840:6;23829:9;23825:22;23770:87;:::i;:::-;23760:97;;23922:2;23911:9;23907:18;23894:32;23880:46;;23718:18;23938:6;23935:30;23932:2;;;-1:-1;;23968:12;23932:2;;23998:87;24077:7;24068:6;24057:9;24053:22;23998:87;:::i;:::-;23988:97;;;24122:2;24165:9;24161:22;14962:20;24130:63;;23578:631;;;;;:::o;24216:423::-;;24368:2;24356:9;24347:7;24343:23;24339:32;24336:2;;;-1:-1;;24374:12;24336:2;24432:17;24419:31;24470:18;24462:6;24459:30;24456:2;;;-1:-1;;24492:12;24456:2;24522:101;24615:7;24606:6;24595:9;24591:22;24522:101;:::i;24646:548::-;;;24815:2;24803:9;24794:7;24790:23;24786:32;24783:2;;;-1:-1;;24821:12;24783:2;24879:17;24866:31;24917:18;24909:6;24906:30;24903:2;;;-1:-1;;24939:12;24903:2;24969:101;25062:7;25053:6;25042:9;25038:22;24969:101;:::i;:::-;24959:111;;;25107:2;25150:9;25146:22;72:20;97:33;124:5;97:33;:::i;25201:673::-;;;;25387:2;25375:9;25366:7;25362:23;25358:32;25355:2;;;-1:-1;;25393:12;25355:2;25451:17;25438:31;25489:18;25481:6;25478:30;25475:2;;;-1:-1;;25511:12;25475:2;25541:101;25634:7;25625:6;25614:9;25610:22;25541:101;:::i;:::-;25531:111;;;25679:2;25722:9;25718:22;72:20;97:33;124:5;97:33;:::i;:::-;25687:63;-1:-1;25787:2;25826:22;;72:20;97:33;72:20;97:33;:::i;25881:863::-;;;;26119:2;26107:9;26098:7;26094:23;26090:32;26087:2;;;-1:-1;;26125:12;26087:2;26183:17;26170:31;26221:18;;26213:6;26210:30;26207:2;;;-1:-1;;26243:12;26207:2;26357:6;26346:9;26342:22;;;4809:3;4802:4;4794:6;4790:17;4786:27;4776:2;;-1:-1;;4817:12;4776:2;4864:6;4851:20;4886:103;4901:87;4981:6;4901:87;:::i;4886:103::-;5017:21;;;5061:4;5074:14;;;;4995:16;5049:17;;;-1:-1;5154:256;5179:6;5176:1;5173:13;5154:256;;;5286:60;5342:3;5061:4;5262:3;5249:17;5053:6;5237:30;;5286:60;:::i;:::-;5274:73;;5361:14;;;;5389;;;;5201:1;5194:9;5154:256;;;-1:-1;26263:111;;-1:-1;26424:18;;26411:32;;-1:-1;;;;26452:30;;;26449:2;;;-1:-1;;26485:12;26449:2;;26515:87;26594:7;26585:6;26574:9;26570:22;26515:87;:::i;:::-;26505:97;;;26657:71;26720:7;26639:2;26700:9;26696:22;26657:71;:::i;26751:392::-;;26891:2;26879:9;26870:7;26866:23;26862:32;26859:2;;;-1:-1;;26897:12;26859:2;26948:17;26942:24;26986:18;26978:6;26975:30;26972:2;;;-1:-1;;27008:12;26972:2;27038:89;27119:7;27110:6;27099:9;27095:22;27038:89;:::i;27150:257::-;;27262:2;27250:9;27241:7;27237:23;27233:32;27230:2;;;-1:-1;;27268:12;27230:2;6986:6;6980:13;6998:30;7022:5;6998:30;:::i;27414:628::-;;;;27570:2;27558:9;27549:7;27545:23;27541:32;27538:2;;;-1:-1;;27576:12;27538:2;6986:6;6980:13;6998:30;7022:5;6998:30;:::i;:::-;27757:2;27742:18;;27736:25;27628:71;;-1:-1;27781:18;27770:30;;27767:2;;;-1:-1;;27803:12;27767:2;27833:74;27899:7;27890:6;27879:9;27875:22;27833:74;:::i;:::-;27823:84;;;27944:2;27998:9;27994:22;15110:13;27952:74;;27532:510;;;;;:::o;28049:263::-;;28164:2;28152:9;28143:7;28139:23;28135:32;28132:2;;;-1:-1;;28170:12;28132:2;-1:-1;7255:13;;28126:186;-1:-1;28126:186::o;28319:491::-;;;;28457:2;28445:9;28436:7;28432:23;28428:32;28425:2;;;-1:-1;;28463:12;28425:2;7120:6;7107:20;28515:63;;28615:2;28658:9;28654:22;72:20;97:33;124:5;97:33;:::i;28817:360::-;;28941:2;28929:9;28920:7;28916:23;28912:32;28909:2;;;-1:-1;;28947:12;28909:2;28998:17;28992:24;29036:18;29028:6;29025:30;29022:2;;;-1:-1;;29058:12;29022:2;29088:73;29153:7;29144:6;29133:9;29129:22;29088:73;:::i;29184:721::-;;;;;29348:3;29336:9;29327:7;29323:23;29319:33;29316:2;;;-1:-1;;29355:12;29316:2;29413:17;29400:31;29451:18;29443:6;29440:30;29437:2;;;-1:-1;;29473:12;29437:2;29503:62;29557:7;29548:6;29537:9;29533:22;29503:62;:::i;:::-;29493:72;;;29602:2;29645:9;29641:22;72:20;97:33;124:5;97:33;:::i;29912:261::-;;30026:2;30014:9;30005:7;30001:23;29997:32;29994:2;;;-1:-1;;30032:12;29994:2;9420:6;9414:13;9432:32;9458:5;9432:32;:::i;30180:452::-;;;30326:9;30317:7;30313:23;30338:3;30313:23;30309:33;30306:2;;;-1:-1;;30345:12;30306:2;9420:6;9414:13;9432:32;9458:5;9432:32;:::i;:::-;30397:73;-1:-1;10794:4;-1:-1;;10773:19;;10769:30;10766:2;;;-1:-1;;10802:12;10766:2;;10830:20;10794:4;10830:20;:::i;:::-;30507:2;30588:9;30584:22;220:13;238:33;265:5;238:33;:::i;:::-;10914:86;;11146:22;;;7530:13;7548:32;7530:13;7548:32;:::i;:::-;30507:2;11097:16;;11090:85;10794:4;11320:22;;7530:13;7548:32;7530:13;7548:32;:::i;:::-;11146:22;11271:16;;11264:85;30300:332;;11275:5;;-1:-1;30300:332;;-1:-1;;30300:332::o;30639:805::-;;;;;30832:9;30823:7;30819:23;30844:3;30819:23;30815:33;30812:2;;;-1:-1;;30851:12;30812:2;10081:4;10060:19;10056:30;10053:2;;;-1:-1;;10089:12;10053:2;;10117:20;10081:4;10117:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;10201:75;;10358:2;10411:22;;7384:20;7409:32;7384:20;7409:32;:::i;:::-;10358:2;10373:16;;10366:74;10521:2;10574:22;;7384:20;7409:32;7384:20;7409:32;:::i;:::-;10521:2;10536:16;;10529:74;10540:5;-1:-1;10081:4;31068:22;;9268:20;9293:32;9268:20;9293:32;:::i;:::-;31038:62;-1:-1;31137:3;31176:22;;9268:20;9293:32;9268:20;9293:32;:::i;:::-;31146:62;-1:-1;31273:3;31258:19;;31245:33;31298:18;31287:30;;31284:2;;;-1:-1;;31320:12;31451:317;;31593:2;31581:9;31572:7;31568:23;31564:32;31561:2;;;-1:-1;;31599:12;31561:2;11573:20;31593:2;11573:20;:::i;:::-;8948:6;8942:13;80456:1;80449:5;80446:12;80436:2;;-1:-1;;80462:12;80436:2;11657:102;;11825:2;11890:22;;;7255:13;11840:16;;;11833:86;12003:2;12068:22;;;15110:13;12018:16;;;12011:86;;;;-1:-1;11664:16;31555:213;-1:-1;31555:213::o;31775:763::-;;;;31963:2;31951:9;31942:7;31938:23;31934:32;31931:2;;;-1:-1;;31969:12;31931:2;32027:17;32014:31;32065:18;;32057:6;32054:30;32051:2;;;-1:-1;;32087:12;32051:2;32117:76;32185:7;32176:6;32165:9;32161:22;32117:76;:::i;:::-;32107:86;;32258:2;32247:9;32243:18;32230:32;32216:46;;32065:18;32274:6;32271:30;32268:2;;;-1:-1;;32304:12;32268:2;;32334:62;32388:7;32379:6;32368:9;32364:22;32334:62;:::i;:::-;32324:72;;;32433:2;32494:9;32490:22;8760:20;8785:51;8830:5;8785:51;:::i;32815:753::-;;;;;32995:3;32983:9;32974:7;32970:23;32966:33;32963:2;;;-1:-1;;33002:12;32963:2;14975:6;14962:20;33054:63;;33154:2;33197:9;33193:22;72:20;97:33;124:5;97:33;:::i;34399:103::-;77183:42;77172:54;34460:37;;34454:48::o;34660:690::-;;34853:5;73223:12;74473:6;74468:3;74461:19;74510:4;;74505:3;74501:14;34865:93;;74510:4;35029:5;72574:14;-1:-1;35068:260;35093:6;35090:1;35087:13;35068:260;;;35154:13;;77183:42;77172:54;34460:37;;33729:14;;;;73942;;;;35115:1;35108:9;35068:260;;;-1:-1;35334:10;;34784:566;-1:-1;;;;;34784:566::o;35389:690::-;;35582:5;73223:12;74473:6;74468:3;74461:19;74510:4;;74505:3;74501:14;35594:93;;74510:4;35758:5;72574:14;-1:-1;35797:260;35822:6;35819:1;35816:13;35797:260;;;35883:13;;38268:37;;33911:14;;;;73942;;;;35844:1;35837:9;35797:260;;39002:323;;39134:5;73223:12;74473:6;74468:3;74461:19;39217:52;39262:6;74510:4;74505:3;74501:14;74510:4;39243:5;39239:16;39217:52;:::i;:::-;79033:2;79013:14;-1:-1;;79009:28;39281:39;;;;74510:4;39281:39;;39082:243;-1:-1;;39082:243::o;42284:678::-;42504:23;;77183:42;77172:54;34460:37;;42696:4;42685:16;;;42679:23;76223:66;76212:78;;;42754:14;;;38496:36;;;;42868:4;42857:16;;;42851:23;76212:78;42926:14;;38496:36;42404:558::o;43036:582::-;;43266:16;43260:23;38275:3;38268:37;43437:4;43430:5;43426:16;43420:23;43187:4;43437;43467:3;43463:14;43456:38;43509:71;43187:4;43182:3;43178:14;43561:12;43509:71;:::i;43680:2796::-;;43827:6;43932:63;43980:14;43909:16;43903:23;43932:63;:::i;:::-;44082:4;44075:5;44071:16;44065:23;44094:63;44082:4;44146:3;44142:14;44128:12;44094:63;:::i;:::-;;44251:4;44244:5;44240:16;44234:23;44263:63;44251:4;44315:3;44311:14;44297:12;44263:63;:::i;:::-;;44414:4;44407:5;44403:16;44397:23;44426:63;44414:4;44478:3;44474:14;44460:12;44426:63;:::i;:::-;;44580:4;44573:5;44569:16;44563:23;44580:4;44644:3;44640:14;38268:37;44746:4;44739:5;44735:16;44729:23;44746:4;44810:3;44806:14;38268:37;44904:4;44897:5;44893:16;44887:23;44904:4;44968:3;44964:14;38268:37;45062:4;45055:5;45051:16;45045:23;45062:4;45126:3;45122:14;38268:37;45233:6;;45226:5;45222:18;45216:25;45233:6;45299:3;45295:16;38268:37;;45391:6;;45384:5;45380:18;45374:25;45391:6;45457:3;45453:16;38268:37;;45559:6;;45552:5;45548:18;45542:25;43827:6;45559;45591:3;45587:16;45580:40;45635:71;43827:6;43822:3;43818:16;45687:12;45635:71;:::i;:::-;45627:79;;;;45801:6;;45794:5;45790:18;45784:25;45857:3;45851:4;45847:14;45801:6;45833:3;45829:16;45822:40;45877:71;45943:4;45929:12;45877:71;:::i;:::-;45869:79;;;;46046:6;;46039:5;46035:18;46029:25;46102:3;46096:4;46092:14;46046:6;46078:3;46074:16;46067:40;46122:71;46188:4;46174:12;46122:71;:::i;:::-;46114:79;;;;46291:6;;46284:5;46280:18;46274:25;46347:3;46341:4;46337:14;46291:6;46323:3;46319:16;46312:40;46367:71;46433:4;46419:12;46367:71;:::i;46713:291::-;;78596:6;78591:3;78586;78573:30;78634:16;;78627:27;;;78634:16;46857:147;-1:-1;46857:147::o;47011:271::-;;39842:5;73223:12;39953:52;39998:6;39993:3;39986:4;39979:5;39975:16;39953:52;:::i;:::-;40017:16;;;;;47145:137;-1:-1;;47145:137::o;47289:222::-;77183:42;77172:54;;;;34460:37;;47416:2;47401:18;;47387:124::o;47518:333::-;77183:42;77172:54;;;34460:37;;77172:54;;47837:2;47822:18;;34460:37;47673:2;47658:18;;47644:207::o;47858:444::-;77183:42;77172:54;;;34460:37;;77172:54;;;48205:2;48190:18;;34460:37;77172:54;;;48288:2;48273:18;;34460:37;48041:2;48026:18;;48012:290::o;48309:704::-;;77183:42;;75856:5;77172:54;34467:3;34460:37;77183:42;75856:5;77172:54;48735:2;48724:9;48720:18;34460:37;77183:42;75856:5;77172:54;48818:2;48807:9;48803:18;34460:37;;48570:3;48855:2;48844:9;48840:18;48833:48;48895:108;48570:3;48559:9;48555:19;48989:6;48895:108;:::i;49020:556::-;77183:42;77172:54;;;34460:37;;77172:54;;;49396:2;49381:18;;34460:37;77172:54;;49479:2;49464:18;;34460:37;49562:2;49547:18;;38268:37;;;;49231:3;49216:19;;49202:374::o;49583:592::-;;77183:42;;75856:5;77172:54;34467:3;34460:37;77183:42;75856:5;77172:54;49980:2;49969:9;49965:18;34460:37;;49816:2;50017;50006:9;50002:18;49995:48;50057:108;49816:2;49805:9;49801:18;50151:6;50057:108;:::i;50182:628::-;;77183:42;;75856:5;77172:54;34467:3;34460:37;77183:42;75856:5;77172:54;50570:2;50559:9;50555:18;34460:37;;38077:5;76046:13;76039:21;50647:2;50636:9;50632:18;38050:34;50405:3;50684:2;50673:9;50669:18;50662:48;50724:76;50405:3;50394:9;50390:19;50786:6;50724:76;:::i;50817:444::-;77183:42;77172:54;;;34460:37;;77172:54;;;;51164:2;51149:18;;34460:37;51247:2;51232:18;;38268:37;;;;51000:2;50985:18;;50971:290::o;51268:768::-;;77183:42;;34490:5;77172:54;34467:3;34460:37;77183:42;34490:5;77172:54;51698:2;51687:9;51683:18;34460:37;;38298:5;51781:2;51770:9;51766:18;38268:37;78478:24;51872:2;51861:9;51857:18;41106:58;51533:3;51909;51898:9;51894:19;51887:49;51950:76;51533:3;51522:9;51518:19;52012:6;51950:76;:::i;:::-;51942:84;51504:532;-1:-1;;;;;;;51504:532::o;52043:740::-;;77183:42;34490:5;77172:54;34467:3;34460:37;52326:2;52444;52433:9;52429:18;52422:48;52484:108;52326:2;52315:9;52311:18;52578:6;52484:108;:::i;:::-;52640:9;52634:4;52630:20;52625:2;52614:9;52610:18;52603:48;52665:108;52768:4;52759:6;52665:108;:::i;52790:417::-;;77183:42;75856:5;77172:54;34467:3;34460:37;52963:2;53081;53070:9;53066:18;53059:48;53121:76;52963:2;52952:9;52948:18;53183:6;53121:76;:::i;53214:876::-;;77183:42;75856:5;77172:54;34467:3;34460:37;76627:53;76674:5;76627:53;:::i;:::-;78341:38;53714:2;53703:9;53699:18;40836:62;53537:3;53751:2;53740:9;53736:18;53729:48;53791:108;53537:3;53526:9;53522:19;53885:6;53791:108;:::i;:::-;53947:9;53941:4;53937:20;53932:2;53921:9;53917:18;53910:48;53972:108;54075:4;54066:6;53972:108;:::i;54097:1644::-;;54644:3;77183:42;;34490:5;77172:54;34467:3;34460:37;76627:53;76674:5;76627:53;:::i;:::-;78341:38;54821:2;54810:9;54806:18;40836:62;54644:3;54858:2;54847:9;54843:18;54836:48;54898:108;54644:3;54633:9;54629:19;54992:6;54898:108;:::i;:::-;54890:116;;55054:9;55048:4;55044:20;55039:2;55028:9;55024:18;55017:48;55079:108;55182:4;55173:6;55079:108;:::i;:::-;77172:54;;;55266:3;55251:19;;34460:37;55071:116;-1:-1;76627:53;76674:5;76627:53;:::i;:::-;78341:38;55362:3;55351:9;55347:19;40836:62;55416:9;55410:4;55406:20;55400:3;55389:9;55385:19;55378:49;55441:108;55544:4;55535:6;55441:108;:::i;:::-;55433:116;;55598:9;55592:4;55588:20;55582:3;55571:9;55567:19;55560:49;55623:108;55726:4;55717:6;55623:108;:::i;:::-;55615:116;54615:1126;-1:-1;;;;;;;;;;;54615:1126::o;55748:333::-;77183:42;77172:54;;;;34460:37;;56067:2;56052:18;;38268:37;55903:2;55888:18;;55874:207::o;56088:481::-;;56293:2;56314:17;56307:47;56368:108;56293:2;56282:9;56278:18;56462:6;56368:108;:::i;:::-;56360:116;;38298:5;56555:2;56544:9;56540:18;38268:37;56264:305;;;;;:::o;56576:486::-;56811:2;56825:47;;;73223:12;;56796:18;;;74461:19;;;56576:486;;56811:2;74501:14;;;;;;36645:17;;;36636:27;;;;72574:14;;;56576:486;36802:417;36827:6;36824:1;36821:13;36802:417;;;36879:20;56800:9;36883:4;36879:20;;36874:3;36867:33;36934:6;36928:13;41865:16;41859:23;74501:14;41902;41895:38;41948:71;74501:14;41788:3;41784:14;42000:12;41948:71;:::i;:::-;42096:16;;;42090:23;76046:13;76039:21;42161:14;;;38050:34;;;;37198:14;;;;41940:79;-1:-1;73942:14;;;;36849:1;36842:9;36802:417;;;-1:-1;56878:174;;56782:280;-1:-1;;;;;;;;56782:280::o;57069:370::-;;57246:2;57267:17;57260:47;57321:108;57246:2;57235:9;57231:18;57415:6;57321:108;:::i;57446:210::-;76046:13;;76039:21;38050:34;;57567:2;57552:18;;57538:118::o;57663:580::-;;38077:5;76046:13;76039:21;38057:3;38050:34;77183:42;75856:5;77172:54;58048:2;58037:9;58033:18;34460:37;57890:2;58085;58074:9;58070:18;58063:48;58125:108;57890:2;57879:9;57875:18;58219:6;58125:108;:::i;58250:222::-;38268:37;;;58377:2;58362:18;;58348:124::o;58479:444::-;38268:37;;;77183:42;77172:54;;;58826:2;58811:18;;34460:37;77172:54;58909:2;58894:18;;34460:37;58662:2;58647:18;;58633:290::o;58930:528::-;;38298:5;38275:3;38268:37;77183:42;75856:5;77172:54;59295:2;59284:9;59280:18;34460:37;59131:2;59332;59321:9;59317:18;59310:48;59372:76;59131:2;59120:9;59116:18;59434:6;59372:76;:::i;59465:676::-;;38298:5;38275:3;38268:37;59716:2;59834;59823:9;59819:18;59812:48;59874:76;59716:2;59705:9;59701:18;59936:6;59874:76;:::i;60148:218::-;76223:66;76212:78;;;;38496:36;;60273:2;60258:18;;60244:122::o;60373:306::-;;60518:2;60539:17;60532:47;60593:76;60518:2;60507:9;60503:18;60655:6;60593:76;:::i;60686:640::-;;60915:3;60937:17;60930:47;60991:76;60915:3;60904:9;60900:19;61053:6;60991:76;:::i;:::-;77183:42;77172:54;;;61146:2;61131:18;;34460:37;77172:54;;;;61229:2;61214:18;;34460:37;61312:2;61297:18;38268:37;60983:84;60886:440;-1:-1;;60886:440::o;61333:519::-;;77183:42;75856:5;77172:54;40141:3;40134:68;61557:2;61694;61683:9;61679:18;61672:48;61734:108;61557:2;61546:9;61542:18;61828:6;61734:108;:::i;61859:480::-;62060:2;62045:18;;76627:53;76674:5;76627:53;:::i;:::-;40474:68;;;62242:2;62227:18;;38268:37;;;;62325:2;62310:18;;;38268:37;62031:308;:::o;62346:510::-;62562:2;62547:18;;79272:1;79262:12;;79252:2;;79278:9;62863:436;77088:2;77077:21;;;40979:36;;77077:21;;;;63202:2;63187:18;;40979:36;63285:2;63270:18;;38268:37;;;;63042:2;63027:18;;63013:286::o;63306:438::-;77088:2;77077:21;;;40979:36;;63513:3;63498:19;;63608:126;63730:2;63715:18;;63706:6;63608:126;:::i;63751:416::-;63951:2;63965:47;;;41401:2;63936:18;;;74461:19;41437:34;74501:14;;;41417:55;41506:7;41492:12;;;41485:29;41533:12;;;63922:245::o;64174:806::-;;64500:125;64607:17;64598:6;64500:125;:::i;:::-;41008:5;77088:2;77077:21;64702:2;64691:9;64687:18;40979:36;41008:5;77088:2;77077:21;64783:3;64772:9;64768:19;40979:36;64485:3;64821;64810:9;64806:19;64799:49;64862:108;64485:3;64474:9;64470:19;64956:6;64862:108;:::i;64987:740::-;;65270:2;65291:17;65284:47;65345:108;65270:2;65259:9;65255:18;65439:6;65345:108;:::i;:::-;65501:9;65495:4;65491:20;65486:2;65475:9;65471:18;65464:48;65526:108;65629:4;65620:6;65526:108;:::i;:::-;65518:116;;;38298:5;65713:2;65702:9;65698:18;38268:37;65241:486;;;;;;:::o;65734:362::-;;65907:2;65928:17;65921:47;65982:104;65907:2;65896:9;65892:18;66072:6;65982:104;:::i;66103:704::-;;66368:2;66389:17;66382:47;66443:104;66368:2;66357:9;66353:18;66533:6;66443:104;:::i;:::-;66595:9;66589:4;66585:20;66580:2;66569:9;66565:18;66558:48;66620:76;66691:4;66682:6;66620:76;:::i;:::-;66612:84;;;77183:42;75856:5;77172:54;66793:2;66782:9;66778:18;40134:68;66339:468;;;;;;:::o;67043:481::-;;38298:5;38275:3;38268:37;67248:2;67366;67355:9;67351:18;67344:48;67406:108;67248:2;67237:9;67233:18;67500:6;67406:108;:::i;67531:444::-;38268:37;;;67878:2;67863:18;;38268:37;;;;67961:2;67946:18;;38268:37;67714:2;67699:18;;67685:290::o;67982:780::-;38268:37;;;68414:2;68399:18;;38268:37;;;;68497:2;68482:18;;38268:37;;;;68580:2;68565:18;;38268:37;68663:3;68648:19;;38268:37;68747:3;68732:19;;38268:37;68249:3;68234:19;;68220:542::o;68769:506::-;;;68904:11;68891:25;68955:48;68979:8;68963:14;68959:29;68955:48;68935:18;68931:73;68921:2;;-1:-1;;69008:12;68921:2;69035:33;;69089:18;;;-1:-1;69127:18;69116:30;;69113:2;;;-1:-1;;69149:12;69113:2;68994:4;69177:13;;-1:-1;68963:14;69209:38;;;69199:49;;69196:2;;;69261:1;;69251:12;69196:2;68859:416;;;;;:::o;69282:256::-;69344:2;69338:9;69370:17;;;69445:18;69430:34;;69466:22;;;69427:62;69424:2;;;69502:1;;69492:12;69424:2;69344;69511:22;69322:216;;-1:-1;69322:216::o;69545:304::-;;69704:18;69696:6;69693:30;69690:2;;;-1:-1;;69726:12;69690:2;-1:-1;69771:4;69759:17;;;69824:15;;69627:222::o;71802:321::-;;71945:18;71937:6;71934:30;71931:2;;;-1:-1;;71967:12;71931:2;-1:-1;72044:4;72021:17;-1:-1;;72017:33;72108:4;72098:15;;71868:255::o;78669:268::-;78734:1;78741:101;78755:6;78752:1;78749:13;78741:101;;;78822:11;;;78816:18;78803:11;;;78796:39;78777:2;78770:10;78741:101;;;78857:6;78854:1;78851:13;78848:2;;;78734:1;78913:6;78908:3;78904:16;78897:27;78848:2;;78718:219;;;:::o;79050:111::-;79139:1;79132:5;79129:12;79119:2;;79145:9;79119:2;79113:48;:::o;79413:117::-;77183:42;79500:5;77172:54;79475:5;79472:35;79462:2;;79521:1;;79511:12;79677:111;79758:5;76046:13;76039:21;79736:5;79733:32;79723:2;;79779:1;;79769:12;79919:115;76223:66;80004:5;76212:78;79980:5;79977:34;79967:2;;80025:1;;80015:12;80609:115;80694:5;77088:2;77077:21;80670:5;80667:34;80657:2;;80715:1;;80705:12"
            }
        }
    },
    "sourceTreeHashHex": "0xf403e65b7d7dbcb00e11bb8f218148bf213976cf5e609a7be449ed658d5ce87e",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 7
        },
        "./BalancerSampler.sol": {
            "id": 2
        },
        "./interfaces/IBalancer.sol": {
            "id": 22
        },
        "./BancorSampler.sol": {
            "id": 3
        },
        "./DeploymentConstants.sol": {
            "id": 6
        },
        "./interfaces/IBancor.sol": {
            "id": 23
        },
        "./CurveSampler.sol": {
            "id": 4
        },
        "./interfaces/ICurve.sol": {
            "id": 24
        },
        "./ApproximateBuys.sol": {
            "id": 0
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 39
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 40
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 43
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 44
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 42
        },
        "./SamplerUtils.sol": {
            "id": 15
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 37
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 38
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 41
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 36
        },
        "./DODOSampler.sol": {
            "id": 5
        },
        "./Eth2DaiSampler.sol": {
            "id": 8
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 25
        },
        "./KyberSampler.sol": {
            "id": 9
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 26
        },
        "./LiquidityProviderSampler.sol": {
            "id": 10
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 45
        },
        "./MultiBridgeSampler.sol": {
            "id": 13
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 29
        },
        "./MStableSampler.sol": {
            "id": 11
        },
        "./interfaces/IMStable.sol": {
            "id": 27
        },
        "./MooniswapSampler.sol": {
            "id": 12
        },
        "./interfaces/IMooniswap.sol": {
            "id": 28
        },
        "./NativeOrderSampler.sol": {
            "id": 14
        },
        "./ShellSampler.sol": {
            "id": 16
        },
        "./interfaces/IShell.sol": {
            "id": 30
        },
        "./SushiSwapSampler.sol": {
            "id": 17
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 32
        },
        "./TwoHopSampler.sol": {
            "id": 18
        },
        "./UniswapSampler.sol": {
            "id": 19
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 31
        },
        "./UniswapV2Sampler.sol": {
            "id": 20
        },
        "./UtilitySampler.sol": {
            "id": 21
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SushiSwapSampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    LiquidityProviderSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SushiSwapSampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        view\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).staticcall(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IBancor.sol\";\n\n\n\ncontract BancorSampler is\n        DeploymentConstants\n{\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n    address constant private BANCOR_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param paths The paths to check for Bancor. Only the best is used\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        address[][] memory paths,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        bancorNetwork = _getBancorNetwork();\n        if (paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < paths.length; i++) {\n            if (paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param paths The paths to check for Bancor. Only the best is used\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        address[][] memory paths,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _getBancorNetwork()\n        private\n        view\n        returns (address)\n    {\n        IBancorRegistry registry = IBancorRegistry(_getBancorRegistryAddress());\n        return registry.getAddress(registry.BANCOR_NETWORK());\n    }\n}\n",
        "./DeploymentConstants.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ncontract DeploymentConstants {\n\n    // solhint-disable separate-by-one-line-in-contract\n\n    // Mainnet addresses ///////////////////////////////////////////////////////\n    /// @dev Mainnet address of the WETH contract.\n    address constant private WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    /// @dev Mainnet address of the KyberNetworkProxy contract.\n    address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x9AAb3f75489902f3a48495025729a0AF77d4b11e;\n    /// @dev Mainnet address of the KyberHintHandler contract.\n    address constant private KYBER_HINT_HANDLER_ADDRESS = 0xa1C0Fa73c39CFBcC11ec9Eb1Afc665aba9996E2C;\n    /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95;\n    /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    address constant private ETH2DAI_ADDRESS = 0x794e6e91555438aFc3ccF1c5076A74F42133d08D;\n    /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x8ED95d1746bf1E4dAb58d8ED4724f1Ef95B20Db0;\n    ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    address constant private DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n    /// @dev Mainnet address of the `Chai` contract\n    address constant private CHAI_ADDRESS = 0x06AF07097C9Eeb7fD685c692751D5C66dB49c215;\n    /// @dev Mainnet address of the 0x DevUtils contract.\n    address constant private DEV_UTILS_ADDRESS = 0x74134CF88b21383713E096a5ecF59e297dc7f547;\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    /// @dev Mainnet address of the dYdX contract.\n    address constant private DYDX_ADDRESS = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\n    /// @dev Mainnet address of the GST2 contract\n    address constant private GST_ADDRESS = 0x0000000000b3F879cb30FE243b4Dfee438691c04;\n    /// @dev Mainnet address of the GST Collector\n    address constant private GST_COLLECTOR_ADDRESS = 0x000000D3b08566BE75A6DB803C03C85C0c1c5B96;\n    /// @dev Mainnet address of the mStable mUSD contract.\n    address constant private MUSD_ADDRESS = 0xe2f2a5C287993345a840Db3B0845fbC70f5935a5;\n    /// @dev Mainnet address of the Mooniswap Registry contract\n    address constant private MOONISWAP_REGISTRY = 0x71CD6666064C3A1354a3B4dca5fA1E2D3ee7D303;\n    /// @dev Mainnet address of the Shell contract\n    address constant private SHELL_CONTRACT = 0x2E703D658f8dd21709a7B458967aB4081F8D3d05;\n    /// @dev Mainnet address of the DODO Registry (ZOO) contract\n    address constant private DODO_REGISTRY = 0x3A97247DF274a17C59A3bd12735ea3FcDFb49950;\n    /// @dev Mainnet address of the DODO Helper contract\n    address constant private DODO_HELPER = 0x533dA777aeDCE766CEAe696bf90f8541A4bA80Eb;\n    /// @dev Mainnet address of the Bancor Registry contract\n    address constant private BANCOR_REGISTRY = 0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4;\n\n    // // Ropsten addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0xd719c34261e099Fdb33030ac8909d5788D3039C4;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0x9c83dCE8CA20E9aAF9D3efc003b2ea62aBC08351;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xb344afeD348de15eb4a9e180205A2B0739628339;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0xC812AF3f3fBC62F76ea4262576EC0f49dB8B7f1c;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = 0x4E1000616990D83e56f4b5fC6CC8602DcfD20459;\n\n    // // Rinkeby addresses ///////////////////////////////////////////////////////\n    // /// @dev Mainnet address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xc778417E063141139Fce010982780140Aa0cD5Ab;\n    // /// @dev Mainnet address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x0d5371e5EE23dec7DF251A8957279629aa79E9C5;\n    // /// @dev Mainnet address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36;\n    // /// @dev Mainnet address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Mainnet address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0xA2AA4bEFED748Fba27a3bE7Dfd2C4b2c6DB1F49B;\n    // ///@dev Mainnet address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Mainnet address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x46B5BC959e8A754c0256FFF73bF34A52Ad5CdfA9;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Mainnet address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Mainnet address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    // // Kovan addresses /////////////////////////////////////////////////////////\n    // /// @dev Kovan address of the WETH contract.\n    // address constant private WETH_ADDRESS = 0xd0A1E359811322d97991E03f863a0C30C2cF029C;\n    // /// @dev Kovan address of the KyberNetworkProxy contract.\n    // address constant private KYBER_NETWORK_PROXY_ADDRESS = 0x692f391bCc85cefCe8C237C01e1f636BbD70EA4D;\n    // /// @dev Kovan address of the `UniswapExchangeFactory` contract.\n    // address constant private UNISWAP_EXCHANGE_FACTORY_ADDRESS = 0xD3E51Ef092B2845f10401a0159B2B96e8B6c3D30;\n    // /// @dev Kovan address of the `UniswapV2Router01` contract.\n    // address constant private UNISWAP_V2_ROUTER_01_ADDRESS = 0xf164fC0Ec4E93095b804a4795bBe1e041497b92a;\n    // /// @dev Kovan address of the Eth2Dai `MatchingMarket` contract.\n    // address constant private ETH2DAI_ADDRESS = 0xe325acB9765b02b8b418199bf9650972299235F4;\n    // /// @dev Kovan address of the `ERC20BridgeProxy` contract\n    // address constant private ERC20_BRIDGE_PROXY_ADDRESS = 0x3577552C1Fb7A44aD76BeEB7aB53251668A21F8D;\n    // /// @dev Kovan address of the `Chai` contract\n    // address constant private CHAI_ADDRESS = address(0);\n    // /// @dev Kovan address of the `Dai` (multi-collateral) contract\n    // address constant private DAI_ADDRESS = 0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa;\n    // /// @dev Kovan address of the 0x DevUtils contract.\n    // address constant private DEV_UTILS_ADDRESS = 0x9402639A828BdF4E9e4103ac3B69E1a6E522eB59;\n    // /// @dev Kyber ETH pseudo-address.\n    // address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    // /// @dev Kovan address of the dYdX contract.\n    // address constant private DYDX_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST2 contract\n    // address constant private GST_ADDRESS = address(0);\n    // /// @dev Kovan address of the GST Collector\n    // address constant private GST_COLLECTOR_ADDRESS = address(0);\n    // /// @dev Mainnet address of the mStable mUSD contract.\n    // address constant private MUSD_ADDRESS = address(0);\n\n    /// @dev Overridable way to get the `KyberNetworkProxy` address.\n    /// @return kyberAddress The `IKyberNetworkProxy` address.\n    function _getKyberNetworkProxyAddress()\n        virtual\n        internal\n        view\n        returns (address kyberAddress)\n    {\n        return KYBER_NETWORK_PROXY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `KyberHintHandler` address.\n    /// @return hintHandlerAddress The `IKyberHintHandler` address.\n    function _getKyberHintHandlerAddress()\n        virtual\n        internal\n        view\n        returns (address hintHandlerAddress)\n    {\n        return KYBER_HINT_HANDLER_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the WETH address.\n    /// @return wethAddress The WETH address.\n    function _getWethAddress()\n        internal\n        view\n        returns (address wethAddress)\n    {\n        return WETH_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapExchangeFactory` address.\n    /// @return uniswapAddress The `UniswapExchangeFactory` address.\n    function _getUniswapExchangeFactoryAddress()\n        virtual\n        internal\n        view\n        returns (address uniswapAddress)\n    {\n        return UNISWAP_EXCHANGE_FACTORY_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the `UniswapV2Router01` address.\n    /// @return uniswapRouterAddress The `UniswapV2Router01` address.\n    function _getUniswapV2Router01Address()\n        virtual\n        internal\n        view\n        returns (address uniswapRouterAddress)\n    {\n        return UNISWAP_V2_ROUTER_01_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Eth2Dai `MatchingMarket` contract.\n    /// @return eth2daiAddress The Eth2Dai `MatchingMarket` contract.\n    function _getEth2DaiAddress()\n        virtual\n        internal\n        view\n        returns (address eth2daiAddress)\n    {\n        return ETH2DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `ERC20BridgeProxy` contract.\n    /// @return erc20BridgeProxyAddress The `ERC20BridgeProxy` contract.\n    function _getERC20BridgeProxyAddress()\n        internal\n        view\n        returns (address erc20BridgeProxyAddress)\n    {\n        return ERC20_BRIDGE_PROXY_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Dai` contract.\n    /// @return daiAddress The `Dai` contract.\n    function _getDaiAddress()\n        internal\n        view\n        returns (address daiAddress)\n    {\n        return DAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the `Chai` contract.\n    /// @return chaiAddress The `Chai` contract.\n    function _getChaiAddress()\n        internal\n        view\n        returns (address chaiAddress)\n    {\n        return CHAI_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the 0x `DevUtils` contract address.\n    /// @return devUtils The 0x `DevUtils` contract address.\n    function _getDevUtilsAddress()\n        internal\n        view\n        returns (address devUtils)\n    {\n        return DEV_UTILS_ADDRESS;\n    }\n\n    /// @dev Overridable way to get the DyDx contract.\n    /// @return dydxAddress exchange The DyDx exchange contract.\n    function _getDydxAddress()\n        internal\n        view\n        returns (address dydxAddress)\n    {\n        return DYDX_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST2 contract address.\n    /// @return gst The GST contract.\n    function _getGstAddress()\n        internal\n        view\n        returns (address gst)\n    {\n        return GST_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the GST Collector address.\n    /// @return collector The GST collector address.\n    function _getGstCollectorAddress()\n        internal\n        view\n        returns (address collector)\n    {\n        return GST_COLLECTOR_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the mStable mUSD address.\n    /// @return musd The mStable mUSD address.\n    function _getMUsdAddress()\n        internal\n        view\n        returns (address musd)\n    {\n        return MUSD_ADDRESS;\n    }\n\n    /// @dev An overridable way to retrieve the Mooniswap registry address.\n    /// @return registry The Mooniswap registry address.\n    function _getMooniswapAddress()\n        internal\n        view\n        returns (address)\n    {\n        return MOONISWAP_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the Shell contract address.\n    /// @return registry The Shell contract address.\n    function _getShellAddress()\n        internal\n        view\n        returns (address registry)\n    {\n        return SHELL_CONTRACT;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Registry contract address.\n    /// @return registry The DODO Registry contract address.\n    function _getDODORegistryAddress()\n        internal\n        view\n        returns (address registry)\n    {\n        return DODO_REGISTRY;\n    }\n\n    /// @dev An overridable way to retrieve the DODO Helper contract address.\n    /// @return registry The DODO Helper contract address.\n    function _getDODOHelperAddress()\n        internal\n        view\n        returns (address registry)\n    {\n        return DODO_HELPER;\n    }\n\n    /// @dev An overridable way to retrieve the Bancor Registry contract address.\n    /// @return registry The Bancor registry contract address.\n    function _getBancorRegistryAddress()\n        internal\n        view\n        returns (address registry)\n    {\n        return BANCOR_REGISTRY;\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (sellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = sellAmount;\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(_getDODORegistryAddress()).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(_getDODORegistryAddress()).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken), // taker token data\n                abi.encode(makerToken, pool, baseToken), // maker token data\n                takerTokenAmounts[i]\n            );\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(_getDODORegistryAddress()).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(_getDODORegistryAddress()).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken),\n                takerTokenData: abi.encode(takerToken, pool, baseToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken) = abi.decode(\n            takerTokenData,\n            (address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(_getDODOHelperAddress()).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(_getEth2DaiAddress()).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(_getEth2DaiAddress()).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param reserveOffset The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        uint256 reserveOffset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(takerToken, makerToken, reserveOffset);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        hint = this.encodeKyberHint(reserveId, takerToken, makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                hint,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            // Return early if the source has no liquidity\n            if (value == 0) {\n                return (reserveId, hint, makerTokenAmounts);\n            }\n            makerTokenAmounts[i] = value;\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param reserveOffset The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        uint256 reserveOffset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(takerToken, makerToken, reserveOffset);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        hint = this.encodeKyberHint(reserveId, takerToken, makerToken);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, hint),\n                takerTokenData: abi.encode(takerToken, hint),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(_getKyberHintHandlerAddress());\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == _getWethAddress()) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == _getWethAddress()) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, bytes memory hint) =\n            abi.decode(makerTokenData, (address, bytes));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, bytes));\n        try\n            this.sampleSellFromKyberNetwork\n                (hint, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        bytes memory hint,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(_getKyberNetworkProxyAddress()).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        address takerToken,\n        address makerToken,\n        uint256 reserveOffset\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(_getKyberHintHandlerAddress());\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == _getWethAddress() ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\ninterface ILiquidityProvider {\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        address inputToken,\n        address outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        address outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        address inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        address inputToken,\n        address outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(_getMUsdAddress()).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (bool, string memory, uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable mUSD contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken),\n                takerTokenData: abi.encode(takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken) =\n            abi.decode(takerTokenData, (address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (bool, string memory, uint256 output);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    DeploymentConstants,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        address mooniswapTakerToken = takerToken == _getWethAddress() ? address(0) : takerToken;\n        address mooniswapMakerToken = makerToken == _getWethAddress() ? address(0) : makerToken;\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                mooniswapTakerToken,\n                mooniswapMakerToken,\n                takerTokenAmounts[i]\n            );\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        address mooniswapTakerToken = takerToken == _getWethAddress() ? address(0) : takerToken;\n        address mooniswapMakerToken = makerToken == _getWethAddress() ? address(0) : makerToken;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, mooniswapMakerToken),\n                takerTokenData: abi.encode(registry, mooniswapTakerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    /// @dev V3 Order structure.\n    struct Order {\n        // Address that created the order.\n        address makerAddress;\n        // Address that is allowed to fill the order.\n        // If set to 0, any address is allowed to fill the order.\n        address takerAddress;\n        // Address that will recieve fees when order is filled.\n        address feeRecipientAddress;\n        // Address that is allowed to call Exchange contract methods that affect this order.\n        // If set to 0, any address is allowed to call these methods.\n        address senderAddress;\n        // Amount of makerAsset being offered by maker. Must be greater than 0.\n        uint256 makerAssetAmount;\n        // Amount of takerAsset being bid on by maker. Must be greater than 0.\n        uint256 takerAssetAmount;\n        // Fee paid to feeRecipient by maker when order is filled.\n        uint256 makerFee;\n        // Fee paid to feeRecipient by taker when order is filled.\n        uint256 takerFee;\n        // Timestamp in seconds at which order expires.\n        uint256 expirationTimeSeconds;\n        // Arbitrary number to facilitate uniqueness of the order's hash.\n        uint256 salt;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring makerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes makerFeeAssetData;\n        // Encoded data that can be decoded by a specified proxy contract when transferring takerFeeAsset.\n        // The leading bytes4 references the id of the asset proxy.\n        bytes takerFeeAssetData;\n    }\n\n    // A valid order remains fillable until it is expired, fully filled, or cancelled.\n    // An order's status is unaffected by external factors, like account balances.\n    enum OrderStatus {\n        INVALID,                     // Default value\n        INVALID_MAKER_ASSET_AMOUNT,  // Order does not have a valid maker asset amount\n        INVALID_TAKER_ASSET_AMOUNT,  // Order does not have a valid taker asset amount\n        FILLABLE,                    // Order is fillable\n        EXPIRED,                     // Order has already expired\n        FULLY_FILLED,                // Order is fully filled\n        CANCELLED                    // Order has been cancelled\n    }\n\n    /// @dev Order information returned by `getOrderInfo()`.\n    struct OrderInfo {\n        OrderStatus orderStatus;              // Status that describes order's validity and fillability.\n        bytes32 orderHash;                    // EIP712 typed data hash of the order (see LibOrder.getTypedDataHash).\n        uint256 orderTakerAssetFilledAmount;  // Amount of order that has already been filled.\n    }\n\n    /// @dev Gets information about an order: status, hash, and amount filled.\n    /// @param order Order to gather information on.\n    /// @return orderInfo Information about the order and its state.\n    function getOrderInfo(IExchange.Order calldata order)\n        external\n        view\n        returns (IExchange.OrderInfo memory orderInfo);\n\n    /// @dev Verifies that a hash has been signed by the given signer.\n    /// @param hash Any 32-byte hash.\n    /// @param signature Proof that the hash has been signed by signer.\n    /// @return isValid `true` if the signature is valid for the given hash and signer.\n    function isValidHashSignature(\n        bytes32 hash,\n        address signerAddress,\n        bytes calldata signature\n    )\n        external\n        view\n        returns (bool isValid);\n\n    /// @dev Gets an asset proxy.\n    /// @param assetProxyId Id of the asset proxy.\n    /// @return The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered.\n    function getAssetProxy(bytes4 assetProxyId)\n        external\n        view\n        returns (address);\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev The Exchange ERC20Proxy ID.\n    bytes4 private constant ERC20_ASSET_PROXY_ID = 0xf47261b0;\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableTakerAssetAmounts(\n        IExchange.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V3 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getOrderFillableMakerAssetAmounts(\n        IExchange.Order[] memory orders,\n        bytes[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAssetAmount,\n                    orders[i].makerAssetAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getOrderFillableTakerAmount(\n        IExchange.Order memory order,\n        bytes memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.length == 0 ||\n            order.makerAssetAmount == 0 ||\n            order.takerAssetAmount == 0)\n        {\n            return 0;\n        }\n\n        IExchange.OrderInfo memory orderInfo = exchange.getOrderInfo(order);\n        if (orderInfo.orderStatus != IExchange.OrderStatus.FILLABLE) {\n            return 0;\n        }\n        if (!exchange.isValidHashSignature(orderInfo.orderHash, order.makerAddress, signature)) {\n            return 0;\n        }\n        address spender = exchange.getAssetProxy(ERC20_ASSET_PROXY_ID);\n        IERC20TokenV06 makerToken = _getTokenFromERC20AssetData(order.makerAssetData);\n        if (makerToken == IERC20TokenV06(0)) {\n            return 0;\n        }\n        IERC20TokenV06 makerFeeToken = order.makerFee > 0\n            ? _getTokenFromERC20AssetData(order.makerFeeAssetData)\n            : IERC20TokenV06(0);\n        uint256 remainingTakerAmount = order.takerAssetAmount\n            .safeSub(orderInfo.orderTakerAssetFilledAmount);\n        fillableTakerAmount = remainingTakerAmount;\n        // The total fillable maker amount is the remaining fillable maker amount\n        // PLUS maker fees, if maker fees are denominated in the maker token.\n        uint256 totalFillableMakerAmount = LibMathV06.safeGetPartialAmountFloor(\n            remainingTakerAmount,\n            order.takerAssetAmount,\n            makerFeeToken == makerToken\n                ? order.makerAssetAmount.safeAdd(order.makerFee)\n                : order.makerAssetAmount\n        );\n        // The spendable amount of maker tokens (by the maker) is the lesser of\n        // the maker's balance and the allowance they've granted to the ERC20Proxy.\n        uint256 spendableMakerAmount = LibSafeMathV06.min256(\n            makerToken.balanceOf(order.makerAddress),\n            makerToken.allowance(order.makerAddress, spender)\n        );\n        // Scale the fillable taker amount by the ratio of the maker's\n        // spendable maker amount over the total fillable maker amount.\n        if (spendableMakerAmount < totalFillableMakerAmount) {\n            fillableTakerAmount = LibMathV06.getPartialAmountCeil(\n                spendableMakerAmount,\n                totalFillableMakerAmount,\n                remainingTakerAmount\n            );\n        }\n        // If the maker fee is denominated in another token, constrain\n        // the fillable taker amount by how much the maker can pay of that token.\n        if (makerFeeToken != makerToken && makerFeeToken != IERC20TokenV06(0)) {\n            uint256 spendableExtraMakerFeeAmount = LibSafeMathV06.min256(\n                makerFeeToken.balanceOf(order.makerAddress),\n                makerFeeToken.allowance(order.makerAddress, spender)\n            );\n            if (spendableExtraMakerFeeAmount < order.makerFee) {\n                fillableTakerAmount = LibSafeMathV06.min256(\n                    fillableTakerAmount,\n                    LibMathV06.getPartialAmountCeil(\n                        spendableExtraMakerFeeAmount,\n                        order.makerFee,\n                        remainingTakerAmount\n                    )\n                );\n            }\n        }\n    }\n\n    function _getTokenFromERC20AssetData(bytes memory assetData)\n        private\n        pure\n        returns (IERC20TokenV06 token)\n    {\n        if (assetData.length == 0) {\n            return IERC20TokenV06(address(0));\n        }\n        if (assetData.length != 36 ||\n            assetData.readBytes4(0) != ERC20_ASSET_PROXY_ID)\n        {\n            return IERC20TokenV06(address(0));\n        }\n        return IERC20TokenV06(assetData.readAddress(16));\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IShell.sol\";\n\ncontract ShellSampler is\n    DeploymentConstants\n{\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewTargetSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SushiSwapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract SushiSwapSampler is\n    DeploymentConstants\n{\n    /// @dev Gas limit for SushiSwap calls.\n    uint256 constant private SUSHISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from SushiSwap.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSushiSwap(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: SUSHISWAP_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from SushiSwap\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSushiSwap(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: SUSHISWAP_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        view\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        view\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            secondHopCalls[j].writeUint256(secondHopCalls[j].length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            firstHopCalls[i].writeUint256(firstHopCalls[i].length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).staticcall(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    DeploymentConstants,\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == _getWethAddress() ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == _getWethAddress()) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            if (!didSucceed) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(_getUniswapExchangeFactoryAddress())\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./DeploymentConstants.sol\";\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\n\ncontract UniswapV2Sampler is\n    DeploymentConstants\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS ? 18 : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/xianny/src/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/xianny/src/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/xianny/src/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 62500,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
