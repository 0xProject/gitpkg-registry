{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "spender",
                        "type": "address"
                    }
                ],
                "name": "getAllowanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "allowances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    },
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "getBalanceOf",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "balances",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getBlockNumber",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "getGasLeft",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableMakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableMakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder",
                        "name": "order",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature",
                        "name": "signature",
                        "type": "tuple"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "fillableTakerAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "makerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "contract IERC20TokenV06",
                                "name": "takerToken",
                                "type": "address"
                            },
                            {
                                "internalType": "uint128",
                                "name": "makerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "uint128",
                                "name": "takerTokenFeeAmount",
                                "type": "uint128"
                            },
                            {
                                "internalType": "address",
                                "name": "maker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "taker",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "sender",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "feeRecipient",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "pool",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "uint64",
                                "name": "expiry",
                                "type": "uint64"
                            },
                            {
                                "internalType": "uint256",
                                "name": "salt",
                                "type": "uint256"
                            }
                        ],
                        "internalType": "struct IExchange.LimitOrder[]",
                        "name": "orders",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "enum IExchange.SignatureType",
                                "name": "signatureType",
                                "type": "uint8"
                            },
                            {
                                "internalType": "uint8",
                                "name": "v",
                                "type": "uint8"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "r",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "s",
                                "type": "bytes32"
                            }
                        ],
                        "internalType": "struct IExchange.Signature[]",
                        "name": "orderSignatures",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "contract IExchange",
                        "name": "exchange",
                        "type": "address"
                    }
                ],
                "name": "getLimitOrderFillableTakerAssetAmounts",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "orderFillableTakerAssetAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "tokens",
                        "type": "address[]"
                    }
                ],
                "name": "getTokenDecimals",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "decimals",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "isContract",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "",
                        "type": "bool"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromBalancerGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromBalancerV2Global",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromBancorGlobal",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromCompoundGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    }
                ],
                "name": "sampleBuysFromCurveGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromDODOGlobal",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromDODOV2Global",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmmGlobal",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromKyberNetworkGlobal",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromLidoGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromLiquidityProviderGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromMStableGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromMakerPsmGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromMooniswapGlobal",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromShellGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    }
                ],
                "name": "sampleBuysFromSmoothyGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleBuysFromUniswapGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2Global",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV3Global",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromBalancerGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromBalancerV2Global",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromBancorGlobal",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract ICToken",
                        "name": "cToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromCompoundGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    }
                ],
                "name": "sampleSellsFromCurveGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromDODOGlobal",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromDODOV2Global",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmmGlobal",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromKyberNetworkGlobal",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromLidoGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromLiquidityProviderGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromMStableGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromMakerPsmGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromMooniswapGlobal",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromShellGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    }
                ],
                "name": "sampleSellsFromSmoothyGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "sampleSellsFromUniswapGlobal",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2Global",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "contract IUniswapV3Quoter",
                        "name": "quoter",
                        "type": "address"
                    },
                    {
                        "internalType": "contract IERC20TokenV06[]",
                        "name": "path",
                        "type": "address[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV3Global",
                "outputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "uniswapPaths",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "firstHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "bytes[]",
                        "name": "secondHopCalls",
                        "type": "bytes[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "firstHop",
                        "type": "tuple"
                    },
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "sourceIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "returnData",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo",
                        "name": "secondHop",
                        "type": "tuple"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "sampleValues",
                        "type": "uint256[]"
                    }
                ],
                "name": "setSampleValues",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "getLimitOrderFillableMakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native orders to query."
                    },
                    "returns": {
                        "orderFillableMakerAssetAmounts": "How much maker asset can be filled         by each order in `orders`."
                    }
                },
                "getLimitOrderFillableTakerAmount((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),address)": {
                    "details": "Get the fillable taker amount of an order, taking into account      order state, maker fees, and maker balances."
                },
                "getLimitOrderFillableTakerAssetAmounts((address,address,uint128,uint128,uint128,address,address,address,address,bytes32,uint64,uint256)[],(uint8,uint8,bytes32,bytes32)[],address)": {
                    "details": "Queries the fillable taker asset amounts of native orders.      Effectively ignores orders that have empty signatures or      maker/taker asset amounts (returning 0).",
                    "params": {
                        "exchange": "The V4 exchange.",
                        "orderSignatures": "Signatures for each respective order in `orders`.",
                        "orders": "Native limit orders to query."
                    },
                    "returns": {
                        "orderFillableTakerAssetAmounts": "How much taker asset can be filled         by each order in `orders`."
                    }
                },
                "sampleBuysFromBalancerGlobal(address,address,address)": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2Global((bytes32,address),address,address)": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancorGlobal((address,address[][]),address,address)": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurveGlobal((address,bytes4,bytes4),int128,int128)": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOGlobal((address,address),address,address)": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2Global(address,uint256,address,address)": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmmGlobal(address,address[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetworkGlobal((uint256,address,address,address,bytes),address,address)": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLidoGlobal((address,address),address,address)": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLiquidityProviderGlobal(address,address,address)": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStableGlobal(address,address,address)": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswapGlobal(address,address,address)": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShellGlobal(address,address,address)": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothyGlobal((address,bytes4,bytes4),int128,int128)": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapGlobal(address,address,address)": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2Global(address,address[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV3Global(address,address[])": {
                    "details": "Sample buy quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                },
                "sampleSellsFromBalancerGlobal(address,address,address)": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2Global((bytes32,address),address,address)": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancorGlobal((address,address[][]),address,address)": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromCurveGlobal((address,bytes4,bytes4),int128,int128)": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOGlobal((address,address),address,address)": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2Global(address,uint256,address,address)": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromKyberDmmGlobal(address,address[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromKyberNetworkGlobal((uint256,address,address,address,bytes),address,address)": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLidoGlobal((address,address),address,address)": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProviderGlobal(address,address,address)": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStableGlobal(address,address,address)": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsmGlobal((address,bytes32,address),address,address)": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMooniswapGlobal(address,address,address)": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShellGlobal(address,address,address)": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothyGlobal((address,bytes4,bytes4),int128,int128)": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapGlobal(address,address,address)": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2Global(address,address[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV3Global(address,address[])": {
                    "details": "Sample sell quotes from UniswapV3.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "quoter": "UniswapV3 Quoter contract."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "uniswapPaths": "The encoded uniswap path for each sample."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x600060a081905260c060408190526200001a91908162000053565b507feeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006080523480156200004c57600080fd5b50620000ba565b82805482825590600052602060002090810192821562000091579160200282015b828111156200009157825182559160200191906001019062000074565b506200009f929150620000a3565b5090565b5b808211156200009f5760008155600101620000a4565b60805160601c61ba19620000e260003980611e63528061311152806134af525061ba196000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c806373748669116101ff578063b494dde21161011a578063e8e4af09116100ad578063f499072a1161007c578063f499072a146108d2578063f64ea46b146108e5578063f8e43db4146108f8578063fc9fe41b1461090b576103d0565b8063e8e4af0914610886578063eb66ecd514610899578063f02b6541146108ac578063f1ed7fa4146108bf576103d0565b8063cc1621c9116100e9578063cc1621c91461083a578063cf56b3971461084d578063de920f4414610860578063e78ac04514610873576103d0565b8063b494dde2146107ec578063b9184dd1146107ff578063bb5bfc5414610814578063bd71ecf614610827576103d0565b80639ea0ff1311610192578063a75e744b11610161578063a75e744b146107a0578063aa9d843e146107b3578063adc636bf146107c6578063b215fdfa146107d9576103d0565b80639ea0ff1314610746578063a0eaf05114610759578063a14fd7091461076c578063a46984171461078d576103d0565b80638d23f454116101ce5780638d23f454146106dc5780638e5a0e07146106ef578063911d4895146107115780639bf3ee3514610733576103d0565b8063737486691461069057806377fa0754146106a3578063801c0cc5146106b65780638b6d7b44146106c9576103d0565b806342c4b2ad116102ef57806355801e0f1161028257806368be3cf21161025157806368be3cf2146106375780636b79faf81461065757806370571f671461066a578063706e2f9b1461067d576103d0565b806355801e0f146105fe57806359861e07146104315780635f8c0ae61461061157806366a1ac6b14610624576103d0565b80634eb1f412116102be5780634eb1f412146105b05780634edfb5b2146105c357806350411454146105e357806351be4eaa146105f6576103d0565b806342c4b2ad1461056257806342cbb15c1461057557806343906a111461058a5780634578dab51461059d576103d0565b80632df8351011610367578063329b2e6a11610336578063329b2e6a146105085780633ced5f191461051b5780633dd941a41461052e57806340bc03ae1461054f576103d0565b80632df83510146104ae5780632e2c7b38146104cf57806330756a2f146104e257806330d6570d146104f5576103d0565b80631b86982f116103a35780631b86982f146104445780632aa64319146104665780632c46dc03146104885780632d753aa41461049b576103d0565b80630600e796146103d55780631022742b146103fe5780631627905514610411578063181a265c14610431575b600080fd5b6103e86103e336600461a79e565b61091e565b6040516103f5919061b396565b60405180910390f35b6103e861040c36600461a330565b610984565b61042461041f366004619b8c565b610af7565b6040516103f5919061b3a9565b6103e861043f36600461a835565b610b01565b61045761045236600461a8bc565b610b5f565b6040516103f59392919061b3e9565b61047961047436600461a863565b610bf3565b6040516103f59392919061b3b4565b6103e8610496366004619d63565b610ed1565b6103e86104a9366004619dad565b610f2f565b6104c16104bc36600461a5cd565b6110b9565b6040516103f592919061b2b9565b6103e86104dd366004619d63565b611122565b6103e86104f0366004619d63565b611180565b6103e8610503366004619e32565b6111de565b6103e8610516366004619d63565b611352565b6103e8610529366004619d63565b6113b0565b61054161053c366004619ef4565b611431565b6040516103f592919061b272565b6103e861055d36600461a7dc565b61148f565b6103e8610570366004619d63565b611610565b61057d61166e565b6040516103f5919061b3e0565b61045761059836600461a8bc565b611672565b6103e86105ab36600461a79e565b6116d3565b6103e86105be36600461a79e565b611700565b6105d66105d136600461a9b5565b61175e565b6040516103f5919061b402565b6103e86105f1366004619d63565b6119e3565b61057d611a41565b61047961060c366004619f41565b611a49565b6103e861061f36600461aa43565b611ae0565b6103e861063236600461a330565b611b3e565b61064a61064536600461a11a565b611bf3565b6040516103f5919061b321565b6104c161066536600461a5cd565b611d54565b6103e861067836600461aa43565b611db2565b6103e861068b36600461a1f1565b611e10565b61047961069e366004619f41565b611f02565b6104796106b136600461a835565b611f64565b6103e86106c4366004619d63565b611fe9565b6103e86106d736600461a7dc565b612047565b6103e86106ea366004619d63565b6123b6565b6107026106fd36600461a188565b612414565b6040516103f59392919061b6db565b61072461071f36600461a6c5565b6126dc565b6040516103f59392919061b104565b61057d61074136600461aa03565b612730565b61057d610754366004619ea4565b612877565b61072461076736600461a6c5565b612a8d565b61077f61077a366004619d63565b612aee565b6040516103f592919061b450565b6103e861079b366004619e32565b612b5a565b6104796107ae366004619f88565b612caf565b61077f6107c1366004619d63565b612dec565b61077f6107d4366004619e32565b612e6f565b6103e86107e7366004619ef4565b612fbf565b6103e86107fa366004619d63565b61301c565b61081261080d36600461a3ff565b613049565b005b6103e8610822366004619d63565b613060565b6103e861083536600461a223565b6130be565b61045761084836600461a8f1565b6131ba565b61054161085b366004619ef4565b6133a0565b6103e861086e36600461a661565b6133fe565b6103e861088136600461a267565b61345c565b6103e8610894366004619e32565b613551565b6103e86108a736600461a79e565b613684565b6103e86108ba36600461a661565b6136b1565b61057d6108cd36600461a96e565b61370f565b6103e86108e0366004619d63565b6138ae565b6103e86108f3366004619ef4565b6138db565b61047961090636600461a835565b613938565b61070261091936600461a188565b613999565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561097257602002820191906000526020600020905b81548152602001906001019080831161095e575b5050505050613c40565b949350505050565b606083516001600160401b038111801561099d57600080fd5b506040519080825280602002602001820160405280156109c7578160200160208202803683370190505b50905060005b84518114610aef57306001600160a01b0316639bf3ee3562030d408784815181106109f457fe5b6020026020010151878581518110610a0857fe5b6020026020010151876040518563ffffffff1660e01b8152600401610a2f9392919061b7d9565b60206040518083038187803b158015610a4757600080fd5b5086fa93505050508015610a78575060408051601f3d908101601f19168201909252610a759181019061a4e0565b60015b610acc573d808015610aa6576040519150601f19603f3d011682016040523d82523d6000602084013e610aab565b606091505b506000838381518110610aba57fe5b60200260200101818152505050610ae7565b80838381518110610ad957fe5b602002602001018181525050505b6001016109cd565b509392505050565b803b15155b919050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015610b5557602002820191906000526020600020905b815481526020019060010190808311610b41575b5050505050613e40565b60405163cc1621c960e01b81526000906060908190309063cc1621c990610b9090899089908990899060040161b711565b60006040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be4919081019061a4f8565b91989097509095509350505050565b6000806060610c028587613ed2565b8351806001600160401b0381118015610c1a57600080fd5b50604051908082528060200260200182016040528015610c44578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690610c77908a908a9060040161af6c565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190619ba8565b925060006001600160a01b03841615610ce557506001935086610d84565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690610d16908a908c9060040161af6c565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190619ba8565b93506001600160a01b038416610d7d575050610ec7565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df5919061a463565b610e00575050610ec7565b60005b82811015610ec3576000610e7d8a87858e60200151604051602001610e2b949392919061af86565b6040516020818303038152906040528a88868f60200151604051602001610e55949392919061af86565b6040516020818303038152906040528a8581518110610e7057fe5b6020026020010151613f0d565b905080858381518110610e8c57fe5b602002602001018181525050848281518110610ea457fe5b602002602001015160001415610eba5750610ec3565b50600101610e03565b5050505b9450945094915050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015610f2557602002820191906000526020600020905b815481526020019060010190808311610f11575b5050505050614046565b8051606090806001600160401b0381118015610f4a57600080fd5b50604051908082528060200260200182016040528015610f74578160200160208202803683370190505b5091506001600160a01b038716610f8b57506110b0565b60005b818110156110ad5760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b8981518110610fbf57fe5b6020026020010151604051602401610fda949392919061b019565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611018919061af23565b6000604051808303818686fa925050503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50915091506000821561107d578180602001905181019061107a919061a4e0565b90505b8061108a575050506110ad565b8086858151811061109757fe5b6020908102919091010152505050600101610f8e565b50505b95945050505050565b6060806111178484600080548060200260200160405190810160405280929190818152602001828054801561110d57602002820191906000526020600020905b8154815260200190600101908083116110f9575b50505050506145bd565b909590945092505050565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561117657602002820191906000526020600020905b815481526020019060010190808311611162575b5050505050614812565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156111d457602002820191906000526020600020905b8154815260200190600101908083116111c0575b5050505050614d4b565b60606111ea8385613ed2565b8151806001600160401b038111801561120257600080fd5b5060405190808252806020026020018201604052801561122c578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b03166372ea9076620c3500888888868151811061125b57fe5b60200260200101516040518563ffffffff1660e01b81526004016112819392919061b09b565b60206040518083038187803b15801561129957600080fd5b5086fa935050505080156112ca575060408051601f3d908101601f191682019092526112c79181019061a4e0565b60015b611304573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b606091505b5050611348565b8084838151811061131157fe5b60200260200101818152505083828151811061132957fe5b60200260200101516000141561133f5750611348565b50600101611232565b5050949350505050565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156113a657602002820191906000526020600020905b815481526020019060010190808311611392575b5050505050614f60565b60405163e8e4af0960e01b8152606090309063e8e4af09906113dd9087908790879060009060040161afe5565b60006040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097c919081019061a431565b6060806111178484600080548060200260200160405190810160405280929190818152602001828054801561148557602002820191906000526020600020905b815481526020019060010190808311611471575b5050505050614fc6565b8051606090806001600160401b03811180156114aa57600080fd5b506040519080825280602002602001820160405280156114d4578160200160208202803683370190505b50915060005b81811015611348576000606088600001516001600160a01b0316621e84808a602001518a8a8a888151811061150b57fe5b60200260200101516040516024016115259392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611563919061af23565b6000604051808303818686fa925050503d806000811461159f576040519150601f19603f3d011682016040523d82523d6000602084013e6115a4565b606091505b5091509150600082156115c857818060200190518101906115c5919061a4e0565b90505b808685815181106115d557fe5b6020026020010181815250508584815181106115ed57fe5b60200260200101516000141561160557505050611348565b5050506001016114da565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561166457602002820191906000526020600020905b815481526020019060010190808311611650575b5050505050615169565b4390565b6000606080610be486868660008054806020026020016040519081016040528092919081815260200182805480156116c957602002820191906000526020600020905b8154815260200190600101908083116116b5575b5050505050615333565b60405163205e01d760e11b815260609030906340bc03ae906113dd9087908790879060009060040161b667565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561175457602002820191906000526020600020905b815481526020019060010190808311611740575b5050505050615459565b6020848101516040805160018082528183019092526060938492908281019080368337019050509050858160008151811061179557fe5b6020908102919091010152606060006040519080825280602002602001820160405280156117cd578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156118be576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a120906118269089906001908890889060040161b13a565b60006040518083038187803b15801561183e57600080fd5b5086fa9350505050801561187457506040513d6000823e601f3d908101601f19168201604052611871919081019061a557565b60015b6118ae573d8080156118a2576040519150601f19603f3d011682016040523d82523d6000602084013e6118a7565b606091505b50506118b9565b935061097c92505050565b6119d8565b87606001516001600160a01b0316856001600160a01b03161415611914576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611826908a906001908890889060040161b13a565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611954908a90600190889088908d9084908490849060040161b17c565b60006040518083038187803b15801561196c57600080fd5b5086fa935050505080156119a257506040513d6000823e601f3d908101601f1916820160405261199f919081019061a557565b60015b6118ae573d8080156119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b50505b505050949350505050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611a3757602002820191906000526020600020905b815481526020019060010190808311611a23575b50505050506154bf565b60005a905090565b60405163a75e744b60e01b81526000908190606090309063a75e744b90611a7c908a908a908a908a90899060040161b237565b60006040518083038186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad0919081019061a47f565b9199909850909650945050505050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611b3457602002820191906000526020600020905b815481526020019060010190808311611b20575b50505050506156ce565b6060611b4b848484610984565b905060005b8451811015610aef57818181518110611b6557fe5b6020026020010151600014611beb57611bd2828281518110611b8357fe5b6020026020010151868381518110611b9757fe5b6020026020010151606001516001600160801b0316878481518110611bb857fe5b6020026020010151604001516001600160801b031661591b565b828281518110611bde57fe5b6020026020010181815250505b600101611b50565b6060816001600160401b0381118015611c0b57600080fd5b50604051908082528060200260200182016040528015611c4557816020015b611c326193be565b815260200190600190039081611c2a5790505b50905060005b808314611d4d576001828281518110611c6057fe5b602090810291909101810151911515910152838382818110611c7e57fe5b9050602002810190611c90919061b87c565b15159050611c9d57611d45565b30848483818110611caa57fe5b9050602002810190611cbc919061b87c565b604051611cca92919061af13565b6000604051808303816000865af19150503d8060008114611d07576040519150601f19603f3d011682016040523d82523d6000602084013e611d0c565b606091505b50838381518110611d1957fe5b6020026020010151602001848481518110611d3057fe5b60209081029190910101519190915290151590525b600101611c4b565b5092915050565b60608061111784846000805480602002602001604051908101604052809291908181526020018280548015611da857602002820191906000526020600020905b815481526020019060010190808311611d94575b5050505050615945565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611e0657602002820191906000526020600020905b815481526020019060010190808311611df2575b5050505050615b8a565b606081516001600160401b0381118015611e2957600080fd5b50604051908082528060200260200182016040528015611e53578160200160208202803683370190505b50905060005b82518114611efc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110611e9757fe5b60200260200101516001600160a01b031614611ed757611ed2838281518110611ebc57fe5b60200260200101516001600160a01b0316615dd7565b611eda565b60125b60ff16828281518110611ee957fe5b6020908102919091010152600101611e59565b50919050565b6000806060611ad0878787876000805480602002602001604051908101604052809291908181526020018280548015611f5a57602002820191906000526020600020905b815481526020019060010190808311611f46575b5050505050615e83565b604051632aa6431960e01b815260009081906060903090632aa6431990611f9590899089908990889060040161b699565b60006040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be4919081019061a47f565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561203d57602002820191906000526020600020905b815481526020019060010190808311612029575b5050505050615f72565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161207e919061b3e0565b60206040518083038186803b15801561209657600080fd5b505afa1580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce919061a4e0565b8651604051631e01043960e01b81526001600160a01b0390911690631e0104399061210190600f89900b9060040161b3e0565b60206040518083038186803b15801561211957600080fd5b505afa15801561212d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612151919061a4e0565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612189919061b3e0565b60806040518083038186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d9919061ab7a565b935050505080601203600a0a82816121ed57fe5b85519190049250806001600160401b038111801561220a57600080fd5b50604051908082528060200260200182016040528015612234578160200160208202803683370190505b50935060005b818110156123aa57600060608a600001516001600160a01b0316620927c08c602001518c8c8c888151811061226b57fe5b60200260200101516040516024016122859392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516122c3919061af23565b6000604051808303818686fa925050503d80600081146122ff576040519150601f19603f3d011682016040523d82523d6000602084013e612304565b606091505b5091509150600082156123285781806020019051810190612325919061a4e0565b90505b86811061236257835b85811015612359578789828151811061234657fe5b6020908102919091010152600101612331565b505050506123aa565b8088858151811061236f57fe5b60200260200101818152505087848151811061238757fe5b60200260200101516000141561239f575050506123aa565b50505060010161223a565b50505050949350505050565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561240a57602002820191906000526020600020905b8154815260200190600101908083116123f6575b5050505050615fd8565b61241c6193d6565b6124246193d6565b60006060600080548060200260200160405190810160405280929190818152602001828054801561247457602002820191906000526020600020905b815481526020019060010190808311612460575b505050505090506000606060016001600160401b038111801561249657600080fd5b506040519080825280602002602001820160405280156124c0578160200160208202803683370190505b50905060005b895181146125b85787826000815181106124dc57fe5b60200260200101818152505081600090805190602001906124fe9291906193f0565b5060006060306001600160a01b03168c848151811061251957fe5b602002602001015160405161252e919061af23565b6000604051808303816000865af19150503d806000811461256b576040519150601f19603f3d011682016040523d82523d6000602084013e612570565b606091505b509150915081156125ae57600061259460208351038361603e90919063ffffffff16565b9050858111156125ac57838a5260208a018290529450845b505b50506001016124c6565b50816125c55750506126be565b60005b885181146126ba5782826000815181106125de57fe5b60200260200101818152505081600090805190602001906126009291906193f0565b5060006060306001600160a01b03168b848151811061261b57fe5b6020026020010151604051612630919061af23565b6000604051808303816000865af19150503d806000811461266d576040519150601f19603f3d011682016040523d82523d6000602084013e612672565b606091505b509150915081156126b057600061269660208351038361603e90919063ffffffff16565b9050878111156126ae57838952602089018290529650865b505b50506001016125c8565b5050505b80516126d19060009060208401906193f0565b505093509350939050565b6000805460609081906001600160401b03811180156126fa57600080fd5b50604051908082528060200260200182016040528015612724578160200160208202803683370190505b50905093509350939050565b6000808351600381111561274057fe5b1480612758575060018351600381111561275657fe5b145b8061276e575060408401516001600160801b0316155b80612784575060608401516001600160801b0316155b1561279157506000612870565b61279961943b565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b81526004016127ca92919061b7bc565b60a06040518083038186803b1580156127e257600080fd5b505afa1580156127f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281a919061aaba565b9194509250905060018360200151600481111561283357fe5b14158061283e575080155b80612851575086516001600160a01b0316155b156128625760009350505050612870565b506001600160801b03169150505b9392505050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b81526004016128a892919061af6c565b60206040518083038186803b1580156128c057600080fd5b505afa1580156128d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f89190619ba8565b90506001600160a01b03811661291257600091505061097c565b60006001600160a01b038616156129a4576040516370a0823160e01b81526001600160a01b038716906370a082319061294f90859060040161af3f565b60206040518083038186803b15801561296757600080fd5b505afa15801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299f919061a4e0565b6129b0565b816001600160a01b0316315b9050838110156129c55760009250505061097c565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f0906129fa908a908a908a9060040161b09b565b60206040518083038187803b158015612a1257600080fd5b5086fa93505050508015612a43575060408051601f3d908101601f19168201909252612a409181019061a4e0565b60015b612a83573d808015612a71576040519150601f19603f3d011682016040523d82523d6000602084013e612a76565b606091505b506000935050505061097c565b925061097c915050565b6000606080610be48686866000805480602002602001604051908101604052809291908181526020018280548015612ae457602002820191906000526020600020905b815481526020019060010190808311612ad0575b5050505050616053565b60006060612b4e8585856000805480602002602001604051908101604052809291908181526020018280548015612b4457602002820191906000526020600020905b815481526020019060010190808311612b30575b50505050506161b2565b90969095509350505050565b8051606090806001600160401b0381118015612b7557600080fd5b50604051908082528060200260200182016040528015612b9f578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b031663343fbcdd62061a808888888681518110612bce57fe5b60200260200101516040518563ffffffff1660e01b8152600401612bf49392919061b09b565b60206040518083038187803b158015612c0c57600080fd5b5086fa93505050508015612c3d575060408051601f3d908101601f19168201909252612c3a9181019061a4e0565b60015b612c6b573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b80848381518110612c7857fe5b602002602001018181525050838281518110612c9057fe5b602002602001015160001415612ca65750611348565b50600101612ba5565b6000806060612cbe8587613ed2565b8351806001600160401b0381118015612cd657600080fd5b50604051908082528060200260200182016040528015612d00578160200160208202803683370190505b509150612d0f8989898961629e565b945092506001600160a01b038316612d275750612de1565b60005b81811015612dde576000612d98898688604051602001612d4c9392919061b043565b604051602081830303815290604052898789604051602001612d709392919061b043565b604051602081830303815290604052898581518110612d8b57fe5b60200260200101516163f4565b905080848381518110612da757fe5b602002602001018181525050838281518110612dbf57fe5b602002602001015160001415612dd55750612dde565b50600101612d2a565b50505b955095509592505050565b60405163adc636bf60e01b8152600090606090309063adc636bf90612e1b90889088908890889060040161afe5565b60006040518083038186803b158015612e3357600080fd5b505afa158015612e47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b4e919081019061a589565b60006060612e7d8486613ed2565b8251806001600160401b0381118015612e9557600080fd5b50604051908082528060200260200182016040528015612ebf578160200160208202803683370190505b50915060005b81811015612f34576000612eee898989898681518110612ee157fe5b6020026020010151612877565b905080848381518110612efd57fe5b602002602001018181525050838281518110612f1557fe5b602002602001015160001415612f2b5750612f34565b50600101612ec5565b5060405163901754d760e01b81526001600160a01b0388169063901754d790612f63908990899060040161af6c565b60206040518083038186803b158015612f7b57600080fd5b505afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190619ba8565b92505094509492505050565b60606128708383600080548060200260200160405190810160405280929190818152602001828054801561301257602002820191906000526020600020905b815481526020019060010190808311612ffe575b50505050506164e6565b60405163a469841760e01b8152606090309063a4698417906113dd9087908790879060009060040161afe5565b805161305c9060009060208401906193f0565b5050565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156130b457602002820191906000526020600020905b8154815260200190600101908083116130a0575b505050505061666a565b606082516001600160401b03811180156130d757600080fd5b50604051908082528060200260200182016040528015613101578160200160208202803683370190505b50905060005b83518114611d4d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061314557fe5b60200260200101516001600160a01b03161461318f5761318a8385838151811061316b57fe5b60200260200101516001600160a01b031661682790919063ffffffff16565b61319b565b826001600160a01b0316315b8282815181106131a757fe5b6020908102919091010152600101613107565b60006060806131c98587613ed2565b6131d48787876168fc565b9250826131e057610ec7565b60405163276fdad960e11b81523090634edfb5b290613209908a9087908b908b9060040161b783565b60006040518083038186803b15801561322157600080fd5b505afa158015613235573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261325d919081019061a557565b608088018190528451909250806001600160401b038111801561327f57600080fd5b506040519080825280602002602001820160405280156132a9578160200160208202803683370190505b50915060005b81811015613394576000306001600160a01b031663f1ed7fa48b8b8b8b87815181106132d757fe5b60200260200101516040518563ffffffff1660e01b81526004016132fe949392919061b74d565b60206040518083038186803b15801561331657600080fd5b505afa15801561332a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334e919061a4e0565b90508084838151811061335d57fe5b60200260200101818152505083828151811061337557fe5b60200260200101516000141561338b5750613394565b506001016132af565b50509450945094915050565b606080611117848460008054806020026020016040519081016040528092919081815260200182805480156133f457602002820191906000526020600020905b8154815260200190600101908083116133e0575b5050505050616a63565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561345257602002820191906000526020600020905b81548152602001906001019080831161343e575b5050505050616bef565b606083516001600160401b038111801561347557600080fd5b5060405190808252806020026020018201604052801561349f578160200160208202803683370190505b50905060005b84518114610aef577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106134e357fe5b60200260200101516001600160a01b03161461352f5761352a848487848151811061350a57fe5b60200260200101516001600160a01b0316616e099092919063ffffffff16565b613532565b60005b82828151811061353e57fe5b60209081029190910101526001016134a5565b8051606090806001600160401b038111801561356c57600080fd5b50604051908082528060200260200182016040528015613596578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b031663838e6a22620493e088888886815181106135c557fe5b60200260200101516040518563ffffffff1660e01b81526004016135eb9392919061b09b565b60206040518083038187803b15801561360357600080fd5b5086fa93505050508015613634575060408051601f3d908101601f191682019092526136319181019061a4e0565b60015b613662573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b8084838151811061366f57fe5b6020026020010181815250505060010161359c565b6040516322db5ed160e21b81526060903090638b6d7b44906113dd9087908790879060009060040161b667565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561370557602002820191906000526020600020905b8154815260200190600101908083116136f1575b5050505050616edf565b6000846080015151600014156137275750600061097c565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b0316146137615786613777565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b03161461379a57866137b0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b81526004016137d895949392919061b0bf565b60206040518083038187803b1580156137f057600080fd5b5086fa93505050508015613821575060408051601f3d908101601f1916820190925261381e9181019061a4e0565b60015b61385f573d80801561384f576040519150601f19603f3d011682016040523d82523d6000602084013e613854565b606091505b50600091505061097c565b600061386a856170db565b60ff169050600061387a876170db565b60ff169050670de0b6b3a764000081600a0a83600a0a878602028161389b57fe5b04816138a357fe5b04935050505061097c565b6040516330d6570d60e01b815260609030906330d6570d906113dd9087908790879060009060040161afe5565b60606128708383600080548060200260200160405190810160405280929190818152602001828054801561392e57602002820191906000526020600020905b81548152602001906001019080831161391a575b50505050506170e6565b6000806060610be4868686600080548060200260200160405190810160405280929190818152602001828054801561398f57602002820191906000526020600020905b81548152602001906001019080831161397b575b5050505050617252565b6139a16193d6565b6139a96193d6565b6000606060008054806020026020016040519081016040528092919081815260200182805480156139f957602002820191906000526020600020905b8154815260200190600101908083116139e5575b50506040805160018082528183019092526000199750949550869460609450925090506020808301908036833701905050905060005b88518114613b2d578782600081518110613a4557fe5b6020026020010181815250508160009080519060200190613a679291906193f0565b5060006060306001600160a01b03168b8481518110613a8257fe5b6020026020010151604051613a97919061af23565b6000604051808303816000865af19150503d8060008114613ad4576040519150601f19603f3d011682016040523d82523d6000602084013e613ad9565b606091505b50915091508115613b23576000613afd60208351038361603e90919063ffffffff16565b9050600081118015613b0e57508581105b15613b2157838952602089018290529450845b505b5050600101613a2f565b50600019821415613b3f5750506126be565b60005b895181146126ba578282600081518110613b5857fe5b6020026020010181815250508160009080519060200190613b7a9291906193f0565b5060006060306001600160a01b03168c8481518110613b9557fe5b6020026020010151604051613baa919061af23565b6000604051808303816000865af19150503d8060008114613be7576040519150601f19603f3d011682016040523d82523d6000602084013e613bec565b606091505b50915091508115613c36576000613c1060208351038361603e90919063ffffffff16565b9050600081118015613c2157508781105b15613c3457838a5260208a018290529650865b505b5050600101613b42565b60408401516060906001600160e01b031916613cc2576040805160608101909152613cbb9080613c7486896080840161b54f565b60405160208183030381529060405281526020018688604051602001613c9b92919061b54f565b60405160208183030381529060405281526020016174e581525083617618565b905061097c565b8151806001600160401b0381118015613cda57600080fd5b50604051908082528060200260200182016040528015613d04578160200160208202803683370190505b50915060005b81811015611348576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110613d3b57fe5b6020026020010151604051602401613d559392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613d93919061af23565b6000604051808303818686fa925050503d8060008114613dcf576040519150601f19603f3d011682016040523d82523d6000602084013e613dd4565b606091505b509150915060008215613df85781806020019051810190613df5919061a4e0565b90505b80868581518110613e0557fe5b602002602001018181525050858481518110613e1d57fe5b602002602001015160001415613e3557505050611348565b505050600101613d0a565b6060613e4c8385613ed2565b84602001516001600160a01b0316846001600160a01b0316141580613e7e575084516001600160a01b03848116911614155b15610aef5781516060816001600160401b0381118015613e9d57600080fd5b50604051908082528060200260200182016040528015613ec7578160200160208202803683370190505b50925061097c915050565b806001600160a01b0316826001600160a01b0316141561305c5760405162461bcd60e51b8152600401613f049061b5ab565b60405180910390fd5b600080600080600087806020019051810190613f299190619bfd565b9350935093509350816001600160a01b0316846001600160a01b03161415614013576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090613f7c908a9060040161b3e0565b60206040518083038187803b158015613f9457600080fd5b5086fa93505050508015613fc5575060408051601f3d908101601f19168201909252613fc29181019061a4e0565b60015b614007573d808015613ff3576040519150601f19603f3d011682016040523d82523d6000602084013e613ff8565b606091505b50600095505050505050612870565b94506128709350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090613f7c9087908b9060040161af53565b80516060908590806001600160401b038111801561406357600080fd5b5060405190808252806020026020018201604052801561408d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906140bd90899060040161af3f565b60206040518083038186803b1580156140d557600080fd5b505afa1580156140e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410d919061a463565b15806141925750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061414090889060040161af3f565b60206040518083038186803b15801561415857600080fd5b505afa15801561416c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614190919061a463565b155b1561419e57505061097c565b6141a661945d565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906141d2908a9060040161af3f565b60206040518083038186803b1580156141ea57600080fd5b505afa1580156141fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614222919061a4e0565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061425090899060040161af3f565b60206040518083038186803b15801561426857600080fd5b505afa15801561427c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a0919061a4e0565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906142d1908a9060040161af3f565b60206040518083038186803b1580156142e957600080fd5b505afa1580156142fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614321919061a4e0565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061435490899060040161af3f565b60206040518083038186803b15801561436c57600080fd5b505afa158015614380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a4919061a4e0565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156143e657600080fd5b505afa1580156143fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441e919061a4e0565b608082015260005b828110156123aa5761445182602001516003670de0b6b3a76400008161444857fe5b0460010161782a565b86828151811061445d57fe5b60200260200101511115614470576123aa565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106144a357fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016144d19695949392919061b854565b60206040518083038187803b1580156144e957600080fd5b5086fa9350505050801561451a575060408051601f3d908101601f191682019092526145179181019061a4e0565b60015b614554573d808015614548576040519150601f19603f3d011682016040523d82523d6000602084013e61454d565b606091505b50506123aa565b825161456c906002670de0b6b3a76400005b0461782a565b81111561457957506123aa565b8086838151811061458657fe5b60200260200101818152505085828151811061459e57fe5b6020026020010151600014156145b457506123aa565b50600101614426565b606080606061463e866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fe57600080fd5b505afa158015614612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146369190619ba8565b866000617887565b905083516001600160401b038111801561465757600080fd5b50604051908082528060200260200182016040528015614681578160200160208202803683370190505b50915083516001600160401b038111801561469b57600080fd5b506040519080825280602002602001820160405280156146cf57816020015b60608152602001906001900390816146ba5790505b50925060005b84518110156148085760606000805b84518110156147c057606061470c8a8784815181106146ff57fe5b6020026020010151617d27565b90508a6001600160a01b031663cdca1753620927c0838c898151811061472e57fe5b60200260200101516040518463ffffffff1660e01b815260040161475392919061b415565b602060405180830381600088803b15801561476d57600080fd5b5087f19350505050801561479e575060408051601f3d908101601f1916820190925261479b9181019061a4e0565b60015b6147a7576147b7565b8084116147b5578093508194505b505b506001016146e4565b50806147cd575050614808565b808584815181106147da57fe5b602002602001018181525050818684815181106147f357fe5b602090810291909101015250506001016146d5565b5050935093915050565b80516060908590806001600160401b038111801561482f57600080fd5b50604051908082528060200260200182016040528015614859578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061488990899060040161af3f565b60206040518083038186803b1580156148a157600080fd5b505afa1580156148b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d9919061a463565b158061495e5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061490c90889060040161af3f565b60206040518083038186803b15801561492457600080fd5b505afa158015614938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061495c919061a463565b155b1561496a57505061097c565b61497261945d565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061499e908a9060040161af3f565b60206040518083038186803b1580156149b657600080fd5b505afa1580156149ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ee919061a4e0565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90614a1c90899060040161af3f565b60206040518083038186803b158015614a3457600080fd5b505afa158015614a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a6c919061a4e0565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690614a9d908a9060040161af3f565b60206040518083038186803b158015614ab557600080fd5b505afa158015614ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aed919061a4e0565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690614b2090899060040161af3f565b60206040518083038186803b158015614b3857600080fd5b505afa158015614b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b70919061a4e0565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015614bb257600080fd5b505afa158015614bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bea919061a4e0565b608082015260005b828110156123aa578151614c10906002670de0b6b3a7640000614566565b868281518110614c1c57fe5b60200260200101511115614c2f576123aa565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110614c6257fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401614c909695949392919061b854565b60206040518083038187803b158015614ca857600080fd5b5086fa93505050508015614cd9575060408051601f3d908101601f19168201909252614cd69181019061a4e0565b60015b614d07573d808015614548576040519150601f19603f3d011682016040523d82523d6000602084013e61454d565b80868381518110614d1457fe5b602002602001018181525050858281518110614d2c57fe5b602002602001015160001415614d4257506123aa565b50600101614bf2565b8051606090806001600160401b0381118015614d6657600080fd5b50604051908082528060200260200182016040528015614d90578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015614dce57600080fd5b505afa158015614de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e06919061a4e0565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614e4357600080fd5b505afa158015614e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e7b919061abee565b60ff169050876001600160a01b0316866001600160a01b03161415614ef35760005b83811015614eed578282600a0a6402540be400888481518110614ebc57fe5b6020026020010151020281614ecd57fe5b04858281518110614eda57fe5b6020908102919091010152600101614e9d565b506119d8565b876001600160a01b0316876001600160a01b031614156119d85760005b838110156123aa5781600a0a6402540be4000283878381518110614f3057fe5b60200260200101510281614f4057fe5b04858281518110614f4d57fe5b6020908102919091010152600101614f10565b6040805160608181019092526110b09080614f7f86896080840161af6c565b60405160208183030381529060405281526020018688604051602001614fa692919061af6c565b6040516020818303038152906040528152602001617e8281525083617618565b80516060908190806001600160401b0381118015614fe357600080fd5b5060405190808252806020026020018201604052801561500d578160200160208202803683370190505b50915061501a8686617f96565b925082516000141561502c5750615161565b60005b8181101561480857866001600160a01b031663a8312b1d620249f087848151811061505657fe5b6020026020010151878a6040518563ffffffff1660e01b815260040161507e9392919061b829565b60006040518083038187803b15801561509657600080fd5b5086fa935050505080156150cc57506040513d6000823e601f3d908101601f191682016040526150c9919081019061a431565b60015b615106573d8080156150fa576040519150601f19603f3d011682016040523d82523d6000602084013e6150ff565b606091505b5050614808565b8060018851038151811061511657fe5b602002602001015184838151811061512a57fe5b60200260200101818152505083828151811061514257fe5b6020026020010151600014156151585750614808565b5060010161502f565b935093915050565b60606151758385613ed2565b8151806001600160401b038111801561518d57600080fd5b506040519080825280602002602001820160405280156151b7578160200160208202803683370190505b50915060006001600160a01b038616156151da576151d5878761827d565b6151dd565b60005b905060006001600160a01b038616156151ff576151fa888761827d565b615202565b60005b905060005b838110156123aa5760016001600160a01b03881661526557615244846395b68fe760e01b89858151811061523757fe5b60200260200101516182fc565b87848151811061525057fe5b602002602001018193508281525050506152ff565b6001600160a01b03891661528b576152448363cd7724c360e01b89858151811061523757fe5b60006152a5856395b68fe760e01b8a868151811061523757fe5b9250905080156152e2576152c18463cd7724c360e01b836182fc565b8885815181106152cd57fe5b602002602001018194508281525050506152fd565b60008784815181106152f057fe5b6020026020010181815250505b505b80158061531f575085828151811061531357fe5b60200260200101516000145b1561532a57506123aa565b50600101615207565b60006060806153428587613ed2565b61534d8787876168fc565b92508261535957610ec7565b60405163276fdad960e11b81523090634edfb5b290615382908a9087908b908b9060040161b783565b60006040518083038186803b15801561539a57600080fd5b505afa1580156153ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526153d6919081019061a557565b87608001819052508660800151915061544d6040518060600160405280878a60405160200161540692919061b213565b6040516020818303038152906040528152602001888a60405160200161542d92919061b213565b60405160208183030381529060405281526020016183df81525085617618565b90509450945094915050565b6040805160608181019092526110b0908061547886896080840161b54f565b6040516020818303038152906040528152602001868860405160200161549f92919061b54f565b60405160208183030381529060405281526020016184c681525083617618565b8051606090806001600160401b03811180156154da57600080fd5b50604051908082528060200260200182016040528015615504578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561554257600080fd5b505afa158015615556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061557a919061a4e0565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156155b757600080fd5b505afa1580156155cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155ef919061abee565b60ff169050876001600160a01b0316866001600160a01b031614156156615760005b83811015614eed5781600a0a6402540be400028387838151811061563157fe5b6020026020010151028161564157fe5b0485828151811061564e57fe5b6020908102919091010152600101615611565b876001600160a01b0316876001600160a01b031614156119d85760005b838110156123aa578282600a0a6402540be40088848151811061569d57fe5b60200260200101510202816156ae57fe5b048582815181106156bb57fe5b602090810291909101015260010161567e565b60606156da8385613ed2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561571e57600080fd5b505afa158015615732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157569190619ba8565b8451909150806001600160401b038111801561577157600080fd5b5060405190808252806020026020018201604052801561579b578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156157d757600080fd5b505afa1580156157eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061580f9190619ba8565b6001600160a01b0316866001600160a01b0316141580156158b25750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561586457600080fd5b505afa158015615878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061589c9190619ba8565b6001600160a01b0316876001600160a01b031614155b156158bf5750505061097c565b60005b818110156123aa5760006158ed8a898b8a86815181106158de57fe5b6020026020010151898961851a565b9050806158fa57506123aa565b8086838151811061590757fe5b6020908102919091010152506001016158c2565b600061097c8361593f61592f826001618809565b615939888761882d565b9061885e565b9061887a565b6060806060615986866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fe57600080fd5b90506060615993866188a4565b905084516001600160401b03811180156159ac57600080fd5b506040519080825280602002602001820160405280156159d6578160200160208202803683370190505b50925084516001600160401b03811180156159f057600080fd5b50604051908082528060200260200182016040528015615a2457816020015b6060815260200190600190039081615a0f5790505b50935060005b8551811015615b7f5760606000805b8551811015615b37576060615a6986615a64898581518110615a5757fe5b602002602001015161893c565b617d27565b90508b6001600160a01b0316632f80bb1d620927c0838d8981518110615a8b57fe5b60200260200101516040518463ffffffff1660e01b8152600401615ab092919061b415565b602060405180830381600088803b158015615aca57600080fd5b5087f193505050508015615afb575060408051601f3d908101601f19168201909252615af89181019061a4e0565b60015b615b0457615b2e565b831580615b115750808410155b15615b2c57809350615b298c8985815181106146ff57fe5b94505b505b50600101615a39565b5080615b44575050615b7f565b80868481518110615b5157fe5b60200260200101818152505081878481518110615b6a57fe5b60209081029190910101525050600101615a2a565b505050935093915050565b6060615b968385613ed2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015615bda57600080fd5b505afa158015615bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c129190619ba8565b8451909150806001600160401b0381118015615c2d57600080fd5b50604051908082528060200260200182016040528015615c57578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015615c9357600080fd5b505afa158015615ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615ccb9190619ba8565b6001600160a01b0316866001600160a01b031614158015615d6e5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015615d2057600080fd5b505afa158015615d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d589190619ba8565b6001600160a01b0316876001600160a01b031614155b15615d7b5750505061097c565b60005b818110156123aa576000615da98a898b8a8681518110615d9a57fe5b602002602001015189896189d4565b905080615db657506123aa565b80868381518110615dc357fe5b602090810291909101015250600101615d7e565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051615e15919061af23565b600060405180830381855afa9150503d8060008114615e50576040519150601f19603f3d011682016040523d82523d6000602084013e615e55565b606091505b5091509150818015615e6957506020815110155b15615e7c57615e7981600061603e565b92505b5050919050565b6000806060615e928587613ed2565b615e9e8888888861629e565b935091506001600160a01b038216615eb557612de1565b8351806001600160401b0381118015615ecd57600080fd5b50604051908082528060200260200182016040528015615ef7578160200160208202803683370190505b506040805160608101909152909250615f649080615f1b898789156080850161b043565b6040516020818303038152906040528152602001898688604051602001615f449392919061b043565b60405160208183030381529060405281526020016163f481525086617618565b915050955095509592505050565b6040805160608181019092526110b09080615f9186896080840161af6c565b60405160208183030381529060405281526020018688604051602001615fb892919061af6c565b6040516020818303038152906040528152602001618c3081525083617618565b6040805160608181019092526110b09080615ff786896080840161af6c565b6040516020818303038152906040528152602001868860405160200161601e92919061af6c565b6040516020818303038152906040528152602001618c7781525083617618565b600061604a8383618d2c565b90505b92915050565b60006060808660200151516000141561606b57610ec7565b61607787878787618d56565b855191945092506001600160401b038111801561609357600080fd5b506040519080825280602002602001820160405280156160bd578160200160208202803683370190505b50905060005b81518110156161a757836001600160a01b0316637f9c0ecd620493e0858885815181106160ec57fe5b60200260200101516040518463ffffffff1660e01b815260040161611192919061b297565b60206040518083038187803b15801561612957600080fd5b5086fa9350505050801561615a575060408051601f3d908101601f191682019092526161579181019061a4e0565b60015b616163576161a7565b8083838151811061617057fe5b60200260200101818152505082828151811061618857fe5b60200260200101516000141561619e57506161a7565b506001016160c3565b509450945094915050565b600060606161c08486613ed2565b8251806001600160401b03811180156161d857600080fd5b50604051908082528060200260200182016040528015616202578160200160208202803683370190505b50915061626d6040518060600160405280898860405160200161622692919061af6c565b6040516020818303038152906040528152602001898960405160200161624d92919061af6c565b6040516020818303038152906040528152602001618f8781525085617618565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790612f63908990899060040161af6c565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b81526004016162d192919061af6c565b60006040518083038186803b1580156162e957600080fd5b505afa1580156162fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526163259190810190619fc1565b9050600191508051600014156163be576040516315e8a07760e21b81526001600160a01b038816906357a281dc90616363908790899060040161af6c565b60006040518083038186803b15801561637b57600080fd5b505afa15801561638f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526163b79190810190619fc1565b9050600091505b805186106163d35760008092509250506163eb565b8086815181106163df57fe5b60200260200101519250505b94509492505050565b6000806000808680602001905181019061640e9190619c5b565b92509250925080156164b257604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e09061644e906000908a9060040161af53565b604080518083038187803b15801561646557600080fd5b5086fa93505050508015616496575060408051601f3d908101601f191682019092526164939181019061ab57565b60015b6164a65760009350505050612870565b50935061287092505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e09061644e906000908a9060040161af53565b8051606090806001600160401b038111801561650157600080fd5b5060405190808252806020026020018201604052801561652b578160200160208202803683370190505b50915060005b8181101561666157856001600160a01b031663d06ca61f620249f086848151811061655857fe5b6020026020010151886040518463ffffffff1660e01b815260040161657e92919061b810565b60006040518083038187803b15801561659657600080fd5b5086fa935050505080156165cc57506040513d6000823e601f3d908101601f191682016040526165c9919081019061a431565b60015b616606573d8080156165fa576040519150601f19603f3d011682016040523d82523d6000602084013e6165ff565b606091505b5050616661565b8060018751038151811061661657fe5b602002602001015184838151811061662a57fe5b60200260200101818152505083828151811061664257fe5b6020026020010151600014156166585750616661565b50600101616531565b50509392505050565b60606166768385613ed2565b8151806001600160401b038111801561668e57600080fd5b506040519080825280602002602001820160405280156166b8578160200160208202803683370190505b50915060006001600160a01b038616156166db576166d6878761827d565b6166de565b60005b905060006001600160a01b03861615616700576166fb888761827d565b616703565b60005b905060005b838110156123aa5760016001600160a01b0388166167595761673884632640f62c60e01b89858151811061523757fe5b87848151811061674457fe5b602002602001018193508281525050506167f3565b6001600160a01b03891661677f57616738836359e9486260e01b89858151811061523757fe5b6000616799846359e9486260e01b8a868151811061523757fe5b9250905080156167d6576167b5856309903d8b60e21b836182fc565b8885815181106167c157fe5b602002602001018194508281525050506167f1565b60008784815181106167e457fe5b6020026020010181815250505b505b801580616813575085828151811061680757fe5b60200260200101516000145b1561681e57506123aa565b50600101616708565b6000806060846001600160a01b03166370a0823160e01b8560405160240161684f919061af3f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161688d919061af23565b600060405180830381855afa9150503d80600081146168c8576040519150601f19603f3d011682016040523d82523d6000602084013e6168cd565b606091505b50915091508180156168e157506020815110155b156168f4576168f181600061603e565b92505b505092915050565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b03161461693a5786616950565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146169735786616989565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b169091526169bd9291906001906024810161b067565b60006040518083038186803b1580156169d557600080fd5b505afa1580156169e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616a11919081019061a059565b505090508051866000015110616a2d5750600091506128709050565b80866000015181518110616a3d57fe5b6020026020010151925060f883901c60001c60bb14156166615750600091506128709050565b80516060908190806001600160401b0381118015616a8057600080fd5b50604051908082528060200260200182016040528015616aaa578160200160208202803683370190505b509150616ab78686617f96565b9250825160001415616ac95750615161565b60005b8181101561480857866001600160a01b0316639e269b68620249f0878481518110616af357fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401616b1b9392919061b829565b60006040518083038187803b158015616b3357600080fd5b5086fa93505050508015616b6957506040513d6000823e601f3d908101601f19168201604052616b66919081019061a431565b60015b616b97573d8080156150fa576040519150601f19603f3d011682016040523d82523d6000602084013e6150ff565b80600081518110616ba457fe5b6020026020010151848381518110616bb857fe5b602002602001018181525050838281518110616bd057fe5b602002602001015160001415616be65750614808565b50600101616acc565b6060616bfb8385613ed2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110616c3157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110616c5f57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015616c8f57600080fd5b50604051908082528060200260200182016040528015616cb9578160200160208202803683370190505b509350616cc461948c565b616ccc618fd7565b905060005b828110156119d5576060616cf88b898481518110616ceb57fe5b6020026020010151619006565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90616d2e9060009085908a90899060040161b4a3565b600060405180830381600087803b158015616d4857600080fd5b505af1925050508015616d7d57506040513d6000823e601f3d908101601f19168201604052616d7a919081019061a2ad565b60015b616db8573d808015616dab576040519150601f19603f3d011682016040523d82523d6000602084013e616db0565b606091505b5050506119d5565b600081600181518110616dc757fe5b602002602001015160001902905060008113616de5575050506119d5565b80898581518110616df257fe5b602002602001018181525050505050600101616cd1565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401616e3392919061af6c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616e71919061af23565b600060405180830381855afa9150503d8060008114616eac576040519150601f19603f3d011682016040523d82523d6000602084013e616eb1565b606091505b5091509150818015616ec557506020815110155b1561666157616ed581600061603e565b9695505050505050565b6060616eeb8385613ed2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110616f2157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110616f4f57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015616f7f57600080fd5b50604051908082528060200260200182016040528015616fa9578160200160208202803683370190505b509350616fb461948c565b616fbc618fd7565b905060005b828110156119d5576060616fdb8b898481518110616ceb57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906170119060019085908a90899060040161b4a3565b600060405180830381600087803b15801561702b57600080fd5b505af192505050801561706057506040513d6000823e601f3d908101601f1916820160405261705d919081019061a2ad565b60015b61708e573d808015616dab576040519150601f19603f3d011682016040523d82523d6000602084013e616db0565b60008160008151811061709d57fe5b60200260200101519050600081136170b7575050506119d5565b808985815181106170c457fe5b602002602001018181525050505050600101616fc1565b600061604d82615dd7565b8051606090806001600160401b038111801561710157600080fd5b5060405190808252806020026020018201604052801561712b578160200160208202803683370190505b50915060005b8181101561666157856001600160a01b0316631f00ca74620249f086848151811061715857fe5b6020026020010151886040518463ffffffff1660e01b815260040161717e92919061b810565b60006040518083038187803b15801561719657600080fd5b5086fa935050505080156171cc57506040513d6000823e601f3d908101601f191682016040526171c9919081019061a431565b60015b6171fa573d8080156165fa576040519150601f19603f3d011682016040523d82523d6000602084013e6165ff565b8060008151811061720757fe5b602002602001015184838151811061721b57fe5b60200260200101818152505083828151811061723357fe5b6020026020010151600014156172495750616661565b50600101617131565b60008060606172618587613ed2565b8351806001600160401b038111801561727957600080fd5b506040519080825280602002602001820160405280156172a3578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906172d6908a908a9060040161af6c565b60206040518083038186803b1580156172ee57600080fd5b505afa158015617302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173269190619ba8565b925060006001600160a01b03841615617344575060019350866173e3565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690617375908a908c9060040161af6c565b60206040518083038186803b15801561738d57600080fd5b505afa1580156173a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173c59190619ba8565b93506001600160a01b0384166173dc575050610ec7565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561741c57600080fd5b505afa158015617430573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617454919061a463565b61745f575050610ec7565b6174d760405180606001604052808987858e60200151604051602001617488949392919061af86565b60405160208183030381529060405281526020018a87858e602001516040516020016174b7949392919061af86565b6040516020818303038152906040528152602001613f0d81525087617618565b925050509450945094915050565b6000806174f06194b3565b85806020019051810190617504919061a62c565b9150915060008580602001905181019061751e919061a610565b9050600060603063205e01d760e11b8587866175398c619098565b60405160240161754c949392919061b635565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161758a919061af23565b600060405180830381855afa9150503d80600081146175c5576040519150601f19603f3d011682016040523d82523d6000602084013e6175ca565b606091505b5091509150816175e257600095505050505050612870565b808060200190518101906175f6919061a431565b60008151811061760257fe5b6020026020010151955050505050509392505050565b606081516001600160401b038111801561763157600080fd5b5060405190808252806020026020018201604052801561765b578160200160208202803683370190505b50905081516000141561766d5761604d565b600061769e846000015185602001518560008151811061768957fe5b6020026020010151876040015163ffffffff16565b9050806176ab575061604d565b60006176c88560200151866000015184886040015163ffffffff16565b9050806176d657505061604d565b60005b8451811015617821576000805b60058110156177ca5761770d8784815181106176fe57fe5b602002602001015185876190d9565b945084617719576177ca565b617728612715612710876190d9565b945084617734576177ca565b600061775189602001518a60000151888c6040015163ffffffff16565b90508061775e57506177ca565b80945087848151811061776d57fe5b602002602001015185106177c15787848151811061778757fe5b602002602001015161271089868151811061779e57fe5b6020026020010151870302816177b057fe5b049250600583116177c157506177ca565b506001016176e6565b508015806177d85750600581115b156177e35750617821565b6178018683815181106177f257fe5b602002602001015184866190d9565b85838151811061780d57fe5b6020908102919091010152506001016176d9565b50505092915050565b6000828202831580159061784757508284828161784357fe5b0414155b1561785657600091505061604d565b6706f05b59d3b200008101818110156178745760009250505061604d565b670de0b6b3a76400009004949350505050565b606060028284510310156178ad5760405162461bcd60e51b8152600401613f049061b567565b6178b56194d3565b5060408051608081018252606481526101f46020820152610bb8818301526127106060808301919091528251600480825260a08201909452919290919081602001602082028036833701905050905060008086868151811061791357fe5b60200260200101519050600087876001018151811061792e57fe5b6020026020010151905060005b6004811015617a235760008a6001600160a01b0316631698ee8285858a866004811061796357fe5b60200201516040518463ffffffff1660e01b81526004016179869392919061b428565b60206040518083038186803b15801561799e57600080fd5b505afa1580156179b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906179d69190619ba8565b90506179e181619131565b15617a1a57808686806001019750815181106179f957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161793b565b50505080617a3357505050612870565b8551856002011415617b2957806001600160401b0381118015617a5557600080fd5b50604051908082528060200260200182016040528015617a8957816020015b6060815260200190600190039081617a745790505b50935060005b81811015617b2057604080516001808252818301909252906020808301908036833701905050858281518110617ac157fe5b6020026020010181905250828181518110617ad857fe5b6020026020010151858281518110617aec57fe5b6020026020010151600081518110617b0057fe5b6001600160a01b0390921660209283029190910190910152600101617a8f565b50505050612870565b6060617b39888888600101617887565b9050805160001415617b4e5750505050612870565b805182026001600160401b0381118015617b6757600080fd5b50604051908082528060200260200182016040528015617b9b57816020015b6060815260200190600190039081617b865790505b50945060005b82811015617d1b5760005b8251811015617d12578251828102820190849083908110617bc957fe5b6020026020010151516001016001600160401b0381118015617bea57600080fd5b50604051908082528060200260200182016040528015617c14578160200160208202803683370190505b50888281518110617c2157fe5b6020026020010181905250858381518110617c3857fe5b6020026020010151888281518110617c4c57fe5b6020026020010151600081518110617c6057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110617c8f57fe5b602002602001015151811015617d0857848381518110617cab57fe5b60200260200101518181518110617cbe57fe5b6020026020010151898381518110617cd257fe5b60200260200101518260010181518110617ce857fe5b6001600160a01b0390921660209283029190910190910152600101617c83565b5050600101617bac565b50600101617ba1565b50505050509392505050565b60606002835110158015617d3f575081516001018351145b617d5b5760405162461bcd60e51b8152600401613f049061b5f0565b81516003028351601402016001600160401b0381118015617d7b57600080fd5b506040519080825280601f01601f191660200182016040528015617da6576020820181803683370190505b5090506020810160005b84518110156168f4578015617e55576000846001830381518110617dd057fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1057600080fd5b505afa158015617e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617e48919061ab34565b60e81b8352506003909101905b6000858281518110617e6357fe5b602090810291909101015160601b835250601490910190600101617db0565b600080600085806020019051810190617e9b9190619bc4565b91509150600085806020019051810190617eb59190619ba8565b9050306330d6570d838584617ec98a619098565b6040518563ffffffff1660e01b8152600401617ee8949392919061afb1565b60006040518083038186803b158015617f0057600080fd5b505afa925050508015617f3557506040513d6000823e601f3d908101601f19168201604052617f32919081019061a431565b60015b617f76573d808015617f63576040519150601f19603f3d011682016040523d82523d6000602084013e617f68565b606091505b506000945050505050612870565b80600081518110617f8357fe5b6020026020010151945050505050612870565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015617fd357600080fd5b505afa158015617fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061800b9190619ba8565b905060018351036001600160401b038111801561802757600080fd5b50604051908082528060200260200182016040528015618051578160200160208202803683370190505b50915060005b82518110156168f4576060826001600160a01b0316635b1dc86f620249f087858151811061808157fe5b602002602001015188866001018151811061809857fe5b60200260200101516040518463ffffffff1660e01b81526004016180bd92919061af6c565b60006040518083038187803b1580156180d557600080fd5b5086fa9350505050801561810b57506040513d6000823e601f3d908101601f191682016040526181089190810190619fc1565b60015b618179573d808015618139576040519150601f19603f3d011682016040523d82523d6000602084013e61813e565b606091505b506000805b5060405190808252806020026020018201604052801561816d578160200160208202803683370190505b5094505050505061604d565b805161818757600080618143565b6000805b82518110156182715760008382815181106181a257fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156181e257600080fd5b505afa1580156181f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061821a919061a4e0565b9050828111156182685780925083828151811061823357fe5b602002602001015188878151811061824757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161818b565b50505050600101618057565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906182ac90859060040161af3f565b60206040518083038186803b1580156182c457600080fd5b505afa1580156182d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190619ba8565b6000806001600160a01b03851661831257615161565b6060856001600160a01b0316620249f08686604051602401618334919061b3e0565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051618372919061af23565b6000604051808303818686fa925050503d80600081146183ae576040519150601f19603f3d011682016040523d82523d6000602084013e6183b3565b606091505b50909250905081156183d657808060200190518101906183d3919061a4e0565b92505b50935093915050565b6000806183ea6194f1565b848060200190518101906183fe9190619ca3565b915091506000868060200190518101906184189190619ca3565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490618445908590859088908b9060040161b74d565b60206040518083038186803b15801561845d57600080fd5b505afa92505050801561848d575060408051601f3d908101601f1916820190925261848a9181019061a4e0565b60015b6184bb573d808015617f63576040519150601f19603f3d011682016040523d82523d6000602084013e617f68565b935061287092505050565b6000806184d16194b3565b858060200190518101906184e5919061a62c565b915091506000858060200190518101906184ff919061a610565b905060006060306322db5ed160e21b8587866175398c619098565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618550919061b3e0565b60a06040518083038186803b15801561856857600080fd5b505afa15801561857c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906185a0919061abaf565b945094505050925089604001516001600160a01b0316886001600160a01b031614156186cd5760008790506000618650886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561860957600080fd5b505afa15801561861d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618641919061a4e0565b670de0b6b3a764000090618809565b9050600061866a8261593f85670de0b6b3a764000061882d565b9050600061868e6b033b2e3c9fd0803ce8000000618688898561885e565b9061882d565b90508581106186a7576000975050505050505050616ed5565b60006186bd60016159398564e8d4a5100061887a565b9850616ed5975050505050505050565b89604001516001600160a01b0316896001600160a01b031614156187f95760006186fc8864e8d4a5100061882d565b90506000618783886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561873c57600080fd5b505afa158015618750573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618774919061a4e0565b670de0b6b3a76400009061885e565b9050600061879d670de0b6b3a764000061593f858561882d565b9050858111156187b65760009650505050505050616ed5565b60006187d26b033b2e3c9fd0803ce80000006186888985618809565b90508481116187eb576000975050505050505050616ed5565b509550616ed5945050505050565b5060009998505050505050505050565b600082821115618827576188276188226002858561933d565b619397565b50900390565b60008261883c5750600061604d565b8282028284828161884957fe5b041461604a5761604a6188226001868661933d565b60008282018381101561604a5761604a6188226000868661933d565b600081618890576188906188226003858561933d565b600082848161889b57fe5b04949350505050565b606081516001600160401b03811180156188bd57600080fd5b506040519080825280602002602001820160405280156188e7578160200160208202803683370190505b50905060005b8251811015611efc5782600182855103038151811061890857fe5b602002602001015182828151811061891c57fe5b6001600160a01b03909216602092830291909101909101526001016188ed565b606081516001600160401b038111801561895557600080fd5b5060405190808252806020026020018201604052801561897f578160200160208202803683370190505b50905060005b8251811015611efc578260018285510303815181106189a057fe5b60200260200101518282815181106189b457fe5b6001600160a01b0390921660209283029190910190910152600101618985565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618a0a919061b3e0565b60a06040518083038186803b158015618a2257600080fd5b505afa158015618a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618a5a919061abaf565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415618b66576000618a998964e8d4a5100061882d565b90506000618ab76b033b2e3c9fd0803ce8000000618688888561885e565b9050848110618acf5760009650505050505050616ed5565b6000618b58670de0b6b3a764000061593f8c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015618b1957600080fd5b505afa158015618b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b51919061a4e0565b869061882d565b905060006186bd8483618809565b8a604001516001600160a01b03168a6001600160a01b03161415618c1f578784811115618b9b57600095505050505050616ed5565b6000618bb76b033b2e3c9fd0803ce80000006186888885618809565b9050838111618bcf5760009650505050505050616ed5565b6000618c0d8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561873c57600080fd5b905060006186bd8261593f868861882d565b5060009a9950505050505050505050565b600080600085806020019051810190618c499190619bc4565b91509150600085806020019051810190618c639190619ba8565b90503063e8e4af09838584617ec98a619098565b600080600085806020019051810190618c909190619bc4565b91509150600085806020019051810190618caa9190619ba8565b90503063a469841762061a80848685618cc28b619098565b6040518663ffffffff1660e01b8152600401618ce1949392919061afb1565b60006040518083038187803b158015618cf957600080fd5b5086fa93505050508015617f3557506040513d6000823e601f3d908101601f19168201604052617f32919081019061a431565b60008160200183511015618d4d57618d4d618822600585518560200161939f565b50016020015190565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b158015618daa57600080fd5b505afa158015618dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618de2919061a4e0565b6040518263ffffffff1660e01b8152600401618dfe919061b3e0565b60206040518083038186803b158015618e1657600080fd5b505afa158015618e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618e4e9190619ba8565b915085602001515160001415618e63576163eb565b6000805b876020015151811015618f7c57600288602001518281518110618e8657fe5b6020026020010151511015618e9a57618f74565b836001600160a01b0316637f9c0ecd620493e08a602001518481518110618ebd57fe5b60200260200101518860018a510381518110618ed557fe5b60200260200101516040518463ffffffff1660e01b8152600401618efa92919061b297565b60206040518083038187803b158015618f1257600080fd5b5086fa93505050508015618f43575060408051601f3d908101601f19168201909252618f409181019061a4e0565b60015b618f4c57618f74565b82811115618f725780925088602001518281518110618f6757fe5b602002602001015193505b505b600101618e67565b505094509492505050565b600080600085806020019051810190618fa09190619bc4565b9150915060008086806020019051810190618fbb9190619bc4565b91509150618fcb84848389612877565b98975050505050505050565b618fdf61948c565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61902861953b565b8152602001906001900390816190205790505090506040518060a00160405280856000015181526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061908657fe5b60209081029190910101529392505050565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106190c857fe5b602002602001018181525050919050565b60008315806190e6575081155b806190ef575082155b156190fc57506000612870565b8382028285828161910957fe5b0414619119576000915050612870565b836001850382018161912757fe5b0495945050505050565b6000813b80619144576000915050610afc565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561917e57600080fd5b505afa158015619192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906191b69190619ba8565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016191e1919061af3f565b60206040518083038186803b1580156191f957600080fd5b505afa15801561920d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619231919061a4e0565b61923d57506000610afc565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561927657600080fd5b505afa15801561928a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906192ae9190619ba8565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016192d9919061af3f565b60206040518083038186803b1580156192f157600080fd5b505afa158015619305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619329919061a4e0565b61933557506000610afc565b506001919050565b606063e946c1bb60e01b84848460405160240161935c9392919061b474565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b84848460405160240161935c9392919061b495565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b82805482825590600052602060002090810192821561942b579160200282015b8281111561942b578251825591602001919060010190619410565b5061943792915061956d565b5090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180608001604052806004906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b5b80821115619437576000815560010161956e565b803561604d8161b977565b805161604d8161b977565b600082601f8301126195a8578081fd5b81356195bb6195b68261b8ed565b61b8c7565b8181529150602080830190848101818402860182018710156195dc57600080fd5b60005b848110156196045781356195f28161b977565b845292820192908201906001016195df565b505050505092915050565b600082601f83011261961f578081fd5b813561962d6195b68261b8ed565b818152915060208083019084810160005b8481101561960457619655888484358a010161980e565b8452928201929082019060010161963e565b600082601f830112619677578081fd5b81356196856195b68261b8ed565b8181529150602080830190848101818402860182018710156196a657600080fd5b60005b848110156196045781356196bc8161b977565b845292820192908201906001016196a9565b600082601f8301126196de578081fd5b81356196ec6195b68261b8ed565b818152915060208083019084810160808085028701830188101561970f57600080fd5b60005b85811015619736576197248984619b0d565b85529383019391810191600101619712565b50505050505092915050565b600082601f830112619752578081fd5b81356197606195b68261b8ed565b81815291506020808301908481018184028601820187101561978157600080fd5b60005b8481101561960457813584529282019290820190600101619784565b600082601f8301126197b0578081fd5b81516197be6195b68261b8ed565b8181529150602080830190848101818402860182018710156197df57600080fd5b60005b84811015619604578151845292820192908201906001016197e2565b8051801515811461604d57600080fd5b600082601f83011261981e578081fd5b813561982c6195b68261b90c565b915080825283602082850101111561984357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261986c578081fd5b815161987a6195b68261b90c565b915080825283602082850101111561989157600080fd5b611d4d81602084016020860161b93a565b80516002811061604d57600080fd5b6000606082840312156198c2578081fd5b6198cc606061b8c7565b905081356198d98161b977565b815260208201356198e98161b99a565b602082015260408201356198fc8161b99a565b604082015292915050565b600060608284031215619918578081fd5b619922606061b8c7565b9050815161992f8161b977565b8152602082015161993f8161b99a565b602082015260408201516198fc8161b99a565b600060408284031215619963578081fd5b61996d604061b8c7565b9050813561997a8161b977565b8152602082013561998a8161b977565b602082015292915050565b600060a082840312156199a6578081fd5b6199b060a061b8c7565b90508135815260208201356199c48161b977565b602082015260408201356199d78161b977565b604082015260608201356199ea8161b977565b606082015260808201356001600160401b03811115619a0857600080fd5b619a148482850161980e565b60808301525092915050565b6000610180808385031215619a33578182fd5b619a3c8161b8c7565b915050619a498383619582565b8152619a588360208401619582565b6020820152619a6a8360408401619b6a565b6040820152619a7c8360608401619b6a565b6060820152619a8e8360808401619b6a565b6080820152619aa08360a08401619582565b60a0820152619ab28360c08401619582565b60c0820152619ac48360e08401619582565b60e0820152610100619ad884828501619582565b908201526101208281013590820152610140619af684828501619b75565b818301525061016080830135818301525092915050565b600060808284031215619b1e578081fd5b619b28608061b8c7565b9050813560048110619b3957600080fd5b81526020820135619b498161b9d4565b80602083015250604082013560408201526060820135606082015292915050565b803561604d8161b9bf565b80356001600160401b038116811461604d57600080fd5b600060208284031215619b9d578081fd5b813561604a8161b977565b600060208284031215619bb9578081fd5b815161604a8161b977565b60008060408385031215619bd6578081fd5b8251619be18161b977565b6020840151909250619bf28161b977565b809150509250929050565b60008060008060808587031215619c12578182fd5b8451619c1d8161b977565b6020860151909450619c2e8161b977565b6040860151909350619c3f8161b977565b6060860151909250619c508161b977565b939692955090935050565b600080600060608486031215619c6f578081fd5b8351619c7a8161b977565b6020850151909350619c8b8161b977565b9150619c9a85604086016197fe565b90509250925092565b60008060408385031215619cb5578182fd5b8251619cc08161b977565b60208401519092506001600160401b0380821115619cdc578283fd5b9084019060a08287031215619cef578283fd5b619cf960a061b8c7565b82518152619d0a876020850161958d565b6020820152619d1c876040850161958d565b6040820152619d2e876060850161958d565b6060820152608083015182811115619d44578485fd5b619d508882860161985c565b6080830152508093505050509250929050565b600080600060608486031215619d77578081fd5b8335619d828161b977565b92506020840135619d928161b977565b91506040840135619da28161b977565b809150509250925092565b600080600080600060a08688031215619dc4578283fd5b8535619dcf8161b977565b94506020860135619ddf8161b977565b93506040860135619def8161b977565b92506060860135619dff8161b977565b915060808601356001600160401b03811115619e19578182fd5b619e2588828901619742565b9150509295509295909350565b60008060008060808587031215619e47578182fd5b8435619e528161b977565b93506020850135619e628161b977565b92506040850135619e728161b977565b915060608501356001600160401b03811115619e8c578182fd5b619e9887828801619742565b91505092959194509250565b60008060008060808587031215619eb9578182fd5b8435619ec48161b977565b93506020850135619ed48161b977565b92506040850135619ee48161b977565b9396929550929360600135925050565b60008060408385031215619f06578182fd5b8235619f118161b977565b915060208301356001600160401b03811115619f2b578182fd5b619f3785828601619598565b9150509250929050565b60008060008060808587031215619f56578182fd5b8435619f618161b977565b9350602085013592506040850135619f788161b977565b91506060850135619c508161b977565b600080600080600060a08688031215619f9f578283fd5b8535619faa8161b977565b9450602086013593506040860135619def8161b977565b60006020808385031215619fd3578182fd5b82516001600160401b03811115619fe8578283fd5b8301601f81018513619ff8578283fd5b805161a0066195b68261b8ed565b818152838101908385018584028501860189101561a022578687fd5b8694505b8385101561a04d57805161a0398161b977565b83526001949094019391850191850161a026565b50979650505050505050565b60008060006060848603121561a06d578081fd5b83516001600160401b038082111561a083578283fd5b818601915086601f83011261a096578283fd5b815161a0a46195b68261b8ed565b80828252602080830192508086018b82838702890101111561a0c4578788fd5b8796505b8487101561a0e657805184526001969096019592810192810161a0c8565b50890151909750935050508082111561a0fd578283fd5b5061a10a868287016197a0565b925050619c9a85604086016198a2565b6000806020838503121561a12c578182fd5b82356001600160401b038082111561a142578384fd5b818501915085601f83011261a155578384fd5b81358181111561a163578485fd5b866020808302850101111561a176578485fd5b60209290920196919550909350505050565b60008060006060848603121561a19c578081fd5b83356001600160401b038082111561a1b2578283fd5b61a1be8783880161960f565b9450602086013591508082111561a1d3578283fd5b5061a1e08682870161960f565b925050604084013590509250925092565b60006020828403121561a202578081fd5b81356001600160401b0381111561a217578182fd5b61097c84828501619667565b6000806040838503121561a235578182fd5b82356001600160401b0381111561a24a578283fd5b61a25685828601619667565b9250506020830135619bf28161b977565b60008060006060848603121561a27b578081fd5b83356001600160401b0381111561a290578182fd5b61a29c86828701619667565b9350506020840135619d928161b977565b6000602080838503121561a2bf578182fd5b82516001600160401b0381111561a2d4578283fd5b8301601f8101851361a2e4578283fd5b805161a2f26195b68261b8ed565b818152838101908385018584028501860189101561a30e578687fd5b8694505b8385101561a04d57805183526001949094019391850191850161a312565b60008060006060848603121561a344578081fd5b83356001600160401b038082111561a35a578283fd5b818601915086601f83011261a36d578283fd5b813561a37b6195b68261b8ed565b80828252602080830192508086016101808c838288028a0101111561a39e578889fd5b8897505b8588101561a3ca5761a3b48d83619a20565b855260019790970196938201939081019061a3a2565b5091985089013594505050508082111561a3e2578283fd5b5061a3ef868287016196ce565b925050619c9a8560408601619582565b60006020828403121561a410578081fd5b81356001600160401b0381111561a425578182fd5b61097c84828501619742565b60006020828403121561a442578081fd5b81516001600160401b0381111561a457578182fd5b61097c848285016197a0565b60006020828403121561a474578081fd5b815161604a8161b98c565b60008060006060848603121561a493578081fd5b835161a49e8161b98c565b602085015190935061a4af8161b977565b60408501519092506001600160401b0381111561a4ca578182fd5b61a4d6868287016197a0565b9150509250925092565b60006020828403121561a4f1578081fd5b5051919050565b60008060006060848603121561a50c578081fd5b8351925060208401516001600160401b038082111561a529578283fd5b61a5358783880161985c565b9350604086015191508082111561a54a578283fd5b5061a4d6868287016197a0565b60006020828403121561a568578081fd5b81516001600160401b0381111561a57d578182fd5b61097c8482850161985c565b6000806040838503121561a59b578182fd5b825161a5a68161b977565b60208401519092506001600160401b0381111561a5c1578182fd5b619f37858286016197a0565b6000806040838503121561a5df578182fd5b823561a5ea8161b977565b915060208301356001600160401b0381111561a604578182fd5b619f3785828601619667565b60006020828403121561a621578081fd5b815161604a8161b9b0565b6000806080838503121561a63e578182fd5b825161a6498161b9b0565b915061a6588460208501619907565b90509250929050565b6000806000838503608081121561a676578182fd5b604081121561a683578182fd5b5061a68e604061b8c7565b84358152602085013561a6a08161b977565b60208201529250604084013561a6b58161b977565b91506060840135619da28161b977565b60008060006060848603121561a6d9578081fd5b83356001600160401b038082111561a6ef578283fd5b908501906040828803121561a702578283fd5b61a70c604061b8c7565b823561a7178161b977565b81526020838101358381111561a72b578586fd5b80850194505088601f85011261a73f578485fd5b8335925061a74f6195b68461b8ed565b83815281810190858301875b8681101561a7845761a7728d8684358b0101619598565b8452928401929084019060010161a75b565b505083830152509095508601359150619d9290508161b977565b600080600060a0848603121561a7b2578081fd5b61a7bc85856198b1565b9250606084013561a7cc8161b9b0565b91506080840135619da28161b9b0565b60008060008060c0858703121561a7f1578182fd5b61a7fb86866198b1565b9350606085013561a80b8161b9b0565b9250608085013561a81b8161b9b0565b915060a08501356001600160401b03811115619e8c578182fd5b60008060006080848603121561a849578081fd5b61a8538585619952565b9250604084013561a6b58161b977565b60008060008060a0858703121561a878578182fd5b61a8828686619952565b9350604085013561a8928161b977565b9250606085013561a8a28161b977565b915060808501356001600160401b03811115619e8c578182fd5b60008060006060848603121561a8d0578081fd5b83356001600160401b0381111561a8e5578182fd5b61a29c86828701619995565b6000806000806080858703121561a906578182fd5b84356001600160401b038082111561a91c578384fd5b61a92888838901619995565b95506020870135915061a93a8261b977565b90935060408601359061a94c8261b977565b9092506060860135908082111561a961578283fd5b50619e9887828801619742565b6000806000806080858703121561a983578182fd5b84356001600160401b0381111561a998578283fd5b61a9a487828801619995565b9450506020850135619ed48161b977565b6000806000806080858703121561a9ca578182fd5b84356001600160401b0381111561a9df578283fd5b61a9eb87828801619995565b945050602085013592506040850135619f788161b977565b6000806000610220848603121561aa18578081fd5b61aa228585619a20565b925061aa32856101808601619b0d565b9150610200840135619da28161b977565b600080600083850360a081121561aa58578182fd5b606081121561aa65578182fd5b5061aa70606061b8c7565b843561aa7b8161b977565b815260208581013590820152604085013561aa958161b977565b60408201529250606084013561aaaa8161b977565b91506080840135619da28161b977565b600080600083850360a081121561aacf578182fd5b606081121561aadc578182fd5b5061aae7606061b8c7565b8451815260208501516005811061aafc578283fd5b6020820152604085015161ab0f8161b9bf565b6040820152606085015190935061ab258161b9bf565b9150619c9a85608086016197fe565b60006020828403121561ab45578081fd5b815162ffffff8116811461604a578182fd5b6000806040838503121561ab69578182fd5b505080516020909101519092909150565b6000806000806080858703121561ab8f578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a0868803121561abc6578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60006020828403121561abff578081fd5b815161604a8161b9d4565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561ac4f5781516001600160a01b03168752958201959082019060010161ac2a565b509495945050505050565b6000815180845260208085019450808401835b8381101561ac4f5781518752958201959082019060010161ac6d565b6000815480845260208085019450838352808320835b8381101561ac4f5781548752958201956001918201910161ac9f565b6000815180845261acd381602086016020860161b93a565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261097c60a085018261acbb565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60008151835260208201516040602085015261097c604085018261acbb565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261097c60a085018261acbb565b61ae0282825161ac0a565b602081015161ae14602084018261ac0a565b50604081015161ae27604084018261aef9565b50606081015161ae3a606084018261aef9565b50608081015161ae4d608084018261aef9565b5060a081015161ae6060a084018261ac0a565b5060c081015161ae7360c084018261ac0a565b5060e081015161ae8660e084018261ac0a565b506101008082015161ae9a8285018261ac0a565b505061012081810151908301526101408082015161aeba8285018261af06565b505061016090810151910152565b61aed2815161b92f565b825260ff602082015116602083015260408101516040830152606081015160608301525050565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b6000825161af3581846020870161b93a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090616ed59083018461ac5a565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090616ed59083018461ac89565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090616ed59083018461acbb565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061b0f99083018461acbb565b979650505050505050565b6001600160a01b038416815260606020820181905260009061b1289083018561ac17565b8281036040840152616ed5818561ac5a565b6001600160a01b0385168152600061b1518561b92f565b60208301526080604083015261b16a608083018561ac5a565b828103606084015261b0f9818561ac5a565b6001600160a01b0389811682526000906101009061b1998b61b96a565b8a602085015281604085015261b1b18285018b61ac5a565b9150838203606085015261b1c5828a61ac5a565b9088166080850152905061b1d88661b96a565b8560a084015282810360c084015261b1f0818661ac5a565b905082810360e084015261b204818561ac5a565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061097c9083018461adaa565b6001600160a01b0386811682526020820186905284811660408301528316606082015260a06080820181905260009061b0f99083018461ac89565b60006040825261b285604083018561ac17565b82810360208401526110b0818561ac5a565b60006040825261b2aa604083018561ac17565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561b30e57605f1988840301855261b2fc83835161acbb565b9486019492509085019060010161b2e0565b505085810384870152618fcb818861ac5a565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561b38857888303603f190185528151805187855261b3698886018261acbb565b918901511515948901949094529487019492509086019060010161b345565b509098975050505050505050565b600060208252612870602083018461ac5a565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906110b09083018461ac5a565b90815260200190565b60008482526060602083015261b128606083018561acbb565b600060208252612870602083018461acbb565b60006040825261b2aa604083018561acbb565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b038316815260406020820181905260009061097c9083018461ac5a565b6060810161b4818561b96a565b938152602081019290925260409091015290565b606081016008851061b48157fe5b600060e082016002871061b4b357fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b8281101561b50a5760ff1988870301845261b4f886835161ace7565b9550928401929084019060010161b4dc565b5050505050828103604084015261b521818661ac17565b9150506110b0606083018461ad56565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101612870602083018461ad24565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b600061b641828761ad24565b84600f0b606083015283600f0b608083015260c060a0830152616ed560c083018461ac5a565b600061b673828761ad24565b84600f0b606083015283600f0b608083015260c060a0830152616ed560c083018461ac89565b84516001600160a01b03908116825260208087015182169083015284811660408301528316606082015260a060808201819052600090616ed59083018461ac89565b60006060825261b6ee606083018661ad8b565b828103602084015261b700818661ad8b565b915050826040830152949350505050565b60006080825261b724608083018761adaa565b6001600160a01b03868116602085015285166040840152828103606084015261b0f9818561ac89565b60006080825261b760608083018761adaa565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261b796608083018761adaa565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161b7cb828561adf7565b61287061018083018461aec8565b610220810161b7e8828661adf7565b61b7f661018083018561aec8565b6001600160a01b0392909216610200919091015292915050565b60008382526040602083015261097c604083018461ac17565b60008482526060602083015261b842606083018561ac17565b8281036040840152616ed5818561ac17565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261b892578283fd5b8301803591506001600160401b0382111561b8ab578283fd5b60200191503681900382131561b8c057600080fd5b9250929050565b6040518181016001600160401b038111828210171561b8e557600080fd5b604052919050565b60006001600160401b0382111561b902578081fd5b5060209081020190565b60006001600160401b0382111561b921578081fd5b50601f01601f191660200190565b8060048110610afc57fe5b60005b8381101561b95557818101518382015260200161b93d565b8381111561b964576000848401525b50505050565b6004811061b97457fe5b50565b6001600160a01b038116811461b97457600080fd5b801515811461b97457600080fd5b6001600160e01b03198116811461b97457600080fd5b80600f0b811461b97457600080fd5b6001600160801b038116811461b97457600080fd5b60ff8116811461b97457600080fdfea2646970667358221220304a9f34801914d43594a21b9400bdf1942b20b2adb44e0a8e62b58dbf45b7e764736f6c634300060c0033",
                "opcodes": "PUSH1 0x0 PUSH1 0xA0 DUP2 SWAP1 MSTORE PUSH1 0xC0 PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x1A SWAP2 SWAP1 DUP2 PUSH3 0x53 JUMP JUMPDEST POP PUSH32 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE000000000000000000000000 PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xBA JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH3 0x91 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x91 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x74 JUMP JUMPDEST POP PUSH3 0x9F SWAP3 SWAP2 POP PUSH3 0xA3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xA4 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH2 0xBA19 PUSH3 0xE2 PUSH1 0x0 CODECOPY DUP1 PUSH2 0x1E63 MSTORE DUP1 PUSH2 0x3111 MSTORE DUP1 PUSH2 0x34AF MSTORE POP PUSH2 0xBA19 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3D0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73748669 GT PUSH2 0x1FF JUMPI DUP1 PUSH4 0xB494DDE2 GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xE8E4AF09 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xF499072A GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF499072A EQ PUSH2 0x8D2 JUMPI DUP1 PUSH4 0xF64EA46B EQ PUSH2 0x8E5 JUMPI DUP1 PUSH4 0xF8E43DB4 EQ PUSH2 0x8F8 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x90B JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x886 JUMPI DUP1 PUSH4 0xEB66ECD5 EQ PUSH2 0x899 JUMPI DUP1 PUSH4 0xF02B6541 EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x8BF JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xCC1621C9 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x83A JUMPI DUP1 PUSH4 0xCF56B397 EQ PUSH2 0x84D JUMPI DUP1 PUSH4 0xDE920F44 EQ PUSH2 0x860 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x873 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xB494DDE2 EQ PUSH2 0x7EC JUMPI DUP1 PUSH4 0xB9184DD1 EQ PUSH2 0x7FF JUMPI DUP1 PUSH4 0xBB5BFC54 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x827 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x192 JUMPI DUP1 PUSH4 0xA75E744B GT PUSH2 0x161 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0xAA9D843E EQ PUSH2 0x7B3 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x7C6 JUMPI DUP1 PUSH4 0xB215FDFA EQ PUSH2 0x7D9 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0xA0EAF051 EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0xA14FD709 EQ PUSH2 0x76C JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x78D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x8D23F454 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8D23F454 EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x6EF JUMPI DUP1 PUSH4 0x911D4895 EQ PUSH2 0x711 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x733 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x73748669 EQ PUSH2 0x690 JUMPI DUP1 PUSH4 0x77FA0754 EQ PUSH2 0x6A3 JUMPI DUP1 PUSH4 0x801C0CC5 EQ PUSH2 0x6B6 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x6C9 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x42C4B2AD GT PUSH2 0x2EF JUMPI DUP1 PUSH4 0x55801E0F GT PUSH2 0x282 JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x251 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0x6B79FAF8 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x70571F67 EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x67D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x55801E0F EQ PUSH2 0x5FE JUMPI DUP1 PUSH4 0x59861E07 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x5F8C0AE6 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x624 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x4EB1F412 GT PUSH2 0x2BE JUMPI DUP1 PUSH4 0x4EB1F412 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x5C3 JUMPI DUP1 PUSH4 0x50411454 EQ PUSH2 0x5E3 JUMPI DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x5F6 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x42C4B2AD EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0x43906A11 EQ PUSH2 0x58A JUMPI DUP1 PUSH4 0x4578DAB5 EQ PUSH2 0x59D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x2DF83510 GT PUSH2 0x367 JUMPI DUP1 PUSH4 0x329B2E6A GT PUSH2 0x336 JUMPI DUP1 PUSH4 0x329B2E6A EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0x3CED5F19 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x3DD941A4 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x54F JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x2DF83510 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x2E2C7B38 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x30756A2F EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x4F5 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x1B86982F GT PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x1B86982F EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x2C46DC03 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x49B JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x600E796 EQ PUSH2 0x3D5 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x181A265C EQ PUSH2 0x431 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E8 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E8 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST PUSH2 0x424 PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x9B8C JUMP JUMPDEST PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB3A9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0xB01 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8BC JUMP JUMPDEST PUSH2 0xB5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB3E9 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0xA863 JUMP JUMPDEST PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB3B4 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9DAD JUMP JUMPDEST PUSH2 0xF2F JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0xA5CD JUMP JUMPDEST PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB2B9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1180 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1352 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST PUSH2 0x541 PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x1431 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB272 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0xA7DC JUMP JUMPDEST PUSH2 0x148F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x166E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x598 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8BC JUMP JUMPDEST PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5AB CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x16D3 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5BE CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x1700 JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0x5D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA9B5 JUMP JUMPDEST PUSH2 0x175E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB402 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x19E3 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x1A41 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x60C CALLDATASIZE PUSH1 0x4 PUSH2 0x9F41 JUMP JUMPDEST PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x61F CALLDATASIZE PUSH1 0x4 PUSH2 0xAA43 JUMP JUMPDEST PUSH2 0x1AE0 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x632 CALLDATASIZE PUSH1 0x4 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x1B3E JUMP JUMPDEST PUSH2 0x64A PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0xA11A JUMP JUMPDEST PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB321 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5CD JUMP JUMPDEST PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x678 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA43 JUMP JUMPDEST PUSH2 0x1DB2 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x68B CALLDATASIZE PUSH1 0x4 PUSH2 0xA1F1 JUMP JUMPDEST PUSH2 0x1E10 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x69E CALLDATASIZE PUSH1 0x4 PUSH2 0x9F41 JUMP JUMPDEST PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x6B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0x1F64 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1FE9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7DC JUMP JUMPDEST PUSH2 0x2047 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x23B6 JUMP JUMPDEST PUSH2 0x702 PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0xA188 JUMP JUMPDEST PUSH2 0x2414 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB6DB JUMP JUMPDEST PUSH2 0x724 PUSH2 0x71F CALLDATASIZE PUSH1 0x4 PUSH2 0xA6C5 JUMP JUMPDEST PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB104 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x741 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA03 JUMP JUMPDEST PUSH2 0x2730 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EA4 JUMP JUMPDEST PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x724 PUSH2 0x767 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6C5 JUMP JUMPDEST PUSH2 0x2A8D JUMP JUMPDEST PUSH2 0x77F PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB450 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x79B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x2B5A JUMP JUMPDEST PUSH2 0x479 PUSH2 0x7AE CALLDATASIZE PUSH1 0x4 PUSH2 0x9F88 JUMP JUMPDEST PUSH2 0x2CAF JUMP JUMPDEST PUSH2 0x77F PUSH2 0x7C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x2DEC JUMP JUMPDEST PUSH2 0x77F PUSH2 0x7D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x2E6F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x7E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x2FBF JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x301C JUMP JUMPDEST PUSH2 0x812 PUSH2 0x80D CALLDATASIZE PUSH1 0x4 PUSH2 0xA3FF JUMP JUMPDEST PUSH2 0x3049 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH2 0x822 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x3060 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x835 CALLDATASIZE PUSH1 0x4 PUSH2 0xA223 JUMP JUMPDEST PUSH2 0x30BE JUMP JUMPDEST PUSH2 0x457 PUSH2 0x848 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8F1 JUMP JUMPDEST PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x541 PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x33A0 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x86E CALLDATASIZE PUSH1 0x4 PUSH2 0xA661 JUMP JUMPDEST PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x881 CALLDATASIZE PUSH1 0x4 PUSH2 0xA267 JUMP JUMPDEST PUSH2 0x345C JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x894 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x3551 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x3684 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8BA CALLDATASIZE PUSH1 0x4 PUSH2 0xA661 JUMP JUMPDEST PUSH2 0x36B1 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x8CD CALLDATASIZE PUSH1 0x4 PUSH2 0xA96E JUMP JUMPDEST PUSH2 0x370F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x38AE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x38DB JUMP JUMPDEST PUSH2 0x479 PUSH2 0x906 CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x702 PUSH2 0x919 CALLDATASIZE PUSH1 0x4 PUSH2 0xA188 JUMP JUMPDEST PUSH2 0x3999 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x972 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x95E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3C40 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xAEF JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB7D9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA78 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA75 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xACC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAAB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xABA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xAE7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9CD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB41 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3E40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCC1621C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 DUP2 SWAP1 ADDRESS SWAP1 PUSH4 0xCC1621C9 SWAP1 PUSH2 0xB90 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB711 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBBC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA4F8 JUMP JUMPDEST SWAP2 SWAP9 SWAP1 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xC02 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC44 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0xC77 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC7 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xCE5 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0xD84 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0xD16 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xD7D JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF5 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST PUSH2 0xE00 JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 PUSH2 0xE7D DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE2B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE55 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F0D JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEA4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEBA JUMPI POP PUSH2 0xEC3 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE03 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xF25 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xF11 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4046 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0xF8B JUMPI POP PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xFBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFDA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB019 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1018 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x107D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x107A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x108A JUMPI POP POP POP PUSH2 0x10AD JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1097 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xF8E JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x10F9 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x45BD JUMP JUMPDEST SWAP1 SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1176 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1162 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4812 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x11D4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x11C0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4D4B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11EA DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x122C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x125B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12CA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C7 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1304 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1348 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1311 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1329 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x133F JUMPI POP PUSH2 0x1348 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1232 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x13A6 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1392 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE8E4AF09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xE8E4AF09 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1409 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x97C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1485 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1471 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4FC6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x150B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1525 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1563 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x159F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x15C8 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x15C5 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x15D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x15ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1605 JUMPI POP POP POP PUSH2 0x1348 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1664 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1650 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5169 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x16B5 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x40BC03AE SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB667 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1754 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1740 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5459 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1795 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17CD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x18BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1826 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB13A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1874 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1871 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x18B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x97C SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19D8 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1914 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1826 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB13A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1954 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xB17C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x196C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x199F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1A37 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1A23 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA75E744B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xA75E744B SWAP1 PUSH2 0x1A7C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB237 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1AD0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA47F JUMP JUMPDEST SWAP2 SWAP10 SWAP1 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1B34 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1B20 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x56CE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B4B DUP5 DUP5 DUP5 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xAEF JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1BEB JUMPI PUSH2 0x1BD2 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1B83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x591B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C45 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1C32 PUSH2 0x93BE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1C2A JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1D4D JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C60 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1C7E JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1C90 SWAP2 SWAP1 PUSH2 0xB87C JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1C9D JUMPI PUSH2 0x1D45 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CAA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1CBC SWAP2 SWAP1 PUSH2 0xB87C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CCA SWAP3 SWAP2 SWAP1 PUSH2 0xAF13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1D30 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C4B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1DA8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1D94 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1DF2 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5B8A JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E53 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x1EFC JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1ED7 JUMPI PUSH2 0x1ED2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5DD7 JUMP JUMPDEST PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EE9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1E59 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1AD0 DUP8 DUP8 DUP8 DUP8 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1F5A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1F46 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5E83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2AA64319 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x2AA64319 SWAP1 PUSH2 0x1F95 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB699 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA47F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x203D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2029 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5F72 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x207E SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20CE SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x2101 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x212D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2151 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2189 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21D9 SWAP2 SWAP1 PUSH2 0xAB7A JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x21ED JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x220A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2234 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x226B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2285 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x22C3 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2328 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2325 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2362 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2359 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2346 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2331 JUMP JUMPDEST POP POP POP POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x236F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2387 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x239F JUMPI POP POP POP PUSH2 0x23AA JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x223A JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x240A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x23F6 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5FD8 JUMP JUMPDEST PUSH2 0x241C PUSH2 0x93D6 JUMP JUMPDEST PUSH2 0x2424 PUSH2 0x93D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2474 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2460 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 EQ PUSH2 0x25B8 JUMPI DUP8 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x24DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x24FE SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x252E SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x256B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2570 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x25AE JUMPI PUSH1 0x0 PUSH2 0x2594 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x25AC JUMPI DUP4 DUP11 MSTORE PUSH1 0x20 DUP11 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x24C6 JUMP JUMPDEST POP DUP2 PUSH2 0x25C5 JUMPI POP POP PUSH2 0x26BE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 EQ PUSH2 0x26BA JUMPI DUP3 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x25DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2600 SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x261B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2630 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x266D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2672 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x26B0 JUMPI PUSH1 0x0 PUSH2 0x2696 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT ISZERO PUSH2 0x26AE JUMPI DUP4 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP3 SWAP1 MSTORE SWAP7 POP DUP7 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x25C8 JUMP JUMPDEST POP POP POP JUMPDEST DUP1 MLOAD PUSH2 0x26D1 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x26FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2724 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2740 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x2758 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2756 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x276E JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x2784 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2791 JUMPI POP PUSH1 0x0 PUSH2 0x2870 JUMP JUMPDEST PUSH2 0x2799 PUSH2 0x943B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27CA SWAP3 SWAP2 SWAP1 PUSH2 0xB7BC JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x281A SWAP2 SWAP1 PUSH2 0xAABA JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2833 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x283E JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2851 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2862 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28A8 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28F8 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2912 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x294F SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x297B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x299F SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x29B0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x29C5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x29FA SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2A43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2A40 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A83 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x97C JUMP JUMPDEST SWAP3 POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2AD0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6053 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2B4E DUP6 DUP6 DUP6 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2B44 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2B30 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x61B2 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2B75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B9F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2C3D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2C3A SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2C6B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C90 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2CA6 JUMPI POP PUSH2 0x1348 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2BA5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2CBE DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D00 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2D0F DUP10 DUP10 DUP10 DUP10 PUSH2 0x629E JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D27 JUMPI POP PUSH2 0x2DE1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DDE JUMPI PUSH1 0x0 PUSH2 0x2D98 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D4C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D70 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2D8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x63F4 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2DA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2DD5 JUMPI POP PUSH2 0x2DDE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2D2A JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xADC636BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xADC636BF SWAP1 PUSH2 0x2E1B SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B4E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA589 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2E7D DUP5 DUP7 PUSH2 0x3ED2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EBF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2F34 JUMPI PUSH1 0x0 PUSH2 0x2EEE DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2EE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2877 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2F2B JUMPI POP PUSH2 0x2F34 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2EC5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x2F63 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FB3 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2870 DUP4 DUP4 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3012 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2FFE JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x64E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA4698417 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xA4698417 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x305C SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x30B4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x30A0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x666A JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x30D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3101 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1D4D JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3145 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x318F JUMPI PUSH2 0x318A DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x316B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6827 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x319B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x31A7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3107 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x31C9 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x31D4 DUP8 DUP8 DUP8 PUSH2 0x68FC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x31E0 JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x3209 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB783 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3235 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x325D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3394 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x32D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32FE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB74D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x332A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x334E SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x335D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3375 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x338B JUMPI POP PUSH2 0x3394 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x32AF JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x33F4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x33E0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6A63 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3452 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x343E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6BEF JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x349F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xAEF JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x352F JUMPI PUSH2 0x352A DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x350A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6E09 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3532 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x353E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x34A5 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x356C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3596 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x35C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35EB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3634 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3631 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3662 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x366F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x359C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x8B6D7B44 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB667 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3705 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x36F1 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6EDF JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3727 JUMPI POP PUSH1 0x0 PUSH2 0x97C JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3761 JUMPI DUP7 PUSH2 0x3777 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x379A JUMPI DUP7 PUSH2 0x37B0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37D8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB0BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3821 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x381E SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x385F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x384F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3854 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x386A DUP6 PUSH2 0x70DB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x387A DUP8 PUSH2 0x70DB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x389B JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x38A3 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x30D6570D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x30D6570D SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2870 DUP4 DUP4 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x392E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x391A JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x70E6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x398F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x397B JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x39A1 PUSH2 0x93D6 JUMP JUMPDEST PUSH2 0x39A9 PUSH2 0x93D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x39E5 JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 NOT SWAP8 POP SWAP5 SWAP6 POP DUP7 SWAP5 PUSH1 0x60 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 EQ PUSH2 0x3B2D JUMPI DUP8 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3A67 SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3A82 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3A97 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3B23 JUMPI PUSH1 0x0 PUSH2 0x3AFD PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3B0E JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3B21 JUMPI DUP4 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3A2F JUMP JUMPDEST POP PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3B3F JUMPI POP POP PUSH2 0x26BE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 EQ PUSH2 0x26BA JUMPI DUP3 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3B7A SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3BAA SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BE7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BEC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3C36 JUMPI PUSH1 0x0 PUSH2 0x3C10 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3C21 JUMPI POP DUP8 DUP2 LT JUMPDEST ISZERO PUSH2 0x3C34 JUMPI DUP4 DUP11 MSTORE PUSH1 0x20 DUP11 ADD DUP3 SWAP1 MSTORE SWAP7 POP DUP7 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3B42 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3CC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3CBB SWAP1 DUP1 PUSH2 0x3C74 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C9B SWAP3 SWAP2 SWAP1 PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x74E5 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST SWAP1 POP PUSH2 0x97C JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3CDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D04 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3D3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3D55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D93 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3DCF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3DF8 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3DF5 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E35 JUMPI POP POP POP PUSH2 0x1348 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3D0A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E4C DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x3E7E JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xAEF JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3E9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EC7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x305C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB5AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F29 SWAP2 SWAP1 PUSH2 0x9BFD JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4013 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x3F7C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FC5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3FC2 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4007 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3FF3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FF8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST SWAP5 POP PUSH2 0x2870 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x3F7C SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x408D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x40BD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x410D SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x4192 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4140 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x416C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4190 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x419E JUMPI POP POP PUSH2 0x97C JUMP JUMPDEST PUSH2 0x41A6 PUSH2 0x945D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x41D2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4222 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4250 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x427C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42A0 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x42D1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4321 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4354 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x436C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4380 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43A4 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x441E SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH2 0x4451 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x4448 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x782A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x445D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4470 JUMPI PUSH2 0x23AA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x44A3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB854 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x451A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4517 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4554 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4548 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x454D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x23AA JUMP JUMPDEST DUP3 MLOAD PUSH2 0x456C SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x782A JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x4579 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4586 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x459E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x45B4 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4426 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x463E DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4612 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4636 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x7887 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4681 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x469B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x46CF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x46BA JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x4808 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x47C0 JUMPI PUSH1 0x60 PUSH2 0x470C DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x46FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7D27 JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x927C0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x472E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4753 SWAP3 SWAP2 SWAP1 PUSH2 0xB415 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x476D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x479E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x479B SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x47A7 JUMPI PUSH2 0x47B7 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x47B5 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x46E4 JUMP JUMPDEST POP DUP1 PUSH2 0x47CD JUMPI POP POP PUSH2 0x4808 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x46D5 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x482F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4859 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4889 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x48D9 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x495E JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x490C SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x495C SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x496A JUMPI POP POP PUSH2 0x97C JUMP JUMPDEST PUSH2 0x4972 PUSH2 0x945D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x499E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49EE SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4A1C SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A6C SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4A9D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AED SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4B20 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B70 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BEA SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP2 MLOAD PUSH2 0x4C10 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4566 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4C2F JUMPI PUSH2 0x23AA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4C62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C90 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB854 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4CD9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4CD6 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D07 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4548 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x454D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D42 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4BF2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D90 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E06 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7B SWAP2 SWAP1 PUSH2 0xABEE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4EF3 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EED JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x4ECD JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EDA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E9D JUMP JUMPDEST POP PUSH2 0x19D8 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x19D8 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4F30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x4F40 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F4D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4F10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x4F7F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FA6 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E82 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x500D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x501A DUP7 DUP7 PUSH2 0x7F96 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x502C JUMPI POP PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4808 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5056 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x507E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x50CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x50C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5106 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x4808 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5116 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x512A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5158 JUMPI POP PUSH2 0x4808 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x502F JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5175 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x518D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x51DA JUMPI PUSH2 0x51D5 DUP8 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x51DD JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x51FF JUMPI PUSH2 0x51FA DUP9 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x5202 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5265 JUMPI PUSH2 0x5244 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x82FC JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5250 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x52FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x528B JUMPI PUSH2 0x5244 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x52A5 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x52E2 JUMPI PUSH2 0x52C1 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x82FC JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x52CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x52FD JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x52F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x531F JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x532A JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5207 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x5342 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x534D DUP8 DUP8 DUP8 PUSH2 0x68FC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x5359 JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x5382 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB783 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x539A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x53D6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x544D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5406 SWAP3 SWAP2 SWAP1 PUSH2 0xB213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x542D SWAP3 SWAP2 SWAP1 PUSH2 0xB213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83DF DUP2 MSTORE POP DUP6 PUSH2 0x7618 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5478 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x549F SWAP3 SWAP2 SWAP1 PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84C6 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x54DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5504 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5556 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x557A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x55CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x55EF SWAP2 SWAP1 PUSH2 0xABEE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5661 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EED JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5631 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x5641 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x564E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5611 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x19D8 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x569D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x56AE JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x56BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x567E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x56DA DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x571E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5756 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x579B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x580F SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x58B2 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5878 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x589C SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x58BF JUMPI POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH2 0x58ED DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x58DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x851A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x58FA JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5907 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x58C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97C DUP4 PUSH2 0x593F PUSH2 0x592F DUP3 PUSH1 0x1 PUSH2 0x8809 JUMP JUMPDEST PUSH2 0x5939 DUP9 DUP8 PUSH2 0x882D JUMP JUMPDEST SWAP1 PUSH2 0x885E JUMP JUMPDEST SWAP1 PUSH2 0x887A JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x5986 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x5993 DUP7 PUSH2 0x88A4 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x59D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A24 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5A0F JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x5B7F JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x5B37 JUMPI PUSH1 0x60 PUSH2 0x5A69 DUP7 PUSH2 0x5A64 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5A57 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x893C JUMP JUMPDEST PUSH2 0x7D27 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x927C0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5A8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB0 SWAP3 SWAP2 SWAP1 PUSH2 0xB415 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5AFB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5AF8 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5B04 JUMPI PUSH2 0x5B2E JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x5B11 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x5B2C JUMPI DUP1 SWAP4 POP PUSH2 0x5B29 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46FF JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5A39 JUMP JUMPDEST POP DUP1 PUSH2 0x5B44 JUMPI POP POP PUSH2 0x5B7F JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B6A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x5A2A JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5B96 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C12 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5C2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C57 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5CA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5CCB SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x5D6E JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D58 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5D7B JUMPI POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH2 0x5DA9 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5D9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x89D4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5DB6 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DC3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x5D7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5E15 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5E50 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E55 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5E69 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5E7C JUMPI PUSH2 0x5E79 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5E92 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x5E9E DUP9 DUP9 DUP9 DUP9 PUSH2 0x629E JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5EB5 JUMPI PUSH2 0x2DE1 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5ECD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5EF7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5F64 SWAP1 DUP1 PUSH2 0x5F1B DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F44 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x63F4 DUP2 MSTORE POP DUP7 PUSH2 0x7618 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5F91 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5FB8 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C30 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5FF7 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x601E SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C77 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x604A DUP4 DUP4 PUSH2 0x8D2C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x606B JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x6077 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8D56 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x60BD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x61A7 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x60EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6111 SWAP3 SWAP2 SWAP1 PUSH2 0xB297 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x615A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6157 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6163 JUMPI PUSH2 0x61A7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6170 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6188 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x619E JUMPI POP PUSH2 0x61A7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x60C3 JUMP JUMPDEST POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x61C0 DUP5 DUP7 PUSH2 0x3ED2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x61D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6202 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x626D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6226 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x624D SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8F87 DUP2 MSTORE POP DUP6 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x2F63 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62D1 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6325 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x63BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x6363 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x637B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x638F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x63B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x63D3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x63EB JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x63DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x640E SWAP2 SWAP1 PUSH2 0x9C5B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x64B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x644E SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6496 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6493 SWAP2 DUP2 ADD SWAP1 PUSH2 0xAB57 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x64A6 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x2870 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x644E SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x652B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6661 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6558 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x657E SWAP3 SWAP2 SWAP1 PUSH2 0xB810 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x65CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x65C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6606 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x65FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x6661 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6616 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x662A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6642 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6658 JUMPI POP PUSH2 0x6661 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6531 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6676 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x668E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x66B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x66DB JUMPI PUSH2 0x66D6 DUP8 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x66DE JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x6700 JUMPI PUSH2 0x66FB DUP9 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x6703 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x6759 JUMPI PUSH2 0x6738 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6744 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x67F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x677F JUMPI PUSH2 0x6738 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x6799 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x67D6 JUMPI PUSH2 0x67B5 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x82FC JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x67C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x67F1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x67E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x6813 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6807 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x681E JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6708 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x684F SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x688D SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68C8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x68CD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x68E1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x68F4 JUMPI PUSH2 0x68F1 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x693A JUMPI DUP7 PUSH2 0x6950 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6973 JUMPI DUP7 PUSH2 0x6989 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x69BD SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0xB067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x69E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A11 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA059 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6A2D JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2870 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6A3D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x6661 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2870 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6AAA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x6AB7 DUP7 DUP7 PUSH2 0x7F96 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6AC9 JUMPI POP PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4808 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6AF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B1B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6B69 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6B66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6B97 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50FF JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BA4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6BE6 JUMPI POP PUSH2 0x4808 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6ACC JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6BFB DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6C31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6C5F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6CB9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x6CC4 PUSH2 0x948C JUMP JUMPDEST PUSH2 0x6CCC PUSH2 0x8FD7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x60 PUSH2 0x6CF8 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6CEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x9006 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x6D2E SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB4A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6D7D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6D7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA2AD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6DB8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6DAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6DB0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x19D5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6DC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x6DE5 JUMPI POP POP POP PUSH2 0x19D5 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6DF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x6CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6E33 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6E71 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6EAC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6EB1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6EC5 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6661 JUMPI PUSH2 0x6ED5 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6EEB DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6F21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F4F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6FA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x6FB4 PUSH2 0x948C JUMP JUMPDEST PUSH2 0x6FBC PUSH2 0x8FD7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x60 PUSH2 0x6FDB DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6CEB JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x7011 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB4A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x702B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7060 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x705D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA2AD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x708E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6DAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6DB0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x709D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x70B7 JUMPI POP POP POP PUSH2 0x19D5 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x70C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x6FC1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x604D DUP3 PUSH2 0x5DD7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x712B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6661 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7158 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x717E SWAP3 SWAP2 SWAP1 PUSH2 0xB810 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x71CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x71FA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x65FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65FF JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7207 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x721B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7249 JUMPI POP PUSH2 0x6661 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7131 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x7261 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x72A3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x72D6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7326 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x7344 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x73E3 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x7375 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x738D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73C5 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x73DC JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x741C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7430 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7454 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST PUSH2 0x745F JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x74D7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7488 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74B7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F0D DUP2 MSTORE POP DUP8 PUSH2 0x7618 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x74F0 PUSH2 0x94B3 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7504 SWAP2 SWAP1 PUSH2 0xA62C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x751E SWAP2 SWAP1 PUSH2 0xA610 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x7539 DUP13 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x754C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB635 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x758A SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x75C5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75CA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x75E2 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75F6 SWAP2 SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7602 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x765B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x766D JUMPI PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x769E DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7689 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x76AB JUMPI POP PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76C8 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x76D6 JUMPI POP POP PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7821 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x77CA JUMPI PUSH2 0x770D DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x76FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x90D9 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x7719 JUMPI PUSH2 0x77CA JUMP JUMPDEST PUSH2 0x7728 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x90D9 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x7734 JUMPI PUSH2 0x77CA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7751 DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x775E JUMPI POP PUSH2 0x77CA JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x776D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x77C1 JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7787 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x779E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x77B0 JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x77C1 JUMPI POP PUSH2 0x77CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x76E6 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x77D8 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x77E3 JUMPI POP PUSH2 0x7821 JUMP JUMPDEST PUSH2 0x7801 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x77F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x90D9 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x780D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x76D9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7847 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7843 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7856 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x604D JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x7874 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x604D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x78AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB567 JUMP JUMPDEST PUSH2 0x78B5 PUSH2 0x94D3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7913 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x792E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x7A23 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x7963 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7986 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB428 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x799E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x79B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79D6 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E1 DUP2 PUSH2 0x9131 JUMP JUMPDEST ISZERO PUSH2 0x7A1A JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x79F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x793B JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x7A33 JUMPI POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x7B29 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7A89 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7A74 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7B20 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7AD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7B00 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7A8F JUMP JUMPDEST POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7B39 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x7887 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7B4E JUMPI POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7B67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7B9B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7B86 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D1B JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7D12 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x7BC9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7BEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7C21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7C38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7C4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7C60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7C8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x7D08 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7CAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7CD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7CE8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7C83 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7BAC JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7BA1 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x7D3F JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7D5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB5F0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7DA6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x68F4 JUMPI DUP1 ISZERO PUSH2 0x7E55 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7DD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7E24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E48 SWAP2 SWAP1 PUSH2 0xAB34 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E63 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DB0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E9B SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7EB5 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x7EC9 DUP11 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7EE8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAFB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7F35 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7F32 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F76 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F68 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7F83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x800B SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8051 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x68F4 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x8081 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x8098 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80BD SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x80D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x810B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8108 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8179 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8139 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x813E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x816D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x604D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x8187 JUMPI PUSH1 0x0 DUP1 PUSH2 0x8143 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x8271 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x81A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x81E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x821A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x8268 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x8247 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x818B JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x8057 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x82AC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2870 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8312 JUMPI PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8334 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8372 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x83D6 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x83D3 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83EA PUSH2 0x94F1 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x83FE SWAP2 SWAP1 PUSH2 0x9CA3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8418 SWAP2 SWAP1 PUSH2 0x9CA3 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x8445 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB74D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x845D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x848D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x848A SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x84BB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F68 JUMP JUMPDEST SWAP4 POP PUSH2 0x2870 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x84D1 PUSH2 0x94B3 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x84E5 SWAP2 SWAP1 PUSH2 0xA62C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x84FF SWAP2 SWAP1 PUSH2 0xA610 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x7539 DUP13 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8550 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x857C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x85A0 SWAP2 SWAP1 PUSH2 0xABAF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x86CD JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x8650 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x861D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8641 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x866A DUP3 PUSH2 0x593F DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x868E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP10 DUP6 PUSH2 0x885E JUMP JUMPDEST SWAP1 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x86A7 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86BD PUSH1 0x1 PUSH2 0x5939 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x887A JUMP JUMPDEST SWAP9 POP PUSH2 0x6ED5 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x87F9 JUMPI PUSH1 0x0 PUSH2 0x86FC DUP9 PUSH5 0xE8D4A51000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8783 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x873C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8750 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8774 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x885E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x879D PUSH8 0xDE0B6B3A7640000 PUSH2 0x593F DUP6 DUP6 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x87B6 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP10 DUP6 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x87EB JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6ED5 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x8827 JUMPI PUSH2 0x8827 PUSH2 0x8822 PUSH1 0x2 DUP6 DUP6 PUSH2 0x933D JUMP JUMPDEST PUSH2 0x9397 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x883C JUMPI POP PUSH1 0x0 PUSH2 0x604D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x8849 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x604A JUMPI PUSH2 0x604A PUSH2 0x8822 PUSH1 0x1 DUP7 DUP7 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x604A JUMPI PUSH2 0x604A PUSH2 0x8822 PUSH1 0x0 DUP7 DUP7 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x8890 JUMPI PUSH2 0x8890 PUSH2 0x8822 PUSH1 0x3 DUP6 DUP6 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x889B JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x88BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x88E7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x8908 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x891C JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x88ED JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x897F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x89A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x89B4 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8985 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A0A SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8A22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8A36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A5A SWAP2 SWAP1 PUSH2 0xABAF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8B66 JUMPI PUSH1 0x0 PUSH2 0x8A99 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8AB7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP9 DUP6 PUSH2 0x885E JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x8ACF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B58 PUSH8 0xDE0B6B3A7640000 PUSH2 0x593F DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8B2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B51 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x86BD DUP5 DUP4 PUSH2 0x8809 JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8C1F JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x8B9B JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8BB7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP9 DUP6 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x8BCF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C0D DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x873C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x86BD DUP3 PUSH2 0x593F DUP7 DUP9 PUSH2 0x882D JUMP JUMPDEST POP PUSH1 0x0 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C49 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C63 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x7EC9 DUP11 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C90 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CAA SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x8CC2 DUP12 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CE1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAFB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8CF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7F35 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7F32 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8D4D JUMPI PUSH2 0x8D4D PUSH2 0x8822 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x939F JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8DE2 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DFE SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E4E SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8E63 JUMPI PUSH2 0x63EB JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x8F7C JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8E86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x8E9A JUMPI PUSH2 0x8F74 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8EBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x8ED5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EFA SWAP3 SWAP2 SWAP1 PUSH2 0xB297 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x8F43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8F40 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8F4C JUMPI PUSH2 0x8F74 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x8F72 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8F67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8E67 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FA0 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FBB SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FCB DUP5 DUP5 DUP4 DUP10 PUSH2 0x2877 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8FDF PUSH2 0x948C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x9028 PUSH2 0x953B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9020 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9086 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x90C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x90E6 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x90EF JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x90FC JUMPI POP PUSH1 0x0 PUSH2 0x2870 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x9109 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9119 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2870 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x9127 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x9144 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xAFC JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x917E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9192 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91B6 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91E1 SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x920D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9231 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x923D JUMPI POP PUSH1 0x0 PUSH2 0xAFC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x928A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x92AE SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92D9 SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x92F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9329 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x9335 JUMPI POP PUSH1 0x0 PUSH2 0xAFC JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x935C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB474 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x935C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB495 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x942B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x942B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x9410 JUMP JUMPDEST POP PUSH2 0x9437 SWAP3 SWAP2 POP PUSH2 0x956D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9437 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x956E JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x604D DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x604D DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x95A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x95BB PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST PUSH2 0xB8C7 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x95DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD PUSH2 0x95F2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x95DF JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x961F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x962D PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI PUSH2 0x9655 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x980E JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x963E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9677 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9685 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x96A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD PUSH2 0x96BC DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x96A9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x96DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x96EC PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x970F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x9736 JUMPI PUSH2 0x9724 DUP10 DUP5 PUSH2 0x9B0D JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x9712 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9752 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9760 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x9781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9784 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x97B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x97BE PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x97DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x97E2 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x981E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x982C PUSH2 0x95B6 DUP3 PUSH2 0xB90C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x986C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x987A PUSH2 0x95B6 DUP3 PUSH2 0xB90C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D4D DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB93A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98C2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x98CC PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x98D9 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x98E9 DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x98FC DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9918 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9922 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x992F DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x993F DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x98FC DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9963 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x996D PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x997A DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x998A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x99A6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x99B0 PUSH1 0xA0 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x99C4 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x99D7 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x99EA DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9A14 DUP5 DUP3 DUP6 ADD PUSH2 0x980E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A33 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9A3C DUP2 PUSH2 0xB8C7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9A49 DUP4 DUP4 PUSH2 0x9582 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x9A58 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9A6A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9A7C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x9A8E DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9AA0 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x9AB2 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9AC4 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x9AD8 DUP5 DUP3 DUP6 ADD PUSH2 0x9582 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x9AF6 DUP5 DUP3 DUP6 ADD PUSH2 0x9B75 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B1E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9B28 PUSH1 0x80 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x9B39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x9B49 DUP2 PUSH2 0xB9D4 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x604D DUP2 PUSH2 0xB9BF JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B9D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x604A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9BB9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9BD6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9BE1 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9BF2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C12 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x9C1D DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x9C2E DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9C3F DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9C50 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9C6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x9C7A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9C8B DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x97FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9CB5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9CC0 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9CDC JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x9CEF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CF9 PUSH1 0xA0 PUSH2 0xB8C7 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x9D0A DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9D1C DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9D2E DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x9D44 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x9D50 DUP9 DUP3 DUP7 ADD PUSH2 0x985C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9D77 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9D82 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x9D92 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9DC4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9DCF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9DDF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DEF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x9DFF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E19 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9E25 DUP9 DUP3 DUP10 ADD PUSH2 0x9742 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9E47 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9E52 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9E62 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9E72 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9E98 DUP8 DUP3 DUP9 ADD PUSH2 0x9742 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9EB9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9EC4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9ED4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9EE4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F06 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9F11 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9F2B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x9598 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F56 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9F61 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9F78 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9C50 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9F9F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9FAA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DEF DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FD3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9FE8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9FF8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xA006 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xA022 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0xA04D JUMPI DUP1 MLOAD PUSH2 0xA039 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xA026 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA06D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA083 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA096 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA0A4 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0xA0C4 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0xA0E6 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0xA0C8 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0xA0FD JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA10A DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x98A2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA12C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA142 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA155 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA163 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xA176 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA19C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA1B2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA1BE DUP8 DUP4 DUP9 ADD PUSH2 0x960F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA1D3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA1E0 DUP7 DUP3 DUP8 ADD PUSH2 0x960F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA202 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA217 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x9667 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA235 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA24A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA256 DUP6 DUP3 DUP7 ADD PUSH2 0x9667 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9BF2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA27B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA290 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA29C DUP7 DUP3 DUP8 ADD PUSH2 0x9667 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x9D92 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA2BF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA2D4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA2E4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xA2F2 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xA30E JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0xA04D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xA312 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA344 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA35A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA36D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA37B PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0xA39E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0xA3CA JUMPI PUSH2 0xA3B4 DUP14 DUP4 PUSH2 0x9A20 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA3A2 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0xA3E2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA3EF DUP7 DUP3 DUP8 ADD PUSH2 0x96CE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA410 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA425 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x9742 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA442 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA457 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA474 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB98C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA493 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0xA49E DUP2 PUSH2 0xB98C JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0xA4AF DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA4CA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA4D6 DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4F1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA50C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA529 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA535 DUP8 DUP4 DUP9 ADD PUSH2 0x985C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA54A JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA4D6 DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA568 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA57D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x985C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA59B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xA5A6 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA5C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA5DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA5EA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA604 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x9667 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA621 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB9B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA63E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xA649 DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH2 0xA658 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x9907 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0xA676 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0xA683 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xA68E PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0xA6A0 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA6B5 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA6D9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA6EF JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP6 ADD SWAP1 PUSH1 0x40 DUP3 DUP9 SUB SLT ISZERO PUSH2 0xA702 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA70C PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA717 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0xA72B JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP9 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xA73F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0xA74F PUSH2 0x95B6 DUP5 PUSH2 0xB8ED JUMP JUMPDEST DUP4 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP8 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xA784 JUMPI PUSH2 0xA772 DUP14 DUP7 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x9598 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA75B JUMP JUMPDEST POP POP DUP4 DUP4 ADD MSTORE POP SWAP1 SWAP6 POP DUP7 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9D92 SWAP1 POP DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA7B2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA7BC DUP6 DUP6 PUSH2 0x98B1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xA7CC DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB9B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA7F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA7FB DUP7 DUP7 PUSH2 0x98B1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0xA80B DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0xA81B DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA849 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA853 DUP6 DUP6 PUSH2 0x9952 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA6B5 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA878 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA882 DUP7 DUP7 PUSH2 0x9952 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xA892 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0xA8A2 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA8D0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA8E5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA29C DUP7 DUP3 DUP8 ADD PUSH2 0x9995 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA906 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA91C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xA928 DUP9 DUP4 DUP10 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0xA93A DUP3 PUSH2 0xB977 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0xA94C DUP3 PUSH2 0xB977 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xA961 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9E98 DUP8 DUP3 DUP9 ADD PUSH2 0x9742 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA983 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA998 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA9A4 DUP8 DUP3 DUP9 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9ED4 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA9CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA9DF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA9EB DUP8 DUP3 DUP9 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9F78 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAA18 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAA22 DUP6 DUP6 PUSH2 0x9A20 JUMP JUMPDEST SWAP3 POP PUSH2 0xAA32 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x9B0D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0xAA58 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0xAA65 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xAA70 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 CALLDATALOAD PUSH2 0xAA7B DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xAA95 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xAAAA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0xAACF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0xAADC JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xAAE7 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0xAAFC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0xAB0F DUP2 PUSH2 0xB9BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0xAB25 DUP2 PUSH2 0xB9BF JUMP JUMPDEST SWAP2 POP PUSH2 0x9C9A DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x97FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB45 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x604A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB69 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAB8F JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xABC6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABFF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB9D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAC2A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAC6D JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP4 DUP4 MSTORE DUP1 DUP4 KECCAK256 DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 SLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xAC9F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xACD3 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB93A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST PUSH2 0xAE02 DUP3 DUP3 MLOAD PUSH2 0xAC0A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xAE14 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0xAE27 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0xAE3A PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0xAE4D PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xAE60 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0xAE73 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0xAE86 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0xAE9A DUP3 DUP6 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0xAEBA DUP3 DUP6 ADD DUP3 PUSH2 0xAF06 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xAED2 DUP2 MLOAD PUSH2 0xB92F JUMP JUMPDEST DUP3 MSTORE PUSH1 0xFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAF35 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xB93A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB0F9 SWAP1 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB128 SWAP1 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6ED5 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xB151 DUP6 PUSH2 0xB92F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB16A PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xAC5A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB0F9 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xB199 DUP12 PUSH2 0xB96A JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xB1B1 DUP3 DUP6 ADD DUP12 PUSH2 0xAC5A JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xB1C5 DUP3 DUP11 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xB1D8 DUP7 PUSH2 0xB96A JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xB1F0 DUP2 DUP7 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xB204 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97C SWAP1 DUP4 ADD DUP5 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB0F9 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB285 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x10B0 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB2AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB30E JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xB2FC DUP4 DUP4 MLOAD PUSH2 0xACBB JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB2E0 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x8FCB DUP2 DUP9 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB388 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xB369 DUP9 DUP7 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB345 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10B0 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xB128 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB2AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97C SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xB481 DUP6 PUSH2 0xB96A JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xB481 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0xB4B3 JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB50A JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0xB4F8 DUP7 DUP4 MLOAD PUSH2 0xACE7 JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB4DC JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xB521 DUP2 DUP7 PUSH2 0xAC17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x10B0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xAD56 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xAD24 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB641 DUP3 DUP8 PUSH2 0xAD24 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6ED5 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB673 DUP3 DUP8 PUSH2 0xAD24 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6ED5 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xB6EE PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xAD8B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB700 DUP2 DUP7 PUSH2 0xAD8B JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB724 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB0F9 DUP2 DUP6 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB760 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB796 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xB7CB DUP3 DUP6 PUSH2 0xADF7 JUMP JUMPDEST PUSH2 0x2870 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0xAEC8 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xB7E8 DUP3 DUP7 PUSH2 0xADF7 JUMP JUMPDEST PUSH2 0xB7F6 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xAEC8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x97C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xAC17 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xB842 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6ED5 DUP2 DUP6 PUSH2 0xAC17 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xB892 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB8AB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xB8C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB8E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB902 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB921 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 LT PUSH2 0xAFC JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB955 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB93D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xB964 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xB974 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0x4A SWAP16 CALLVALUE DUP1 NOT EQ 0xD4 CALLDATALOAD SWAP5 LOG2 SHL SWAP5 STOP 0xBD CALL SWAP5 0x2B KECCAK256 0xB2 0xAD 0xB4 0x4E EXP DUP15 PUSH3 0xB58DBF GASLIMIT 0xB7 0xE7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "811:1:18:-:0;1407:1288:8;797:16:18;;;;1407:1288:8;797:16:18;;;762:51;;811:1;;762:51;:::i;:::-;-1:-1:-1;826:113:26;;;1407:1288:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1407:1288:8;;;-1:-1:-1;1407:1288:8;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {
                    "9418": [
                        {
                            "length": 32,
                            "start": 7779
                        },
                        {
                            "length": 32,
                            "start": 12561
                        },
                        {
                            "length": 32,
                            "start": 13487
                        }
                    ]
                },
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106103d05760003560e01c806373748669116101ff578063b494dde21161011a578063e8e4af09116100ad578063f499072a1161007c578063f499072a146108d2578063f64ea46b146108e5578063f8e43db4146108f8578063fc9fe41b1461090b576103d0565b8063e8e4af0914610886578063eb66ecd514610899578063f02b6541146108ac578063f1ed7fa4146108bf576103d0565b8063cc1621c9116100e9578063cc1621c91461083a578063cf56b3971461084d578063de920f4414610860578063e78ac04514610873576103d0565b8063b494dde2146107ec578063b9184dd1146107ff578063bb5bfc5414610814578063bd71ecf614610827576103d0565b80639ea0ff1311610192578063a75e744b11610161578063a75e744b146107a0578063aa9d843e146107b3578063adc636bf146107c6578063b215fdfa146107d9576103d0565b80639ea0ff1314610746578063a0eaf05114610759578063a14fd7091461076c578063a46984171461078d576103d0565b80638d23f454116101ce5780638d23f454146106dc5780638e5a0e07146106ef578063911d4895146107115780639bf3ee3514610733576103d0565b8063737486691461069057806377fa0754146106a3578063801c0cc5146106b65780638b6d7b44146106c9576103d0565b806342c4b2ad116102ef57806355801e0f1161028257806368be3cf21161025157806368be3cf2146106375780636b79faf81461065757806370571f671461066a578063706e2f9b1461067d576103d0565b806355801e0f146105fe57806359861e07146104315780635f8c0ae61461061157806366a1ac6b14610624576103d0565b80634eb1f412116102be5780634eb1f412146105b05780634edfb5b2146105c357806350411454146105e357806351be4eaa146105f6576103d0565b806342c4b2ad1461056257806342cbb15c1461057557806343906a111461058a5780634578dab51461059d576103d0565b80632df8351011610367578063329b2e6a11610336578063329b2e6a146105085780633ced5f191461051b5780633dd941a41461052e57806340bc03ae1461054f576103d0565b80632df83510146104ae5780632e2c7b38146104cf57806330756a2f146104e257806330d6570d146104f5576103d0565b80631b86982f116103a35780631b86982f146104445780632aa64319146104665780632c46dc03146104885780632d753aa41461049b576103d0565b80630600e796146103d55780631022742b146103fe5780631627905514610411578063181a265c14610431575b600080fd5b6103e86103e336600461a79e565b61091e565b6040516103f5919061b396565b60405180910390f35b6103e861040c36600461a330565b610984565b61042461041f366004619b8c565b610af7565b6040516103f5919061b3a9565b6103e861043f36600461a835565b610b01565b61045761045236600461a8bc565b610b5f565b6040516103f59392919061b3e9565b61047961047436600461a863565b610bf3565b6040516103f59392919061b3b4565b6103e8610496366004619d63565b610ed1565b6103e86104a9366004619dad565b610f2f565b6104c16104bc36600461a5cd565b6110b9565b6040516103f592919061b2b9565b6103e86104dd366004619d63565b611122565b6103e86104f0366004619d63565b611180565b6103e8610503366004619e32565b6111de565b6103e8610516366004619d63565b611352565b6103e8610529366004619d63565b6113b0565b61054161053c366004619ef4565b611431565b6040516103f592919061b272565b6103e861055d36600461a7dc565b61148f565b6103e8610570366004619d63565b611610565b61057d61166e565b6040516103f5919061b3e0565b61045761059836600461a8bc565b611672565b6103e86105ab36600461a79e565b6116d3565b6103e86105be36600461a79e565b611700565b6105d66105d136600461a9b5565b61175e565b6040516103f5919061b402565b6103e86105f1366004619d63565b6119e3565b61057d611a41565b61047961060c366004619f41565b611a49565b6103e861061f36600461aa43565b611ae0565b6103e861063236600461a330565b611b3e565b61064a61064536600461a11a565b611bf3565b6040516103f5919061b321565b6104c161066536600461a5cd565b611d54565b6103e861067836600461aa43565b611db2565b6103e861068b36600461a1f1565b611e10565b61047961069e366004619f41565b611f02565b6104796106b136600461a835565b611f64565b6103e86106c4366004619d63565b611fe9565b6103e86106d736600461a7dc565b612047565b6103e86106ea366004619d63565b6123b6565b6107026106fd36600461a188565b612414565b6040516103f59392919061b6db565b61072461071f36600461a6c5565b6126dc565b6040516103f59392919061b104565b61057d61074136600461aa03565b612730565b61057d610754366004619ea4565b612877565b61072461076736600461a6c5565b612a8d565b61077f61077a366004619d63565b612aee565b6040516103f592919061b450565b6103e861079b366004619e32565b612b5a565b6104796107ae366004619f88565b612caf565b61077f6107c1366004619d63565b612dec565b61077f6107d4366004619e32565b612e6f565b6103e86107e7366004619ef4565b612fbf565b6103e86107fa366004619d63565b61301c565b61081261080d36600461a3ff565b613049565b005b6103e8610822366004619d63565b613060565b6103e861083536600461a223565b6130be565b61045761084836600461a8f1565b6131ba565b61054161085b366004619ef4565b6133a0565b6103e861086e36600461a661565b6133fe565b6103e861088136600461a267565b61345c565b6103e8610894366004619e32565b613551565b6103e86108a736600461a79e565b613684565b6103e86108ba36600461a661565b6136b1565b61057d6108cd36600461a96e565b61370f565b6103e86108e0366004619d63565b6138ae565b6103e86108f3366004619ef4565b6138db565b61047961090636600461a835565b613938565b61070261091936600461a188565b613999565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561097257602002820191906000526020600020905b81548152602001906001019080831161095e575b5050505050613c40565b949350505050565b606083516001600160401b038111801561099d57600080fd5b506040519080825280602002602001820160405280156109c7578160200160208202803683370190505b50905060005b84518114610aef57306001600160a01b0316639bf3ee3562030d408784815181106109f457fe5b6020026020010151878581518110610a0857fe5b6020026020010151876040518563ffffffff1660e01b8152600401610a2f9392919061b7d9565b60206040518083038187803b158015610a4757600080fd5b5086fa93505050508015610a78575060408051601f3d908101601f19168201909252610a759181019061a4e0565b60015b610acc573d808015610aa6576040519150601f19603f3d011682016040523d82523d6000602084013e610aab565b606091505b506000838381518110610aba57fe5b60200260200101818152505050610ae7565b80838381518110610ad957fe5b602002602001018181525050505b6001016109cd565b509392505050565b803b15155b919050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015610b5557602002820191906000526020600020905b815481526020019060010190808311610b41575b5050505050613e40565b60405163cc1621c960e01b81526000906060908190309063cc1621c990610b9090899089908990899060040161b711565b60006040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be4919081019061a4f8565b91989097509095509350505050565b6000806060610c028587613ed2565b8351806001600160401b0381118015610c1a57600080fd5b50604051908082528060200260200182016040528015610c44578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690610c77908a908a9060040161af6c565b60206040518083038186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc79190619ba8565b925060006001600160a01b03841615610ce557506001935086610d84565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690610d16908a908c9060040161af6c565b60206040518083038186803b158015610d2e57600080fd5b505afa158015610d42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d669190619ba8565b93506001600160a01b038416610d7d575050610ec7565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dbd57600080fd5b505afa158015610dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df5919061a463565b610e00575050610ec7565b60005b82811015610ec3576000610e7d8a87858e60200151604051602001610e2b949392919061af86565b6040516020818303038152906040528a88868f60200151604051602001610e55949392919061af86565b6040516020818303038152906040528a8581518110610e7057fe5b6020026020010151613f0d565b905080858381518110610e8c57fe5b602002602001018181525050848281518110610ea457fe5b602002602001015160001415610eba5750610ec3565b50600101610e03565b5050505b9450945094915050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015610f2557602002820191906000526020600020905b815481526020019060010190808311610f11575b5050505050614046565b8051606090806001600160401b0381118015610f4a57600080fd5b50604051908082528060200260200182016040528015610f74578160200160208202803683370190505b5091506001600160a01b038716610f8b57506110b0565b60005b818110156110ad5760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b8981518110610fbf57fe5b6020026020010151604051602401610fda949392919061b019565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611018919061af23565b6000604051808303818686fa925050503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50915091506000821561107d578180602001905181019061107a919061a4e0565b90505b8061108a575050506110ad565b8086858151811061109757fe5b6020908102919091010152505050600101610f8e565b50505b95945050505050565b6060806111178484600080548060200260200160405190810160405280929190818152602001828054801561110d57602002820191906000526020600020905b8154815260200190600101908083116110f9575b50505050506145bd565b909590945092505050565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561117657602002820191906000526020600020905b815481526020019060010190808311611162575b5050505050614812565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156111d457602002820191906000526020600020905b8154815260200190600101908083116111c0575b5050505050614d4b565b60606111ea8385613ed2565b8151806001600160401b038111801561120257600080fd5b5060405190808252806020026020018201604052801561122c578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b03166372ea9076620c3500888888868151811061125b57fe5b60200260200101516040518563ffffffff1660e01b81526004016112819392919061b09b565b60206040518083038187803b15801561129957600080fd5b5086fa935050505080156112ca575060408051601f3d908101601f191682019092526112c79181019061a4e0565b60015b611304573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b606091505b5050611348565b8084838151811061131157fe5b60200260200101818152505083828151811061132957fe5b60200260200101516000141561133f5750611348565b50600101611232565b5050949350505050565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156113a657602002820191906000526020600020905b815481526020019060010190808311611392575b5050505050614f60565b60405163e8e4af0960e01b8152606090309063e8e4af09906113dd9087908790879060009060040161afe5565b60006040518083038186803b1580156113f557600080fd5b505afa158015611409573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261097c919081019061a431565b6060806111178484600080548060200260200160405190810160405280929190818152602001828054801561148557602002820191906000526020600020905b815481526020019060010190808311611471575b5050505050614fc6565b8051606090806001600160401b03811180156114aa57600080fd5b506040519080825280602002602001820160405280156114d4578160200160208202803683370190505b50915060005b81811015611348576000606088600001516001600160a01b0316621e84808a602001518a8a8a888151811061150b57fe5b60200260200101516040516024016115259392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611563919061af23565b6000604051808303818686fa925050503d806000811461159f576040519150601f19603f3d011682016040523d82523d6000602084013e6115a4565b606091505b5091509150600082156115c857818060200190518101906115c5919061a4e0565b90505b808685815181106115d557fe5b6020026020010181815250508584815181106115ed57fe5b60200260200101516000141561160557505050611348565b5050506001016114da565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561166457602002820191906000526020600020905b815481526020019060010190808311611650575b5050505050615169565b4390565b6000606080610be486868660008054806020026020016040519081016040528092919081815260200182805480156116c957602002820191906000526020600020905b8154815260200190600101908083116116b5575b5050505050615333565b60405163205e01d760e11b815260609030906340bc03ae906113dd9087908790879060009060040161b667565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561175457602002820191906000526020600020905b815481526020019060010190808311611740575b5050505050615459565b6020848101516040805160018082528183019092526060938492908281019080368337019050509050858160008151811061179557fe5b6020908102919091010152606060006040519080825280602002602001820160405280156117cd578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b031614156118be576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a120906118269089906001908890889060040161b13a565b60006040518083038187803b15801561183e57600080fd5b5086fa9350505050801561187457506040513d6000823e601f3d908101601f19168201604052611871919081019061a557565b60015b6118ae573d8080156118a2576040519150601f19603f3d011682016040523d82523d6000602084013e6118a7565b606091505b50506118b9565b935061097c92505050565b6119d8565b87606001516001600160a01b0316856001600160a01b03161415611914576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611826908a906001908890889060040161b13a565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611954908a90600190889088908d9084908490849060040161b17c565b60006040518083038187803b15801561196c57600080fd5b5086fa935050505080156119a257506040513d6000823e601f3d908101601f1916820160405261199f919081019061a557565b60015b6118ae573d8080156119d0576040519150601f19603f3d011682016040523d82523d6000602084013e6119d5565b606091505b50505b505050949350505050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611a3757602002820191906000526020600020905b815481526020019060010190808311611a23575b50505050506154bf565b60005a905090565b60405163a75e744b60e01b81526000908190606090309063a75e744b90611a7c908a908a908a908a90899060040161b237565b60006040518083038186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ad0919081019061a47f565b9199909850909650945050505050565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611b3457602002820191906000526020600020905b815481526020019060010190808311611b20575b50505050506156ce565b6060611b4b848484610984565b905060005b8451811015610aef57818181518110611b6557fe5b6020026020010151600014611beb57611bd2828281518110611b8357fe5b6020026020010151868381518110611b9757fe5b6020026020010151606001516001600160801b0316878481518110611bb857fe5b6020026020010151604001516001600160801b031661591b565b828281518110611bde57fe5b6020026020010181815250505b600101611b50565b6060816001600160401b0381118015611c0b57600080fd5b50604051908082528060200260200182016040528015611c4557816020015b611c326193be565b815260200190600190039081611c2a5790505b50905060005b808314611d4d576001828281518110611c6057fe5b602090810291909101810151911515910152838382818110611c7e57fe5b9050602002810190611c90919061b87c565b15159050611c9d57611d45565b30848483818110611caa57fe5b9050602002810190611cbc919061b87c565b604051611cca92919061af13565b6000604051808303816000865af19150503d8060008114611d07576040519150601f19603f3d011682016040523d82523d6000602084013e611d0c565b606091505b50838381518110611d1957fe5b6020026020010151602001848481518110611d3057fe5b60209081029190910101519190915290151590525b600101611c4b565b5092915050565b60608061111784846000805480602002602001604051908101604052809291908181526020018280548015611da857602002820191906000526020600020905b815481526020019060010190808311611d94575b5050505050615945565b606061097c8484846000805480602002602001604051908101604052809291908181526020018280548015611e0657602002820191906000526020600020905b815481526020019060010190808311611df2575b5050505050615b8a565b606081516001600160401b0381118015611e2957600080fd5b50604051908082528060200260200182016040528015611e53578160200160208202803683370190505b50905060005b82518114611efc577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316838281518110611e9757fe5b60200260200101516001600160a01b031614611ed757611ed2838281518110611ebc57fe5b60200260200101516001600160a01b0316615dd7565b611eda565b60125b60ff16828281518110611ee957fe5b6020908102919091010152600101611e59565b50919050565b6000806060611ad0878787876000805480602002602001604051908101604052809291908181526020018280548015611f5a57602002820191906000526020600020905b815481526020019060010190808311611f46575b5050505050615e83565b604051632aa6431960e01b815260009081906060903090632aa6431990611f9590899089908990889060040161b699565b60006040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610be4919081019061a47f565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561203d57602002820191906000526020600020905b815481526020019060010190808311612029575b5050505050615f72565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161207e919061b3e0565b60206040518083038186803b15801561209657600080fd5b505afa1580156120aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ce919061a4e0565b8651604051631e01043960e01b81526001600160a01b0390911690631e0104399061210190600f89900b9060040161b3e0565b60206040518083038186803b15801561211957600080fd5b505afa15801561212d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612151919061a4e0565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612189919061b3e0565b60806040518083038186803b1580156121a157600080fd5b505afa1580156121b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d9919061ab7a565b935050505080601203600a0a82816121ed57fe5b85519190049250806001600160401b038111801561220a57600080fd5b50604051908082528060200260200182016040528015612234578160200160208202803683370190505b50935060005b818110156123aa57600060608a600001516001600160a01b0316620927c08c602001518c8c8c888151811061226b57fe5b60200260200101516040516024016122859392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516122c3919061af23565b6000604051808303818686fa925050503d80600081146122ff576040519150601f19603f3d011682016040523d82523d6000602084013e612304565b606091505b5091509150600082156123285781806020019051810190612325919061a4e0565b90505b86811061236257835b85811015612359578789828151811061234657fe5b6020908102919091010152600101612331565b505050506123aa565b8088858151811061236f57fe5b60200260200101818152505087848151811061238757fe5b60200260200101516000141561239f575050506123aa565b50505060010161223a565b50505050949350505050565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561240a57602002820191906000526020600020905b8154815260200190600101908083116123f6575b5050505050615fd8565b61241c6193d6565b6124246193d6565b60006060600080548060200260200160405190810160405280929190818152602001828054801561247457602002820191906000526020600020905b815481526020019060010190808311612460575b505050505090506000606060016001600160401b038111801561249657600080fd5b506040519080825280602002602001820160405280156124c0578160200160208202803683370190505b50905060005b895181146125b85787826000815181106124dc57fe5b60200260200101818152505081600090805190602001906124fe9291906193f0565b5060006060306001600160a01b03168c848151811061251957fe5b602002602001015160405161252e919061af23565b6000604051808303816000865af19150503d806000811461256b576040519150601f19603f3d011682016040523d82523d6000602084013e612570565b606091505b509150915081156125ae57600061259460208351038361603e90919063ffffffff16565b9050858111156125ac57838a5260208a018290529450845b505b50506001016124c6565b50816125c55750506126be565b60005b885181146126ba5782826000815181106125de57fe5b60200260200101818152505081600090805190602001906126009291906193f0565b5060006060306001600160a01b03168b848151811061261b57fe5b6020026020010151604051612630919061af23565b6000604051808303816000865af19150503d806000811461266d576040519150601f19603f3d011682016040523d82523d6000602084013e612672565b606091505b509150915081156126b057600061269660208351038361603e90919063ffffffff16565b9050878111156126ae57838952602089018290529650865b505b50506001016125c8565b5050505b80516126d19060009060208401906193f0565b505093509350939050565b6000805460609081906001600160401b03811180156126fa57600080fd5b50604051908082528060200260200182016040528015612724578160200160208202803683370190505b50905093509350939050565b6000808351600381111561274057fe5b1480612758575060018351600381111561275657fe5b145b8061276e575060408401516001600160801b0316155b80612784575060608401516001600160801b0316155b1561279157506000612870565b61279961943b565b600080846001600160a01b0316631fb0979588886040518363ffffffff1660e01b81526004016127ca92919061b7bc565b60a06040518083038186803b1580156127e257600080fd5b505afa1580156127f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281a919061aaba565b9194509250905060018360200151600481111561283357fe5b14158061283e575080155b80612851575086516001600160a01b0316155b156128625760009350505050612870565b506001600160801b03169150505b9392505050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b81526004016128a892919061af6c565b60206040518083038186803b1580156128c057600080fd5b505afa1580156128d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f89190619ba8565b90506001600160a01b03811661291257600091505061097c565b60006001600160a01b038616156129a4576040516370a0823160e01b81526001600160a01b038716906370a082319061294f90859060040161af3f565b60206040518083038186803b15801561296757600080fd5b505afa15801561297b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299f919061a4e0565b6129b0565b816001600160a01b0316315b9050838110156129c55760009250505061097c565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f0906129fa908a908a908a9060040161b09b565b60206040518083038187803b158015612a1257600080fd5b5086fa93505050508015612a43575060408051601f3d908101601f19168201909252612a409181019061a4e0565b60015b612a83573d808015612a71576040519150601f19603f3d011682016040523d82523d6000602084013e612a76565b606091505b506000935050505061097c565b925061097c915050565b6000606080610be48686866000805480602002602001604051908101604052809291908181526020018280548015612ae457602002820191906000526020600020905b815481526020019060010190808311612ad0575b5050505050616053565b60006060612b4e8585856000805480602002602001604051908101604052809291908181526020018280548015612b4457602002820191906000526020600020905b815481526020019060010190808311612b30575b50505050506161b2565b90969095509350505050565b8051606090806001600160401b0381118015612b7557600080fd5b50604051908082528060200260200182016040528015612b9f578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b031663343fbcdd62061a808888888681518110612bce57fe5b60200260200101516040518563ffffffff1660e01b8152600401612bf49392919061b09b565b60206040518083038187803b158015612c0c57600080fd5b5086fa93505050508015612c3d575060408051601f3d908101601f19168201909252612c3a9181019061a4e0565b60015b612c6b573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b80848381518110612c7857fe5b602002602001018181525050838281518110612c9057fe5b602002602001015160001415612ca65750611348565b50600101612ba5565b6000806060612cbe8587613ed2565b8351806001600160401b0381118015612cd657600080fd5b50604051908082528060200260200182016040528015612d00578160200160208202803683370190505b509150612d0f8989898961629e565b945092506001600160a01b038316612d275750612de1565b60005b81811015612dde576000612d98898688604051602001612d4c9392919061b043565b604051602081830303815290604052898789604051602001612d709392919061b043565b604051602081830303815290604052898581518110612d8b57fe5b60200260200101516163f4565b905080848381518110612da757fe5b602002602001018181525050838281518110612dbf57fe5b602002602001015160001415612dd55750612dde565b50600101612d2a565b50505b955095509592505050565b60405163adc636bf60e01b8152600090606090309063adc636bf90612e1b90889088908890889060040161afe5565b60006040518083038186803b158015612e3357600080fd5b505afa158015612e47573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b4e919081019061a589565b60006060612e7d8486613ed2565b8251806001600160401b0381118015612e9557600080fd5b50604051908082528060200260200182016040528015612ebf578160200160208202803683370190505b50915060005b81811015612f34576000612eee898989898681518110612ee157fe5b6020026020010151612877565b905080848381518110612efd57fe5b602002602001018181525050838281518110612f1557fe5b602002602001015160001415612f2b5750612f34565b50600101612ec5565b5060405163901754d760e01b81526001600160a01b0388169063901754d790612f63908990899060040161af6c565b60206040518083038186803b158015612f7b57600080fd5b505afa158015612f8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb39190619ba8565b92505094509492505050565b60606128708383600080548060200260200160405190810160405280929190818152602001828054801561301257602002820191906000526020600020905b815481526020019060010190808311612ffe575b50505050506164e6565b60405163a469841760e01b8152606090309063a4698417906113dd9087908790879060009060040161afe5565b805161305c9060009060208401906193f0565b5050565b606061097c84848460008054806020026020016040519081016040528092919081815260200182805480156130b457602002820191906000526020600020905b8154815260200190600101908083116130a0575b505050505061666a565b606082516001600160401b03811180156130d757600080fd5b50604051908082528060200260200182016040528015613101578160200160208202803683370190505b50905060005b83518114611d4d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031684828151811061314557fe5b60200260200101516001600160a01b03161461318f5761318a8385838151811061316b57fe5b60200260200101516001600160a01b031661682790919063ffffffff16565b61319b565b826001600160a01b0316315b8282815181106131a757fe5b6020908102919091010152600101613107565b60006060806131c98587613ed2565b6131d48787876168fc565b9250826131e057610ec7565b60405163276fdad960e11b81523090634edfb5b290613209908a9087908b908b9060040161b783565b60006040518083038186803b15801561322157600080fd5b505afa158015613235573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261325d919081019061a557565b608088018190528451909250806001600160401b038111801561327f57600080fd5b506040519080825280602002602001820160405280156132a9578160200160208202803683370190505b50915060005b81811015613394576000306001600160a01b031663f1ed7fa48b8b8b8b87815181106132d757fe5b60200260200101516040518563ffffffff1660e01b81526004016132fe949392919061b74d565b60206040518083038186803b15801561331657600080fd5b505afa15801561332a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061334e919061a4e0565b90508084838151811061335d57fe5b60200260200101818152505083828151811061337557fe5b60200260200101516000141561338b5750613394565b506001016132af565b50509450945094915050565b606080611117848460008054806020026020016040519081016040528092919081815260200182805480156133f457602002820191906000526020600020905b8154815260200190600101908083116133e0575b5050505050616a63565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561345257602002820191906000526020600020905b81548152602001906001019080831161343e575b5050505050616bef565b606083516001600160401b038111801561347557600080fd5b5060405190808252806020026020018201604052801561349f578160200160208202803683370190505b50905060005b84518114610aef577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168582815181106134e357fe5b60200260200101516001600160a01b03161461352f5761352a848487848151811061350a57fe5b60200260200101516001600160a01b0316616e099092919063ffffffff16565b613532565b60005b82828151811061353e57fe5b60209081029190910101526001016134a5565b8051606090806001600160401b038111801561356c57600080fd5b50604051908082528060200260200182016040528015613596578160200160208202803683370190505b50915060005b8181101561134857866001600160a01b031663838e6a22620493e088888886815181106135c557fe5b60200260200101516040518563ffffffff1660e01b81526004016135eb9392919061b09b565b60206040518083038187803b15801561360357600080fd5b5086fa93505050508015613634575060408051601f3d908101601f191682019092526136319181019061a4e0565b60015b613662573d8080156112f8576040519150601f19603f3d011682016040523d82523d6000602084013e6112fd565b8084838151811061366f57fe5b6020026020010181815250505060010161359c565b6040516322db5ed160e21b81526060903090638b6d7b44906113dd9087908790879060009060040161b667565b606061097c848484600080548060200260200160405190810160405280929190818152602001828054801561370557602002820191906000526020600020905b8154815260200190600101908083116136f1575b5050505050616edf565b6000846080015151600014156137275750600061097c565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b0316146137615786613777565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b03161461379a57866137b0565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b81526004016137d895949392919061b0bf565b60206040518083038187803b1580156137f057600080fd5b5086fa93505050508015613821575060408051601f3d908101601f1916820190925261381e9181019061a4e0565b60015b61385f573d80801561384f576040519150601f19603f3d011682016040523d82523d6000602084013e613854565b606091505b50600091505061097c565b600061386a856170db565b60ff169050600061387a876170db565b60ff169050670de0b6b3a764000081600a0a83600a0a878602028161389b57fe5b04816138a357fe5b04935050505061097c565b6040516330d6570d60e01b815260609030906330d6570d906113dd9087908790879060009060040161afe5565b60606128708383600080548060200260200160405190810160405280929190818152602001828054801561392e57602002820191906000526020600020905b81548152602001906001019080831161391a575b50505050506170e6565b6000806060610be4868686600080548060200260200160405190810160405280929190818152602001828054801561398f57602002820191906000526020600020905b81548152602001906001019080831161397b575b5050505050617252565b6139a16193d6565b6139a96193d6565b6000606060008054806020026020016040519081016040528092919081815260200182805480156139f957602002820191906000526020600020905b8154815260200190600101908083116139e5575b50506040805160018082528183019092526000199750949550869460609450925090506020808301908036833701905050905060005b88518114613b2d578782600081518110613a4557fe5b6020026020010181815250508160009080519060200190613a679291906193f0565b5060006060306001600160a01b03168b8481518110613a8257fe5b6020026020010151604051613a97919061af23565b6000604051808303816000865af19150503d8060008114613ad4576040519150601f19603f3d011682016040523d82523d6000602084013e613ad9565b606091505b50915091508115613b23576000613afd60208351038361603e90919063ffffffff16565b9050600081118015613b0e57508581105b15613b2157838952602089018290529450845b505b5050600101613a2f565b50600019821415613b3f5750506126be565b60005b895181146126ba578282600081518110613b5857fe5b6020026020010181815250508160009080519060200190613b7a9291906193f0565b5060006060306001600160a01b03168c8481518110613b9557fe5b6020026020010151604051613baa919061af23565b6000604051808303816000865af19150503d8060008114613be7576040519150601f19603f3d011682016040523d82523d6000602084013e613bec565b606091505b50915091508115613c36576000613c1060208351038361603e90919063ffffffff16565b9050600081118015613c2157508781105b15613c3457838a5260208a018290529650865b505b5050600101613b42565b60408401516060906001600160e01b031916613cc2576040805160608101909152613cbb9080613c7486896080840161b54f565b60405160208183030381529060405281526020018688604051602001613c9b92919061b54f565b60405160208183030381529060405281526020016174e581525083617618565b905061097c565b8151806001600160401b0381118015613cda57600080fd5b50604051908082528060200260200182016040528015613d04578160200160208202803683370190505b50915060005b81811015611348576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110613d3b57fe5b6020026020010151604051602401613d559392919061b531565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051613d93919061af23565b6000604051808303818686fa925050503d8060008114613dcf576040519150601f19603f3d011682016040523d82523d6000602084013e613dd4565b606091505b509150915060008215613df85781806020019051810190613df5919061a4e0565b90505b80868581518110613e0557fe5b602002602001018181525050858481518110613e1d57fe5b602002602001015160001415613e3557505050611348565b505050600101613d0a565b6060613e4c8385613ed2565b84602001516001600160a01b0316846001600160a01b0316141580613e7e575084516001600160a01b03848116911614155b15610aef5781516060816001600160401b0381118015613e9d57600080fd5b50604051908082528060200260200182016040528015613ec7578160200160208202803683370190505b50925061097c915050565b806001600160a01b0316826001600160a01b0316141561305c5760405162461bcd60e51b8152600401613f049061b5ab565b60405180910390fd5b600080600080600087806020019051810190613f299190619bfd565b9350935093509350816001600160a01b0316846001600160a01b03161415614013576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090613f7c908a9060040161b3e0565b60206040518083038187803b158015613f9457600080fd5b5086fa93505050508015613fc5575060408051601f3d908101601f19168201909252613fc29181019061a4e0565b60015b614007573d808015613ff3576040519150601f19603f3d011682016040523d82523d6000602084013e613ff8565b606091505b50600095505050505050612870565b94506128709350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090613f7c9087908b9060040161af53565b80516060908590806001600160401b038111801561406357600080fd5b5060405190808252806020026020018201604052801561408d578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b624906140bd90899060040161af3f565b60206040518083038186803b1580156140d557600080fd5b505afa1580156140e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061410d919061a463565b15806141925750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061414090889060040161af3f565b60206040518083038186803b15801561415857600080fd5b505afa15801561416c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614190919061a463565b155b1561419e57505061097c565b6141a661945d565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f906141d2908a9060040161af3f565b60206040518083038186803b1580156141ea57600080fd5b505afa1580156141fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614222919061a4e0565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061425090899060040161af3f565b60206040518083038186803b15801561426857600080fd5b505afa15801561427c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a0919061a4e0565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906142d1908a9060040161af3f565b60206040518083038186803b1580156142e957600080fd5b505afa1580156142fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614321919061a4e0565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce69061435490899060040161af3f565b60206040518083038186803b15801561436c57600080fd5b505afa158015614380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143a4919061a4e0565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b1580156143e657600080fd5b505afa1580156143fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061441e919061a4e0565b608082015260005b828110156123aa5761445182602001516003670de0b6b3a76400008161444857fe5b0460010161782a565b86828151811061445d57fe5b60200260200101511115614470576123aa565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106144a357fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016144d19695949392919061b854565b60206040518083038187803b1580156144e957600080fd5b5086fa9350505050801561451a575060408051601f3d908101601f191682019092526145179181019061a4e0565b60015b614554573d808015614548576040519150601f19603f3d011682016040523d82523d6000602084013e61454d565b606091505b50506123aa565b825161456c906002670de0b6b3a76400005b0461782a565b81111561457957506123aa565b8086838151811061458657fe5b60200260200101818152505085828151811061459e57fe5b6020026020010151600014156145b457506123aa565b50600101614426565b606080606061463e866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fe57600080fd5b505afa158015614612573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146369190619ba8565b866000617887565b905083516001600160401b038111801561465757600080fd5b50604051908082528060200260200182016040528015614681578160200160208202803683370190505b50915083516001600160401b038111801561469b57600080fd5b506040519080825280602002602001820160405280156146cf57816020015b60608152602001906001900390816146ba5790505b50925060005b84518110156148085760606000805b84518110156147c057606061470c8a8784815181106146ff57fe5b6020026020010151617d27565b90508a6001600160a01b031663cdca1753620927c0838c898151811061472e57fe5b60200260200101516040518463ffffffff1660e01b815260040161475392919061b415565b602060405180830381600088803b15801561476d57600080fd5b5087f19350505050801561479e575060408051601f3d908101601f1916820190925261479b9181019061a4e0565b60015b6147a7576147b7565b8084116147b5578093508194505b505b506001016146e4565b50806147cd575050614808565b808584815181106147da57fe5b602002602001018181525050818684815181106147f357fe5b602090810291909101015250506001016146d5565b5050935093915050565b80516060908590806001600160401b038111801561482f57600080fd5b50604051908082528060200260200182016040528015614859578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b6249061488990899060040161af3f565b60206040518083038186803b1580156148a157600080fd5b505afa1580156148b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148d9919061a463565b158061495e5750604051630bcded8960e21b81526001600160a01b03831690632f37b6249061490c90889060040161af3f565b60206040518083038186803b15801561492457600080fd5b505afa158015614938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061495c919061a463565b155b1561496a57505061097c565b61497261945d565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061499e908a9060040161af3f565b60206040518083038186803b1580156149b657600080fd5b505afa1580156149ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ee919061a4e0565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90614a1c90899060040161af3f565b60206040518083038186803b158015614a3457600080fd5b505afa158015614a48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a6c919061a4e0565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690614a9d908a9060040161af3f565b60206040518083038186803b158015614ab557600080fd5b505afa158015614ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614aed919061a4e0565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690614b2090899060040161af3f565b60206040518083038186803b158015614b3857600080fd5b505afa158015614b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614b70919061a4e0565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b158015614bb257600080fd5b505afa158015614bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bea919061a4e0565b608082015260005b828110156123aa578151614c10906002670de0b6b3a7640000614566565b868281518110614c1c57fe5b60200260200101511115614c2f576123aa565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c8881518110614c6257fe5b602002602001015189608001516040518863ffffffff1660e01b8152600401614c909695949392919061b854565b60206040518083038187803b158015614ca857600080fd5b5086fa93505050508015614cd9575060408051601f3d908101601f19168201909252614cd69181019061a4e0565b60015b614d07573d808015614548576040519150601f19603f3d011682016040523d82523d6000602084013e61454d565b80868381518110614d1457fe5b602002602001018181525050858281518110614d2c57fe5b602002602001015160001415614d4257506123aa565b50600101614bf2565b8051606090806001600160401b0381118015614d6657600080fd5b50604051908082528060200260200182016040528015614d90578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b158015614dce57600080fd5b505afa158015614de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e06919061a4e0565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614e4357600080fd5b505afa158015614e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614e7b919061abee565b60ff169050876001600160a01b0316866001600160a01b03161415614ef35760005b83811015614eed578282600a0a6402540be400888481518110614ebc57fe5b6020026020010151020281614ecd57fe5b04858281518110614eda57fe5b6020908102919091010152600101614e9d565b506119d8565b876001600160a01b0316876001600160a01b031614156119d85760005b838110156123aa5781600a0a6402540be4000283878381518110614f3057fe5b60200260200101510281614f4057fe5b04858281518110614f4d57fe5b6020908102919091010152600101614f10565b6040805160608181019092526110b09080614f7f86896080840161af6c565b60405160208183030381529060405281526020018688604051602001614fa692919061af6c565b6040516020818303038152906040528152602001617e8281525083617618565b80516060908190806001600160401b0381118015614fe357600080fd5b5060405190808252806020026020018201604052801561500d578160200160208202803683370190505b50915061501a8686617f96565b925082516000141561502c5750615161565b60005b8181101561480857866001600160a01b031663a8312b1d620249f087848151811061505657fe5b6020026020010151878a6040518563ffffffff1660e01b815260040161507e9392919061b829565b60006040518083038187803b15801561509657600080fd5b5086fa935050505080156150cc57506040513d6000823e601f3d908101601f191682016040526150c9919081019061a431565b60015b615106573d8080156150fa576040519150601f19603f3d011682016040523d82523d6000602084013e6150ff565b606091505b5050614808565b8060018851038151811061511657fe5b602002602001015184838151811061512a57fe5b60200260200101818152505083828151811061514257fe5b6020026020010151600014156151585750614808565b5060010161502f565b935093915050565b60606151758385613ed2565b8151806001600160401b038111801561518d57600080fd5b506040519080825280602002602001820160405280156151b7578160200160208202803683370190505b50915060006001600160a01b038616156151da576151d5878761827d565b6151dd565b60005b905060006001600160a01b038616156151ff576151fa888761827d565b615202565b60005b905060005b838110156123aa5760016001600160a01b03881661526557615244846395b68fe760e01b89858151811061523757fe5b60200260200101516182fc565b87848151811061525057fe5b602002602001018193508281525050506152ff565b6001600160a01b03891661528b576152448363cd7724c360e01b89858151811061523757fe5b60006152a5856395b68fe760e01b8a868151811061523757fe5b9250905080156152e2576152c18463cd7724c360e01b836182fc565b8885815181106152cd57fe5b602002602001018194508281525050506152fd565b60008784815181106152f057fe5b6020026020010181815250505b505b80158061531f575085828151811061531357fe5b60200260200101516000145b1561532a57506123aa565b50600101615207565b60006060806153428587613ed2565b61534d8787876168fc565b92508261535957610ec7565b60405163276fdad960e11b81523090634edfb5b290615382908a9087908b908b9060040161b783565b60006040518083038186803b15801561539a57600080fd5b505afa1580156153ae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526153d6919081019061a557565b87608001819052508660800151915061544d6040518060600160405280878a60405160200161540692919061b213565b6040516020818303038152906040528152602001888a60405160200161542d92919061b213565b60405160208183030381529060405281526020016183df81525085617618565b90509450945094915050565b6040805160608181019092526110b0908061547886896080840161b54f565b6040516020818303038152906040528152602001868860405160200161549f92919061b54f565b60405160208183030381529060405281526020016184c681525083617618565b8051606090806001600160401b03811180156154da57600080fd5b50604051908082528060200260200182016040528015615504578160200160208202803683370190505b5091506000866001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b15801561554257600080fd5b505afa158015615556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061557a919061a4e0565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156155b757600080fd5b505afa1580156155cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906155ef919061abee565b60ff169050876001600160a01b0316866001600160a01b031614156156615760005b83811015614eed5781600a0a6402540be400028387838151811061563157fe5b6020026020010151028161564157fe5b0485828151811061564e57fe5b6020908102919091010152600101615611565b876001600160a01b0316876001600160a01b031614156119d85760005b838110156123aa578282600a0a6402540be40088848151811061569d57fe5b60200260200101510202816156ae57fe5b048582815181106156bb57fe5b602090810291909101015260010161567e565b60606156da8385613ed2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561571e57600080fd5b505afa158015615732573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157569190619ba8565b8451909150806001600160401b038111801561577157600080fd5b5060405190808252806020026020018201604052801561579b578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156157d757600080fd5b505afa1580156157eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061580f9190619ba8565b6001600160a01b0316866001600160a01b0316141580156158b25750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561586457600080fd5b505afa158015615878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061589c9190619ba8565b6001600160a01b0316876001600160a01b031614155b156158bf5750505061097c565b60005b818110156123aa5760006158ed8a898b8a86815181106158de57fe5b6020026020010151898961851a565b9050806158fa57506123aa565b8086838151811061590757fe5b6020908102919091010152506001016158c2565b600061097c8361593f61592f826001618809565b615939888761882d565b9061885e565b9061887a565b6060806060615986866001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156145fe57600080fd5b90506060615993866188a4565b905084516001600160401b03811180156159ac57600080fd5b506040519080825280602002602001820160405280156159d6578160200160208202803683370190505b50925084516001600160401b03811180156159f057600080fd5b50604051908082528060200260200182016040528015615a2457816020015b6060815260200190600190039081615a0f5790505b50935060005b8551811015615b7f5760606000805b8551811015615b37576060615a6986615a64898581518110615a5757fe5b602002602001015161893c565b617d27565b90508b6001600160a01b0316632f80bb1d620927c0838d8981518110615a8b57fe5b60200260200101516040518463ffffffff1660e01b8152600401615ab092919061b415565b602060405180830381600088803b158015615aca57600080fd5b5087f193505050508015615afb575060408051601f3d908101601f19168201909252615af89181019061a4e0565b60015b615b0457615b2e565b831580615b115750808410155b15615b2c57809350615b298c8985815181106146ff57fe5b94505b505b50600101615a39565b5080615b44575050615b7f565b80868481518110615b5157fe5b60200260200101818152505081878481518110615b6a57fe5b60209081029190910101525050600101615a2a565b505050935093915050565b6060615b968385613ed2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015615bda57600080fd5b505afa158015615bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615c129190619ba8565b8451909150806001600160401b0381118015615c2d57600080fd5b50604051908082528060200260200182016040528015615c57578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015615c9357600080fd5b505afa158015615ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615ccb9190619ba8565b6001600160a01b0316866001600160a01b031614158015615d6e5750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b158015615d2057600080fd5b505afa158015615d34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615d589190619ba8565b6001600160a01b0316876001600160a01b031614155b15615d7b5750505061097c565b60005b818110156123aa576000615da98a898b8a8681518110615d9a57fe5b602002602001015189896189d4565b905080615db657506123aa565b80868381518110615dc357fe5b602090810291909101015250600101615d7e565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b815250604051615e15919061af23565b600060405180830381855afa9150503d8060008114615e50576040519150601f19603f3d011682016040523d82523d6000602084013e615e55565b606091505b5091509150818015615e6957506020815110155b15615e7c57615e7981600061603e565b92505b5050919050565b6000806060615e928587613ed2565b615e9e8888888861629e565b935091506001600160a01b038216615eb557612de1565b8351806001600160401b0381118015615ecd57600080fd5b50604051908082528060200260200182016040528015615ef7578160200160208202803683370190505b506040805160608101909152909250615f649080615f1b898789156080850161b043565b6040516020818303038152906040528152602001898688604051602001615f449392919061b043565b60405160208183030381529060405281526020016163f481525086617618565b915050955095509592505050565b6040805160608181019092526110b09080615f9186896080840161af6c565b60405160208183030381529060405281526020018688604051602001615fb892919061af6c565b6040516020818303038152906040528152602001618c3081525083617618565b6040805160608181019092526110b09080615ff786896080840161af6c565b6040516020818303038152906040528152602001868860405160200161601e92919061af6c565b6040516020818303038152906040528152602001618c7781525083617618565b600061604a8383618d2c565b90505b92915050565b60006060808660200151516000141561606b57610ec7565b61607787878787618d56565b855191945092506001600160401b038111801561609357600080fd5b506040519080825280602002602001820160405280156160bd578160200160208202803683370190505b50905060005b81518110156161a757836001600160a01b0316637f9c0ecd620493e0858885815181106160ec57fe5b60200260200101516040518463ffffffff1660e01b815260040161611192919061b297565b60206040518083038187803b15801561612957600080fd5b5086fa9350505050801561615a575060408051601f3d908101601f191682019092526161579181019061a4e0565b60015b616163576161a7565b8083838151811061617057fe5b60200260200101818152505082828151811061618857fe5b60200260200101516000141561619e57506161a7565b506001016160c3565b509450945094915050565b600060606161c08486613ed2565b8251806001600160401b03811180156161d857600080fd5b50604051908082528060200260200182016040528015616202578160200160208202803683370190505b50915061626d6040518060600160405280898860405160200161622692919061af6c565b6040516020818303038152906040528152602001898960405160200161624d92919061af6c565b6040516020818303038152906040528152602001618f8781525085617618565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790612f63908990899060040161af6c565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b81526004016162d192919061af6c565b60006040518083038186803b1580156162e957600080fd5b505afa1580156162fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526163259190810190619fc1565b9050600191508051600014156163be576040516315e8a07760e21b81526001600160a01b038816906357a281dc90616363908790899060040161af6c565b60006040518083038186803b15801561637b57600080fd5b505afa15801561638f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526163b79190810190619fc1565b9050600091505b805186106163d35760008092509250506163eb565b8086815181106163df57fe5b60200260200101519250505b94509492505050565b6000806000808680602001905181019061640e9190619c5b565b92509250925080156164b257604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e09061644e906000908a9060040161af53565b604080518083038187803b15801561646557600080fd5b5086fa93505050508015616496575060408051601f3d908101601f191682019092526164939181019061ab57565b60015b6164a65760009350505050612870565b50935061287092505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e09061644e906000908a9060040161af53565b8051606090806001600160401b038111801561650157600080fd5b5060405190808252806020026020018201604052801561652b578160200160208202803683370190505b50915060005b8181101561666157856001600160a01b031663d06ca61f620249f086848151811061655857fe5b6020026020010151886040518463ffffffff1660e01b815260040161657e92919061b810565b60006040518083038187803b15801561659657600080fd5b5086fa935050505080156165cc57506040513d6000823e601f3d908101601f191682016040526165c9919081019061a431565b60015b616606573d8080156165fa576040519150601f19603f3d011682016040523d82523d6000602084013e6165ff565b606091505b5050616661565b8060018751038151811061661657fe5b602002602001015184838151811061662a57fe5b60200260200101818152505083828151811061664257fe5b6020026020010151600014156166585750616661565b50600101616531565b50509392505050565b60606166768385613ed2565b8151806001600160401b038111801561668e57600080fd5b506040519080825280602002602001820160405280156166b8578160200160208202803683370190505b50915060006001600160a01b038616156166db576166d6878761827d565b6166de565b60005b905060006001600160a01b03861615616700576166fb888761827d565b616703565b60005b905060005b838110156123aa5760016001600160a01b0388166167595761673884632640f62c60e01b89858151811061523757fe5b87848151811061674457fe5b602002602001018193508281525050506167f3565b6001600160a01b03891661677f57616738836359e9486260e01b89858151811061523757fe5b6000616799846359e9486260e01b8a868151811061523757fe5b9250905080156167d6576167b5856309903d8b60e21b836182fc565b8885815181106167c157fe5b602002602001018194508281525050506167f1565b60008784815181106167e457fe5b6020026020010181815250505b505b801580616813575085828151811061680757fe5b60200260200101516000145b1561681e57506123aa565b50600101616708565b6000806060846001600160a01b03166370a0823160e01b8560405160240161684f919061af3f565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161688d919061af23565b600060405180830381855afa9150503d80600081146168c8576040519150601f19603f3d011682016040523d82523d6000602084013e6168cd565b606091505b50915091508180156168e157506020815110155b156168f4576168f181600061603e565b92505b505092915050565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b03161461693a5786616950565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b0316146169735786616989565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b169091526169bd9291906001906024810161b067565b60006040518083038186803b1580156169d557600080fd5b505afa1580156169e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052616a11919081019061a059565b505090508051866000015110616a2d5750600091506128709050565b80866000015181518110616a3d57fe5b6020026020010151925060f883901c60001c60bb14156166615750600091506128709050565b80516060908190806001600160401b0381118015616a8057600080fd5b50604051908082528060200260200182016040528015616aaa578160200160208202803683370190505b509150616ab78686617f96565b9250825160001415616ac95750615161565b60005b8181101561480857866001600160a01b0316639e269b68620249f0878481518110616af357fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401616b1b9392919061b829565b60006040518083038187803b158015616b3357600080fd5b5086fa93505050508015616b6957506040513d6000823e601f3d908101601f19168201604052616b66919081019061a431565b60015b616b97573d8080156150fa576040519150601f19603f3d011682016040523d82523d6000602084013e6150ff565b80600081518110616ba457fe5b6020026020010151848381518110616bb857fe5b602002602001018181525050838281518110616bd057fe5b602002602001015160001415616be65750614808565b50600101616acc565b6060616bfb8385613ed2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110616c3157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110616c5f57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015616c8f57600080fd5b50604051908082528060200260200182016040528015616cb9578160200160208202803683370190505b509350616cc461948c565b616ccc618fd7565b905060005b828110156119d5576060616cf88b898481518110616ceb57fe5b6020026020010151619006565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90616d2e9060009085908a90899060040161b4a3565b600060405180830381600087803b158015616d4857600080fd5b505af1925050508015616d7d57506040513d6000823e601f3d908101601f19168201604052616d7a919081019061a2ad565b60015b616db8573d808015616dab576040519150601f19603f3d011682016040523d82523d6000602084013e616db0565b606091505b5050506119d5565b600081600181518110616dc757fe5b602002602001015160001902905060008113616de5575050506119d5565b80898581518110616df257fe5b602002602001018181525050505050600101616cd1565b6000806060856001600160a01b031663dd62ed3e60e01b8686604051602401616e3392919061af6c565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051616e71919061af23565b600060405180830381855afa9150503d8060008114616eac576040519150601f19603f3d011682016040523d82523d6000602084013e616eb1565b606091505b5091509150818015616ec557506020815110155b1561666157616ed581600061603e565b9695505050505050565b6060616eeb8385613ed2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110616f2157fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110616f4f57fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015616f7f57600080fd5b50604051908082528060200260200182016040528015616fa9578160200160208202803683370190505b509350616fb461948c565b616fbc618fd7565b905060005b828110156119d5576060616fdb8b898481518110616ceb57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906170119060019085908a90899060040161b4a3565b600060405180830381600087803b15801561702b57600080fd5b505af192505050801561706057506040513d6000823e601f3d908101601f1916820160405261705d919081019061a2ad565b60015b61708e573d808015616dab576040519150601f19603f3d011682016040523d82523d6000602084013e616db0565b60008160008151811061709d57fe5b60200260200101519050600081136170b7575050506119d5565b808985815181106170c457fe5b602002602001018181525050505050600101616fc1565b600061604d82615dd7565b8051606090806001600160401b038111801561710157600080fd5b5060405190808252806020026020018201604052801561712b578160200160208202803683370190505b50915060005b8181101561666157856001600160a01b0316631f00ca74620249f086848151811061715857fe5b6020026020010151886040518463ffffffff1660e01b815260040161717e92919061b810565b60006040518083038187803b15801561719657600080fd5b5086fa935050505080156171cc57506040513d6000823e601f3d908101601f191682016040526171c9919081019061a431565b60015b6171fa573d8080156165fa576040519150601f19603f3d011682016040523d82523d6000602084013e6165ff565b8060008151811061720757fe5b602002602001015184838151811061721b57fe5b60200260200101818152505083828151811061723357fe5b6020026020010151600014156172495750616661565b50600101617131565b60008060606172618587613ed2565b8351806001600160401b038111801561727957600080fd5b506040519080825280602002602001820160405280156172a3578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906172d6908a908a9060040161af6c565b60206040518083038186803b1580156172ee57600080fd5b505afa158015617302573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173269190619ba8565b925060006001600160a01b03841615617344575060019350866173e3565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690617375908a908c9060040161af6c565b60206040518083038186803b15801561738d57600080fd5b505afa1580156173a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906173c59190619ba8565b93506001600160a01b0384166173dc575050610ec7565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561741c57600080fd5b505afa158015617430573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617454919061a463565b61745f575050610ec7565b6174d760405180606001604052808987858e60200151604051602001617488949392919061af86565b60405160208183030381529060405281526020018a87858e602001516040516020016174b7949392919061af86565b6040516020818303038152906040528152602001613f0d81525087617618565b925050509450945094915050565b6000806174f06194b3565b85806020019051810190617504919061a62c565b9150915060008580602001905181019061751e919061a610565b9050600060603063205e01d760e11b8587866175398c619098565b60405160240161754c949392919061b635565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161758a919061af23565b600060405180830381855afa9150503d80600081146175c5576040519150601f19603f3d011682016040523d82523d6000602084013e6175ca565b606091505b5091509150816175e257600095505050505050612870565b808060200190518101906175f6919061a431565b60008151811061760257fe5b6020026020010151955050505050509392505050565b606081516001600160401b038111801561763157600080fd5b5060405190808252806020026020018201604052801561765b578160200160208202803683370190505b50905081516000141561766d5761604d565b600061769e846000015185602001518560008151811061768957fe5b6020026020010151876040015163ffffffff16565b9050806176ab575061604d565b60006176c88560200151866000015184886040015163ffffffff16565b9050806176d657505061604d565b60005b8451811015617821576000805b60058110156177ca5761770d8784815181106176fe57fe5b602002602001015185876190d9565b945084617719576177ca565b617728612715612710876190d9565b945084617734576177ca565b600061775189602001518a60000151888c6040015163ffffffff16565b90508061775e57506177ca565b80945087848151811061776d57fe5b602002602001015185106177c15787848151811061778757fe5b602002602001015161271089868151811061779e57fe5b6020026020010151870302816177b057fe5b049250600583116177c157506177ca565b506001016176e6565b508015806177d85750600581115b156177e35750617821565b6178018683815181106177f257fe5b602002602001015184866190d9565b85838151811061780d57fe5b6020908102919091010152506001016176d9565b50505092915050565b6000828202831580159061784757508284828161784357fe5b0414155b1561785657600091505061604d565b6706f05b59d3b200008101818110156178745760009250505061604d565b670de0b6b3a76400009004949350505050565b606060028284510310156178ad5760405162461bcd60e51b8152600401613f049061b567565b6178b56194d3565b5060408051608081018252606481526101f46020820152610bb8818301526127106060808301919091528251600480825260a08201909452919290919081602001602082028036833701905050905060008086868151811061791357fe5b60200260200101519050600087876001018151811061792e57fe5b6020026020010151905060005b6004811015617a235760008a6001600160a01b0316631698ee8285858a866004811061796357fe5b60200201516040518463ffffffff1660e01b81526004016179869392919061b428565b60206040518083038186803b15801561799e57600080fd5b505afa1580156179b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906179d69190619ba8565b90506179e181619131565b15617a1a57808686806001019750815181106179f957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161793b565b50505080617a3357505050612870565b8551856002011415617b2957806001600160401b0381118015617a5557600080fd5b50604051908082528060200260200182016040528015617a8957816020015b6060815260200190600190039081617a745790505b50935060005b81811015617b2057604080516001808252818301909252906020808301908036833701905050858281518110617ac157fe5b6020026020010181905250828181518110617ad857fe5b6020026020010151858281518110617aec57fe5b6020026020010151600081518110617b0057fe5b6001600160a01b0390921660209283029190910190910152600101617a8f565b50505050612870565b6060617b39888888600101617887565b9050805160001415617b4e5750505050612870565b805182026001600160401b0381118015617b6757600080fd5b50604051908082528060200260200182016040528015617b9b57816020015b6060815260200190600190039081617b865790505b50945060005b82811015617d1b5760005b8251811015617d12578251828102820190849083908110617bc957fe5b6020026020010151516001016001600160401b0381118015617bea57600080fd5b50604051908082528060200260200182016040528015617c14578160200160208202803683370190505b50888281518110617c2157fe5b6020026020010181905250858381518110617c3857fe5b6020026020010151888281518110617c4c57fe5b6020026020010151600081518110617c6057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060005b848381518110617c8f57fe5b602002602001015151811015617d0857848381518110617cab57fe5b60200260200101518181518110617cbe57fe5b6020026020010151898381518110617cd257fe5b60200260200101518260010181518110617ce857fe5b6001600160a01b0390921660209283029190910190910152600101617c83565b5050600101617bac565b50600101617ba1565b50505050509392505050565b60606002835110158015617d3f575081516001018351145b617d5b5760405162461bcd60e51b8152600401613f049061b5f0565b81516003028351601402016001600160401b0381118015617d7b57600080fd5b506040519080825280601f01601f191660200182016040528015617da6576020820181803683370190505b5090506020810160005b84518110156168f4578015617e55576000846001830381518110617dd057fe5b60200260200101516001600160a01b031663ddca3f436040518163ffffffff1660e01b815260040160206040518083038186803b158015617e1057600080fd5b505afa158015617e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190617e48919061ab34565b60e81b8352506003909101905b6000858281518110617e6357fe5b602090810291909101015160601b835250601490910190600101617db0565b600080600085806020019051810190617e9b9190619bc4565b91509150600085806020019051810190617eb59190619ba8565b9050306330d6570d838584617ec98a619098565b6040518563ffffffff1660e01b8152600401617ee8949392919061afb1565b60006040518083038186803b158015617f0057600080fd5b505afa925050508015617f3557506040513d6000823e601f3d908101601f19168201604052617f32919081019061a431565b60015b617f76573d808015617f63576040519150601f19603f3d011682016040523d82523d6000602084013e617f68565b606091505b506000945050505050612870565b80600081518110617f8357fe5b6020026020010151945050505050612870565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015617fd357600080fd5b505afa158015617fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061800b9190619ba8565b905060018351036001600160401b038111801561802757600080fd5b50604051908082528060200260200182016040528015618051578160200160208202803683370190505b50915060005b82518110156168f4576060826001600160a01b0316635b1dc86f620249f087858151811061808157fe5b602002602001015188866001018151811061809857fe5b60200260200101516040518463ffffffff1660e01b81526004016180bd92919061af6c565b60006040518083038187803b1580156180d557600080fd5b5086fa9350505050801561810b57506040513d6000823e601f3d908101601f191682016040526181089190810190619fc1565b60015b618179573d808015618139576040519150601f19603f3d011682016040523d82523d6000602084013e61813e565b606091505b506000805b5060405190808252806020026020018201604052801561816d578160200160208202803683370190505b5094505050505061604d565b805161818757600080618143565b6000805b82518110156182715760008382815181106181a257fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156181e257600080fd5b505afa1580156181f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061821a919061a4e0565b9050828111156182685780925083828151811061823357fe5b602002602001015188878151811061824757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b5060010161818b565b50505050600101618057565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf62906182ac90859060040161af3f565b60206040518083038186803b1580156182c457600080fd5b505afa1580156182d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128709190619ba8565b6000806001600160a01b03851661831257615161565b6060856001600160a01b0316620249f08686604051602401618334919061b3e0565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051618372919061af23565b6000604051808303818686fa925050503d80600081146183ae576040519150601f19603f3d011682016040523d82523d6000602084013e6183b3565b606091505b50909250905081156183d657808060200190518101906183d3919061a4e0565b92505b50935093915050565b6000806183ea6194f1565b848060200190518101906183fe9190619ca3565b915091506000868060200190518101906184189190619ca3565b50604051633c7b5fe960e21b8152909150309063f1ed7fa490618445908590859088908b9060040161b74d565b60206040518083038186803b15801561845d57600080fd5b505afa92505050801561848d575060408051601f3d908101601f1916820190925261848a9181019061a4e0565b60015b6184bb573d808015617f63576040519150601f19603f3d011682016040523d82523d6000602084013e617f68565b935061287092505050565b6000806184d16194b3565b858060200190518101906184e5919061a62c565b915091506000858060200190518101906184ff919061a610565b905060006060306322db5ed160e21b8587866175398c619098565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618550919061b3e0565b60a06040518083038186803b15801561856857600080fd5b505afa15801561857c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906185a0919061abaf565b945094505050925089604001516001600160a01b0316886001600160a01b031614156186cd5760008790506000618650886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561860957600080fd5b505afa15801561861d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618641919061a4e0565b670de0b6b3a764000090618809565b9050600061866a8261593f85670de0b6b3a764000061882d565b9050600061868e6b033b2e3c9fd0803ce8000000618688898561885e565b9061882d565b90508581106186a7576000975050505050505050616ed5565b60006186bd60016159398564e8d4a5100061887a565b9850616ed5975050505050505050565b89604001516001600160a01b0316896001600160a01b031614156187f95760006186fc8864e8d4a5100061882d565b90506000618783886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561873c57600080fd5b505afa158015618750573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618774919061a4e0565b670de0b6b3a76400009061885e565b9050600061879d670de0b6b3a764000061593f858561882d565b9050858111156187b65760009650505050505050616ed5565b60006187d26b033b2e3c9fd0803ce80000006186888985618809565b90508481116187eb576000975050505050505050616ed5565b509550616ed5945050505050565b5060009998505050505050505050565b600082821115618827576188276188226002858561933d565b619397565b50900390565b60008261883c5750600061604d565b8282028284828161884957fe5b041461604a5761604a6188226001868661933d565b60008282018381101561604a5761604a6188226000868661933d565b600081618890576188906188226003858561933d565b600082848161889b57fe5b04949350505050565b606081516001600160401b03811180156188bd57600080fd5b506040519080825280602002602001820160405280156188e7578160200160208202803683370190505b50905060005b8251811015611efc5782600182855103038151811061890857fe5b602002602001015182828151811061891c57fe5b6001600160a01b03909216602092830291909101909101526001016188ed565b606081516001600160401b038111801561895557600080fd5b5060405190808252806020026020018201604052801561897f578160200160208202803683370190505b50905060005b8251811015611efc578260018285510303815181106189a057fe5b60200260200101518282815181106189b457fe5b6001600160a01b0390921660209283029190910190910152600101618985565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401618a0a919061b3e0565b60a06040518083038186803b158015618a2257600080fd5b505afa158015618a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618a5a919061abaf565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b03161415618b66576000618a998964e8d4a5100061882d565b90506000618ab76b033b2e3c9fd0803ce8000000618688888561885e565b9050848110618acf5760009650505050505050616ed5565b6000618b58670de0b6b3a764000061593f8c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015618b1957600080fd5b505afa158015618b2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618b51919061a4e0565b869061882d565b905060006186bd8483618809565b8a604001516001600160a01b03168a6001600160a01b03161415618c1f578784811115618b9b57600095505050505050616ed5565b6000618bb76b033b2e3c9fd0803ce80000006186888885618809565b9050838111618bcf5760009650505050505050616ed5565b6000618c0d8a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561873c57600080fd5b905060006186bd8261593f868861882d565b5060009a9950505050505050505050565b600080600085806020019051810190618c499190619bc4565b91509150600085806020019051810190618c639190619ba8565b90503063e8e4af09838584617ec98a619098565b600080600085806020019051810190618c909190619bc4565b91509150600085806020019051810190618caa9190619ba8565b90503063a469841762061a80848685618cc28b619098565b6040518663ffffffff1660e01b8152600401618ce1949392919061afb1565b60006040518083038187803b158015618cf957600080fd5b5086fa93505050508015617f3557506040513d6000823e601f3d908101601f19168201604052617f32919081019061a431565b60008160200183511015618d4d57618d4d618822600585518560200161939f565b50016020015190565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b158015618daa57600080fd5b505afa158015618dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618de2919061a4e0565b6040518263ffffffff1660e01b8152600401618dfe919061b3e0565b60206040518083038186803b158015618e1657600080fd5b505afa158015618e2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190618e4e9190619ba8565b915085602001515160001415618e63576163eb565b6000805b876020015151811015618f7c57600288602001518281518110618e8657fe5b6020026020010151511015618e9a57618f74565b836001600160a01b0316637f9c0ecd620493e08a602001518481518110618ebd57fe5b60200260200101518860018a510381518110618ed557fe5b60200260200101516040518463ffffffff1660e01b8152600401618efa92919061b297565b60206040518083038187803b158015618f1257600080fd5b5086fa93505050508015618f43575060408051601f3d908101601f19168201909252618f409181019061a4e0565b60015b618f4c57618f74565b82811115618f725780925088602001518281518110618f6757fe5b602002602001015193505b505b600101618e67565b505094509492505050565b600080600085806020019051810190618fa09190619bc4565b9150915060008086806020019051810190618fbb9190619bc4565b91509150618fcb84848389612877565b98975050505050505050565b618fdf61948c565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b61902861953b565b8152602001906001900390816190205790505090506040518060a00160405280856000015181526020016000815260200160018152602001848152602001604051806020016040528060008152508152508160008151811061908657fe5b60209081029190910101529392505050565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106190c857fe5b602002602001018181525050919050565b60008315806190e6575081155b806190ef575082155b156190fc57506000612870565b8382028285828161910957fe5b0414619119576000915050612870565b836001850382018161912757fe5b0495945050505050565b6000813b80619144576000915050610afc565b50816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561917e57600080fd5b505afa158015619192573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906191b69190619ba8565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016191e1919061af3f565b60206040518083038186803b1580156191f957600080fd5b505afa15801561920d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619231919061a4e0565b61923d57506000610afc565b816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561927657600080fd5b505afa15801561928a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906192ae9190619ba8565b6001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016192d9919061af3f565b60206040518083038186803b1580156192f157600080fd5b505afa158015619305573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190619329919061a4e0565b61933557506000610afc565b506001919050565b606063e946c1bb60e01b84848460405160240161935c9392919061b474565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b6060632800659560e01b84848460405160240161935c9392919061b495565b60408051808201909152606081526000602082015290565b604051806040016040528060008152602001606081525090565b82805482825590600052602060002090810192821561942b579160200282015b8281111561942b578251825591602001919060010190619410565b5061943792915061956d565b5090565b6040805160608101909152600080825260208201908152600060209091015290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b604080516060810182526000808252602082018190529181019190915290565b60405180608001604052806004906020820280368337509192915050565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b5b80821115619437576000815560010161956e565b803561604d8161b977565b805161604d8161b977565b600082601f8301126195a8578081fd5b81356195bb6195b68261b8ed565b61b8c7565b8181529150602080830190848101818402860182018710156195dc57600080fd5b60005b848110156196045781356195f28161b977565b845292820192908201906001016195df565b505050505092915050565b600082601f83011261961f578081fd5b813561962d6195b68261b8ed565b818152915060208083019084810160005b8481101561960457619655888484358a010161980e565b8452928201929082019060010161963e565b600082601f830112619677578081fd5b81356196856195b68261b8ed565b8181529150602080830190848101818402860182018710156196a657600080fd5b60005b848110156196045781356196bc8161b977565b845292820192908201906001016196a9565b600082601f8301126196de578081fd5b81356196ec6195b68261b8ed565b818152915060208083019084810160808085028701830188101561970f57600080fd5b60005b85811015619736576197248984619b0d565b85529383019391810191600101619712565b50505050505092915050565b600082601f830112619752578081fd5b81356197606195b68261b8ed565b81815291506020808301908481018184028601820187101561978157600080fd5b60005b8481101561960457813584529282019290820190600101619784565b600082601f8301126197b0578081fd5b81516197be6195b68261b8ed565b8181529150602080830190848101818402860182018710156197df57600080fd5b60005b84811015619604578151845292820192908201906001016197e2565b8051801515811461604d57600080fd5b600082601f83011261981e578081fd5b813561982c6195b68261b90c565b915080825283602082850101111561984357600080fd5b8060208401602084013760009082016020015292915050565b600082601f83011261986c578081fd5b815161987a6195b68261b90c565b915080825283602082850101111561989157600080fd5b611d4d81602084016020860161b93a565b80516002811061604d57600080fd5b6000606082840312156198c2578081fd5b6198cc606061b8c7565b905081356198d98161b977565b815260208201356198e98161b99a565b602082015260408201356198fc8161b99a565b604082015292915050565b600060608284031215619918578081fd5b619922606061b8c7565b9050815161992f8161b977565b8152602082015161993f8161b99a565b602082015260408201516198fc8161b99a565b600060408284031215619963578081fd5b61996d604061b8c7565b9050813561997a8161b977565b8152602082013561998a8161b977565b602082015292915050565b600060a082840312156199a6578081fd5b6199b060a061b8c7565b90508135815260208201356199c48161b977565b602082015260408201356199d78161b977565b604082015260608201356199ea8161b977565b606082015260808201356001600160401b03811115619a0857600080fd5b619a148482850161980e565b60808301525092915050565b6000610180808385031215619a33578182fd5b619a3c8161b8c7565b915050619a498383619582565b8152619a588360208401619582565b6020820152619a6a8360408401619b6a565b6040820152619a7c8360608401619b6a565b6060820152619a8e8360808401619b6a565b6080820152619aa08360a08401619582565b60a0820152619ab28360c08401619582565b60c0820152619ac48360e08401619582565b60e0820152610100619ad884828501619582565b908201526101208281013590820152610140619af684828501619b75565b818301525061016080830135818301525092915050565b600060808284031215619b1e578081fd5b619b28608061b8c7565b9050813560048110619b3957600080fd5b81526020820135619b498161b9d4565b80602083015250604082013560408201526060820135606082015292915050565b803561604d8161b9bf565b80356001600160401b038116811461604d57600080fd5b600060208284031215619b9d578081fd5b813561604a8161b977565b600060208284031215619bb9578081fd5b815161604a8161b977565b60008060408385031215619bd6578081fd5b8251619be18161b977565b6020840151909250619bf28161b977565b809150509250929050565b60008060008060808587031215619c12578182fd5b8451619c1d8161b977565b6020860151909450619c2e8161b977565b6040860151909350619c3f8161b977565b6060860151909250619c508161b977565b939692955090935050565b600080600060608486031215619c6f578081fd5b8351619c7a8161b977565b6020850151909350619c8b8161b977565b9150619c9a85604086016197fe565b90509250925092565b60008060408385031215619cb5578182fd5b8251619cc08161b977565b60208401519092506001600160401b0380821115619cdc578283fd5b9084019060a08287031215619cef578283fd5b619cf960a061b8c7565b82518152619d0a876020850161958d565b6020820152619d1c876040850161958d565b6040820152619d2e876060850161958d565b6060820152608083015182811115619d44578485fd5b619d508882860161985c565b6080830152508093505050509250929050565b600080600060608486031215619d77578081fd5b8335619d828161b977565b92506020840135619d928161b977565b91506040840135619da28161b977565b809150509250925092565b600080600080600060a08688031215619dc4578283fd5b8535619dcf8161b977565b94506020860135619ddf8161b977565b93506040860135619def8161b977565b92506060860135619dff8161b977565b915060808601356001600160401b03811115619e19578182fd5b619e2588828901619742565b9150509295509295909350565b60008060008060808587031215619e47578182fd5b8435619e528161b977565b93506020850135619e628161b977565b92506040850135619e728161b977565b915060608501356001600160401b03811115619e8c578182fd5b619e9887828801619742565b91505092959194509250565b60008060008060808587031215619eb9578182fd5b8435619ec48161b977565b93506020850135619ed48161b977565b92506040850135619ee48161b977565b9396929550929360600135925050565b60008060408385031215619f06578182fd5b8235619f118161b977565b915060208301356001600160401b03811115619f2b578182fd5b619f3785828601619598565b9150509250929050565b60008060008060808587031215619f56578182fd5b8435619f618161b977565b9350602085013592506040850135619f788161b977565b91506060850135619c508161b977565b600080600080600060a08688031215619f9f578283fd5b8535619faa8161b977565b9450602086013593506040860135619def8161b977565b60006020808385031215619fd3578182fd5b82516001600160401b03811115619fe8578283fd5b8301601f81018513619ff8578283fd5b805161a0066195b68261b8ed565b818152838101908385018584028501860189101561a022578687fd5b8694505b8385101561a04d57805161a0398161b977565b83526001949094019391850191850161a026565b50979650505050505050565b60008060006060848603121561a06d578081fd5b83516001600160401b038082111561a083578283fd5b818601915086601f83011261a096578283fd5b815161a0a46195b68261b8ed565b80828252602080830192508086018b82838702890101111561a0c4578788fd5b8796505b8487101561a0e657805184526001969096019592810192810161a0c8565b50890151909750935050508082111561a0fd578283fd5b5061a10a868287016197a0565b925050619c9a85604086016198a2565b6000806020838503121561a12c578182fd5b82356001600160401b038082111561a142578384fd5b818501915085601f83011261a155578384fd5b81358181111561a163578485fd5b866020808302850101111561a176578485fd5b60209290920196919550909350505050565b60008060006060848603121561a19c578081fd5b83356001600160401b038082111561a1b2578283fd5b61a1be8783880161960f565b9450602086013591508082111561a1d3578283fd5b5061a1e08682870161960f565b925050604084013590509250925092565b60006020828403121561a202578081fd5b81356001600160401b0381111561a217578182fd5b61097c84828501619667565b6000806040838503121561a235578182fd5b82356001600160401b0381111561a24a578283fd5b61a25685828601619667565b9250506020830135619bf28161b977565b60008060006060848603121561a27b578081fd5b83356001600160401b0381111561a290578182fd5b61a29c86828701619667565b9350506020840135619d928161b977565b6000602080838503121561a2bf578182fd5b82516001600160401b0381111561a2d4578283fd5b8301601f8101851361a2e4578283fd5b805161a2f26195b68261b8ed565b818152838101908385018584028501860189101561a30e578687fd5b8694505b8385101561a04d57805183526001949094019391850191850161a312565b60008060006060848603121561a344578081fd5b83356001600160401b038082111561a35a578283fd5b818601915086601f83011261a36d578283fd5b813561a37b6195b68261b8ed565b80828252602080830192508086016101808c838288028a0101111561a39e578889fd5b8897505b8588101561a3ca5761a3b48d83619a20565b855260019790970196938201939081019061a3a2565b5091985089013594505050508082111561a3e2578283fd5b5061a3ef868287016196ce565b925050619c9a8560408601619582565b60006020828403121561a410578081fd5b81356001600160401b0381111561a425578182fd5b61097c84828501619742565b60006020828403121561a442578081fd5b81516001600160401b0381111561a457578182fd5b61097c848285016197a0565b60006020828403121561a474578081fd5b815161604a8161b98c565b60008060006060848603121561a493578081fd5b835161a49e8161b98c565b602085015190935061a4af8161b977565b60408501519092506001600160401b0381111561a4ca578182fd5b61a4d6868287016197a0565b9150509250925092565b60006020828403121561a4f1578081fd5b5051919050565b60008060006060848603121561a50c578081fd5b8351925060208401516001600160401b038082111561a529578283fd5b61a5358783880161985c565b9350604086015191508082111561a54a578283fd5b5061a4d6868287016197a0565b60006020828403121561a568578081fd5b81516001600160401b0381111561a57d578182fd5b61097c8482850161985c565b6000806040838503121561a59b578182fd5b825161a5a68161b977565b60208401519092506001600160401b0381111561a5c1578182fd5b619f37858286016197a0565b6000806040838503121561a5df578182fd5b823561a5ea8161b977565b915060208301356001600160401b0381111561a604578182fd5b619f3785828601619667565b60006020828403121561a621578081fd5b815161604a8161b9b0565b6000806080838503121561a63e578182fd5b825161a6498161b9b0565b915061a6588460208501619907565b90509250929050565b6000806000838503608081121561a676578182fd5b604081121561a683578182fd5b5061a68e604061b8c7565b84358152602085013561a6a08161b977565b60208201529250604084013561a6b58161b977565b91506060840135619da28161b977565b60008060006060848603121561a6d9578081fd5b83356001600160401b038082111561a6ef578283fd5b908501906040828803121561a702578283fd5b61a70c604061b8c7565b823561a7178161b977565b81526020838101358381111561a72b578586fd5b80850194505088601f85011261a73f578485fd5b8335925061a74f6195b68461b8ed565b83815281810190858301875b8681101561a7845761a7728d8684358b0101619598565b8452928401929084019060010161a75b565b505083830152509095508601359150619d9290508161b977565b600080600060a0848603121561a7b2578081fd5b61a7bc85856198b1565b9250606084013561a7cc8161b9b0565b91506080840135619da28161b9b0565b60008060008060c0858703121561a7f1578182fd5b61a7fb86866198b1565b9350606085013561a80b8161b9b0565b9250608085013561a81b8161b9b0565b915060a08501356001600160401b03811115619e8c578182fd5b60008060006080848603121561a849578081fd5b61a8538585619952565b9250604084013561a6b58161b977565b60008060008060a0858703121561a878578182fd5b61a8828686619952565b9350604085013561a8928161b977565b9250606085013561a8a28161b977565b915060808501356001600160401b03811115619e8c578182fd5b60008060006060848603121561a8d0578081fd5b83356001600160401b0381111561a8e5578182fd5b61a29c86828701619995565b6000806000806080858703121561a906578182fd5b84356001600160401b038082111561a91c578384fd5b61a92888838901619995565b95506020870135915061a93a8261b977565b90935060408601359061a94c8261b977565b9092506060860135908082111561a961578283fd5b50619e9887828801619742565b6000806000806080858703121561a983578182fd5b84356001600160401b0381111561a998578283fd5b61a9a487828801619995565b9450506020850135619ed48161b977565b6000806000806080858703121561a9ca578182fd5b84356001600160401b0381111561a9df578283fd5b61a9eb87828801619995565b945050602085013592506040850135619f788161b977565b6000806000610220848603121561aa18578081fd5b61aa228585619a20565b925061aa32856101808601619b0d565b9150610200840135619da28161b977565b600080600083850360a081121561aa58578182fd5b606081121561aa65578182fd5b5061aa70606061b8c7565b843561aa7b8161b977565b815260208581013590820152604085013561aa958161b977565b60408201529250606084013561aaaa8161b977565b91506080840135619da28161b977565b600080600083850360a081121561aacf578182fd5b606081121561aadc578182fd5b5061aae7606061b8c7565b8451815260208501516005811061aafc578283fd5b6020820152604085015161ab0f8161b9bf565b6040820152606085015190935061ab258161b9bf565b9150619c9a85608086016197fe565b60006020828403121561ab45578081fd5b815162ffffff8116811461604a578182fd5b6000806040838503121561ab69578182fd5b505080516020909101519092909150565b6000806000806080858703121561ab8f578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a0868803121561abc6578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b60006020828403121561abff578081fd5b815161604a8161b9d4565b6001600160a01b03169052565b6000815180845260208085019450808401835b8381101561ac4f5781516001600160a01b03168752958201959082019060010161ac2a565b509495945050505050565b6000815180845260208085019450808401835b8381101561ac4f5781518752958201959082019060010161ac6d565b6000815480845260208085019450838352808320835b8381101561ac4f5781548752958201956001918201910161ac9f565b6000815180845261acd381602086016020860161b93a565b601f01601f19169290920160200192915050565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261097c60a085018261acbb565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b60008151835260208201516040602085015261097c604085018261acbb565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261097c60a085018261acbb565b61ae0282825161ac0a565b602081015161ae14602084018261ac0a565b50604081015161ae27604084018261aef9565b50606081015161ae3a606084018261aef9565b50608081015161ae4d608084018261aef9565b5060a081015161ae6060a084018261ac0a565b5060c081015161ae7360c084018261ac0a565b5060e081015161ae8660e084018261ac0a565b506101008082015161ae9a8285018261ac0a565b505061012081810151908301526101408082015161aeba8285018261af06565b505061016090810151910152565b61aed2815161b92f565b825260ff602082015116602083015260408101516040830152606081015160608301525050565b6001600160801b03169052565b6001600160401b03169052565b6000828483379101908152919050565b6000825161af3581846020870161b93a565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090616ed59083018461ac5a565b6001600160a01b038581168252848116602083015283166040820152608060608201819052600090616ed59083018461ac89565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b038581168252841660208201528215156040820152608060608201819052600090616ed59083018461acbb565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061b0f99083018461acbb565b979650505050505050565b6001600160a01b038416815260606020820181905260009061b1289083018561ac17565b8281036040840152616ed5818561ac5a565b6001600160a01b0385168152600061b1518561b92f565b60208301526080604083015261b16a608083018561ac5a565b828103606084015261b0f9818561ac5a565b6001600160a01b0389811682526000906101009061b1998b61b96a565b8a602085015281604085015261b1b18285018b61ac5a565b9150838203606085015261b1c5828a61ac5a565b9088166080850152905061b1d88661b96a565b8560a084015282810360c084015261b1f0818661ac5a565b905082810360e084015261b204818561ac5a565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061097c9083018461adaa565b6001600160a01b0386811682526020820186905284811660408301528316606082015260a06080820181905260009061b0f99083018461ac89565b60006040825261b285604083018561ac17565b82810360208401526110b0818561ac5a565b60006040825261b2aa604083018561ac17565b90508260208301529392505050565b60006040820160408352808551808352606085019150602092506060838202860101838801855b8381101561b30e57605f1988840301855261b2fc83835161acbb565b9486019492509085019060010161b2e0565b505085810384870152618fcb818861ac5a565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561b38857888303603f190185528151805187855261b3698886018261acbb565b918901511515948901949094529487019492509086019060010161b345565b509098975050505050505050565b600060208252612870602083018461ac5a565b901515815260200190565b83151581526001600160a01b03831660208201526060604082018190526000906110b09083018461ac5a565b90815260200190565b60008482526060602083015261b128606083018561acbb565b600060208252612870602083018461acbb565b60006040825261b2aa604083018561acbb565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b038316815260406020820181905260009061097c9083018461ac5a565b6060810161b4818561b96a565b938152602081019290925260409091015290565b606081016008851061b48157fe5b600060e082016002871061b4b357fe5b868352602060e08185015281875180845261010093508386019150838382028701019350828901855b8281101561b50a5760ff1988870301845261b4f886835161ace7565b9550928401929084019060010161b4dc565b5050505050828103604084015261b521818661ac17565b9150506110b0606083018461ad56565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b815260808101612870602083018461ad24565b60208082526024908201527f556e6973776170563353616d706c65722f746f6b656e5061746820746f6f20736040820152631a1bdc9d60e21b606082015260800190565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b60208082526025908201527f556e6973776170563353616d706c65722f696e76616c69642070617468206c656040820152646e6774687360d81b606082015260800190565b600061b641828761ad24565b84600f0b606083015283600f0b608083015260c060a0830152616ed560c083018461ac5a565b600061b673828761ad24565b84600f0b606083015283600f0b608083015260c060a0830152616ed560c083018461ac89565b84516001600160a01b03908116825260208087015182169083015284811660408301528316606082015260a060808201819052600090616ed59083018461ac89565b60006060825261b6ee606083018661ad8b565b828103602084015261b700818661ad8b565b915050826040830152949350505050565b60006080825261b724608083018761adaa565b6001600160a01b03868116602085015285166040840152828103606084015261b0f9818561ac89565b60006080825261b760608083018761adaa565b6001600160a01b0395861660208401529390941660408201526060015292915050565b60006080825261b796608083018761adaa565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b610200810161b7cb828561adf7565b61287061018083018461aec8565b610220810161b7e8828661adf7565b61b7f661018083018561aec8565b6001600160a01b0392909216610200919091015292915050565b60008382526040602083015261097c604083018461ac17565b60008482526060602083015261b842606083018561ac17565b8281036040840152616ed5818561ac17565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e1984360301811261b892578283fd5b8301803591506001600160401b0382111561b8ab578283fd5b60200191503681900382131561b8c057600080fd5b9250929050565b6040518181016001600160401b038111828210171561b8e557600080fd5b604052919050565b60006001600160401b0382111561b902578081fd5b5060209081020190565b60006001600160401b0382111561b921578081fd5b50601f01601f191660200190565b8060048110610afc57fe5b60005b8381101561b95557818101518382015260200161b93d565b8381111561b964576000848401525b50505050565b6004811061b97457fe5b50565b6001600160a01b038116811461b97457600080fd5b801515811461b97457600080fd5b6001600160e01b03198116811461b97457600080fd5b80600f0b811461b97457600080fd5b6001600160801b038116811461b97457600080fd5b60ff8116811461b97457600080fdfea2646970667358221220304a9f34801914d43594a21b9400bdf1942b20b2adb44e0a8e62b58dbf45b7e764736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3D0 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73748669 GT PUSH2 0x1FF JUMPI DUP1 PUSH4 0xB494DDE2 GT PUSH2 0x11A JUMPI DUP1 PUSH4 0xE8E4AF09 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xF499072A GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xF499072A EQ PUSH2 0x8D2 JUMPI DUP1 PUSH4 0xF64EA46B EQ PUSH2 0x8E5 JUMPI DUP1 PUSH4 0xF8E43DB4 EQ PUSH2 0x8F8 JUMPI DUP1 PUSH4 0xFC9FE41B EQ PUSH2 0x90B JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x886 JUMPI DUP1 PUSH4 0xEB66ECD5 EQ PUSH2 0x899 JUMPI DUP1 PUSH4 0xF02B6541 EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x8BF JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xCC1621C9 GT PUSH2 0xE9 JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x83A JUMPI DUP1 PUSH4 0xCF56B397 EQ PUSH2 0x84D JUMPI DUP1 PUSH4 0xDE920F44 EQ PUSH2 0x860 JUMPI DUP1 PUSH4 0xE78AC045 EQ PUSH2 0x873 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0xB494DDE2 EQ PUSH2 0x7EC JUMPI DUP1 PUSH4 0xB9184DD1 EQ PUSH2 0x7FF JUMPI DUP1 PUSH4 0xBB5BFC54 EQ PUSH2 0x814 JUMPI DUP1 PUSH4 0xBD71ECF6 EQ PUSH2 0x827 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 GT PUSH2 0x192 JUMPI DUP1 PUSH4 0xA75E744B GT PUSH2 0x161 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x7A0 JUMPI DUP1 PUSH4 0xAA9D843E EQ PUSH2 0x7B3 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x7C6 JUMPI DUP1 PUSH4 0xB215FDFA EQ PUSH2 0x7D9 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0xA0EAF051 EQ PUSH2 0x759 JUMPI DUP1 PUSH4 0xA14FD709 EQ PUSH2 0x76C JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x78D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x8D23F454 GT PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8D23F454 EQ PUSH2 0x6DC JUMPI DUP1 PUSH4 0x8E5A0E07 EQ PUSH2 0x6EF JUMPI DUP1 PUSH4 0x911D4895 EQ PUSH2 0x711 JUMPI DUP1 PUSH4 0x9BF3EE35 EQ PUSH2 0x733 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x73748669 EQ PUSH2 0x690 JUMPI DUP1 PUSH4 0x77FA0754 EQ PUSH2 0x6A3 JUMPI DUP1 PUSH4 0x801C0CC5 EQ PUSH2 0x6B6 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x6C9 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x42C4B2AD GT PUSH2 0x2EF JUMPI DUP1 PUSH4 0x55801E0F GT PUSH2 0x282 JUMPI DUP1 PUSH4 0x68BE3CF2 GT PUSH2 0x251 JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x637 JUMPI DUP1 PUSH4 0x6B79FAF8 EQ PUSH2 0x657 JUMPI DUP1 PUSH4 0x70571F67 EQ PUSH2 0x66A JUMPI DUP1 PUSH4 0x706E2F9B EQ PUSH2 0x67D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x55801E0F EQ PUSH2 0x5FE JUMPI DUP1 PUSH4 0x59861E07 EQ PUSH2 0x431 JUMPI DUP1 PUSH4 0x5F8C0AE6 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0x66A1AC6B EQ PUSH2 0x624 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x4EB1F412 GT PUSH2 0x2BE JUMPI DUP1 PUSH4 0x4EB1F412 EQ PUSH2 0x5B0 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x5C3 JUMPI DUP1 PUSH4 0x50411454 EQ PUSH2 0x5E3 JUMPI DUP1 PUSH4 0x51BE4EAA EQ PUSH2 0x5F6 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x42C4B2AD EQ PUSH2 0x562 JUMPI DUP1 PUSH4 0x42CBB15C EQ PUSH2 0x575 JUMPI DUP1 PUSH4 0x43906A11 EQ PUSH2 0x58A JUMPI DUP1 PUSH4 0x4578DAB5 EQ PUSH2 0x59D JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x2DF83510 GT PUSH2 0x367 JUMPI DUP1 PUSH4 0x329B2E6A GT PUSH2 0x336 JUMPI DUP1 PUSH4 0x329B2E6A EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0x3CED5F19 EQ PUSH2 0x51B JUMPI DUP1 PUSH4 0x3DD941A4 EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x54F JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x2DF83510 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0x2E2C7B38 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x30756A2F EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x4F5 JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x1B86982F GT PUSH2 0x3A3 JUMPI DUP1 PUSH4 0x1B86982F EQ PUSH2 0x444 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x2C46DC03 EQ PUSH2 0x488 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x49B JUMPI PUSH2 0x3D0 JUMP JUMPDEST DUP1 PUSH4 0x600E796 EQ PUSH2 0x3D5 JUMPI DUP1 PUSH4 0x1022742B EQ PUSH2 0x3FE JUMPI DUP1 PUSH4 0x16279055 EQ PUSH2 0x411 JUMPI DUP1 PUSH4 0x181A265C EQ PUSH2 0x431 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3E8 PUSH2 0x3E3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x91E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB396 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3E8 PUSH2 0x40C CALLDATASIZE PUSH1 0x4 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x984 JUMP JUMPDEST PUSH2 0x424 PUSH2 0x41F CALLDATASIZE PUSH1 0x4 PUSH2 0x9B8C JUMP JUMPDEST PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB3A9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x43F CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0xB01 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x452 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8BC JUMP JUMPDEST PUSH2 0xB5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB3E9 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0xA863 JUMP JUMPDEST PUSH2 0xBF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB3B4 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x496 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0xED1 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4A9 CALLDATASIZE PUSH1 0x4 PUSH2 0x9DAD JUMP JUMPDEST PUSH2 0xF2F JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0xA5CD JUMP JUMPDEST PUSH2 0x10B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB2B9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1122 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x4F0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1180 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x503 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x11DE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x516 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1352 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x13B0 JUMP JUMPDEST PUSH2 0x541 PUSH2 0x53C CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x1431 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB272 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x55D CALLDATASIZE PUSH1 0x4 PUSH2 0xA7DC JUMP JUMPDEST PUSH2 0x148F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x570 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1610 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x166E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH2 0x457 PUSH2 0x598 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8BC JUMP JUMPDEST PUSH2 0x1672 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5AB CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x16D3 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5BE CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x1700 JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0x5D1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA9B5 JUMP JUMPDEST PUSH2 0x175E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB402 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x5F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x19E3 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x1A41 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x60C CALLDATASIZE PUSH1 0x4 PUSH2 0x9F41 JUMP JUMPDEST PUSH2 0x1A49 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x61F CALLDATASIZE PUSH1 0x4 PUSH2 0xAA43 JUMP JUMPDEST PUSH2 0x1AE0 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x632 CALLDATASIZE PUSH1 0x4 PUSH2 0xA330 JUMP JUMPDEST PUSH2 0x1B3E JUMP JUMPDEST PUSH2 0x64A PUSH2 0x645 CALLDATASIZE PUSH1 0x4 PUSH2 0xA11A JUMP JUMPDEST PUSH2 0x1BF3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP2 SWAP1 PUSH2 0xB321 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x665 CALLDATASIZE PUSH1 0x4 PUSH2 0xA5CD JUMP JUMPDEST PUSH2 0x1D54 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x678 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA43 JUMP JUMPDEST PUSH2 0x1DB2 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x68B CALLDATASIZE PUSH1 0x4 PUSH2 0xA1F1 JUMP JUMPDEST PUSH2 0x1E10 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x69E CALLDATASIZE PUSH1 0x4 PUSH2 0x9F41 JUMP JUMPDEST PUSH2 0x1F02 JUMP JUMPDEST PUSH2 0x479 PUSH2 0x6B1 CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0x1F64 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6C4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x1FE9 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA7DC JUMP JUMPDEST PUSH2 0x2047 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x6EA CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x23B6 JUMP JUMPDEST PUSH2 0x702 PUSH2 0x6FD CALLDATASIZE PUSH1 0x4 PUSH2 0xA188 JUMP JUMPDEST PUSH2 0x2414 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB6DB JUMP JUMPDEST PUSH2 0x724 PUSH2 0x71F CALLDATASIZE PUSH1 0x4 PUSH2 0xA6C5 JUMP JUMPDEST PUSH2 0x26DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB104 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x741 CALLDATASIZE PUSH1 0x4 PUSH2 0xAA03 JUMP JUMPDEST PUSH2 0x2730 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x754 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EA4 JUMP JUMPDEST PUSH2 0x2877 JUMP JUMPDEST PUSH2 0x724 PUSH2 0x767 CALLDATASIZE PUSH1 0x4 PUSH2 0xA6C5 JUMP JUMPDEST PUSH2 0x2A8D JUMP JUMPDEST PUSH2 0x77F PUSH2 0x77A CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x2AEE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3F5 SWAP3 SWAP2 SWAP1 PUSH2 0xB450 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x79B CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x2B5A JUMP JUMPDEST PUSH2 0x479 PUSH2 0x7AE CALLDATASIZE PUSH1 0x4 PUSH2 0x9F88 JUMP JUMPDEST PUSH2 0x2CAF JUMP JUMPDEST PUSH2 0x77F PUSH2 0x7C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x2DEC JUMP JUMPDEST PUSH2 0x77F PUSH2 0x7D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x2E6F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x7E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x2FBF JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x7FA CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x301C JUMP JUMPDEST PUSH2 0x812 PUSH2 0x80D CALLDATASIZE PUSH1 0x4 PUSH2 0xA3FF JUMP JUMPDEST PUSH2 0x3049 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3E8 PUSH2 0x822 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x3060 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x835 CALLDATASIZE PUSH1 0x4 PUSH2 0xA223 JUMP JUMPDEST PUSH2 0x30BE JUMP JUMPDEST PUSH2 0x457 PUSH2 0x848 CALLDATASIZE PUSH1 0x4 PUSH2 0xA8F1 JUMP JUMPDEST PUSH2 0x31BA JUMP JUMPDEST PUSH2 0x541 PUSH2 0x85B CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x33A0 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x86E CALLDATASIZE PUSH1 0x4 PUSH2 0xA661 JUMP JUMPDEST PUSH2 0x33FE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x881 CALLDATASIZE PUSH1 0x4 PUSH2 0xA267 JUMP JUMPDEST PUSH2 0x345C JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x894 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E32 JUMP JUMPDEST PUSH2 0x3551 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA79E JUMP JUMPDEST PUSH2 0x3684 JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8BA CALLDATASIZE PUSH1 0x4 PUSH2 0xA661 JUMP JUMPDEST PUSH2 0x36B1 JUMP JUMPDEST PUSH2 0x57D PUSH2 0x8CD CALLDATASIZE PUSH1 0x4 PUSH2 0xA96E JUMP JUMPDEST PUSH2 0x370F JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x9D63 JUMP JUMPDEST PUSH2 0x38AE JUMP JUMPDEST PUSH2 0x3E8 PUSH2 0x8F3 CALLDATASIZE PUSH1 0x4 PUSH2 0x9EF4 JUMP JUMPDEST PUSH2 0x38DB JUMP JUMPDEST PUSH2 0x479 PUSH2 0x906 CALLDATASIZE PUSH1 0x4 PUSH2 0xA835 JUMP JUMPDEST PUSH2 0x3938 JUMP JUMPDEST PUSH2 0x702 PUSH2 0x919 CALLDATASIZE PUSH1 0x4 PUSH2 0xA188 JUMP JUMPDEST PUSH2 0x3999 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x972 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x95E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3C40 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x99D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x9C7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xAEF JUMPI ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9BF3EE35 PUSH3 0x30D40 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x9F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xA08 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA2F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB7D9 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xA78 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA75 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xACC JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAA6 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAAB JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xABA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH2 0xAE7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xAD9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x9CD JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO ISZERO JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB55 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB41 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x3E40 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCC1621C9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 DUP2 SWAP1 ADDRESS SWAP1 PUSH4 0xCC1621C9 SWAP1 PUSH2 0xB90 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB711 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBBC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA4F8 JUMP JUMPDEST SWAP2 SWAP9 SWAP1 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xC02 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xC1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC44 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0xC77 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCC7 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xCE5 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0xD84 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0xD16 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD66 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0xD7D JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDD1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDF5 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST PUSH2 0xE00 JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xEC3 JUMPI PUSH1 0x0 PUSH2 0xE7D DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE2B SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xE55 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE70 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x3F0D JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE8C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xEA4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xEBA JUMPI POP PUSH2 0xEC3 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE03 JUMP JUMPDEST POP POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xF25 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xF11 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4046 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xF4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xF74 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0xF8B JUMPI POP PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AD JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0xFBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xFDA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB019 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1018 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1054 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1059 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x107D JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x107A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x108A JUMPI POP POP POP PUSH2 0x10AD JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1097 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0xF8E JUMP JUMPDEST POP POP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x10F9 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x45BD JUMP JUMPDEST SWAP1 SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1176 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1162 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4812 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x11D4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x11C0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4D4B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x11EA DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x122C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x125B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1281 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x12CA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x12C7 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1304 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1348 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1311 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1329 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x133F JUMPI POP PUSH2 0x1348 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1232 JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x13A6 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1392 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4F60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE8E4AF09 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xE8E4AF09 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1409 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x97C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1485 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1471 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x4FC6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x14AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x14D4 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x150B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1525 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1563 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x159F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x15A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x15C8 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x15C5 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x15D5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x15ED JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1605 JUMPI POP POP POP PUSH2 0x1348 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x14DA JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1664 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1650 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5169 JUMP JUMPDEST NUMBER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x16B5 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x40BC03AE SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB667 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1754 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1740 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5459 JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1795 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x17CD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x18BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1826 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB13A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x183E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1874 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1871 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18A2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x18A7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x18B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x97C SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19D8 JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1914 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1826 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB13A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1954 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0xB17C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x196C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x19A2 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x199F SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x18AE JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x19D0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x19D5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1A37 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1A23 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x54BF JUMP JUMPDEST PUSH1 0x0 GAS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA75E744B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xA75E744B SWAP1 PUSH2 0x1A7C SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB237 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1A94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1AA8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1AD0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA47F JUMP JUMPDEST SWAP2 SWAP10 SWAP1 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1B34 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1B20 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x56CE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1B4B DUP5 DUP5 DUP5 PUSH2 0x984 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xAEF JUMPI DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x1B65 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ PUSH2 0x1BEB JUMPI PUSH2 0x1BD2 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1B83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1B97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND PUSH2 0x591B JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1BDE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1C0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1C45 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1C32 PUSH2 0x93BE JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x1C2A JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x1D4D JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1C60 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x1C7E JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1C90 SWAP2 SWAP1 PUSH2 0xB87C JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x1C9D JUMPI PUSH2 0x1D45 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1CAA JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x1CBC SWAP2 SWAP1 PUSH2 0xB87C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CCA SWAP3 SWAP2 SWAP1 PUSH2 0xAF13 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D07 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D0C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1D19 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1D30 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x1C4B JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1DA8 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1D94 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5945 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1DF2 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5B8A JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1E29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1E53 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 EQ PUSH2 0x1EFC JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1E97 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1ED7 JUMPI PUSH2 0x1ED2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x5DD7 JUMP JUMPDEST PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x12 JUMPDEST PUSH1 0xFF AND DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1EE9 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x1E59 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1AD0 DUP8 DUP8 DUP8 DUP8 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x1F5A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x1F46 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5E83 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2AA64319 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x2AA64319 SWAP1 PUSH2 0x1F95 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xB699 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1FAD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1FC1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xBE4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA47F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x203D JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2029 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5F72 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x207E SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20CE SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x2101 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x212D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2151 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2189 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21D9 SWAP2 SWAP1 PUSH2 0xAB7A JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x21ED JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x220A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2234 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x226B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2285 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x22C3 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2304 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2328 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2325 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2362 JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2359 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2346 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2331 JUMP JUMPDEST POP POP POP POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x236F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2387 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x239F JUMPI POP POP POP PUSH2 0x23AA JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x223A JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x240A JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x23F6 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x5FD8 JUMP JUMPDEST PUSH2 0x241C PUSH2 0x93D6 JUMP JUMPDEST PUSH2 0x2424 PUSH2 0x93D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2474 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2460 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x24C0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 EQ PUSH2 0x25B8 JUMPI DUP8 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x24DC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x24FE SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2519 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x252E SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x256B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2570 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x25AE JUMPI PUSH1 0x0 PUSH2 0x2594 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x25AC JUMPI DUP4 DUP11 MSTORE PUSH1 0x20 DUP11 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x24C6 JUMP JUMPDEST POP DUP2 PUSH2 0x25C5 JUMPI POP POP PUSH2 0x26BE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 EQ PUSH2 0x26BA JUMPI DUP3 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x25DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x2600 SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x261B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x2630 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x266D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2672 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x26B0 JUMPI PUSH1 0x0 PUSH2 0x2696 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP8 DUP2 GT ISZERO PUSH2 0x26AE JUMPI DUP4 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP3 SWAP1 MSTORE SWAP7 POP DUP7 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x25C8 JUMP JUMPDEST POP POP POP JUMPDEST DUP1 MLOAD PUSH2 0x26D1 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x26FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2724 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2740 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x2758 JUMPI POP PUSH1 0x1 DUP4 MLOAD PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x2756 JUMPI INVALID JUMPDEST EQ JUMPDEST DUP1 PUSH2 0x276E JUMPI POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 0x2784 JUMPI POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2791 JUMPI POP PUSH1 0x0 PUSH2 0x2870 JUMP JUMPDEST PUSH2 0x2799 PUSH2 0x943B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1FB09795 DUP9 DUP9 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x27CA SWAP3 SWAP2 SWAP1 PUSH2 0xB7BC JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x281A SWAP2 SWAP1 PUSH2 0xAABA JUMP JUMPDEST SWAP2 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x1 DUP4 PUSH1 0x20 ADD MLOAD PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x2833 JUMPI INVALID JUMPDEST EQ ISZERO DUP1 PUSH2 0x283E JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 0x2851 JUMPI POP DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2862 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x28A8 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x28C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x28D4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x28F8 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2912 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x29A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x294F SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2967 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x297B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x299F SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x29B0 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x29C5 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x29FA SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2A43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2A40 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2A83 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2A76 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x97C JUMP JUMPDEST SWAP3 POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2AD0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6053 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2B4E DUP6 DUP6 DUP6 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x2B44 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2B30 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x61B2 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2B75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B9F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2BCE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2BF4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C0C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x2C3D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x2C3A SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2C6B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2C78 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C90 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2CA6 JUMPI POP PUSH2 0x1348 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2BA5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x2CBE DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D00 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x2D0F DUP10 DUP10 DUP10 DUP10 PUSH2 0x629E JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2D27 JUMPI POP PUSH2 0x2DE1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2DDE JUMPI PUSH1 0x0 PUSH2 0x2D98 DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D4C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2D70 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2D8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x63F4 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2DA7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2DBF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2DD5 JUMPI POP PUSH2 0x2DDE JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2D2A JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xADC636BF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xADC636BF SWAP1 PUSH2 0x2E1B SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2E47 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x2B4E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA589 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x2E7D DUP5 DUP7 PUSH2 0x3ED2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EBF JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x2F34 JUMPI PUSH1 0x0 PUSH2 0x2EEE DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x2EE1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2877 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2EFD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2F15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2F2B JUMPI POP PUSH2 0x2F34 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x2EC5 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x2F63 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F8F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FB3 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2870 DUP4 DUP4 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3012 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x2FFE JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x64E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA4698417 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0xA4698417 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x305C SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x30B4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x30A0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x666A JUMP JUMPDEST PUSH1 0x60 DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x30D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3101 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 MLOAD DUP2 EQ PUSH2 0x1D4D JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3145 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x318F JUMPI PUSH2 0x318A DUP4 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x316B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6827 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x319B JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x31A7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x3107 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x31C9 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x31D4 DUP8 DUP8 DUP8 PUSH2 0x68FC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x31E0 JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x3209 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB783 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3235 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x325D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x327F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x32A9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3394 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x32D7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32FE SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB74D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x332A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x334E SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x335D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3375 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x338B JUMPI POP PUSH2 0x3394 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x32AF JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH2 0x1117 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x33F4 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x33E0 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6A63 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3452 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x343E JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6BEF JUMP JUMPDEST PUSH1 0x60 DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3475 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x349F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0xAEF JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x34E3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x352F JUMPI PUSH2 0x352A DUP5 DUP5 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x350A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6E09 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x3532 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x353E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x34A5 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x356C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3596 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x35C5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35EB SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB09B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3603 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3634 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3631 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3662 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x12F8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x12FD JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x366F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x359C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x8B6D7B44 SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xB667 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x97C DUP5 DUP5 DUP5 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3705 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x36F1 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x6EDF JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3727 JUMPI POP PUSH1 0x0 PUSH2 0x97C JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3761 JUMPI DUP7 PUSH2 0x3777 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x379A JUMPI DUP7 PUSH2 0x37B0 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x37D8 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB0BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3821 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x381E SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x385F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x384F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3854 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x386A DUP6 PUSH2 0x70DB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x387A DUP8 PUSH2 0x70DB JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x389B JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x38A3 JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x30D6570D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x60 SWAP1 ADDRESS SWAP1 PUSH4 0x30D6570D SWAP1 PUSH2 0x13DD SWAP1 DUP8 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x4 ADD PUSH2 0xAFE5 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x2870 DUP4 DUP4 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x392E JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x391A JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x70E6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0xBE4 DUP7 DUP7 DUP7 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x398F JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x397B JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x39A1 PUSH2 0x93D6 JUMP JUMPDEST PUSH2 0x39A9 PUSH2 0x93D6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x39F9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x39E5 JUMPI JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 NOT SWAP8 POP SWAP5 SWAP6 POP DUP7 SWAP5 PUSH1 0x60 SWAP5 POP SWAP3 POP SWAP1 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP9 MLOAD DUP2 EQ PUSH2 0x3B2D JUMPI DUP8 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3A45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3A67 SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3A82 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3A97 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3AD4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3AD9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3B23 JUMPI PUSH1 0x0 PUSH2 0x3AFD PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3B0E JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3B21 JUMPI DUP4 DUP10 MSTORE PUSH1 0x20 DUP10 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3A2F JUMP JUMPDEST POP PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3B3F JUMPI POP POP PUSH2 0x26BE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP10 MLOAD DUP2 EQ PUSH2 0x26BA JUMPI DUP3 DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3B58 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x3B7A SWAP3 SWAP2 SWAP1 PUSH2 0x93F0 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3B95 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x3BAA SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BE7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3BEC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3C36 JUMPI PUSH1 0x0 PUSH2 0x3C10 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x603E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3C21 JUMPI POP DUP8 DUP2 LT JUMPDEST ISZERO PUSH2 0x3C34 JUMPI DUP4 DUP11 MSTORE PUSH1 0x20 DUP11 ADD DUP3 SWAP1 MSTORE SWAP7 POP DUP7 JUMPDEST POP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x3B42 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x3CC2 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x3CBB SWAP1 DUP1 PUSH2 0x3C74 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3C9B SWAP3 SWAP2 SWAP1 PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x74E5 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST SWAP1 POP PUSH2 0x97C JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3CDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D04 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x3D3B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x3D55 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB531 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x3D93 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3DCF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3DD4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x3DF8 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3DF5 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3E05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E1D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3E35 JUMPI POP POP POP PUSH2 0x1348 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x3D0A JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3E4C DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x3E7E JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0xAEF JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3E9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3EC7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x97C SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x305C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB5AB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3F29 SWAP2 SWAP1 PUSH2 0x9BFD JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4013 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x3F7C SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3F94 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3FC5 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3FC2 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4007 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x3FF3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FF8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST SWAP5 POP PUSH2 0x2870 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x3F7C SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4063 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x408D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x40BD SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x40D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x40E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x410D SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x4192 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4140 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4158 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x416C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4190 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x419E JUMPI POP POP PUSH2 0x97C JUMP JUMPDEST PUSH2 0x41A6 PUSH2 0x945D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x41D2 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x41EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x41FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4222 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4250 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x427C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x42A0 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x42D1 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x42E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x42FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4321 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4354 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x436C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4380 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x43A4 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x43E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x43FA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x441E SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH2 0x4451 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x4448 JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x782A JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x445D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4470 JUMPI PUSH2 0x23AA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x44A3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D1 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB854 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x451A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4517 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4554 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4548 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x454D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x23AA JUMP JUMPDEST DUP3 MLOAD PUSH2 0x456C SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 JUMPDEST DIV PUSH2 0x782A JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x4579 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4586 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x459E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x45B4 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4426 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x463E DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4612 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4636 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP7 PUSH1 0x0 PUSH2 0x7887 JUMP JUMPDEST SWAP1 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4657 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4681 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x469B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x46CF JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x46BA JUMPI SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x4808 JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x47C0 JUMPI PUSH1 0x60 PUSH2 0x470C DUP11 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x46FF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x7D27 JUMP JUMPDEST SWAP1 POP DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xCDCA1753 PUSH3 0x927C0 DUP4 DUP13 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x472E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4753 SWAP3 SWAP2 SWAP1 PUSH2 0xB415 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x476D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x479E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x479B SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x47A7 JUMPI PUSH2 0x47B7 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x47B5 JUMPI DUP1 SWAP4 POP DUP2 SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x46E4 JUMP JUMPDEST POP DUP1 PUSH2 0x47CD JUMPI POP POP PUSH2 0x4808 JUMP JUMPDEST DUP1 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47DA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x47F3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x46D5 JUMP JUMPDEST POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x482F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4859 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x4889 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x48A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x48B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x48D9 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO DUP1 PUSH2 0x495E JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x490C SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4938 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x495C SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x496A JUMPI POP POP PUSH2 0x97C JUMP JUMPDEST PUSH2 0x4972 PUSH2 0x945D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x499E SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x49B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49CA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49EE SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x4A1C SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A6C SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4A9D SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4AB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4AC9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4AED SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x4B20 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4B38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4B4C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4B70 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4BC6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4BEA SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP2 MLOAD PUSH2 0x4C10 SWAP1 PUSH1 0x2 PUSH8 0xDE0B6B3A7640000 PUSH2 0x4566 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4C1C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x4C2F JUMPI PUSH2 0x23AA JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x4C62 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4C90 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB854 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4CA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4CD9 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4CD6 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D07 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4548 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x454D JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4D14 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4D2C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4D42 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4BF2 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4D66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4D90 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4DCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4DE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E06 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4E43 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4E57 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4E7B SWAP2 SWAP1 PUSH2 0xABEE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x4EF3 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EED JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4EBC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x4ECD JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4EDA JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4E9D JUMP JUMPDEST POP PUSH2 0x19D8 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x19D8 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4F30 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x4F40 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4F4D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x4F10 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x4F7F DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FA6 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x7E82 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4FE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x500D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x501A DUP7 DUP7 PUSH2 0x7F96 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x502C JUMPI POP PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4808 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5056 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x507E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5096 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x50CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x50C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5106 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x4808 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x5116 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x512A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5142 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5158 JUMPI POP PUSH2 0x4808 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x502F JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5175 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x518D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x51B7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x51DA JUMPI PUSH2 0x51D5 DUP8 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x51DD JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x51FF JUMPI PUSH2 0x51FA DUP9 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x5202 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x5265 JUMPI PUSH2 0x5244 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x82FC JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5250 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x52FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x528B JUMPI PUSH2 0x5244 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x52A5 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x52E2 JUMPI PUSH2 0x52C1 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x82FC JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x52CD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x52FD JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x52F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x531F JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x532A JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5207 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x5342 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x534D DUP8 DUP8 DUP8 PUSH2 0x68FC JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x5359 JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x5382 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB783 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x539A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x53AE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x53D6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA557 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x544D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5406 SWAP3 SWAP2 SWAP1 PUSH2 0xB213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x542D SWAP3 SWAP2 SWAP1 PUSH2 0xB213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x83DF DUP2 MSTORE POP DUP6 PUSH2 0x7618 JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5478 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x549F SWAP3 SWAP2 SWAP1 PUSH2 0xB54F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x84C6 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x54DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5504 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x182DF0F5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5542 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5556 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x557A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x313CE567 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x55B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x55CB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x55EF SWAP2 SWAP1 PUSH2 0xABEE JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5661 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4EED JUMPI DUP2 PUSH1 0xA EXP PUSH5 0x2540BE400 MUL DUP4 DUP8 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5631 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL DUP2 PUSH2 0x5641 JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x564E JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5611 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x19D8 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP3 DUP3 PUSH1 0xA EXP PUSH5 0x2540BE400 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x569D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MUL MUL DUP2 PUSH2 0x56AE JUMPI INVALID JUMPDEST DIV DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x56BB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x567E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x56DA DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x571E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5732 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5756 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5771 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x579B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x57D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57EB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x580F SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x58B2 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5878 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x589C SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x58BF JUMPI POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH2 0x58ED DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x58DE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x851A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x58FA JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5907 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x58C2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x97C DUP4 PUSH2 0x593F PUSH2 0x592F DUP3 PUSH1 0x1 PUSH2 0x8809 JUMP JUMPDEST PUSH2 0x5939 DUP9 DUP8 PUSH2 0x882D JUMP JUMPDEST SWAP1 PUSH2 0x885E JUMP JUMPDEST SWAP1 PUSH2 0x887A JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x60 PUSH2 0x5986 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x60 PUSH2 0x5993 DUP7 PUSH2 0x88A4 JUMP JUMPDEST SWAP1 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x59D6 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x59F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A24 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5A0F JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x5B7F JUMPI PUSH1 0x60 PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 0x5B37 JUMPI PUSH1 0x60 PUSH2 0x5A69 DUP7 PUSH2 0x5A64 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5A57 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x893C JUMP JUMPDEST PUSH2 0x7D27 JUMP JUMPDEST SWAP1 POP DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x2F80BB1D PUSH3 0x927C0 DUP4 DUP14 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x5A8B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5AB0 SWAP3 SWAP2 SWAP1 PUSH2 0xB415 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5ACA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP8 CALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5AFB JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5AF8 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5B04 JUMPI PUSH2 0x5B2E JUMP JUMPDEST DUP4 ISZERO DUP1 PUSH2 0x5B11 JUMPI POP DUP1 DUP5 LT ISZERO JUMPDEST ISZERO PUSH2 0x5B2C JUMPI DUP1 SWAP4 POP PUSH2 0x5B29 DUP13 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x46FF JUMPI INVALID JUMPDEST SWAP5 POP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5A39 JUMP JUMPDEST POP DUP1 PUSH2 0x5B44 JUMPI POP POP PUSH2 0x5B7F JUMP JUMPDEST DUP1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B51 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP2 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5B6A JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP PUSH1 0x1 ADD PUSH2 0x5A2A JUMP JUMPDEST POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x5B96 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5BDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5BEE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5C12 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5C2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5C57 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5CA7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5CCB SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x5D6E JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5D20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5D34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5D58 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x5D7B JUMPI POP POP POP PUSH2 0x97C JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x0 PUSH2 0x5DA9 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5D9A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x89D4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5DB6 JUMPI POP PUSH2 0x23AA JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5DC3 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x5D7E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x5E15 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x5E50 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5E55 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x5E69 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x5E7C JUMPI PUSH2 0x5E79 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x5E92 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST PUSH2 0x5E9E DUP9 DUP9 DUP9 DUP9 PUSH2 0x629E JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5EB5 JUMPI PUSH2 0x2DE1 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5ECD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5EF7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x5F64 SWAP1 DUP1 PUSH2 0x5F1B DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5F44 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB043 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x63F4 DUP2 MSTORE POP DUP7 PUSH2 0x7618 JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5F91 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5FB8 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C30 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x10B0 SWAP1 DUP1 PUSH2 0x5FF7 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x601E SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8C77 DUP2 MSTORE POP DUP4 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x604A DUP4 DUP4 PUSH2 0x8D2C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x606B JUMPI PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x6077 DUP8 DUP8 DUP8 DUP8 PUSH2 0x8D56 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6093 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x60BD JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x61A7 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x60EC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6111 SWAP3 SWAP2 SWAP1 PUSH2 0xB297 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x615A JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6157 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6163 JUMPI PUSH2 0x61A7 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6170 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6188 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x619E JUMPI POP PUSH2 0x61A7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x60C3 JUMP JUMPDEST POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x61C0 DUP5 DUP7 PUSH2 0x3ED2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x61D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6202 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x626D PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6226 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x624D SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8F87 DUP2 MSTORE POP DUP6 PUSH2 0x7618 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x2F63 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62D1 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6325 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x63BE JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x6363 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x637B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x638F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x63B7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x63D3 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x63EB JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x63DF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x640E SWAP2 SWAP1 PUSH2 0x9C5B JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x64B2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x644E SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6465 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6496 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6493 SWAP2 DUP2 ADD SWAP1 PUSH2 0xAB57 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x64A6 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x2870 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x644E SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF53 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6501 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x652B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6661 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6558 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x657E SWAP3 SWAP2 SWAP1 PUSH2 0xB810 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6596 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x65CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x65C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6606 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x65FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65FF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x6661 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x6616 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x662A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6642 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6658 JUMPI POP PUSH2 0x6661 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6531 JUMP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6676 DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x668E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x66B8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x66DB JUMPI PUSH2 0x66D6 DUP8 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x66DE JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x6700 JUMPI PUSH2 0x66FB DUP9 DUP8 PUSH2 0x827D JUMP JUMPDEST PUSH2 0x6703 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23AA JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x6759 JUMPI PUSH2 0x6738 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6744 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x67F3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x677F JUMPI PUSH2 0x6738 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x6799 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5237 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x67D6 JUMPI PUSH2 0x67B5 DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x82FC JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x67C1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x67F1 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x67E4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x6813 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6807 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x681E JUMPI POP PUSH2 0x23AA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6708 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x684F SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x688D SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x68C8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x68CD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x68E1 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x68F4 JUMPI PUSH2 0x68F1 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x693A JUMPI DUP7 PUSH2 0x6950 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6973 JUMPI DUP7 PUSH2 0x6989 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x69BD SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0xB067 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x69D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x69E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6A11 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA059 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6A2D JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2870 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6A3D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x6661 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x2870 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6A80 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6AAA JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x6AB7 DUP7 DUP7 PUSH2 0x7F96 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6AC9 JUMPI POP PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4808 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6AF3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6B1B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB829 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6B69 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6B66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6B97 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x50FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x50FF JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6BA4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x6BB8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x6BD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6BE6 JUMPI POP PUSH2 0x4808 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6ACC JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6BFB DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6C31 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6C5F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6C8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6CB9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x6CC4 PUSH2 0x948C JUMP JUMPDEST PUSH2 0x6CCC PUSH2 0x8FD7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x60 PUSH2 0x6CF8 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6CEB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x9006 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x6D2E SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB4A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6D48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x6D7D JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6D7A SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA2AD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6DB8 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6DAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6DB0 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0x19D5 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6DC7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x6DE5 JUMPI POP POP POP PUSH2 0x19D5 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x6DF2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x6CD1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD62ED3E PUSH1 0xE0 SHL DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6E33 SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x6E71 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x6EAC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6EB1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x6EC5 JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x6661 JUMPI PUSH2 0x6ED5 DUP2 PUSH1 0x0 PUSH2 0x603E JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6EEB DUP4 DUP6 PUSH2 0x3ED2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x6F21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x6F4F JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x6F7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x6FA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x6FB4 PUSH2 0x948C JUMP JUMPDEST PUSH2 0x6FBC PUSH2 0x8FD7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x19D5 JUMPI PUSH1 0x60 PUSH2 0x6FDB DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6CEB JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x7011 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0xB4A3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x702B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7060 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x705D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA2AD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x708E JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x6DAB JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x6DB0 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x709D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x70B7 JUMPI POP POP POP PUSH2 0x19D5 JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x70C4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x6FC1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x604D DUP3 PUSH2 0x5DD7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7101 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x712B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6661 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7158 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x717E SWAP3 SWAP2 SWAP1 PUSH2 0xB810 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x71CC JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x71C9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x71FA JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x65FA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x65FF JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7207 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x721B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7249 JUMPI POP PUSH2 0x6661 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7131 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x7261 DUP6 DUP8 PUSH2 0x3ED2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x72A3 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x72D6 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x72EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7302 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7326 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x7344 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x73E3 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x7375 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x738D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x73A1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73C5 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x73DC JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x741C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7430 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7454 SWAP2 SWAP1 PUSH2 0xA463 JUMP JUMPDEST PUSH2 0x745F JUMPI POP POP PUSH2 0xEC7 JUMP JUMPDEST PUSH2 0x74D7 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7488 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74B7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAF86 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x3F0D DUP2 MSTORE POP DUP8 PUSH2 0x7618 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x74F0 PUSH2 0x94B3 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7504 SWAP2 SWAP1 PUSH2 0xA62C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x751E SWAP2 SWAP1 PUSH2 0xA610 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x7539 DUP13 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x754C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB635 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x758A SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x75C5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x75CA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x75E2 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x75F6 SWAP2 SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7602 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x765B JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x766D JUMPI PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x769E DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7689 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x76AB JUMPI POP PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76C8 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x76D6 JUMPI POP POP PUSH2 0x604D JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x7821 JUMPI PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x77CA JUMPI PUSH2 0x770D DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x76FE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP8 PUSH2 0x90D9 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x7719 JUMPI PUSH2 0x77CA JUMP JUMPDEST PUSH2 0x7728 PUSH2 0x2715 PUSH2 0x2710 DUP8 PUSH2 0x90D9 JUMP JUMPDEST SWAP5 POP DUP5 PUSH2 0x7734 JUMPI PUSH2 0x77CA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7751 DUP10 PUSH1 0x20 ADD MLOAD DUP11 PUSH1 0x0 ADD MLOAD DUP9 DUP13 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x775E JUMPI POP PUSH2 0x77CA JUMP JUMPDEST DUP1 SWAP5 POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x776D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 LT PUSH2 0x77C1 JUMPI DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x7787 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x779E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x77B0 JUMPI INVALID JUMPDEST DIV SWAP3 POP PUSH1 0x5 DUP4 GT PUSH2 0x77C1 JUMPI POP PUSH2 0x77CA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x76E6 JUMP JUMPDEST POP DUP1 ISZERO DUP1 PUSH2 0x77D8 JUMPI POP PUSH1 0x5 DUP2 GT JUMPDEST ISZERO PUSH2 0x77E3 JUMPI POP PUSH2 0x7821 JUMP JUMPDEST PUSH2 0x7801 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x77F2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x90D9 JUMP JUMPDEST DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x780D JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x76D9 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x7847 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x7843 JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x7856 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x604D JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x7874 JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x604D JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP3 DUP5 MLOAD SUB LT ISZERO PUSH2 0x78AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB567 JUMP JUMPDEST PUSH2 0x78B5 PUSH2 0x94D3 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x64 DUP2 MSTORE PUSH2 0x1F4 PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xBB8 DUP2 DUP4 ADD MSTORE PUSH2 0x2710 PUSH1 0x60 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD PUSH1 0x4 DUP1 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP1 SWAP5 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP PUSH1 0x0 DUP1 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x7913 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP8 DUP8 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x792E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 JUMPDEST PUSH1 0x4 DUP2 LT ISZERO PUSH2 0x7A23 JUMPI PUSH1 0x0 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1698EE82 DUP6 DUP6 DUP11 DUP7 PUSH1 0x4 DUP2 LT PUSH2 0x7963 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7986 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB428 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x799E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x79B2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79D6 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH2 0x79E1 DUP2 PUSH2 0x9131 JUMP JUMPDEST ISZERO PUSH2 0x7A1A JUMPI DUP1 DUP7 DUP7 DUP1 PUSH1 0x1 ADD SWAP8 POP DUP2 MLOAD DUP2 LT PUSH2 0x79F9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x793B JUMP JUMPDEST POP POP POP DUP1 PUSH2 0x7A33 JUMPI POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP6 MLOAD DUP6 PUSH1 0x2 ADD EQ ISZERO PUSH2 0x7B29 JUMPI DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7A55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7A89 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7A74 JUMPI SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7B20 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP1 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AC1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7AD8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7AEC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7B00 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7A8F JUMP JUMPDEST POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x7B39 DUP9 DUP9 DUP9 PUSH1 0x1 ADD PUSH2 0x7887 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7B4E JUMPI POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 MLOAD DUP3 MUL PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7B67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7B9B JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x7B86 JUMPI SWAP1 POP JUMPDEST POP SWAP5 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x7D1B JUMPI PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x7D12 JUMPI DUP3 MLOAD DUP3 DUP2 MUL DUP3 ADD SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x7BC9 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD PUSH1 0x1 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7BEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7C14 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7C21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7C38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7C4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7C60 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP PUSH1 0x0 JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7C8F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x7D08 JUMPI DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7CAB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x7CBE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x7CD2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x7CE8 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x7C83 JUMP JUMPDEST POP POP PUSH1 0x1 ADD PUSH2 0x7BAC JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x7BA1 JUMP JUMPDEST POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP4 MLOAD LT ISZERO DUP1 ISZERO PUSH2 0x7D3F JUMPI POP DUP2 MLOAD PUSH1 0x1 ADD DUP4 MLOAD EQ JUMPDEST PUSH2 0x7D5B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3F04 SWAP1 PUSH2 0xB5F0 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x3 MUL DUP4 MLOAD PUSH1 0x14 MUL ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x7D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x7DA6 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x20 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x68F4 JUMPI DUP1 ISZERO PUSH2 0x7E55 JUMPI PUSH1 0x0 DUP5 PUSH1 0x1 DUP4 SUB DUP2 MLOAD DUP2 LT PUSH2 0x7DD0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDDCA3F43 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7E10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7E24 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E48 SWAP2 SWAP1 PUSH2 0xAB34 JUMP JUMPDEST PUSH1 0xE8 SHL DUP4 MSTORE POP PUSH1 0x3 SWAP1 SWAP2 ADD SWAP1 JUMPDEST PUSH1 0x0 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E63 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD PUSH1 0x60 SHL DUP4 MSTORE POP PUSH1 0x14 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7DB0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7E9B SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x7EB5 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x7EC9 DUP11 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7EE8 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAFB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7F00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x7F35 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7F32 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x7F76 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F68 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x7F83 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7FD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x800B SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8027 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8051 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x68F4 JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x8081 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x8098 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x80BD SWAP3 SWAP2 SWAP1 PUSH2 0xAF6C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x80D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x810B JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x8108 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x9FC1 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8179 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x8139 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x813E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP1 JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x816D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH2 0x604D JUMP JUMPDEST DUP1 MLOAD PUSH2 0x8187 JUMPI PUSH1 0x0 DUP1 PUSH2 0x8143 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x8271 JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x81A2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x81E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x81F6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x821A SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x8268 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8233 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x8247 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x818B JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x8057 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x82AC SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x82C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x82D8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2870 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x8312 JUMPI PUSH2 0x5161 JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x8334 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x8372 SWAP2 SWAP1 PUSH2 0xAF23 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x83AE JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x83B3 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x83D6 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x83D3 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x83EA PUSH2 0x94F1 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x83FE SWAP2 SWAP1 PUSH2 0x9CA3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8418 SWAP2 SWAP1 PUSH2 0x9CA3 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x8445 SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0xB74D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x845D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x848D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x848A SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x84BB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x7F63 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x7F68 JUMP JUMPDEST SWAP4 POP PUSH2 0x2870 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x84D1 PUSH2 0x94B3 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x84E5 SWAP2 SWAP1 PUSH2 0xA62C JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x84FF SWAP2 SWAP1 PUSH2 0xA610 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x7539 DUP13 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8550 SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x857C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x85A0 SWAP2 SWAP1 PUSH2 0xABAF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x86CD JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x8650 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8609 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x861D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8641 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x866A DUP3 PUSH2 0x593F DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x868E PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP10 DUP6 PUSH2 0x885E JUMP JUMPDEST SWAP1 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x86A7 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86BD PUSH1 0x1 PUSH2 0x5939 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x887A JUMP JUMPDEST SWAP9 POP PUSH2 0x6ED5 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x87F9 JUMPI PUSH1 0x0 PUSH2 0x86FC DUP9 PUSH5 0xE8D4A51000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8783 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x873C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8750 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8774 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x885E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x879D PUSH8 0xDE0B6B3A7640000 PUSH2 0x593F DUP6 DUP6 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x87B6 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87D2 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP10 DUP6 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x87EB JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x6ED5 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x8827 JUMPI PUSH2 0x8827 PUSH2 0x8822 PUSH1 0x2 DUP6 DUP6 PUSH2 0x933D JUMP JUMPDEST PUSH2 0x9397 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x883C JUMPI POP PUSH1 0x0 PUSH2 0x604D JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x8849 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x604A JUMPI PUSH2 0x604A PUSH2 0x8822 PUSH1 0x1 DUP7 DUP7 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x604A JUMPI PUSH2 0x604A PUSH2 0x8822 PUSH1 0x0 DUP7 DUP7 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x8890 JUMPI PUSH2 0x8890 PUSH2 0x8822 PUSH1 0x3 DUP6 DUP6 PUSH2 0x933D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x889B JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x88BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x88E7 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x8908 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x891C JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x88ED JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x8955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x897F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x1EFC JUMPI DUP3 PUSH1 0x1 DUP3 DUP6 MLOAD SUB SUB DUP2 MLOAD DUP2 LT PUSH2 0x89A0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x89B4 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE PUSH1 0x1 ADD PUSH2 0x8985 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8A0A SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8A22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8A36 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8A5A SWAP2 SWAP1 PUSH2 0xABAF JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8B66 JUMPI PUSH1 0x0 PUSH2 0x8A99 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x8AB7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP9 DUP6 PUSH2 0x885E JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x8ACF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8B58 PUSH8 0xDE0B6B3A7640000 PUSH2 0x593F DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8B2D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8B51 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x882D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x86BD DUP5 DUP4 PUSH2 0x8809 JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x8C1F JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x8B9B JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8BB7 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x8688 DUP9 DUP6 PUSH2 0x8809 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x8BCF JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x6ED5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8C0D DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x873C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x86BD DUP3 PUSH2 0x593F DUP7 DUP9 PUSH2 0x882D JUMP JUMPDEST POP PUSH1 0x0 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C49 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C63 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x7EC9 DUP11 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8C90 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8CAA SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x8CC2 DUP12 PUSH2 0x9098 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8CE1 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xAFB1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8CF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x7F35 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x7F32 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA431 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x8D4D JUMPI PUSH2 0x8D4D PUSH2 0x8822 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x939F JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8DAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8DBE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8DE2 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8DFE SWAP2 SWAP1 PUSH2 0xB3E0 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8E2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E4E SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x8E63 JUMPI PUSH2 0x63EB JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x8F7C JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8E86 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x8E9A JUMPI PUSH2 0x8F74 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x8EBD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x8ED5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8EFA SWAP3 SWAP2 SWAP1 PUSH2 0xB297 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x8F43 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x8F40 SWAP2 DUP2 ADD SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x8F4C JUMPI PUSH2 0x8F74 JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x8F72 JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8F67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8E67 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FA0 SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x8FBB SWAP2 SWAP1 PUSH2 0x9BC4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x8FCB DUP5 DUP5 DUP4 DUP10 PUSH2 0x2877 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8FDF PUSH2 0x948C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x9028 PUSH2 0x953B JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x9020 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x9086 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x90C8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x90E6 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x90EF JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x90FC JUMPI POP PUSH1 0x0 PUSH2 0x2870 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x9109 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9119 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x2870 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x9127 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 EXTCODESIZE DUP1 PUSH2 0x9144 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0xAFC JUMP JUMPDEST POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDFE1681 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x917E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9192 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91B6 SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x91E1 SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x91F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x920D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9231 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x923D JUMPI POP PUSH1 0x0 PUSH2 0xAFC JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD21220A7 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9276 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x928A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x92AE SWAP2 SWAP1 PUSH2 0x9BA8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x70A08231 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x92D9 SWAP2 SWAP1 PUSH2 0xAF3F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x92F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9305 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9329 SWAP2 SWAP1 PUSH2 0xA4E0 JUMP JUMPDEST PUSH2 0x9335 JUMPI POP PUSH1 0x0 PUSH2 0xAFC JUMP JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x935C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB474 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x935C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB495 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x942B JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x942B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x9410 JUMP JUMPDEST POP PUSH2 0x9437 SWAP3 SWAP2 POP PUSH2 0x956D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x9437 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x956E JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x604D DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 MLOAD PUSH2 0x604D DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x95A8 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x95BB PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST PUSH2 0xB8C7 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x95DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD PUSH2 0x95F2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x95DF JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x961F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x962D PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI PUSH2 0x9655 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x980E JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x963E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9677 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9685 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x96A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD PUSH2 0x96BC DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x96A9 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x96DE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x96EC PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x80 DUP1 DUP6 MUL DUP8 ADD DUP4 ADD DUP9 LT ISZERO PUSH2 0x970F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x9736 JUMPI PUSH2 0x9724 DUP10 DUP5 PUSH2 0x9B0D JUMP JUMPDEST DUP6 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP2 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x9712 JUMP JUMPDEST POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x9752 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x9760 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x9781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x9784 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x97B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x97BE PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x97DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x9604 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x97E2 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x981E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x982C PUSH2 0x95B6 DUP3 PUSH2 0xB90C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x986C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x987A PUSH2 0x95B6 DUP3 PUSH2 0xB90C JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x9891 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D4D DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB93A JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98C2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x98CC PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x98D9 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x98E9 DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x98FC DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9918 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9922 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x992F DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x993F DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x98FC DUP2 PUSH2 0xB99A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9963 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x996D PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x997A DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x998A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x99A6 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x99B0 PUSH1 0xA0 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x99C4 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x99D7 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x99EA DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9A08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9A14 DUP5 DUP3 DUP6 ADD PUSH2 0x980E JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x180 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9A33 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9A3C DUP2 PUSH2 0xB8C7 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x9A49 DUP4 DUP4 PUSH2 0x9582 JUMP JUMPDEST DUP2 MSTORE PUSH2 0x9A58 DUP4 PUSH1 0x20 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9A6A DUP4 PUSH1 0x40 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9A7C DUP4 PUSH1 0x60 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x9A8E DUP4 PUSH1 0x80 DUP5 ADD PUSH2 0x9B6A JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x9AA0 DUP4 PUSH1 0xA0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MSTORE PUSH2 0x9AB2 DUP4 PUSH1 0xC0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x9AC4 DUP4 PUSH1 0xE0 DUP5 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 PUSH2 0x9AD8 DUP5 DUP3 DUP6 ADD PUSH2 0x9582 JUMP JUMPDEST SWAP1 DUP3 ADD MSTORE PUSH2 0x120 DUP3 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH2 0x140 PUSH2 0x9AF6 DUP5 DUP3 DUP6 ADD PUSH2 0x9B75 JUMP JUMPDEST DUP2 DUP4 ADD MSTORE POP PUSH2 0x160 DUP1 DUP4 ADD CALLDATALOAD DUP2 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B1E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x9B28 PUSH1 0x80 PUSH2 0xB8C7 JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH1 0x4 DUP2 LT PUSH2 0x9B39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x9B49 DUP2 PUSH2 0xB9D4 JUMP JUMPDEST DUP1 PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x604D DUP2 PUSH2 0xB9BF JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x604D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9B9D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x604A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9BB9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9BD6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9BE1 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9BF2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9C12 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x9C1D DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x9C2E DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9C3F DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x9C50 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9C6F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x9C7A DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x9C8B DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x97FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9CB5 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x9CC0 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x9CDC JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x9CEF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x9CF9 PUSH1 0xA0 PUSH2 0xB8C7 JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x9D0A DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x9D1C DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x9D2E DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x958D JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x9D44 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x9D50 DUP9 DUP3 DUP7 ADD PUSH2 0x985C JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x9D77 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x9D82 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x9D92 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9DC4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9DCF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x9DDF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DEF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x9DFF DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E19 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9E25 DUP9 DUP3 DUP10 ADD PUSH2 0x9742 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9E47 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9E52 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9E62 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9E72 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9E98 DUP8 DUP3 DUP9 ADD PUSH2 0x9742 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9EB9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9EC4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9ED4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9EE4 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F06 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x9F11 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9F2B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x9598 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x9F56 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x9F61 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9F78 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x9C50 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x9F9F JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x9FAA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x9DEF DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9FD3 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9FE8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x9FF8 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xA006 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xA022 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0xA04D JUMPI DUP1 MLOAD PUSH2 0xA039 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xA026 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA06D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA083 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA096 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xA0A4 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0xA0C4 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0xA0E6 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0xA0C8 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0xA0FD JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA10A DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST SWAP3 POP POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x98A2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA12C JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA142 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA155 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xA163 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0xA176 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA19C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA1B2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA1BE DUP8 DUP4 DUP9 ADD PUSH2 0x960F JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA1D3 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA1E0 DUP7 DUP3 DUP8 ADD PUSH2 0x960F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA202 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA217 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x9667 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA235 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA24A JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA256 DUP6 DUP3 DUP7 ADD PUSH2 0x9667 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x9BF2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA27B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA290 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA29C DUP7 DUP3 DUP8 ADD PUSH2 0x9667 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x9D92 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA2BF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA2D4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0xA2E4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0xA2F2 PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0xA30E JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0xA04D JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0xA312 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA344 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA35A JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xA36D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xA37B PUSH2 0x95B6 DUP3 PUSH2 0xB8ED JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD PUSH2 0x180 DUP13 DUP4 DUP3 DUP9 MUL DUP11 ADD ADD GT ISZERO PUSH2 0xA39E JUMPI DUP9 DUP10 REVERT JUMPDEST DUP9 SWAP8 POP JUMPDEST DUP6 DUP9 LT ISZERO PUSH2 0xA3CA JUMPI PUSH2 0xA3B4 DUP14 DUP4 PUSH2 0x9A20 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP8 SWAP1 SWAP8 ADD SWAP7 SWAP4 DUP3 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA3A2 JUMP JUMPDEST POP SWAP2 SWAP9 POP DUP10 ADD CALLDATALOAD SWAP5 POP POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0xA3E2 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA3EF DUP7 DUP3 DUP8 ADD PUSH2 0x96CE JUMP JUMPDEST SWAP3 POP POP PUSH2 0x9C9A DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x9582 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA410 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA425 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x9742 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA442 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA457 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA474 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB98C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA493 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0xA49E DUP2 PUSH2 0xB98C JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0xA4AF DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA4CA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA4D6 DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA4F1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA50C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA529 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA535 DUP8 DUP4 DUP9 ADD PUSH2 0x985C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xA54A JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0xA4D6 DUP7 DUP3 DUP8 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA568 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA57D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x97C DUP5 DUP3 DUP6 ADD PUSH2 0x985C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA59B JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xA5A6 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA5C1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x97A0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA5DF JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA5EA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA604 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x9F37 DUP6 DUP3 DUP7 ADD PUSH2 0x9667 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA621 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB9B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA63E JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0xA649 DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH2 0xA658 DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x9907 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0x80 DUP2 SLT ISZERO PUSH2 0xA676 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0xA683 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xA68E PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0xA6A0 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA6B5 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA6D9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA6EF JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP6 ADD SWAP1 PUSH1 0x40 DUP3 DUP9 SUB SLT ISZERO PUSH2 0xA702 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA70C PUSH1 0x40 PUSH2 0xB8C7 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH2 0xA717 DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 DUP2 ADD CALLDATALOAD DUP4 DUP2 GT ISZERO PUSH2 0xA72B JUMPI DUP6 DUP7 REVERT JUMPDEST DUP1 DUP6 ADD SWAP5 POP POP DUP9 PUSH1 0x1F DUP6 ADD SLT PUSH2 0xA73F JUMPI DUP5 DUP6 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0xA74F PUSH2 0x95B6 DUP5 PUSH2 0xB8ED JUMP JUMPDEST DUP4 DUP2 MSTORE DUP2 DUP2 ADD SWAP1 DUP6 DUP4 ADD DUP8 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0xA784 JUMPI PUSH2 0xA772 DUP14 DUP7 DUP5 CALLDATALOAD DUP12 ADD ADD PUSH2 0x9598 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xA75B JUMP JUMPDEST POP POP DUP4 DUP4 ADD MSTORE POP SWAP1 SWAP6 POP DUP7 ADD CALLDATALOAD SWAP2 POP PUSH2 0x9D92 SWAP1 POP DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA7B2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA7BC DUP6 DUP6 PUSH2 0x98B1 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xA7CC DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB9B0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA7F1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA7FB DUP7 DUP7 PUSH2 0x98B1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0xA80B DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0xA81B DUP2 PUSH2 0xB9B0 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA849 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA853 DUP6 DUP6 PUSH2 0x9952 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH2 0xA6B5 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA878 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA882 DUP7 DUP7 PUSH2 0x9952 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xA892 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0xA8A2 DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x9E8C JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA8D0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA8E5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0xA29C DUP7 DUP3 DUP8 ADD PUSH2 0x9995 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA906 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0xA91C JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0xA928 DUP9 DUP4 DUP10 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0xA93A DUP3 PUSH2 0xB977 JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0xA94C DUP3 PUSH2 0xB977 JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xA961 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x9E98 DUP8 DUP3 DUP9 ADD PUSH2 0x9742 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA983 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA998 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA9A4 DUP8 DUP3 DUP9 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x9ED4 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xA9CA JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0xA9DF JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xA9EB DUP8 DUP3 DUP9 ADD PUSH2 0x9995 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x9F78 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x220 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xAA18 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xAA22 DUP6 DUP6 PUSH2 0x9A20 JUMP JUMPDEST SWAP3 POP PUSH2 0xAA32 DUP6 PUSH2 0x180 DUP7 ADD PUSH2 0x9B0D JUMP JUMPDEST SWAP2 POP PUSH2 0x200 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0xAA58 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0xAA65 JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xAA70 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 CALLDATALOAD PUSH2 0xAA7B DUP2 PUSH2 0xB977 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0xAA95 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 POP PUSH1 0x60 DUP5 ADD CALLDATALOAD PUSH2 0xAAAA DUP2 PUSH2 0xB977 JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP5 ADD CALLDATALOAD PUSH2 0x9DA2 DUP2 PUSH2 0xB977 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP6 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0xAACF JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0xAADC JUMPI DUP2 DUP3 REVERT JUMPDEST POP PUSH2 0xAAE7 PUSH1 0x60 PUSH2 0xB8C7 JUMP JUMPDEST DUP5 MLOAD DUP2 MSTORE PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x5 DUP2 LT PUSH2 0xAAFC JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP6 ADD MLOAD PUSH2 0xAB0F DUP2 PUSH2 0xB9BF JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0xAB25 DUP2 PUSH2 0xB9BF JUMP JUMPDEST SWAP2 POP PUSH2 0x9C9A DUP6 PUSH1 0x80 DUP7 ADD PUSH2 0x97FE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAB45 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF DUP2 AND DUP2 EQ PUSH2 0x604A JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xAB69 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAB8F JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xABC6 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABFF JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x604A DUP2 PUSH2 0xB9D4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAC2A JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xAC6D JUMP JUMPDEST PUSH1 0x0 DUP2 SLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP4 DUP4 MSTORE DUP1 DUP4 KECCAK256 DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xAC4F JUMPI DUP2 SLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 PUSH1 0x1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xAC9F JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xACD3 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xB93A JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x97C PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST PUSH2 0xAE02 DUP3 DUP3 MLOAD PUSH2 0xAC0A JUMP JUMPDEST PUSH1 0x20 DUP2 ADD MLOAD PUSH2 0xAE14 PUSH1 0x20 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0x40 DUP2 ADD MLOAD PUSH2 0xAE27 PUSH1 0x40 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0x60 DUP2 ADD MLOAD PUSH2 0xAE3A PUSH1 0x60 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0x80 DUP2 ADD MLOAD PUSH2 0xAE4D PUSH1 0x80 DUP5 ADD DUP3 PUSH2 0xAEF9 JUMP JUMPDEST POP PUSH1 0xA0 DUP2 ADD MLOAD PUSH2 0xAE60 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0xC0 DUP2 ADD MLOAD PUSH2 0xAE73 PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH1 0xE0 DUP2 ADD MLOAD PUSH2 0xAE86 PUSH1 0xE0 DUP5 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP PUSH2 0x100 DUP1 DUP3 ADD MLOAD PUSH2 0xAE9A DUP3 DUP6 ADD DUP3 PUSH2 0xAC0A JUMP JUMPDEST POP POP PUSH2 0x120 DUP2 DUP2 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x140 DUP1 DUP3 ADD MLOAD PUSH2 0xAEBA DUP3 DUP6 ADD DUP3 PUSH2 0xAF06 JUMP JUMPDEST POP POP PUSH2 0x160 SWAP1 DUP2 ADD MLOAD SWAP2 ADD MSTORE JUMP JUMPDEST PUSH2 0xAED2 DUP2 MLOAD PUSH2 0xB92F JUMP JUMPDEST DUP3 MSTORE PUSH1 0xFF PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x60 DUP4 ADD MSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND SWAP1 MSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xAF35 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0xB93A JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB0F9 SWAP1 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB128 SWAP1 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6ED5 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0xB151 DUP6 PUSH2 0xB92F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0xB16A PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0xAC5A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB0F9 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0xB199 DUP12 PUSH2 0xB96A JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0xB1B1 DUP3 DUP6 ADD DUP12 PUSH2 0xAC5A JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0xB1C5 DUP3 DUP11 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0xB1D8 DUP7 PUSH2 0xB96A JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0xB1F0 DUP2 DUP7 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0xB204 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97C SWAP1 DUP4 ADD DUP5 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0xB0F9 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB285 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x10B0 DUP2 DUP6 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB2AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD PUSH1 0x40 DUP4 MSTORE DUP1 DUP6 MLOAD DUP1 DUP4 MSTORE PUSH1 0x60 DUP6 ADD SWAP2 POP PUSH1 0x20 SWAP3 POP PUSH1 0x60 DUP4 DUP3 MUL DUP7 ADD ADD DUP4 DUP9 ADD DUP6 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB30E JUMPI PUSH1 0x5F NOT DUP9 DUP5 SUB ADD DUP6 MSTORE PUSH2 0xB2FC DUP4 DUP4 MLOAD PUSH2 0xACBB JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB2E0 JUMP JUMPDEST POP POP DUP6 DUP2 SUB DUP5 DUP8 ADD MSTORE PUSH2 0x8FCB DUP2 DUP9 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB388 JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0xB369 DUP9 DUP7 ADD DUP3 PUSH2 0xACBB JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB345 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x10B0 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xB128 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0xB2AA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xACBB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH3 0xFFFFFF SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x97C SWAP1 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0xB481 DUP6 PUSH2 0xB96A JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0xB481 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH1 0x2 DUP8 LT PUSH2 0xB4B3 JUMPI INVALID JUMPDEST DUP7 DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH2 0x100 SWAP4 POP DUP4 DUP7 ADD SWAP2 POP DUP4 DUP4 DUP3 MUL DUP8 ADD ADD SWAP4 POP DUP3 DUP10 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB50A JUMPI PUSH1 0xFF NOT DUP9 DUP8 SUB ADD DUP5 MSTORE PUSH2 0xB4F8 DUP7 DUP4 MLOAD PUSH2 0xACE7 JUMP JUMPDEST SWAP6 POP SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xB4DC JUMP JUMPDEST POP POP POP POP POP DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xB521 DUP2 DUP7 PUSH2 0xAC17 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x10B0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xAD56 JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x2870 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xAD24 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F746F6B656E5061746820746F6F2073 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x1A1BDC9D PUSH1 0xE2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x556E6973776170563353616D706C65722F696E76616C69642070617468206C65 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6E67746873 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB641 DUP3 DUP8 PUSH2 0xAD24 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6ED5 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAC5A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB673 DUP3 DUP8 PUSH2 0xAD24 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x6ED5 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD MLOAD DUP3 AND SWAP1 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP4 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x6ED5 SWAP1 DUP4 ADD DUP5 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 MSTORE PUSH2 0xB6EE PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0xAD8B JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xB700 DUP2 DUP7 PUSH2 0xAD8B JUMP JUMPDEST SWAP2 POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB724 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x20 DUP6 ADD MSTORE DUP6 AND PUSH1 0x40 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0xB0F9 DUP2 DUP6 PUSH2 0xAC89 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB760 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0xB796 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0xADAA JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x200 DUP2 ADD PUSH2 0xB7CB DUP3 DUP6 PUSH2 0xADF7 JUMP JUMPDEST PUSH2 0x2870 PUSH2 0x180 DUP4 ADD DUP5 PUSH2 0xAEC8 JUMP JUMPDEST PUSH2 0x220 DUP2 ADD PUSH2 0xB7E8 DUP3 DUP7 PUSH2 0xADF7 JUMP JUMPDEST PUSH2 0xB7F6 PUSH2 0x180 DUP4 ADD DUP6 PUSH2 0xAEC8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH2 0x200 SWAP2 SWAP1 SWAP2 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x97C PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xAC17 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xB842 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xAC17 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x6ED5 DUP2 DUP6 PUSH2 0xAC17 JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xB892 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB8AB JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xB8C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xB8E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB902 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0xB921 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x4 DUP2 LT PUSH2 0xAFC JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xB955 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xB93D JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0xB964 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0xB974 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xB974 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDRESS 0x4A SWAP16 CALLVALUE DUP1 NOT EQ 0xD4 CALLDATALOAD SWAP5 LOG2 SHL SWAP5 STOP 0xBD CALL SWAP5 0x2B KECCAK256 0xB2 0xAD 0xB4 0x4E EXP DUP15 PUSH3 0xB58DBF GASLIMIT 0xB7 0xE7 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMapi;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4230:977:17;;;;;;:::i;:::-;;:::i;2195:196:26:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1227:367:11:-;;;;;;:::i;:::-;;:::i;1741:457:10:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2883:1742:6:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4983:384:1:-;;;;;;:::i;:::-;;:::i;1410:1411:16:-;;;;;;:::i;:::-;;:::i;2020:405:25:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1737:386:1:-;;;;;;:::i;:::-;;:::i;1295:390:4:-;;;;;;:::i;:::-;;:::i;2158:1092:13:-;;;;;;:::i;:::-;;:::i;3597:374::-;;;;;;:::i;:::-;;:::i;1411:370:20:-;;;;;;:::i;:::-;;:::i;1922:354:9:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2523:1130:5:-;;;;;;:::i;:::-;;:::i;1543:374:23:-;;;;;;:::i;:::-;;:::i;2503:120:26:-;;;:::i;:::-;;;;;;;:::i;4342:451:10:-;;;;;;:::i;:::-;;:::i;1702:391:5:-;;;;;;:::i;:::-;;:::i;4868:395:21:-;;;;;;:::i;:::-;;:::i;6360:2595:10:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2837:388:4:-;;;;;;:::i;:::-;;:::i;2397:100:26:-;;;:::i;1996:471:7:-;;;;;;:::i;:::-;;:::i;4965:390:14:-;;;;;;:::i;:::-;;:::i;5648:955:17:-;;;;;;:::i;:::-;;:::i;2219:474:8:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4750:403:25:-;;;;;;:::i;:::-;;:::i;3594:390:14:-;;;;;;:::i;:::-;;:::i;946:381:26:-;;;;;;:::i;:::-;;:::i;4768:465:7:-;;;;;;:::i;:::-;;:::i;1907:430:6:-;;;;;;:::i;:::-;;:::i;3451:364:20:-;;;;;;:::i;:::-;;:::i;2429:2080:21:-;;;;;;:::i;:::-;;:::i;3977:412:12:-;;;;;;:::i;:::-;;:::i;935:1855:22:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;4266:340:3:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;6743:1029:17:-;;;;;;:::i;:::-;;:::i;3284:1290:15:-;;;;;;:::i;:::-;;:::i;1526:454:3:-;;;;;;:::i;:::-;;:::i;4975:405:15:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2388:1205:12:-;;;;;;:::i;:::-;;:::i;3070:1175:7:-;;;;;;:::i;:::-;;:::i;1403:411:15:-;;;;;;:::i;:::-;;:::i;2292:986::-;;;;;;:::i;:::-;;:::i;1187:323:24:-;;;;;;:::i;:::-;;:::i;1511:416:12:-;;;;;;:::i;:::-;;:::i;820:120:18:-;;;;;;:::i;:::-;;:::i;:::-;;4961:372:23;;;;;;:::i;:::-;;:::i;1333:415:26:-;;;;;;:::i;:::-;;:::i;2721:1175:10:-;;;;;;:::i;:::-;;:::i;4211:352:9:-;;;;;;:::i;:::-;;:::i;2106:389:2:-;;;;;;:::i;:::-;;:::i;1754:435:26:-;;;;;;:::i;:::-;;:::i;2213:887:20:-;;;;;;:::i;:::-;;:::i;1592:401:21:-;;;;;;:::i;:::-;;:::i;4995:387:2:-;;;;;;:::i;:::-;;:::i;9736:1337:10:-;;;;;;:::i;:::-;;:::i;1353:378:13:-;;;;;;:::i;:::-;;:::i;3134:321:24:-;;;;;;:::i;:::-;;:::i;5094:424:6:-;;;;;;:::i;:::-;;:::i;2796:2055:22:-;;;;;;:::i;:::-;;:::i;4006:385:5:-;4184:34;4254:130;4288:9;4311:12;4337:10;4361:13;4254:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:130::i;:::-;4234:150;4006:385;-1:-1:-1;;;;4006:385:5:o;4230:977:17:-;4457:47;4567:6;:13;-1:-1:-1;;;;;4553:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4553:28:17;;4520:61;;4596:9;4591:610;4616:6;:13;4611:1;:18;4591:610;;4670:4;-1:-1:-1;;;;;4670:37:17;;3715:5;4797:6;4804:1;4797:9;;;;;;;;;;;;;;4831:15;4847:1;4831:18;;;;;;;;;;;;;;4874:8;4670:234;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4670:234:17;;;;;;;;-1:-1:-1;;4670:234:17;;;;;;;;;;;;:::i;:::-;;;4650:541;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5175:1;5139:30;5170:1;5139:33;;;;;;;;;;;;;:37;;;;;5034:157;4650:541;;;5012:6;4976:30;5007:1;4976:33;;;;;;;;;;;;;:42;;;;;4921:112;4650:541;4631:3;;4591:610;;;;4230:977;;;;;:::o;2195:196:26:-;2338:20;;2376:8;;2195:196;;;;:::o;1227:367:11:-;1390:34;1460:127;1494:8;1516:10;1540;1564:13;1460:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:127::i;1741:457:10:-;2056:135;;-1:-1:-1;;;2056:135:10;;1929:17;;1948;;;;2056:4;;:32;;:135;;2102:4;;2120:10;;2144;;1929:17;;2056:135;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2056:135:10;;;;;;;;;;;;:::i;:::-;2017:174;;;;-1:-1:-1;2017:174:10;;-1:-1:-1;1741:457:10;-1:-1:-1;;;;1741:457:10:o;2883:1742:6:-;3100:13;3115:12;3129:34;3179:40;3196:10;3208;3179:16;:40::i;:::-;3250:24;;;-1:-1:-1;;;;;3304:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3304:25:6;-1:-1:-1;3356:13:6;;3347:55;;-1:-1:-1;;;3347:55:6;;3284:45;;-1:-1:-1;;;;;;3347:31:6;;;;:55;;3379:10;;3391;;3347:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3340:62;-1:-1:-1;3412:17:6;-1:-1:-1;;;;;3509:18:6;;;3505:420;;-1:-1:-1;3590:4:6;;-1:-1:-1;3555:10:6;3505:420;;;3641:13;;3632:55;;-1:-1:-1;;;3632:55:6;;-1:-1:-1;;;;;3632:31:6;;;;;;:55;;3664:10;;3676;;3632:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3625:62;-1:-1:-1;;;;;;3745:27:6;;3741:108;;3792:42;;;;3741:108;-1:-1:-1;3909:5:6;;-1:-1:-1;3874:10:6;3505:420;3985:4;-1:-1:-1;;;;;3979:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:103;;4024:42;;;;3974:103;4092:9;4087:532;4111:10;4107:1;:14;4087:532;;;4142:17;4162:268;4227:10;4239:4;4245:9;4256:4;:11;;;4216:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4317:10;4329:4;4335:9;4346:4;:11;;;4306:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4396:17;4414:1;4396:20;;;;;;;;;;;;;;4162:36;:268::i;:::-;4142:288;;4467:9;4444:17;4462:1;4444:20;;;;;;;;;;;;;:32;;;;;4544:17;4562:1;4544:20;;;;;;;;;;;;;;4568:1;4544:25;4540:69;;;4589:5;;;4540:69;-1:-1:-1;4123:3:6;;4087:532;;;;2883:1742;;;;;;;;;;;:::o;4983:384:1:-;5157:34;5227:133;5264:11;5289:10;5313;5337:13;5227:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:133::i;1410:1411:16:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:16;-1:-1:-1;1818:45:16;-1:-1:-1;;;;;;1931:25:16;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:16;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:16;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:16;-1:-1:-1;;;;;;2199:268:16;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:16;;2017:798;;;;1410:1411;;;;;;;;;:::o;2020:405:25:-;2182:27;2223:34;2318:100;2357:6;2377:4;2395:13;2318:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;:100::i;:::-;2282:136;;;;-1:-1:-1;2020:405:25;-1:-1:-1;;;2020:405:25:o;1737:386:1:-;1912:34;1982:134;2020:11;2045:10;2069;2093:13;1982:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:134::i;1295:390:4:-;1479:34;1549:129;1587:6;1607:10;1631;1655:13;1549:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:129::i;2158:1092:13:-;2365:34;2415:40;2432:10;2444;2415:16;:40::i;:::-;2538:24;;;-1:-1:-1;;;;;2592:25:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2592:25:13;;2572:45;;2633:9;2628:616;2652:10;2648:1;:14;2628:616;;;2712:6;-1:-1:-1;;;;;2703:30:13;;985:5;2799:10;2811;2823:17;2841:1;2823:20;;;;;;;;;;;;;;2703:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2703:141:13;;;;;;;;-1:-1:-1;;2703:141:13;;;;;;;;;;;;:::i;:::-;;;2683:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3214:5;;;2683:551;2939:6;2916:17;2934:1;2916:20;;;;;;;;;;;;;:29;;;;;3021:17;3039:1;3021:20;;;;;;;;;;;;;;3045:1;3021:25;3017:77;;;3070:5;;;3017:77;2861:247;2664:3;;2628:616;;;;2158:1092;;;;;;;:::o;3597:374::-;3765:34;3837:127;3873:6;3893:10;3917;3941:13;3837:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;:127::i;1411:370:20:-;1646:128;;-1:-1:-1;;;1646:128:20;;1576:34;;1646:4;;:25;;:128;;1685:4;;1703:10;;1727;;1751:13;;1646:128;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1646:128:20;;;;;;;;;;;;:::i;1922:354:9:-;2067:22;2091:34;2170:99;2208:6;2228:4;2246:13;2170:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:99::i;2523:1130:5:-;2811:24;;2740:34;;2811:24;-1:-1:-1;;;;;2865:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2865:25:5;;2845:45;;2905:9;2900:747;2924:10;2920:1;:14;2900:747;;;2956:15;2973:23;3016:9;:21;;;-1:-1:-1;;;;;3016:32:5;1288:6;3138:9;:35;;;3199:12;3237:10;3273:17;3291:1;3273:20;;;;;;;;;;;;;;3090:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3090:225:5;;;;;;;;;;;;;;-1:-1:-1;;;;;3090:225:5;-1:-1:-1;;;;;;3090:225:5;;;;;;;;;;3016:300;;;;3090:225;3016:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2955:361;;;;3330:17;3369:10;3365:94;;;3422:10;3411:33;;;;;;;;;;;;:::i;:::-;3399:45;;3365:94;3495:9;3472:17;3490:1;3472:20;;;;;;;;;;;;;:32;;;;;3572:17;3590:1;3572:20;;;;;;;;;;;;;;3596:1;3572:25;3568:69;;;3617:5;;;;;3568:69;-1:-1:-1;;;2936:3:5;;2900:747;;1543:374:23;1712:34;1782:128;1819:6;1839:10;1863;1887:13;1782:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:128::i;2503:120:26:-;2604:12;2503:120;:::o;4342:451:10:-;4529:17;4548;4567:34;4656:130;4697:4;4715:10;4739;4763:13;4656:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:27;:130::i;1702:391:5:-;1951:135;;-1:-1:-1;;;1951:135:5;;1881:34;;1951:4;;:25;;:135;;1990:9;;2013:12;;2039:10;;2063:13;;1951:135;;;:::i;4868:395:21:-;5052:34;5122:134;5158:11;5183:12;5209:10;5233:13;5122:134;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;:134::i;6360:2595:10:-;6691:16;;;;;6818;;;6832:1;6818:16;;;;;;;;;6557:17;;;;6832:1;6818:16;;;;6691;6818;;;;;-1:-1:-1;6818:16:10;6782:52;;6866:9;6844:16;6861:1;6844:19;;;;;;;;;;;;;;;;;:31;6885:28;6930:1;6916:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6916:16:10;;6885:47;;6961:4;:9;;;-1:-1:-1;;;;;6947:23:10;:10;-1:-1:-1;;;;;6947:23:10;;6943:2006;;;7034:289;;-1:-1:-1;;;7034:289:10;;-1:-1:-1;;;;;7034:29:10;;;;;976:5;;7034:289;;7152:10;;7188:34;;7248:16;;7290:11;;7034:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7034:289:10;;;;;;;;;;;;:::i;:::-;;;7014:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7429:102;7014:517;;;7407:6;-1:-1:-1;7400:13:10;;-1:-1:-1;;;7400:13:10;7014:517;6943:2006;;;7565:4;:9;;;-1:-1:-1;;;;;7551:23:10;:10;-1:-1:-1;;;;;7551:23:10;;7547:1402;;;7638:289;;-1:-1:-1;;;7638:289:10;;-1:-1:-1;;;;;7638:29:10;;;;;976:5;;7638:289;;7756:10;;7792:34;;7852:16;;7894:11;;7638:289;;;:::i;7547:1402::-;8265:466;;-1:-1:-1;;;8265:466:10;;-1:-1:-1;;;;;8265:31:10;;;;;976:5;;8265:466;;8385:10;;8421:34;;8481:16;;8523:11;;8560:10;;8421:34;;8481:16;;8523:11;;8265:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8265:466:10;;;;;;;;;;;;:::i;:::-;;;8245:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8837:102;8245:694;6360:2595;;;;;;;;;:::o;2837:388:4:-;3020:34;3090:128;3127:6;3147:10;3171;3195:13;3090:128;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:128::i;2397:100:26:-;2451:7;2481:9;2474:16;;2397:100;:::o;1996:471:7:-;2307:153;;-1:-1:-1;;;2307:153:7;;2190:13;;;;2219:34;;2307:4;;:26;;:153;;2347:8;;2369:6;;2389:10;;2413;;2190:13;;2307:153;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2307:153:7;;;;;;;;;;;;:::i;:::-;2269:191;;;;-1:-1:-1;2269:191:7;;-1:-1:-1;1996:471:7;-1:-1:-1;;;;;1996:471:7:o;4965:390:14:-;5147:34;5219:129;5256:7;5277:10;5301;5325:13;5219:129;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:129::i;5648:955:17:-;5875:47;5971:119;6023:6;6043:15;6072:8;5971:38;:119::i;:::-;5938:152;;6231:9;6226:371;6250:6;:13;6246:1;:17;6226:371;;;6288:30;6319:1;6288:33;;;;;;;;;;;;;;6325:1;6288:38;6284:303;;6382:190;6435:30;6466:1;6435:33;;;;;;;;;;;;;;6490:6;6497:1;6490:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;6533:6;6540:1;6533:9;;;;;;;;;;;;;;:21;;;-1:-1:-1;;;;;6382:190:17;:31;:190::i;:::-;6346:30;6377:1;6346:33;;;;;;;;;;;;;:226;;;;;6284:303;6265:3;;6226:371;;2219:474:8;2300:32;2380:9;-1:-1:-1;;;;;2362:35:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2348:49;;2412:9;2407:280;2427:21;;;2407:280;;2494:4;2469:11;2481:1;2469:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2516:9;;2526:1;2516:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2512:71;;-1:-1:-1;2512:71:8;;2560:8;;2512:71;2652:4;2663:9;;2673:1;2663:12;;;;;;;;;;;;;;;;;;:::i;:::-;2644:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2597:11;2609:1;2597:14;;;;;;;;;;;;;;:22;;2621:11;2633:1;2621:14;;;;;;;;;;;;;;;;;;2596:80;;;;;;;;;2407:280;2450:3;;2407:280;;;;2219:474;;;;:::o;4750:403:25:-;4911:27;4952:34;5047:99;5085:6;5105:4;5123:13;5047:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:99::i;3594:390:14:-;3777:34;3847:130;3885:7;3906:10;3930;3954:13;3847:130;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:130::i;946:381:26:-;1049:25;1115:6;:13;-1:-1:-1;;;;;1101:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1101:28:26;;1090:39;;1144:9;1139:182;1164:6;:13;1159:1;:18;1139:182;;1225:19;-1:-1:-1;;;;;1212:32:26;:6;1219:1;1212:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1212:32:26;;:98;;1284:26;:6;1291:1;1284:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1284:24:26;;:26::i;:::-;1212:98;;;1263:2;1212:98;1198:112;;:8;1207:1;1198:11;;;;;;;;;;;;;;;;;:112;1179:3;;1139:182;;;;946:381;;;:::o;4768:465:7:-;4961:13;4976:12;4990:34;5078:148;5113:8;5135:6;5155:10;5179;5203:13;5078:148;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:21;:148::i;1907:430:6:-;2203:127;;-1:-1:-1;;;2203:127:6;;2086:13;;;;2115:34;;2203:4;;:24;;:127;;2241:4;;2259:10;;2283;;2086:13;;2203:127;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2203:127:6;;;;;;;;;;;;:::i;3451:364:20:-;3615:34;3685:123;3719:4;3737:10;3761;3785:13;3685:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:20;:123::i;2429:2080:21:-;2652:34;2814:30;2965:11;:23;;;-1:-1:-1;;;;;2956:44:21;;3009:10;3001:19;;2956:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2856:23;;2847:65;;-1:-1:-1;;;2847:65:21;;-1:-1:-1;;;;;2847:44:21;;;;;;:65;;2892:19;;;;;2847:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2814:207;;3038:16;3067:11;:23;;;-1:-1:-1;;;;;3058:47:21;;3114:10;3106:19;;3058:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3031:95;;;;;3193:8;3190:2;:11;3185:2;:17;3161:22;:42;;;;;3235:24;;3161:42;;;;-1:-1:-1;3235:24:21;-1:-1:-1;;;;;3289:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3289:25:21;;3269:45;;3329:9;3324:1179;3348:10;3344:1;:14;3324:1179;;;3380:15;3397:23;3440:11;:23;;;-1:-1:-1;;;;;3440:34:21;1224:5;3566:11;:37;;;3629:12;3667:10;3703:17;3721:1;3703:20;;;;;;;;;;;;;;3518:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;3518:227:21;;;;;;;;;;;;;;-1:-1:-1;;;;;3518:227:21;-1:-1:-1;;;;;;3518:227:21;;;;;;;;;;3440:306;;;;3518:227;3440:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3379:367;;;;3760:17;3799:10;3795:94;;;3852:10;3841:33;;;;;;;;;;;;:::i;:::-;3829:45;;3795:94;3999:22;3986:9;:35;3982:378;;4142:1;4125:127;4149:10;4145:1;:14;4125:127;;;4211:22;4188:17;4206:1;4188:20;;;;;;;;;;;;;;;;;:45;4161:3;;4125:127;;;;4269:5;;;;;3982:378;4336:9;4313:17;4331:1;4313:20;;;;;;;;;;;;;:32;;;;;4428:17;4446:1;4428:20;;;;;;;;;;;;;;4452:1;4428:25;4424:69;;;4473:5;;;;;4424:69;-1:-1:-1;;;3360:3:21;;3324:1179;;;;2429:2080;;;;;;;;;:::o;3977:412:12:-;4164:34;4236:146;4282:15;4311:10;4335;4359:13;4236:146;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:32;:146::i;935:1855:22:-;1146:23;;:::i;:::-;1183:24;;:::i;:::-;1221:17;988:29:18;1020:13;988:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1263:31:22::1;1308:32;1357:1;-1:-1:-1::0;;;;;1343:16:22::1;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;1343:16:22::1;;1308:51;;1374:9;1369:655;1394:13;:20;1389:1;:25;1369:655;;1510:10;1489:15;1505:1;1489:18;;;;;;;;;;;;;:31;;;::::0;::::1;1550:15;1534:13;:31;;;;;;;;;;;;:::i;:::-;;1580:15;1597:23;1632:4;-1:-1:-1::0;;;;;1624:18:22::1;1643:13;1657:1;1643:16;;;;;;;;;;;;;;1624:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1579:81;;;;1678:10;1674:340;;;1708:14;1725:46;1768:2;1748:10;:17;:22;1725:10;:22;;:46;;;;:::i;:::-;1708:63;;1802:23;1793:6;:32;1789:211;;;1903:24:::0;;;1949:19:::1;::::0;::::1;:32:::0;;;1875:6;-1:-1:-1;1875:6:22;1789:211:::1;1674:340;;-1:-1:-1::0;;1416:3:22::1;;1369:655;;;-1:-1:-1::0;2037:28:22;2033:98:::1;;2081:39;;;;2033:98;2145:9;2140:644;2165:14;:21;2160:1;:26;2140:644;;2282:23;2261:15;2277:1;2261:18;;;;;;;;;;;;;:44;;;::::0;::::1;2335:15;2319:13;:31;;;;;;;;;;;;:::i;:::-;;2365:15;2382:23;2417:4;-1:-1:-1::0;;;;;2409:18:22::1;2428:14;2443:1;2428:17;;;;;;;;;;;;;;2409:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2364:82;;;;2464:10;2460:314;;;2494:14;2511:46;2554:2;2534:10;:17;:22;2511:10;:22;;:46;;;;:::i;:::-;2494:63;;2588:9;2579:6;:18;2575:185;;;2661:25:::0;;;2708:20:::1;::::0;::::1;:33:::0;;;2633:6;-1:-1:-1;2633:6:22;2575:185:::1;2460:314;;-1:-1:-1::0;;2188:3:22::1;;2140:644;;;;1043:1:18;;;1054:28:::0;;;;:13;;:28;;;;;:::i;:::-;;935:1855:22;;;;;;;;:::o;4266:340:3:-;4448:21;4578:20;;4471:21;;;;-1:-1:-1;;;;;4564:35:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4564:35:3;;4544:55;;4266:340;;;;;;;:::o;6743:1029:17:-;6969:27;;7016:23;;:58;;;;;;;;;:132;;;-1:-1:-1;7117:31:17;7090:23;;:58;;;;;;;;;7016:132;:170;;;-1:-1:-1;7164:17:17;;;;-1:-1:-1;;;;;7164:22:17;;7016:170;:208;;;-1:-1:-1;7202:17:17;;;;-1:-1:-1;;;;;7202:22:17;;7016:208;7012:255;;;-1:-1:-1;7255:1:17;7248:8;;7012:255;7291:36;;:::i;:::-;7341;7391:21;7425:8;-1:-1:-1;;;;;7425:35:17;;7461:5;7468:9;7425:53;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7277:201;;-1:-1:-1;7277:201:17;-1:-1:-1;7277:201:17;-1:-1:-1;7528:30:17;7508:9;:16;;;:50;;;;;;;;;;:85;;;;7577:16;7576:17;7508:85;:140;;;-1:-1:-1;7611:16:17;;-1:-1:-1;;;;;7611:37:17;;7508:140;7489:207;;;7684:1;7677:8;;;;;;;7489:207;-1:-1:-1;;;;;;7728:37:17;;-1:-1:-1;;6743:1029:17;;;;;;:::o;3284:1290:15:-;3512:7;3574:15;3635:8;-1:-1:-1;;;;;3616:34:15;;3651:19;3672;3616:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3574:128;-1:-1:-1;;;;;;3765:27:15;;3761:66;;3815:1;3808:8;;;;;3761:66;3836:19;-1:-1:-1;;;;;3858:33:15;;;:144;;3942:60;;-1:-1:-1;;;3942:60:15;;-1:-1:-1;;;;;3942:45:15;;;;;:60;;3996:4;;3942:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3858:144;;;3914:4;-1:-1:-1;;;;;3906:21:15;;3858:144;3836:166;;4158:16;4144:11;:30;4140:69;;;4197:1;4190:8;;;;;;4140:69;4234:133;;-1:-1:-1;;;4234:133:15;;-1:-1:-1;;;;;4234:14:15;;;;;985:5;;4234:133;;4308:19;;4329;;4350:16;;4234:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4234:133:15;;;;;;;;-1:-1:-1;;4234:133:15;;;;;;;;;;;;:::i;:::-;;;4218:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4556:1;4549:8;;;;;;;4218:350;4434:6;-1:-1:-1;4427:13:15;;-1:-1:-1;;4427:13:15;1526:454:3;1709:21;1732;1755:34;1848:125;1884:4;1902:10;1926;1950:13;1848:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;:125::i;4975:405:15:-;5147:15;5164:34;5242:131;5280:8;5302:10;5326;5350:13;5242:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:131::i;:::-;5214:159;;;;-1:-1:-1;4975:405:15;-1:-1:-1;;;;4975:405:15:o;2388:1205:12:-;2737:24;;2614:34;;2737:24;-1:-1:-1;;;;;2791:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2791:25:12;;2771:45;;2832:9;2827:760;2851:10;2847:1;:14;2827:760;;;2921:15;-1:-1:-1;;;;;2902:48:12;;1110:5;3056:10;3108;3145:17;3163:1;3145:20;;;;;;;;;;;;;;2902:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2902:285:12;;;;;;;;-1:-1:-1;;2902:285:12;;;;;;;;;;;;:::i;:::-;;;2882:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3282:6;3259:17;3277:1;3259:20;;;;;;;;;;;;;:29;;;;;3364:17;3382:1;3364:20;;;;;;;;;;;;;;3388:1;3364:25;3360:77;;;3413:5;;;3360:77;3204:247;2863:3;;2827:760;;3070:1175:7;3302:13;3317:12;3331:34;3381:40;3398:10;3410;3381:16;:40::i;:::-;3453:24;;;-1:-1:-1;;;;;3507:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3507:25:7;;3487:45;;3562:60;3581:8;3591:6;3599:10;3611;3562:18;:60::i;:::-;3543:79;-1:-1:-1;3543:79:7;-1:-1:-1;;;;;;3636:18:7;;3632:91;;3670:42;;;3632:91;3738:9;3733:506;3757:10;3753:1;:14;3733:506;;;3788:17;3808:242;3875:10;3887:4;3893:8;3864:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3951:10;3963:4;3969:8;3940:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4016:17;4034:1;4016:20;;;;;;;;;;;;;;3808:38;:242::i;:::-;3788:262;;4087:9;4064:17;4082:1;4064:20;;;;;;;;;;;;;:32;;;;;4164:17;4182:1;4164:20;;;;;;;;;;;;;;4188:1;4164:25;4160:69;;;4209:5;;;4160:69;-1:-1:-1;3769:3:7;;3733:506;;;;3070:1175;;;;;;;;;;;:::o;1403:411:15:-;1671:136;;-1:-1:-1;;;1671:136:15;;1576:15;;1593:34;;1671:4;;:29;;:136;;1714:8;;1736:10;;1760;;1576:15;;1671:136;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1671:136:15;;;;;;;;;;;;:::i;2292:986::-;2503:15;2520:34;2570:40;2587:10;2599;2570:16;:40::i;:::-;2641:24;;;-1:-1:-1;;;;;2695:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2695:25:15;;2675:45;;2736:9;2731:431;2755:10;2751:1;:14;2731:431;;;2786:17;2806:167;2857:8;2883:10;2911;2939:17;2957:1;2939:20;;;;;;;;;;;;;;2806:33;:167::i;:::-;2786:187;;3010:9;2987:17;3005:1;2987:20;;;;;;;;;;;;;:32;;;;;3087:17;3105:1;3087:20;;;;;;;;;;;;;;3111:1;3087:25;3083:69;;;3132:5;;;3083:69;-1:-1:-1;2767:3:15;;2731:431;;;-1:-1:-1;3203:58:15;;-1:-1:-1;;;3203:58:15;;-1:-1:-1;;;;;3203:34:15;;;;;:58;;3238:10;;3250;;3203:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3172:99;;2292:986;;;;;;;;:::o;1187:323:24:-;1333:34;1403:100;1442:6;1462:4;1480:13;1403:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;:100::i;1511:416:12:-;1769:151;;-1:-1:-1;;;1769:151:12;;1699:34;;1769:4;;:37;;:151;;1820:15;;1849:10;;1873;;1897:13;;1769:151;;;:::i;820:120:18:-;905:28;;;;:13;;:28;;;;;:::i;:::-;;820:120;:::o;4961:372:23:-;5129:34;5199:127;5235:6;5255:10;5279;5303:13;5199:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;:127::i;1333:415:26:-;1449:25;1515:6;:13;-1:-1:-1;;;;;1501:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1501:28:26;;1490:39;;1544:9;1539:203;1564:6;:13;1559:1;:18;1539:203;;1625:19;-1:-1:-1;;;;;1612:32:26;:6;1619:1;1612:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1612:32:26;;:119;;1697:34;1723:7;1697:6;1704:1;1697:9;;;;;;;;;;;;;;-1:-1:-1;;;;;1697:25:26;;;:34;;;;:::i;:::-;1612:119;;;1663:7;-1:-1:-1;;;;;1663:15:26;;1612:119;1598:8;1607:1;1598:11;;;;;;;;;;;;;;;;;:133;1579:3;;1539:203;;2721:1175:10;2947:17;2966;2985:34;3035:40;3052:10;3064;3035:16;:40::i;:::-;3097:47;3115:4;3121:10;3133;3097:17;:47::i;:::-;3085:59;-1:-1:-1;3158:16:10;3154:90;;3190:43;;3154:90;3265:61;;-1:-1:-1;;;3265:61:10;;:4;;:20;;:61;;3286:4;;3292:9;;3303:10;;3315;;3265:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3265:61:10;;;;;;;;;;;;:::i;:::-;3253:9;;;:73;;;3384:24;;3253:73;;-1:-1:-1;3384:24:10;-1:-1:-1;;;;;3438:25:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3438:25:10;;3418:45;;3478:9;3473:417;3497:10;3493:1;:14;3473:417;;;3528:13;3544:4;-1:-1:-1;;;;;3544:31:10;;3593:4;3615:10;3643;3671:17;3689:1;3671:20;;;;;;;;;;;;;;3544:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3528:177;;3742:5;3719:17;3737:1;3719:20;;;;;;;;;;;;;:28;;;;;3815:17;3833:1;3815:20;;;;;;;;;;;;;;3839:1;3815:25;3811:69;;;3860:5;;;3811:69;-1:-1:-1;3509:3:10;;3473:417;;;;2721:1175;;;;;;;;;:::o;4211:352:9:-;4355:22;4379:34;4458:98;4495:6;4515:4;4533:13;4458:98;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:23;:98::i;2106:389:2:-;2285:34;2355:133;2395:8;2417:10;2441;2465:13;2355:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:26;:133::i;1754:435:26:-;1889:27;1959:6;:13;-1:-1:-1;;;;;1945:28:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1945:28:26;;1932:41;;1988:9;1983:200;2008:6;:13;2003:1;:18;1983:200;;2071:19;-1:-1:-1;;;;;2058:32:26;:6;2065:1;2058:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2058:32:26;;:114;;2129:43;2155:7;2164;2129:6;2136:1;2129:9;;;;;;;;;;;;;;-1:-1:-1;;;;;2129:25:26;;;:43;;;;;:::i;:::-;2058:114;;;2109:1;2058:114;2042:10;2053:1;2042:13;;;;;;;;;;;;;;;;;:130;2023:3;;1983:200;;2213:887:20;2539:24;;2416:34;;2539:24;-1:-1:-1;;;;;2593:25:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2593:25:20;;2573:45;;2634:9;2629:465;2653:10;2649:1;:14;2629:465;;;2711:4;-1:-1:-1;;;;;2704:27:20;;1039:5;2797:10;2809;2821:17;2839:1;2821:20;;;;;;;;;;;;;;2704:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2704:138:20;;;;;;;;-1:-1:-1;;2704:138:20;;;;;;;;;;;;:::i;:::-;;;2684:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2937:6;2914:17;2932:1;2914:20;;;;;;;;;;;;;:29;;;;;2859:99;2665:3;;2629:465;;1592:401:21;1847:139;;-1:-1:-1;;;1847:139:21;;1777:34;;1847:4;;:27;;:139;;1888:11;;1913:12;;1939:10;;1963:13;;1847:139;;;:::i;4995:387:2:-;5173:34;5243:132;5282:8;5304:10;5328;5352:13;5243:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:25;:132::i;9736:1337:10:-;9951:24;10042:4;:9;;;:16;10062:1;10042:21;10038:60;;;-1:-1:-1;10086:1:10;10079:8;;10038:60;10143:4;:17;;;-1:-1:-1;;;;;10124:61:10;;976:5;10276:4;:9;;;-1:-1:-1;;;;;10262:23:10;:10;-1:-1:-1;;;;;10262:23:10;;:56;;10308:10;10262:56;;;1080:42;10262:56;10354:4;:9;;;-1:-1:-1;;;;;10340:23:10;:10;-1:-1:-1;;;;;10340:23:10;;:56;;10386:10;10340:56;;;1080:42;10340:56;10418:16;10456:1;10486:4;:9;;;10124:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10124:389:10;;;;;;;;-1:-1:-1;;10124:389:10;;;;;;;;;;;;:::i;:::-;;;10108:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11055:1;11048:8;;;;;10108:959;10571:26;10600:29;10618:10;10600:17;:29::i;:::-;10571:58;;;;10643:26;10672:29;10690:10;10672:17;:29::i;:::-;10643:58;;;;10894:8;10857:18;10851:2;:24;10814:18;10808:2;:24;10773:16;10750:4;:39;:82;:125;;;;;;:152;;;;;;10715:187;;10916:23;;;;;1353:378:13;1592:132;;-1:-1:-1;;;1592:132:13;;1522:34;;1592:4;;:27;;:132;;1633:6;;1653:10;;1677;;1701:13;;1592:132;;;:::i;3134:321:24:-;3279:34;3349:99;3387:6;3407:4;3425:13;3349:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:24;:99::i;5094:424:6:-;5272:13;5287:12;5301:34;5389:122;5422:4;5440:10;5464;5488:13;5389:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:19;:122::i;2796:2055:22:-;3006:23;;:::i;:::-;3043:24;;:::i;:::-;3081:18;988:29:18;1020:13;988:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3248:16:22::1;::::0;;3262:1:::1;3248:16:::0;;;;;::::1;::::0;;;-1:-1:-1;;3145:2:22;-1:-1:-1;988:45:18;;-1:-1:-1;3145:2:22;;3213:32:::1;::::0;-1:-1:-1;3248:16:22;-1:-1:-1;3262:1:22;-1:-1:-1;3248:16:22::1;::::0;;::::1;::::0;;::::1;::::0;::::1;;::::0;-1:-1:-1;3248:16:22::1;3213:51;;3279:9;3274:730;3299:14;:21;3294:1;:26;3274:730;;3416:9;3395:15;3411:1;3395:18;;;;;;;;;;;;;:30;;;::::0;::::1;3455:15;3439:13;:31;;;;;;;;;;;;:::i;:::-;;3485:15;3502:23;3537:4;-1:-1:-1::0;;;;;3529:18:22::1;3548:14;3563:1;3548:17;;;;;;;;;;;;;;3529:37;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3484:82;;;;3584:10;3580:414;;;3614:14;3631:46;3674:2;3654:10;:17;:22;3631:10;:22;;:46;;;;:::i;:::-;3614:63;;3729:1;3720:6;:10;:66;;;;;3763:23;3754:6;:32;3720:66;3695:285;;;3881:25:::0;;;3928:20:::1;::::0;::::1;:33:::0;;;3853:6;-1:-1:-1;3853:6:22;3695:285:::1;3580:414;;-1:-1:-1::0;;3322:3:22::1;;3274:730;;;;-1:-1:-1::0;;4017:23:22::1;:38;4013:109;;;4071:40;;;;4013:109;4136:9;4131:714;4156:13;:20;4151:1;:25;4131:714;;4272:23;4251:15;4267:1;4251:18;;;;;;;;;;;;;:44;;;::::0;::::1;4325:15;4309:13;:31;;;;;;;;;;;;:::i;:::-;;4355:15;4372:23;4407:4;-1:-1:-1::0;;;;;4399:18:22::1;4418:13;4432:1;4418:16;;;;;;;;;;;;;;4399:36;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4354:81;;;;4453:10;4449:386;;;4483:14;4500:46;4543:2;4523:10;:17;:22;4500:10;:22;;:46;;;;:::i;:::-;4483:63;;4598:1;4589:6;:10;:53;;;;;4632:10;4623:6;:19;4589:53;4564:257;;;4724:24:::0;;;4770:19:::1;::::0;::::1;:32:::0;;;4696:6;-1:-1:-1;4696:6:22;4564:257:::1;4449:386;;-1:-1:-1::0;;4178:3:22::1;;4131:714;;4817:1653:5::0;5090:34;;;;5036;;-1:-1:-1;;;;;;5090:47:5;5086:510;;5268:268;;;;;;;;;5228:357;;5268:268;5330:33;5341:10;5353:9;5330:33;;;;:::i;:::-;;;;;;;;;;;;;5268:268;;;;5412:12;5426:9;5401:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5268:268;;;;5480:37;5268:268;;;5554:17;5228:22;:357::i;:::-;5221:364;;;;5086:510;5626:24;;;-1:-1:-1;;;;;5680:25:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5680:25:5;;5660:45;;5720:9;5715:749;5739:10;5735:1;:14;5715:749;;;5771:15;5788:23;5831:9;:21;;;-1:-1:-1;;;;;5831:32:5;1288:6;5953:9;:34;;;6013:12;6051:10;6087:17;6105:1;6087:20;;;;;;;;;;;;;;5905:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5905:224:5;;;;;;;;;;;;;;-1:-1:-1;;;;;5905:224:5;-1:-1:-1;;;;;;5905:224:5;;;;;;;;;;5831:299;;;;5905:224;5831:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5770:360;;;;6144:18;6184:10;6180:95;;;6238:10;6227:33;;;;;;;;;;;;:::i;:::-;6214:46;;6180:95;6311:10;6288:17;6306:1;6288:20;;;;;;;;;;;;;:33;;;;;6389:17;6407:1;6389:20;;;;;;;;;;;;;;6413:1;6389:25;6385:69;;;6434:5;;;;;6385:69;-1:-1:-1;;;5751:3:5;;5715:749;;2018:760:11;2235:16;2267:40;2284:10;2296;2267:16;:40::i;:::-;2336:8;:18;;;-1:-1:-1;;;;;2322:32:11;:10;-1:-1:-1;;;;;2322:32:11;;;:78;;;-1:-1:-1;2380:19:11;;-1:-1:-1;;;;;2358:42:11;;;;;;;2322:78;2318:329;;;2498:24;;2536:34;2498:24;-1:-1:-1;;;;;2573:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2573:25:11;-1:-1:-1;2536:62:11;-1:-1:-1;2612:24:11;;-1:-1:-1;;2612:24:11;1509:191:19;1641:10;-1:-1:-1;;;;;1627:24:19;:10;-1:-1:-1;;;;;1627:24:19;;;1619:74;;;;-1:-1:-1;;;1619:74:19;;;;;;;:::i;:::-;;;;;;;;7820:1450:6;8026:7;8050:18;8070:12;8084:17;8103:14;8145;8121:98;;;;;;;;;;;;:::i;:::-;8049:170;;;;;;;;8340:9;-1:-1:-1;;;;;8326:23:6;:10;-1:-1:-1;;;;;8326:23:6;;8322:942;;;8454:104;;-1:-1:-1;;;8454:104:6;;-1:-1:-1;;;;;8454:30:6;;;;;1336:5;;8454:104;;8547:10;;8454:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8454:104:6;;;;;;;;-1:-1:-1;;8454:104:6;;;;;;;;;;;;:::i;:::-;;;8434:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8771:1;8764:8;;;;;;;;;8434:353;8637:6;-1:-1:-1;8630:13:6;;-1:-1:-1;;;;8630:13:6;8322:942;8906:119;;-1:-1:-1;;;8906:119:6;;-1:-1:-1;;;;;8906:39:6;;;;;1336:5;;8906:119;;9008:4;;9014:10;;8906:119;;;:::i;5792:2358:1:-;6127:24;;6007:34;;6084:11;;6127:24;-1:-1:-1;;;;;6181:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6181:25:1;-1:-1:-1;6221:24:1;;-1:-1:-1;;;6221:24:1;;6161:45;;-1:-1:-1;;;;;;6221:12:1;;;;;:24;;6234:10;;6221:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6220:25;:54;;;-1:-1:-1;6250:24:1;;-1:-1:-1;;;6250:24:1;;-1:-1:-1;;;;;6250:12:1;;;;;:24;;6263:10;;6250:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6249:25;6220:54;6216:109;;;6290:24;;;;6216:109;6335:30;;:::i;:::-;6405:27;;-1:-1:-1;;;6405:27:1;;-1:-1:-1;;;;;6405:15:1;;;;;:27;;6421:10;;6405:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6375:57;;6472:27;;-1:-1:-1;;;6472:27:1;;-1:-1:-1;;;;;6472:15:1;;;;;:27;;6488:10;;6472:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6442;;;:57;6538:38;;-1:-1:-1;;;6538:38:1;;-1:-1:-1;;;;;6538:26:1;;;;;:38;;6565:10;;6538:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6509:26;;;;:67;;;;6615:38;-1:-1:-1;;;6615:38:1;;-1:-1:-1;;;;;6615:26:1;;;;;:38;;6642:10;;6615:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6586:9;:26;;:67;;;;;6683:4;-1:-1:-1;;;;;6683:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6663;;;:37;6716:9;6711:1433;6735:10;6731:1;:14;6711:1433;;;6937:49;6943:9;:27;;;1174:1;1057:8;1167;;;;;;1179:5;1166:18;6937:5;:49::i;:::-;6914:17;6932:1;6914:20;;;;;;;;;;;;;;:72;6910:116;;;7006:5;;6910:116;7059:4;-1:-1:-1;;;;;7059:19:1;;887:5;7170:9;:27;;;7223:9;:26;;;7275:9;:27;;;7328:9;:26;;;7380:17;7398:1;7380:20;;;;;;;;;;;;;;7426:9;:17;;;7059:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7059:406:1;;;;;;;;-1:-1:-1;;7059:406:1;;;;;;;;;;;;:::i;:::-;;;7039:1095;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8114:5;;;7039:1095;7708:27;;7702:48;;1118:1;1057:8;1111;;7702:5;:48::i;:::-;7693:6;:57;7689:109;;;7774:5;;;7689:109;7839:6;7816:17;7834:1;7816:20;;;;;;;;;;;;;:29;;;;;7921:17;7939:1;7921:20;;;;;;;;;;;;;;7945:1;7921:25;7917:77;;;7970:5;;;7917:77;7482:526;6747:3;;6711:1433;;2839:1572:25;3042:27;3083:34;3142:35;3192:45;3211:6;-1:-1:-1;;;;;3211:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3229:4;3235:1;3192:18;:45::i;:::-;3142:95;;3282:17;:24;-1:-1:-1;;;;;3268:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3268:39:25;;3248:59;;3344:17;:24;-1:-1:-1;;;;;3332:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3317:52;;3385:9;3380:1025;3404:17;:24;3400:1;:28;3380:1025;;;3505:27;3546:20;3589:9;3584:584;3608:9;:16;3604:1;:20;3584:584;;;3649:24;3676:34;3691:4;3697:9;3707:1;3697:12;;;;;;;;;;;;;;3676:14;:34::i;:::-;3649:61;;3752:6;-1:-1:-1;;;;;3752:22:25;;1673:5;3843:11;3856:17;3874:1;3856:20;;;;;;;;;;;;;;3752:125;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3752:125:25;;;;;;;;-1:-1:-1;;3752:125:25;;;;;;;;;;;;:::i;:::-;;;3728:426;;;;;3988:9;3972:12;:25;3968:158;;4040:9;4025:24;;4092:11;4075:28;;3968:158;3902:242;3728:426;-1:-1:-1;3626:3:25;;3584:584;;;-1:-1:-1;4243:17:25;4239:61;;4280:5;;;;4239:61;4336:12;4313:17;4331:1;4313:20;;;;;;;;;;;;;:35;;;;;4380:14;4362:12;4375:1;4362:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;3430:3:25;;3380:1025;;;;2839:1572;;;;;;;:::o;2552:2079:1:-;2888:24;;2768:34;;2845:11;;2888:24;-1:-1:-1;;;;;2942:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2942:25:1;-1:-1:-1;2982:24:1;;-1:-1:-1;;;2982:24:1;;2922:45;;-1:-1:-1;;;;;;2982:12:1;;;;;:24;;2995:10;;2982:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2981:25;:54;;;-1:-1:-1;3011:24:1;;-1:-1:-1;;;3011:24:1;;-1:-1:-1;;;;;3011:12:1;;;;;:24;;3024:10;;3011:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3010:25;2981:54;2977:109;;;3051:24;;;;2977:109;3096:30;;:::i;:::-;3166:27;;-1:-1:-1;;;3166:27:1;;-1:-1:-1;;;;;3166:15:1;;;;;:27;;3182:10;;3166:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3136:57;;3233:27;;-1:-1:-1;;;3233:27:1;;-1:-1:-1;;;;;3233:15:1;;;;;:27;;3249:10;;3233:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3203;;;:57;3299:38;;-1:-1:-1;;;3299:38:1;;-1:-1:-1;;;;;3299:26:1;;;;;:38;;3326:10;;3299:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3270:26;;;;:67;;;;3376:38;-1:-1:-1;;;3376:38:1;;-1:-1:-1;;;;;3376:26:1;;;;;:38;;3403:10;;3376:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3347:9;:26;;:67;;;;;3444:4;-1:-1:-1;;;;;3444:15:1;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3424;;;:37;3477:9;3472:1153;3496:10;3492:1;:14;3472:1153;;;3704:27;;3698:48;;1118:1;1057:8;1111;;3698:48;3675:17;3693:1;3675:20;;;;;;;;;;;;;;:71;3671:115;;;3766:5;;3671:115;3819:4;-1:-1:-1;;;;;3819:19:1;;887:5;3930:9;:27;;;3983:9;:26;;;4035:9;:27;;;4088:9;:26;;;4140:17;4158:1;4140:20;;;;;;;;;;;;;;4186:9;:17;;;3819:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3819:406:1;;;;;;;;-1:-1:-1;;3819:406:1;;;;;;;;;;;;:::i;:::-;;;3799:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4320:6;4297:17;4315:1;4297:20;;;;;;;;;;;;;:29;;;;;4402:17;4420:1;4402:20;;;;;;;;;;;;;;4426:1;4402:25;4398:77;;;4451:5;;;4398:77;4242:247;3508:3;;3472:1153;;1691:1140:4;1988:24;;1917:34;;1988:24;-1:-1:-1;;;;;2042:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2042:25:4;;2022:45;;2158:20;2181:6;-1:-1:-1;;;;;2181:25:4;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2158:50;;2218:22;2251:6;-1:-1:-1;;;;;2251:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2243:26;;2218:51;;2315:6;-1:-1:-1;;;;;2284:38:4;2292:10;-1:-1:-1;;;;;2284:38:4;;2280:545;;;2363:9;2358:179;2382:10;2378:1;:14;2358:179;;;2510:12;2492:14;2486:2;:20;1284:4;2441:17;2459:1;2441:20;;;;;;;;;;;;;;:42;:65;2440:82;;;;;;2417:17;2435:1;2417:20;;;;;;;;;;;;;;;;;:105;2394:3;;2358:179;;;;2280:545;;;2589:6;-1:-1:-1;;;;;2558:38:4;2566:10;-1:-1:-1;;;;;2558:38:4;;2554:271;;;2639:9;2634:181;2658:10;2654:1;:14;2634:181;;;2785:14;2779:2;:20;1284:4;2757:42;2740:12;2717:17;2735:1;2717:20;;;;;;;;;;;;;;:35;2716:84;;;;;;2693:17;2711:1;2693:20;;;;;;;;;;;;;;;;;:107;2670:3;;2634:181;;4391:596:13;4693:246;;;4600:34;4693:246;;;;;;4657:323;;4693:246;4751:30;4762:10;4774:6;4751:30;;;;:::i;:::-;;;;;;;;;;;;;4693:246;;;;4826:10;4838:6;4815:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4693:246;;;;4885:39;4693:246;;;4953:17;4657:22;:323::i;2702:1158:9:-;2984:24;;2889:22;;;;2984:24;-1:-1:-1;;;;;3038:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3038:25:9;;3018:45;;3081:31;3099:6;3107:4;3081:17;:31::i;:::-;3073:39;;3126:5;:12;3142:1;3126:17;3122:81;;;3159:33;;;3122:81;3217:9;3212:642;3236:10;3232:1;:14;3212:642;;;3303:6;-1:-1:-1;;;;;3287:37:9;;1555:5;3392:17;3410:1;3392:20;;;;;;;;;;;;;;3414:5;3421:4;3287:139;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3287:139:9;;;;;;;;;;;;:::i;:::-;;;3267:577;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3824:5;;;3267:577;3531:7;3553:1;3539:4;:11;:15;3531:24;;;;;;;;;;;;;;3508:17;3526:1;3508:20;;;;;;;;;;;;;:47;;;;;3631:17;3649:1;3631:20;;;;;;;;;;;;;;3655:1;3631:25;3627:77;;;3680:5;;;3627:77;3443:275;3248:3;;3212:642;;2702:1158;;;;;;;:::o;2330:2346:23:-;2540:34;2590:40;2607:10;2619;2590:16;:40::i;:::-;2661:24;;;-1:-1:-1;;;;;2715:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2715:25:23;-1:-1:-1;2695:45:23;-1:-1:-1;2751:41:23;-1:-1:-1;;;;;2795:24:23;;;:106;;2862:39;2882:6;2890:10;2862:19;:39::i;:::-;2795:106;;;2857:1;2795:106;2751:150;-1:-1:-1;2911:41:23;-1:-1:-1;;;;;2955:24:23;;;:106;;3022:39;3042:6;3050:10;3022:19;:39::i;:::-;2955:106;;;3017:1;2955:106;2911:150;;3076:9;3071:1599;3095:10;3091:1;:14;3071:1599;;;3144:4;-1:-1:-1;;;;;3166:24:23;;3162:1357;;3247:215;3310:18;3351:51;;;3424:17;3442:1;3424:20;;;;;;;;;;;;;;3247:33;:215::i;:::-;3211:17;3229:1;3211:20;;;;;;;;;;;;;3210:252;;;;;;;;;3162:1357;;;-1:-1:-1;;;;;3487:24:23;;3483:1036;;3568:215;3631:18;3672:51;;;3745:17;3763:1;3745:20;;;;;;;3483:1036;3822:17;3883:215;3946:18;3987:51;;;4060:17;4078:1;4060:20;;;;;;;3883:215;3857:241;-1:-1:-1;3857:241:23;-1:-1:-1;4120:14:23;;4116:389;;4195:220;4262:18;-1:-1:-1;;;4384:9:23;4195:33;:220::i;:::-;4159:17;4177:1;4159:20;;;;;;;;;;;;;4158:257;;;;;;;;;4116:389;;;4485:1;4462:17;4480:1;4462:20;;;;;;;;;;;;;:24;;;;;4116:389;3483:1036;;4581:10;4580:11;:40;;;;4595:17;4613:1;4595:20;;;;;;;;;;;;;;4619:1;4595:25;4580:40;4576:84;;;4640:5;;;4576:84;-1:-1:-1;3107:3:23;;3071:1599;;5312:1042:10;5540:17;5559;5578:34;5628:40;5645:10;5657;5628:16;:40::i;:::-;5691:47;5709:4;5715:10;5727;5691:17;:47::i;:::-;5679:59;-1:-1:-1;5752:16:10;5748:90;;5784:43;;5748:90;5859:61;;-1:-1:-1;;;5859:61:10;;:4;;:20;;:61;;5880:4;;5886:9;;5897:10;;5909;;5859:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5859:61:10;;;;;;;;;;;;:::i;:::-;5847:4;:9;;:73;;;;5937:4;:9;;;5930:16;;5977:317;6013:240;;;;;;;;6082:10;6094:4;6071:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6013:240;;;;6144:10;6156:4;6133:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6013:240;;;;6201:37;6013:240;;;6267:17;5977:22;:317::i;:::-;5957:337;;5312:1042;;;;;;;;:::o;5695:673:21:-;6062:258;;;5920:34;6062:258;;;;;;6026:335;;6062:258;6120:35;6131:10;6143:11;6120:35;;;;:::i;:::-;;;;;;;;;;;;;6062:258;;;;6200:12;6214:11;6189:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6062:258;;;;6266:39;6062:258;;;6334:17;6026:22;:335::i;3231:1133:4:-;3526:24;;3455:34;;3526:24;-1:-1:-1;;;;;3580:25:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3580:25:4;;3560:45;;3696:20;3719:6;-1:-1:-1;;;;;3719:25:4;;:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3696:50;;3756:22;3789:6;-1:-1:-1;;;;;3789:15:4;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3781:26;;3756:51;;3853:6;-1:-1:-1;;;;;3822:38:4;3830:10;-1:-1:-1;;;;;3822:38:4;;3818:540;;;3901:9;3896:179;3920:10;3916:1;:14;3896:179;;;4045:14;4039:2;:20;1284:4;4017:42;4001:12;3978:17;3996:1;3978:20;;;;;;;;;;;;;;:35;:82;;;;;;3955:17;3973:1;3955:20;;;;;;;;;;;;;;;;;:105;3932:3;;3896:179;;3818:540;4126:6;-1:-1:-1;;;;;4095:38:4;4103:10;-1:-1:-1;;;;;4095:38:4;;4091:267;;;4176:9;4171:177;4195:10;4191:1;:14;4171:177;;;4321:12;4305:14;4299:2;:20;1284:4;4254:17;4272:1;4254:20;;;;;;;;;;;;;;:42;:65;4253:80;;;;;;4230:17;4248:1;4230:20;;;;;;;;;;;;;;;;;:103;4207:3;;4171:177;;5361:923:14;5584:34;5634:40;5651:10;5663;5634:16;:40::i;:::-;5684:8;5700:7;:18;;;5684:35;;5729:8;5745:3;-1:-1:-1;;;;;5745:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5787:24;;5729:26;;-1:-1:-1;5787:24:14;-1:-1:-1;;;;;5841:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5841:25:14;;5821:45;;5894:3;-1:-1:-1;;;;;5894:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5880:23:14;:10;-1:-1:-1;;;;;5880:23:14;;;:50;;;;;5921:3;-1:-1:-1;;;;;5921:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5907:23:14;:10;-1:-1:-1;;;;;5907:23:14;;;5880:50;5876:105;;;5946:24;;;;;5876:105;5996:9;5991:286;6015:10;6011:1;:14;5991:286;;;6046:18;6067:78;6081:7;6090:10;6102;6114:17;6132:1;6114:20;;;;;;;;;;;;;;6136:3;6141;6067:13;:78::i;:::-;6046:99;-1:-1:-1;6164:15:14;6160:59;;6199:5;;;6160:59;6256:10;6233:17;6251:1;6233:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;6027:3:14;;5991:286;;3834:545:44;3997:21;4237:104;4329:11;4237:70;4284:22;4329:11;4304:1;4284:19;:22::i;:::-;4237:25;:9;4255:6;4237:17;:25::i;:::-;:46;;:70::i;:::-;:91;;:104::i;5565:1927:25:-;5767:27;5808:34;5867:35;5917:45;5936:6;-1:-1:-1;;;;;5936:14:25;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5917:45;5867:95;;5972:36;6011:23;6029:4;6011:17;:23::i;:::-;5972:62;;6079:17;:24;-1:-1:-1;;;;;6065:39:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6065:39:25;;6045:59;;6141:17;:24;-1:-1:-1;;;;;6129:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6114:52;;6182:9;6177:1309;6201:17;:24;6197:1;:28;6177:1309;;;6302:27;6343:21;6387:9;6382:865;6406:9;:16;6402:1;:20;6382:865;;;6512:24;6539:118;6575:12;6609:30;6626:9;6636:1;6626:12;;;;;;;;;;;;;;6609:16;:30::i;:::-;6539:14;:118::i;:::-;6512:145;;6699:6;-1:-1:-1;;;;;6699:23:25;;1673:5;6791:11;6804:17;6822:1;6804:20;;;;;;;;;;;;;;6699:126;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6699:126:25;;;;;;;;-1:-1:-1;;6699:126:25;;;;;;;;;;;;:::i;:::-;;;6675:558;;;;;6921:18;;;:49;;;6960:10;6943:13;:27;;6921:49;6917:289;;;7014:10;6998:26;;7149:34;7164:4;7170:9;7180:1;7170:12;;;;;;;7149:34;7132:51;;6917:289;6850:374;6675:558;-1:-1:-1;6424:3:25;;6382:865;;;-1:-1:-1;7322:18:25;7318:62;;7360:5;;;;7318:62;7416:13;7393:17;7411:1;7393:20;;;;;;;;;;;;;:36;;;;;7461:14;7443:12;7456:1;7443:15;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;6227:3:25;;6177:1309;;;;5565:1927;;;;;;;;:::o;4037:922:14:-;4261:34;4311:40;4328:10;4340;4311:16;:40::i;:::-;4361:8;4377:7;:18;;;4361:35;;4406:8;4422:3;-1:-1:-1;;;;;4422:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4465:24;;4406:26;;-1:-1:-1;4465:24:14;-1:-1:-1;;;;;4519:25:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4519:25:14;;4499:45;;4573:3;-1:-1:-1;;;;;4573:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4559:23:14;:10;-1:-1:-1;;;;;4559:23:14;;;:50;;;;;4600:3;-1:-1:-1;;;;;4600:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4586:23:14;:10;-1:-1:-1;;;;;4586:23:14;;;4559:50;4555:105;;;4625:24;;;;;4555:105;4675:9;4670:283;4694:10;4690:1;:14;4670:283;;;4725:17;4745:79;4760:7;4769:10;4781;4793:17;4811:1;4793:20;;;;;;;;;;;;;;4815:3;4820;4745:14;:79::i;:::-;4725:99;-1:-1:-1;4843:14:14;4839:58;;4877:5;;;4839:58;4933:9;4910:17;4928:1;4910:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4706:3:14;;4670:283;;3834:391:42;3927:19;3978:2;3962:18;;3991:15;4008:23;4043:5;-1:-1:-1;;;;;4035:25:42;4061:18;;;;;;;;;;;;;-1:-1:-1;;;4061:18:42;;;4035:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3990:90;;;;4094:10;:37;;;;;4129:2;4108:10;:17;:23;;4094:37;4090:129;;;4169:38;4193:10;4205:1;4169:23;:38::i;:::-;4147:61;;4090:129;3834:391;;;;;:::o;5830:1029:7:-;6064:13;6079:12;6093:34;6143:40;6160:10;6172;6143:16;:40::i;:::-;6212:60;6231:8;6241:6;6249:10;6261;6212:18;:60::i;:::-;6193:79;-1:-1:-1;6193:79:7;-1:-1:-1;;;;;;6286:18:7;;6282:91;;6320:42;;6282:91;6403:24;;;-1:-1:-1;;;;;6457:25:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6457:25:7;-1:-1:-1;6549:262:7;;;;;;;;;6437:45;;-1:-1:-1;6513:339:7;;6549:262;6607:39;6618:10;6630:4;6636:9;;6607:39;;;;:::i;:::-;;;;;;;;;;;;;6549:262;;;;6691:10;6703:4;6709:8;6680:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6549:262;;;;6758:38;6549:262;;;6825:17;6513:22;:339::i;:::-;6493:359;;5830:1029;;;;;;;;;;:::o;4239:586:20:-;4537:240;;;4444:34;4537:240;;;;;;4501:317;;4537:240;4595:28;4606:10;4618:4;4595:28;;;;:::i;:::-;;;;;;;;;;;;;4537:240;;;;4668:10;4680:4;4657:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4537:240;;;;4725:37;4537:240;;;4791:17;4501:22;:317::i;4846:656:12:-;5180:274;;;5074:34;5180:274;;;;;;5144:351;;5180:274;5238:39;5249:10;5261:15;5238:39;;;;:::i;:::-;;;;;;;;;;;;;5180:274;;;;5322:10;5334:15;5311:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5180:274;;;;5390:49;5180:274;;;5468:17;5144:22;:351::i;16122:220:43:-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;:::-;16282:30;-1:-1:-1;16122:220:43;;;;;:::o;2471:1293:3:-;2695:21;2718;2741:34;2795:4;:10;;;:17;2816:1;2795:22;2791:100;;;2833:47;;2791:100;2924:62;2938:4;2944:10;2956;2968:17;2924:13;:62::i;:::-;3030:24;;2900:86;;-1:-1:-1;2900:86:3;-1:-1:-1;;;;;;3016:39:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3016:39:3;;2996:59;;3071:9;3066:635;3090:17;:24;3086:1;:28;3066:635;;;3170:13;-1:-1:-1;;;;;3155:61:3;;922:5;3289:4;3295:17;3313:1;3295:20;;;;;;;;;;;;;;3155:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3155:161:3;;;;;;;;-1:-1:-1;;3155:161:3;;;;;;;;;;;;:::i;:::-;;;3135:556;;3671:5;;3135:556;3411:6;3388:17;3406:1;3388:20;;;;;;;;;;;;;:29;;;;;3493:17;3511:1;3493:20;;;;;;;;;;;;;;3517:1;3493:25;3489:77;;;3542:5;;;3489:77;3333:247;3116:3;;3066:635;;;;2471:1293;;;;;;;;:::o;5855:907:15:-;6068:15;6085:34;6135:40;6152:10;6164;6135:16;:40::i;:::-;6206:24;;;-1:-1:-1;;;;;6260:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6260:25:15;;6240:45;;6316:329;6352:252;;;;;;;;6421:8;6431:10;6410:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6352:252;;;;6487:8;6497:10;6476:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;6352:252;;;;6548:41;6352:252;;;6618:17;6316:22;:329::i;:::-;6687:58;;-1:-1:-1;;;6687:58:15;;6296:349;;-1:-1:-1;;;;;;6687:34:15;;;;;:58;;6722:10;;6734;;6687:58;;;:::i;8083:836:7:-;8270:15;8287:13;8409:25;8453:8;-1:-1:-1;;;;;8437:37:7;;8475:10;8487;8437:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8437:61:7;;;;;;;;;;;;:::i;:::-;8409:89;;8519:4;8508:15;;8537:8;:15;8556:1;8537:20;8533:251;;;8682:61;;-1:-1:-1;;;8682:61:7;;-1:-1:-1;;;;;8682:37:7;;;;;:61;;8720:10;;8732;;8682:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8682:61:7;;;;;;;;;;;;:::i;:::-;8671:72;;8768:5;8757:16;;8533:251;8808:8;:15;8798:6;:25;8794:82;;8855:1;8859:5;8839:26;;;;;;;8794:82;8896:8;8905:6;8896:16;;;;;;;;;;;;;;8886:26;;8083:836;;;;;;;;;:::o;6865:1212::-;7073:7;7097:18;7117:12;7131:13;7172:14;7148:86;;;;;;;;;;;;:::i;:::-;7096:138;;;;;;7408:8;7404:667;;;7452:122;;-1:-1:-1;;;7452:122:7;;-1:-1:-1;;;;;7452:31:7;;;;;1453:5;;7452:122;;7559:1;;7563:10;;7452:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7452:122:7;;;;;;;;-1:-1:-1;;7452:122:7;;;;;;;;;;;;:::i;:::-;;;7432:299;;7715:1;7708:8;;;;;;;7432:299;-1:-1:-1;7662:6:7;-1:-1:-1;7655:13:7;;-1:-1:-1;;;7655:13:7;7404:667;7781:123;;-1:-1:-1;;;7781:123:7;;-1:-1:-1;;;;;7781:32:7;;;;;1453:5;;7781:123;;7889:1;;7893:10;;7781:123;;;:::i;1864:992:24:-;2123:24;;2052:34;;2123:24;-1:-1:-1;;;;;2177:25:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2177:25:24;;2157:45;;2217:9;2212:638;2236:10;2232:1;:14;2212:638;;;2306:6;-1:-1:-1;;;;;2287:40:24;;893:5;2395:17;2413:1;2395:20;;;;;;;;;;;;;;2417:4;2287:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2287:135:24;;;;;;;;;;;;:::i;:::-;;;2267:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2820:5;;;2267:573;2527:7;2549:1;2535:4;:11;:15;2527:24;;;;;;;;;;;;;;2504:17;2522:1;2504:20;;;;;;;;;;;;;:47;;;;;2627:17;2645:1;2627:20;;;;;;;;;;;;;;2651:1;2627:25;2623:77;;;2676:5;;;2623:77;2439:275;2248:3;;2212:638;;;;1864:992;;;;;;:::o;5692:2341:23:-;5901:34;5951:40;5968:10;5980;5951:16;:40::i;:::-;6022:24;;;-1:-1:-1;;;;;6076:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6076:25:23;-1:-1:-1;6056:45:23;-1:-1:-1;6112:41:23;-1:-1:-1;;;;;6156:24:23;;;:106;;6223:39;6243:6;6251:10;6223:19;:39::i;:::-;6156:106;;;6218:1;6156:106;6112:150;-1:-1:-1;6272:41:23;-1:-1:-1;;;;;6316:24:23;;;:106;;6383:39;6403:6;6411:10;6383:19;:39::i;:::-;6316:106;;;6378:1;6316:106;6272:150;;6437:9;6432:1595;6456:10;6452:1;:14;6432:1595;;;6505:4;-1:-1:-1;;;;;6527:24:23;;6523:1353;;6608:216;6671:18;6712:52;;;6786:17;6804:1;6786:20;;;;;;;6608:216;6572:17;6590:1;6572:20;;;;;;;;;;;;;6571:253;;;;;;;;;6523:1353;;;-1:-1:-1;;;;;6849:24:23;;6845:1031;;6930:216;6993:18;7034:52;;;7108:17;7126:1;7108:20;;;;;;;6845:1031;7185:15;7242:216;7305:18;7346:52;;;7420:17;7438:1;7420:20;;;;;;;7242:216;7218:240;-1:-1:-1;7218:240:23;-1:-1:-1;7480:12:23;;7476:386;;7553:219;7620:18;-1:-1:-1;;;7743:7:23;7553:33;:219::i;:::-;7517:17;7535:1;7517:20;;;;;;;;;;;;;7516:256;;;;;;;;;7476:386;;;7842:1;7819:17;7837:1;7819:20;;;;;;;;;;;;;:24;;;;;7476:386;6845:1031;;7938:10;7937:11;:40;;;;7952:17;7970:1;7952:20;;;;;;;;;;;;;;7976:1;7952:25;7937:40;7933:84;;;7997:5;;;7933:84;-1:-1:-1;6468:3:23;;6432:1595;;5349:467:42;5458:15;5490;5507:23;5542:5;-1:-1:-1;;;;;5534:25:42;5613:24;;;5655:5;5573:101;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5573:101:42;;;;;;;;;;;;;;-1:-1:-1;;;;;5573:101:42;-1:-1:-1;;;;;;5573:101:42;;;;;;;;;;5534:150;;;;5573:101;5534:150;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5489:195;;;;5698:10;:37;;;;;5733:2;5712:10;:17;:23;;5698:37;5694:116;;;5761:38;5785:10;5797:1;5761:23;:38::i;:::-;5751:48;;5694:116;5349:467;;;;;;:::o;11079:916:10:-;11253:17;11341:27;11389:4;:16;;;11341:65;;11417:27;11451:9;-1:-1:-1;;;;;11451:28:10;;11507:4;:9;;;-1:-1:-1;;;;;11493:23:10;:10;-1:-1:-1;;;;;11493:23:10;;:56;;11539:10;11493:56;;;1080:42;11493:56;11577:4;:9;;;-1:-1:-1;;;;;11563:23:10;:10;-1:-1:-1;;;;;11563:23:10;;:56;;11609:10;11563:56;;;1080:42;11563:56;11651:12;;;11661:1;11651:12;;;;;;;;;-1:-1:-1;;;;;;11451:236:10;;;;;;;;;;;;11633:4;;11451:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11451:236:10;;;;;;;;;;;;:::i;:::-;11416:271;;;;11724:10;:17;11702:4;:18;;;:39;11698:80;;-1:-1:-1;11764:3:10;;-1:-1:-1;11757:10:10;;-1:-1:-1;11757:10:10;11698:80;11800:10;11811:4;:18;;;11800:30;;;;;;;;;;;;;;11788:42;;11913:3;11900:9;:16;;11892:25;;11921:4;11892:33;11888:74;;;-1:-1:-1;11948:3:10;;-1:-1:-1;11941:10:10;;-1:-1:-1;11941:10:10;4987:1141:9;5267:24;;5172:22;;;;5267:24;-1:-1:-1;;;;;5321:25:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5321:25:9;;5301:45;;5364:31;5382:6;5390:4;5364:17;:31::i;:::-;5356:39;;5409:5;:12;5425:1;5409:17;5405:81;;;5442:33;;;5405:81;5500:9;5495:627;5519:10;5515:1;:14;5495:627;;;5586:6;-1:-1:-1;;;;;5570:36:9;;1555:5;5674:17;5692:1;5674:20;;;;;;;;;;;;;;5696:5;5703:4;5570:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5570:138:9;;;;;;;;;;;;:::i;:::-;;;5550:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5813:7;5821:1;5813:10;;;;;;;;;;;;;;5790:17;5808:1;5790:20;;;;;;;;;;;;;:33;;;;;5899:17;5917:1;5899:20;;;;;;;;;;;;;;5923:1;5899:25;5895:77;;;5948:5;;;5895:77;5725:261;5531:3;;5495:627;;2915:1737:2;3135:34;3185:40;3202:10;3214;3185:16;:40::i;:::-;3277:14;;;;3331:15;;;3344:1;3331:15;;;3302:26;3331:15;;;;;;;;;;;;;;;;;;-1:-1:-1;3331:15:2;3302:44;;3379:10;3356;3367:1;3356:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;3356:34:2;;;-1:-1:-1;;;;;3356:34:2;;;;;3423:10;3400;3411:1;3400:13;;;;;;;;-1:-1:-1;;;;;3400:34:2;;;:13;;;;;;;;;;;:34;3466:24;;;-1:-1:-1;;;;;3520:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3520:25:2;;3500:45;;3555:48;;:::i;:::-;3618:18;:16;:18::i;:::-;3555:81;;3652:9;3647:999;3671:10;3667:1;:14;3647:999;;;3702:49;3770:48;3787:8;3797:17;3815:1;3797:20;;;;;;;;;;;;;;3770:16;:48::i;:::-;3960:90;;-1:-1:-1;;;3960:90:2;;3702:116;;-1:-1:-1;;;;;;3960:20:2;;;;;:90;;3981:34;;3702:116;;4028:10;;4040:9;;3960:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3960:90:2;;;;;;;;;;;;:::i;:::-;;;3833:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4616:5;;;;3833:803;4295:24;4322:7;4330:1;4322:10;;;;;;;;;;;;;;-1:-1:-1;;4322:15:2;4295:42;;4380:1;4359:17;:22;4355:74;;4405:5;;;;;4355:74;4477:17;4446;4464:1;4446:20;;;;;;;;;;;;;:49;;;;;4167:343;;-1:-1:-1;3683:3:2;;3647:999;;4571:515:42;4697:18;4732:15;4749:23;4784:5;-1:-1:-1;;;;;4776:25:42;4855:24;;;4897:5;4920:7;4815:126;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4815:126:42;;;;;;;;;;;;;;-1:-1:-1;;;;;4815:126:42;-1:-1:-1;;;;;;4815:126:42;;;;;;;;;;4776:175;;;;4815:126;4776:175;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4731:220;;;;4965:10;:37;;;;;5000:2;4979:10;:17;:23;;4965:37;4961:119;;;5031:38;5055:10;5067:1;5031:23;:38::i;:::-;5018:51;4571:515;-1:-1:-1;;;;;;4571:515:42:o;5798:1539:2:-;6018:34;6068:40;6085:10;6097;6068:16;:40::i;:::-;6160:14;;;;6214:15;;;6227:1;6214:15;;;6185:26;6214:15;;;;;;;;;;;;;;;;;;-1:-1:-1;6214:15:2;6185:44;;6262:10;6239;6250:1;6239:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;6239:34:2;;;-1:-1:-1;;;;;6239:34:2;;;;;6306:10;6283;6294:1;6283:13;;;;;;;;-1:-1:-1;;;;;6283:34:2;;;:13;;;;;;;;;;;:34;6349:24;;;-1:-1:-1;;;;;6403:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6403:25:2;;6383:45;;6438:48;;:::i;:::-;6501:18;:16;:18::i;:::-;6438:81;;6535:9;6530:801;6554:10;6550:1;:14;6530:801;;;6585:49;6653:48;6670:8;6680:17;6698:1;6680:20;;;;;;;6653:48;6838:91;;-1:-1:-1;;;6838:91:2;;6585:116;;-1:-1:-1;;;;;;6838:20:2;;;;;:91;;6859:35;;6585:116;;6907:10;;6919:9;;6838:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6838:91:2;;;;;;;;;;;;:::i;:::-;;;6716:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6994:21;7018:7;7026:1;7018:10;;;;;;;;;;;;;;6994:34;;7068:1;7050:14;:19;7046:71;;7093:5;;;;;7046:71;7165:14;7134:17;7152:1;7134:20;;;;;;;;;;;;;:46;;;;;6942:253;;-1:-1:-1;6566:3:2;;6530:801;;937:217:19;1049:14;1086:61;1133:12;1086:31;:61::i;3806:975:24:-;4063:24;;3992:34;;4063:24;-1:-1:-1;;;;;4117:25:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4117:25:24;;4097:45;;4157:9;4152:623;4176:10;4172:1;:14;4152:623;;;4246:6;-1:-1:-1;;;;;4227:39:24;;893:5;4334:17;4352:1;4334:20;;;;;;;;;;;;;;4356:4;4227:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4227:134:24;;;;;;;;;;;;:::i;:::-;;;4207:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4466:7;4474:1;4466:10;;;;;;;;;;;;;;4443:17;4461:1;4443:20;;;;;;;;;;;;;:33;;;;;4552:17;4570:1;4552:20;;;;;;;;;;;;;;4576:1;4552:25;4548:77;;;4601:5;;;4548:77;4378:261;4188:3;;4152:623;;6061:1753:6;6280:13;6295:12;6309:34;6359:40;6376:10;6388;6359:16;:40::i;:::-;6430:24;;;-1:-1:-1;;;;;6484:25:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6484:25:6;-1:-1:-1;6627:13:6;;6618:55;;-1:-1:-1;;;6618:55:6;;6464:45;;-1:-1:-1;;;;;;6618:31:6;;;;:55;;6650:10;;6662;;6618:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6611:62;-1:-1:-1;6683:17:6;-1:-1:-1;;;;;6780:18:6;;;6776:485;;-1:-1:-1;6861:4:6;;-1:-1:-1;6826:10:6;6776:485;;;6977:13;;6968:55;;-1:-1:-1;;;6968:55:6;;-1:-1:-1;;;;;6968:31:6;;;;;;:55;;7000:10;;7012;;6968:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6961:62;-1:-1:-1;;;;;;7081:27:6;;7077:108;;7128:42;;;;7077:108;-1:-1:-1;7245:5:6;;-1:-1:-1;7210:10:6;6776:485;7321:4;-1:-1:-1;;;;;7315:27:6;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7310:103;;7360:42;;;;7310:103;7443:364;7479:287;;;;;;;;7548:10;7560:4;7566:9;7577:4;:11;;;7537:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7479:287;;;;7634:10;7646:4;7652:9;7663:4;:11;;;7623:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7479:287;;;;7715:36;7479:287;;;7780:17;7443:22;:364::i;:::-;7423:384;;6061:1753;;;;;;;;;;:::o;6476:907:5:-;6677:17;6711:20;6733:26;;:::i;:::-;6786:14;6775:47;;;;;;;;;;;;:::i;:::-;6710:112;;;;6833:20;6880:14;6869:36;;;;;;;;;;;;:::i;:::-;6832:73;-1:-1:-1;6916:12:5;6930:23;6977:4;-1:-1:-1;;;7086:9:5;7113:13;6832:73;7175:31;7195:10;7175:19;:31::i;:::-;6994:226;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;6994:226:5;;;;;;;;;;;;;;-1:-1:-1;;;;;6994:226:5;-1:-1:-1;;;;;;6994:226:5;;;;;;;;;;6969:252;;;;6994:226;6969:252;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6915:306;;;;7236:7;7231:47;;7266:1;7259:8;;;;;;;;;7231:47;7349:10;7338:35;;;;;;;;;;;;:::i;:::-;7374:1;7338:38;;;;;;;;;;;;;;7331:45;;;;;;;6476:907;;;;;:::o;1691:3088:0:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:0;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:0;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:0;2479:69;;2513:24;;;;2479:69;2563:9;2558:2215;2582:17;:24;2578:1;:28;2558:2215;;;2627:11;2661:12;2656:1596;1683:1;2679:4;:37;2656:1596;;;2852:148;2899:17;2917:1;2899:20;;;;;;;;;;;;;;2941:9;2972:10;2852:25;:148::i;:::-;2839:161;-1:-1:-1;3022:15:0;3018:67;;3061:5;;3018:67;3115:202;3163:59;1378:3;3289:10;3115:25;:202::i;:::-;3102:215;-1:-1:-1;3339:15:0;3335:67;;3378:5;;3335:67;3419:18;3440:157;3487:4;:19;;;3528:4;:19;;;3569:10;3440:4;:25;;;:157;;:::i;:::-;3419:178;-1:-1:-1;3619:15:0;3615:67;;3658:5;;;3615:67;3815:10;3803:22;;3917:17;3935:1;3917:20;;;;;;;;;;;;;;3904:9;:33;3900:338;;4077:17;4095:1;4077:20;;;;;;;;;;;;;;1378:3;4004:17;4022:1;4004:20;;;;;;;;;;;;;;3992:9;:32;3991:59;:106;;;;;;3961:136;;1536:8;4123:3;:41;4119:101;;4192:5;;;4119:101;-1:-1:-1;2718:6:0;;2656:1596;;;-1:-1:-1;4269:8:0;;;:52;;;1536:8;4281:3;:40;4269:52;4265:96;;;4341:5;;;4265:96;4630:132;4673:17;4691:1;4673:20;;;;;;;;;;;;;;4711:9;4738:10;4630:25;:132::i;:::-;4607:17;4625:1;4607:20;;;;;;;;;;;;;;;;;:155;-1:-1:-1;2608:3:0;;2558:2215;;;;1691:3088;;;;;;:::o;8519:337:1:-;8602:9;8637:5;;;8656:6;;;;;:21;;;8676:1;8671;8666:2;:6;;;;;;:11;;8656:21;8652:60;;;8700:1;8693:8;;;;;8652:60;8737:8;8731:15;;8760:7;;;8756:46;;;8790:1;8783:8;;;;;;8756:46;1057:8;8821:9;;;;-1:-1:-1;;;;8519:337:1:o;7498:2754:25:-;7684:35;7789:1;7775:10;7756:9;:16;:29;:34;;7735:117;;;;-1:-1:-1;;;7735:117:25;;;;;;;:::i;:::-;7862:30;;:::i;:::-;-1:-1:-1;7862:233:25;;;;;;;;7989:8;7862:233;;8019:8;7862:233;;;;8049:7;7862:233;;;;8078:6;7862:233;;;;;;;;8154:42;;8175:20;8154:42;;;;;;;;;7862:233;;;;8154:42;;;;;;;;;;;;;-1:-1:-1;8154:42:25;8105:91;;8206:21;8255:25;8283:9;8293:10;8283:21;;;;;;;;;;;;;;8255:49;;8318:26;8347:9;8357:10;8370:1;8357:14;8347:25;;;;;;;;;;;;;;8318:54;;8391:9;8386:296;8410:20;8406:1;:24;8386:296;;;8455:19;8493:7;-1:-1:-1;;;;;8493:15:25;;8509:10;8521:11;8534:13;8548:1;8534:16;;;;;;;;;;;8493:58;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8455:96;;8573:18;8586:4;8573:12;:18::i;:::-;8569:99;;;8645:4;8615:10;8626:15;;;;;;8615:27;;;;;;;;;;;;;:34;-1:-1:-1;;;;;8615:34:25;;;-1:-1:-1;;;;;8615:34:25;;;;;8569:99;-1:-1:-1;8432:3:25;;8386:296;;;-1:-1:-1;;;8705:18:25;8701:109;;8783:16;;;;;8701:109;8841:9;:16;8823:10;8836:1;8823:14;:34;8819:349;;;8936:13;-1:-1:-1;;;;;8913:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8901:49;;8969:9;8964:164;8988:13;8984:1;:17;8964:164;;;9041:23;;;9062:1;9041:23;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9041:23:25;9026:9;9036:1;9026:12;;;;;;;;;;;;;:38;;;;9100:10;9111:1;9100:13;;;;;;;;;;;;;;9082:9;9092:1;9082:12;;;;;;;;;;;;;;9095:1;9082:15;;;;;;;;-1:-1:-1;;;;;9082:31:25;;;:15;;;;;;;;;;;:31;9003:3;;8964:164;;;;9141:16;;;;;8819:349;9219:45;9279:54;9298:7;9307:9;9318:10;9331:1;9318:14;9279:18;:54::i;:::-;9219:114;;9347:19;:26;9377:1;9347:31;9343:122;;;9438:16;;;;;;9343:122;9592:19;:26;9576:13;:42;-1:-1:-1;;;;;9540:88:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9528:100;;9643:9;9638:582;9662:13;9658:1;:17;9638:582;;;9701:9;9696:514;9720:19;:26;9716:1;:30;9696:514;;;9787:26;;9783:30;;;:34;;;9787:19;;9816:1;;9951:22;;;;;;;;;;;;:29;9947:1;:33;-1:-1:-1;;;;;9926:55:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9926:55:25;;9891:9;9901:1;9891:12;;;;;;;;;;;;;:90;;;;10017:10;10028:1;10017:13;;;;;;;;;;;;;;9999:9;10009:1;9999:12;;;;;;;;;;;;;;10012:1;9999:15;;;;;;;;;;;;;:31;-1:-1:-1;;;;;9999:31:25;;;-1:-1:-1;;;;;9999:31:25;;;;;10053:9;10048:148;10072:19;10092:1;10072:22;;;;;;;;;;;;;;:29;10068:1;:33;10048:148;;;10152:19;10172:1;10152:22;;;;;;;;;;;;;;10175:1;10152:25;;;;;;;;;;;;;;10130:9;10140:1;10130:12;;;;;;;;;;;;;;10147:1;10143;:5;10130:19;;;;;;;;-1:-1:-1;;;;;10130:47:25;;;:19;;;;;;;;;;;:47;10103:3;;10048:148;;;-1:-1:-1;;9748:3:25;;9696:514;;;-1:-1:-1;9677:3:25;;9638:582;;;;10229:16;;;;7498:2754;;;;;:::o;11552:1082::-;11713:24;11794:1;11774:9;:16;:21;;:64;;;;;11819:8;:15;11837:1;11819:19;11799:9;:16;:39;11774:64;11753:148;;;;-1:-1:-1;;;11753:148:25;;;;;;;:::i;:::-;12090:8;:15;12108:1;12090:19;12066:9;:16;12085:2;12066:21;:43;-1:-1:-1;;;;;12056:54:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12056:54:25;-1:-1:-1;12042:68:25;-1:-1:-1;12172:2:25;12155:20;;12120:9;12186:442;12210:9;:16;12206:1;:20;12186:442;;;12251:5;;12247:211;;12276:14;12293:8;12306:1;12302;:5;12293:15;;;;;;;;;;;;;;-1:-1:-1;;;;;12293:19:25;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12377:3;12373:17;12363:28;;-1:-1:-1;12424:1:25;12417:9;;;;12341:103;12471:20;12494:9;12504:1;12494:12;;;;;;;;;;;;;;;;;;12561:2;12557:14;12547:25;;-1:-1:-1;12601:2:25;12594:10;;;;12228:3;;12186:442;;4993:771:13;5196:17;5230:18;5250:14;5291;5280:46;;;;;;;;;;;;:::i;:::-;5229:97;;;;5337:18;5382:14;5371:37;;;;;;;;;;;;:::i;:::-;5336:72;-1:-1:-1;5434:4:13;:27;5479:6;5487:10;5336:72;5511:31;5531:10;5511:19;:31::i;:::-;5434:109;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5434:109:13;;;;;;;;;;;;:::i;:::-;;;5418:340;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5746:1;5739:8;;;;;;;;5418:340;5620:7;5628:1;5620:10;;;;;;;;;;;;;;5613:17;;;;;;;;6134:1220:9;6268:22;6306:24;6366:6;-1:-1:-1;;;;;6350:31:9;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6306:78;;6430:1;6416:4;:11;:15;-1:-1:-1;;;;;6402:30:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6402:30:9;;6394:38;;6447:9;6442:906;6466:5;:12;6462:1;:16;6442:906;;;6533:25;6592:7;-1:-1:-1;;;;;6592:16:9;;1555:5;6676:4;6681:1;6676:7;;;;;;;;;;;;;;6685:4;6690:1;6694;6690:5;6685:11;;;;;;;;;;;;;;6592:105;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6592:105:9;;;;;;;;;;;;:::i;:::-;;;6572:766;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7321:1:9;;7307:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7307:16:9;;7300:23;;;;;;;;6572:766;6784:15;;6780:90;;6849:1;;6835:16;;6780:90;6888:17;6932:9;6927:319;6951:8;:15;6947:1;:19;6927:319;;;6995:19;7031:8;7040:1;7031:11;;;;;;;;;;;;;;-1:-1:-1;;;;;7017:38:9;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6995:62;;7097:9;7083:11;:23;7079:149;;;7146:11;7134:23;;7194:8;7203:1;7194:11;;;;;;;;;;;;;;7183:5;7189:1;7183:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;7183:22:9;;;-1:-1:-1;;;;;7183:22:9;;;;;7079:149;-1:-1:-1;6968:3:9;;6927:319;;;;6714:546;;-1:-1:-1;6480:3:9;;6442:906;;9507:303:23;9722:70;;-1:-1:-1;;;9722:70:23;;9620:31;;-1:-1:-1;;;;;9722:56:23;;;;;:70;;9779:12;;9722:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;8491:721::-;8688:20;;-1:-1:-1;;;;;8745:36:23;;8741:100;;8797:33;;8741:100;8850:23;8922:22;-1:-1:-1;;;;;8922:33:23;1189:5;9039:16;9077:11;8995:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;8995:111:23;;;;;;;;;;;;;;-1:-1:-1;;;;;8995:111:23;-1:-1:-1;;;;;;8995:111:23;;;;;;;;;;8922:185;;;;8995:111;8922:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8883:224:23;;-1:-1:-1;8883:224:23;-1:-1:-1;9117:89:23;;;;9173:10;9162:33;;;;;;;;;;;;:::i;:::-;9147:48;;9117:89;8491:721;;;;;;;:::o;8961:769:10:-;9162:7;9186:18;9206:28;;:::i;:::-;9261:14;9250:55;;;;;;;;;;;;:::i;:::-;9185:120;;;;9316:18;9363:14;9352:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;9433:90:10;;-1:-1:-1;;;9433:90:10;;9315:92;;-1:-1:-1;9433:4:10;;:31;;:90;;9482:4;;9315:92;;9500:10;;9512;;9433:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9433:90:10;;;;;;;;-1:-1:-1;;9433:90:10;;;;;;;;;;;;:::i;:::-;;;9417:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9590:6;-1:-1:-1;9583:13:10;;-1:-1:-1;;;9583:13:10;6374:919:21;6577:17;6611:20;6633:30;;:::i;:::-;6690:14;6679:49;;;;;;;;;;;;:::i;:::-;6610:118;;;;6739:20;6786:14;6775:36;;;;;;;;;;;;:::i;:::-;6738:73;-1:-1:-1;6822:12:21;6836:23;6883:4;-1:-1:-1;;;6994:11:21;7023:13;6738:73;7085:31;7105:10;7085:19;:31::i;8373:2082:14:-;8557:7;8581:22;8607:24;8633:22;8659:3;-1:-1:-1;;;;;8659:8:14;;8668:7;:21;;;8659:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8580:110;;;;;;;;8719:7;:23;;;-1:-1:-1;;;;;8705:37:14;:10;-1:-1:-1;;;;;8705:37:14;;8701:1729;;;8856:29;8888:16;8856:48;;8918:23;8944:22;8956:3;-1:-1:-1;;;;;8956:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3183:8;;8944:11;:22::i;:::-;8918:48;-1:-1:-1;9019:29:14;9051:59;8918:48;9051:34;:21;3183:8;9051:29;:34::i;:59::-;9019:91;-1:-1:-1;9124:25:14;9152:58;3314:8;9152:45;:14;9019:91;9152:22;:45::i;:::-;:53;;:58::i;:::-;9124:86;;9288:16;9267:17;:37;9263:84;;9331:1;9324:8;;;;;;;;;;;9263:84;9361:43;9407:48;9453:1;9408:35;:21;9438:4;9408:29;:35::i;9407:48::-;9361:94;-1:-1:-1;9538:42:14;;-1:-1:-1;;;;;;;;9538:42:14;8701:1729;9615:7;:23;;;-1:-1:-1;;;;;9601:37:14;:10;-1:-1:-1;;;;;9601:37:14;;9597:833;;;9752:29;9784:30;:16;9809:4;9784:24;:30::i;:::-;9752:62;;9828:26;9857:23;9869:3;-1:-1:-1;;;;;9869:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3183:8;;9857:11;:23::i;:::-;9828:52;-1:-1:-1;9934:29:14;9967:62;3183:8;9967:49;:21;9828:52;9967:29;:49::i;:62::-;9934:95;;10071:14;10047:21;:38;10043:85;;;10112:1;10105:8;;;;;;;;;;10043:85;10141:25;10169:58;3314:8;10169:45;:14;10192:21;10169:22;:45::i;:58::-;10141:86;;10319:14;10298:17;:35;10294:82;;10360:1;10353:8;;;;;;;;;;;10294:82;-1:-1:-1;10398:21:14;-1:-1:-1;10391:28:14;;-1:-1:-1;;;;;10391:28:14;9597:833;-1:-1:-1;10447:1:14;;8373:2082;-1:-1:-1;;;;;;;;;8373:2082:14:o;1625:373:45:-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;:::-;1759:24;:200::i;:::-;-1:-1:-1;1986:5:45;;;1625:373::o;764:457::-;850:7;877:6;873:45;;-1:-1:-1;906:1:45;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:45:o;10258:329:25:-;10353:32;10433:9;:16;-1:-1:-1;;;;;10412:38:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10412:38:25;;10401:49;;10465:9;10460:121;10484:9;:16;10480:1;:20;10460:121;;;10535:9;10568:1;10564;10545:9;:16;:20;:24;10535:35;;;;;;;;;;;;;;10521:8;10530:1;10521:11;;;;;;;;-1:-1:-1;;;;;10521:49:25;;;:11;;;;;;;;;;;:49;10502:3;;10460:121;;10593:323;10686:32;10766:8;:15;-1:-1:-1;;;;;10745:37:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10745:37:25;;10734:48;;10797:9;10792:118;10816:8;:15;10812:1;:19;10792:118;;;10866:8;10897:1;10893;10875:8;:15;:19;:23;10866:33;;;;;;;;;;;;;;10852:8;10861:1;10852:11;;;;;;;;-1:-1:-1;;;;;10852:47:25;;;:11;;;;;;;;;;;:47;10833:3;;10792:118;;6290:2077:14;6475:7;6499:22;6525:24;6551:22;6577:3;-1:-1:-1;;;;;6577:8:14;;6586:7;:21;;;6577:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6498:110;;;;;;;;6618:24;6653:3;6618:39;;6686:7;:23;;;-1:-1:-1;;;;;6672:37:14;:10;-1:-1:-1;;;;;6672:37:14;;6668:1674;;;6883:29;6915:30;:16;6940:4;6915:24;:30::i;:::-;6883:62;-1:-1:-1;6960:25:14;6988:58;3314:8;6988:45;:14;6883:62;6988:22;:45::i;:58::-;6960:86;;7124:16;7103:17;:37;7099:84;;7167:1;7160:8;;;;;;;;;;7099:84;7197:16;7216:53;3183:8;7216:40;7246:3;-1:-1:-1;;;;;7246:7:14;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7216:21;;:29;:40::i;:53::-;7197:72;-1:-1:-1;7283:29:14;7315:39;:21;7197:72;7315:29;:39::i;6668:1674::-;7432:7;:23;;;-1:-1:-1;;;;;7418:37:14;:10;-1:-1:-1;;;;;7418:37:14;;7414:928;;;7667:16;7701:38;;;7697:85;;;7766:1;7759:8;;;;;;;;;7697:85;7795:25;7823:58;3314:8;7823:45;:14;7846:21;7823:22;:45::i;:58::-;7795:86;;7981:14;7960:17;:35;7956:82;;8022:1;8015:8;;;;;;;;;;7956:82;8052:23;8078;8090:3;-1:-1:-1;;;;;8090:8:14;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8078:23;8052:49;-1:-1:-1;8155:43:14;8202:72;8052:49;8202:47;:21;8232:16;8202:29;:47::i;7414:928::-;-1:-1:-1;8359:1:14;;6290:2077;-1:-1:-1;;;;;;;;;;6290:2077:14:o;4831:740:20:-;5032:17;5066:18;5086:12;5113:14;5102:46;;;;;;;;;;;;:::i;:::-;5065:83;;;;5159:18;5192:14;5181:37;;;;;;;;;;;;:::i;:::-;5158:60;-1:-1:-1;5245:4:20;:25;5288:4;5294:10;5158:60;5318:31;5338:10;5318:19;:31::i;5508:849:12:-;5721:17;5755:18;5775:23;5825:14;5814:46;;;;;;;;;;;;:::i;:::-;5754:106;;;;5871:18;5916:14;5905:37;;;;;;;;;;;;:::i;:::-;5870:72;-1:-1:-1;5968:4:12;:37;1110:5;6063:15;6080:10;5870:72;6104:31;6124:10;6104:19;:31::i;:::-;5968:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5968:168:12;;;;;;;;;;;;:::i;14301:688:43:-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:43;14838:2;14936:13;14930:20;;14301:688::o;4612:1265:3:-;4827:21;4850;4903:4;:13;;;-1:-1:-1;;;;;4903:24:3;;4928:4;:13;;;-1:-1:-1;;;;;4928:28:3;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4903:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4887:72;;4973:4;:10;;;:17;4994:1;4973:22;4969:81;;;5011:28;;4969:81;5059:23;5167:9;5162:709;5186:4;:10;;;:17;5182:1;:21;5162:709;;;5251:1;5228:4;:10;;;5239:1;5228:13;;;;;;;;;;;;;;:20;:24;5224:71;;;5272:8;;5224:71;5344:13;-1:-1:-1;;;;;5329:61:3;;922:5;5463:4;:10;;;5474:1;5463:13;;;;;;;;;;;;;;5478:17;5521:1;5496:17;:24;:26;5478:45;;;;;;;;;;;;;;5329:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5329:195:3;;;;;;;;-1:-1:-1;;5329:195:3;;;;;;;;;;;;:::i;:::-;;;5309:552;;5838:8;;5309:552;5609:15;5600:6;:24;5596:137;;;5666:6;5648:24;;5701:4;:10;;;5712:1;5701:13;;;;;;;;;;;;;;5694:20;;5596:137;5541:206;5309:552;5205:3;;5162:709;;;;4612:1265;;;;;;;;:::o;6768:620:15:-;6973:17;7007:16;7025:27;7067:14;7056:46;;;;;;;;;;;;:::i;:::-;7006:96;;;;7113:17;7132:27;7174:14;7163:46;;;;;;;;;;;;:::i;:::-;7112:97;;;;7226:155;7273:8;7295:19;7328;7361:10;7226:33;:155::i;:::-;7219:162;6768:620;-1:-1:-1;;;;;;;;6768:620:15:o;7876:377:2:-;7950:38;;:::i;:::-;-1:-1:-1;8023:223:2;;;;;;;;8089:4;8023:223;;;-1:-1:-1;8023:223:2;;;;;;;;;;;;;;;;;7876:377;:::o;7343:527::-;7580:39;;;7617:1;7580:39;;;;;;;;;7465;;;;7580;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7516:103;;7644:192;;;;;;;;7697:8;:15;;;7644:192;;;;7740:1;7644:192;;;;7770:1;7644:192;;;;7793:6;7644:192;;;;;;;;;;;;;;;;;;;7629:9;7639:1;7629:12;;;;;;;;;;;;;;;;;:207;7854:9;7343:527;-1:-1:-1;;;7343:527:2:o;1160:172:19:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:19;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4785:416:0:-;4953:21;4994:14;;;:29;;-1:-1:-1;5012:11:0;;4994:29;:49;;;-1:-1:-1;5027:16:0;;4994:49;4990:63;;;-1:-1:-1;5052:1:0;5045:8;;4990:63;5075:18;;;5087:6;5075:9;:18;:9;5107:13;;;;;:23;5103:37;;5139:1;5132:8;;;;;5103:37;5183:11;5177:1;5163:11;:15;5158:1;:21;5157:37;;;;;;;4785:416;-1:-1:-1;;;;;4785:416:0:o;10922:624:25:-;11011:12;11164:17;;11212:13;11208:64;;11252:5;11245:12;;;;;11208:64;10922:624;11342:4;-1:-1:-1;;;;;11342:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11342:23:25;;11374:4;11342:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11338:86;;-1:-1:-1;11408:5:25;11401:12;;11338:86;11437:4;-1:-1:-1;;;;;11437:11:25;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;11437:23:25;;11469:4;11437:38;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11433:86;;-1:-1:-1;11503:5:25;11496:12;;11433:86;-1:-1:-1;11535:4:25;10922:624;;;:::o;1401:322:49:-;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1589:127:49;;;;;;;;;;;;;;-1:-1:-1;;;;;1589:127:49;-1:-1:-1;;;;;;1589:127:49;;;;;;;;;;;-1:-1:-1;1401:322:49;;;;;:::o;1531:170:48:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1334:378:46;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;5:130;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;3853:705::-;;3979:3;3972:4;3964:6;3960:17;3956:27;3946:2;;-1:-1;;3987:12;3946:2;4034:6;4021:20;4056:89;4071:73;4137:6;4071:73;:::i;4056:89::-;4173:21;;;4047:98;-1:-1;4217:4;4230:14;;;;4205:17;;;4325:1;4310:242;4335:6;4332:1;4329:13;4310:242;;;4442:46;4484:3;4217:4;4418:3;4405:17;4209:6;4393:30;;4442:46;:::i;:::-;4430:59;;4503:14;;;;4531;;;;4357:1;4350:9;4310:242;;4600:779;;4741:3;4734:4;4726:6;4722:17;4718:27;4708:2;;-1:-1;;4749:12;4708:2;4796:6;4783:20;4818:104;4833:88;4914:6;4833:88;:::i;4818:104::-;4950:21;;;4809:113;-1:-1;4994:4;5007:14;;;;4982:17;;;5096;;;5087:27;;;;5084:36;-1:-1;5081:2;;;5133:1;;5123:12;5081:2;5158:1;5143:230;5168:6;5165:1;5162:13;5143:230;;;11331:6;11318:20;11343:57;11394:5;11343:57;:::i;:::-;5236:74;;5324:14;;;;5352;;;;5190:1;5183:9;5143:230;;7009:788;;7153:3;7146:4;7138:6;7134:17;7130:27;7120:2;;-1:-1;;7161:12;7120:2;7208:6;7195:20;7230:107;7245:91;7329:6;7245:91;:::i;7230:107::-;7365:21;;;7221:116;-1:-1;7409:4;7422:14;;;;7397:17;;;7523:4;7511:17;;;7502:27;;;;7499:36;-1:-1;7496:2;;;7548:1;;7538:12;7496:2;7573:1;7558:233;7583:6;7580:1;7577:13;7558:233;;;7663:64;7723:3;7711:10;7663:64;:::i;:::-;7651:77;;7742:14;;;;7770;;;;7605:1;7598:9;7558:233;;;7562:14;;;;;;7113:684;;;;:::o;7823:707::-;;7940:3;7933:4;7925:6;7921:17;7917:27;7907:2;;-1:-1;;7948:12;7907:2;7995:6;7982:20;8017:80;8032:64;8089:6;8032:64;:::i;8017:80::-;8125:21;;;8008:89;-1:-1;8169:4;8182:14;;;;8157:17;;;8271;;;8262:27;;;;8259:36;-1:-1;8256:2;;;8308:1;;8298:12;8256:2;8333:1;8318:206;8343:6;8340:1;8337:13;8318:206;;;25662:20;;8411:50;;8475:14;;;;8503;;;;8365:1;8358:9;8318:206;;8556:722;;8684:3;8677:4;8669:6;8665:17;8661:27;8651:2;;-1:-1;;8692:12;8651:2;8732:6;8726:13;8754:80;8769:64;8826:6;8769:64;:::i;8754:80::-;8862:21;;;8745:89;-1:-1;8906:4;8919:14;;;;8894:17;;;9008;;;8999:27;;;;8996:36;-1:-1;8993:2;;;9045:1;;9035:12;8993:2;9070:1;9055:217;9080:6;9077:1;9074:13;9055:217;;;25810:13;;9148:61;;9223:14;;;;9251;;;;9102:1;9095:9;9055:217;;9286:128;9361:13;;128272;;128265:21;135373:32;;135363:2;;135419:1;;135409:12;9974:440;;10075:3;10068:4;10060:6;10056:17;10052:27;10042:2;;-1:-1;;10083:12;10042:2;10130:6;10117:20;10152:64;10167:48;10208:6;10167:48;:::i;10152:64::-;10143:73;;10236:6;10229:5;10222:21;10340:3;10272:4;10331:6;10264;10322:16;;10319:25;10316:2;;;10357:1;;10347:12;10316:2;133585:6;10272:4;10264:6;10260:17;10272:4;10298:5;10294:16;133562:30;133641:1;133623:16;;;10272:4;133623:16;133616:27;10298:5;10035:379;-1:-1;;10035:379::o;10423:442::-;;10535:3;10528:4;10520:6;10516:17;10512:27;10502:2;;-1:-1;;10543:12;10502:2;10583:6;10577:13;10605:64;10620:48;10661:6;10620:48;:::i;10605:64::-;10596:73;;10689:6;10682:5;10675:21;10793:3;10725:4;10784:6;10717;10775:16;;10772:25;10769:2;;;10810:1;;10800:12;10769:2;10820:39;10852:6;10725:4;10751:5;10747:16;10725:4;10717:6;10713:17;10820:39;:::i;12693:174::-;12791:13;;137229:1;137219:12;;137209:2;;137245:1;;137235:12;14727:659;;14843:4;14831:9;14826:3;14822:19;14818:30;14815:2;;;-1:-1;;14851:12;14815:2;14879:20;14843:4;14879:20;:::i;:::-;14870:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;14963:75;;15120:2;15173:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;15120:2;15135:16;;15128:74;15283:2;15336:22;;9765:20;9790:32;9765:20;9790:32;:::i;:::-;15283:2;15298:16;;15291:74;15302:5;14809:577;-1:-1;;14809:577::o;15429:703::-;;15556:4;15544:9;15539:3;15535:19;15531:30;15528:2;;;-1:-1;;15564:12;15528:2;15592:20;15556:4;15592:20;:::i;:::-;15583:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;15676:86;;15844:2;15908:22;;9911:13;9929:32;9911:13;9929:32;:::i;:::-;15844:2;15859:16;;15852:85;16018:2;16082:22;;9911:13;9929:32;9911:13;9929:32;:::i;16180:481::-;;16302:4;16290:9;16285:3;16281:19;16277:30;16274:2;;;-1:-1;;16310:12;16274:2;16338:20;16302:4;16338:20;:::i;:::-;16329:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;16419:75;;16557:2;16611:22;;72:20;97:33;72:20;97:33;:::i;:::-;16557:2;16572:16;;16565:75;16576:5;16268:393;-1:-1;;16268:393::o;16711:1028::-;;16834:4;16822:9;16817:3;16813:19;16809:30;16806:2;;;-1:-1;;16842:12;16806:2;16870:20;16834:4;16870:20;:::i;:::-;16861:29;;25675:6;25662:20;16963:16;16956:75;17099:2;17157:9;17153:22;72:20;97:33;124:5;97:33;:::i;:::-;17099:2;17114:16;;17107:75;17251:2;17305:22;;72:20;97:33;72:20;97:33;:::i;:::-;17251:2;17266:16;;17259:75;17395:2;17449:22;;72:20;97:33;72:20;97:33;:::i;:::-;17395:2;17410:16;;17403:75;17567:3;17552:19;;17539:33;-1:-1;;;;;17581:30;;17578:2;;;-1:-1;;17614:12;17578:2;17659:58;17713:3;17704:6;17693:9;17689:22;17659:58;:::i;:::-;17567:3;17645:5;17641:16;17634:84;;16800:939;;;;:::o;19437:2032::-;;19554:6;;19542:9;19537:3;19533:19;19529:32;19526:2;;;-1:-1;;19564:12;19526:2;19592:22;19554:6;19592:22;:::i;:::-;19583:31;;;19702:73;19771:3;19747:22;19702:73;:::i;:::-;19684:16;19677:99;19876:73;19945:3;19843:2;19925:9;19921:22;19876:73;:::i;:::-;19843:2;19862:5;19858:16;19851:99;20051:49;20096:3;20018:2;20076:9;20072:22;20051:49;:::i;:::-;20018:2;20037:5;20033:16;20026:75;20202:49;20247:3;20169:2;20227:9;20223:22;20202:49;:::i;:::-;20169:2;20188:5;20184:16;20177:75;20362:49;20407:3;20328;20387:9;20383:22;20362:49;:::i;:::-;20328:3;20348:5;20344:16;20337:75;20508:49;20553:3;20474;20533:9;20529:22;20508:49;:::i;:::-;20474:3;20494:5;20490:16;20483:75;20654:49;20699:3;20620;20679:9;20675:22;20654:49;:::i;:::-;20620:3;20640:5;20636:16;20629:75;20801:49;20846:3;20767;20826:9;20822:22;20801:49;:::i;:::-;20767:3;20787:5;20783:16;20776:75;20920:3;20956:49;21001:3;20920;20981:9;20977:22;20956:49;:::i;:::-;20936:18;;;20929:77;21067:3;21124:22;;;9488:20;21083:18;;;21076:77;21216:3;21252:48;21296:3;21272:22;;;21252:48;:::i;:::-;21216:3;21236:5;21232:18;21225:76;;21362:3;;21423:9;21419:22;25662:20;21362:3;21382:5;21378:18;21371:77;;19520:1949;;;;:::o;22938:773::-;;23054:4;23042:9;23037:3;23033:19;23029:30;23026:2;;;-1:-1;;23062:12;23026:2;23090:20;23054:4;23090:20;:::i;:::-;23081:29;;12972:6;12959:20;137348:1;137341:5;137338:12;137328:2;;-1:-1;;137354:12;137328:2;23176:93;;23327:2;23379:22;;26073:20;26098:31;26073:20;26098:31;:::i;:::-;23360:47;23327:2;23346:5;23342:16;23335:73;;23466:2;23524:9;23520:22;9488:20;23466:2;23485:5;23481:16;23474:75;23607:2;23665:9;23661:22;9488:20;23607:2;23626:5;23622:16;23615:75;23020:691;;;;:::o;25178:130::-;25245:20;;25270:33;25245:20;25270:33;:::i;25873:128::-;25939:20;;-1:-1;;;;;130907:30;;138052:34;;138042:2;;138100:1;;138090:12;26278:241;;26382:2;26370:9;26361:7;26357:23;26353:32;26350:2;;;-1:-1;;26388:12;26350:2;85:6;72:20;97:33;124:5;97:33;:::i;26526:263::-;;26641:2;26629:9;26620:7;26616:23;26612:32;26609:2;;;-1:-1;;26647:12;26609:2;226:6;220:13;238:33;265:5;238:33;:::i;27082:431::-;;;27230:2;27218:9;27209:7;27205:23;27201:32;27198:2;;;-1:-1;;27236:12;27198:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;27407:2;27465:22;;369:13;27288:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27415:82;;;;27192:321;;;;;:::o;27520:736::-;;;;;27718:3;27706:9;27697:7;27693:23;27689:33;27686:2;;;-1:-1;;27725:12;27686:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;27896:2;27954:22;;369:13;27777:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28023:2;28081:22;;369:13;27904:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28150:2;28208:22;;369:13;28031:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;27680:576;;;;-1:-1;27680:576;;-1:-1;;27680:576::o;28263:561::-;;;;28425:2;28413:9;28404:7;28400:23;28396:32;28393:2;;;-1:-1;;28431:12;28393:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;28602:2;28660:22;;369:13;28483:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;28610:82;-1:-1;28747:61;28800:7;28729:2;28776:22;;28747:61;:::i;:::-;28737:71;;28387:437;;;;;:::o;28831:562::-;;;29005:2;28993:9;28984:7;28980:23;28976:32;28973:2;;;-1:-1;;29011:12;28973:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;29203:2;29188:18;;29182:25;29063:82;;-1:-1;;;;;;29216:30;;;29213:2;;;-1:-1;;29249:12;29213:2;29345:22;;;;17923:4;17902:19;;;17898:30;17895:2;;;-1:-1;;17931:12;17895:2;17959:20;17923:4;17959:20;:::i;:::-;18102:22;25810:13;18052:16;18045:86;18232:60;18288:3;29203:2;18268:9;18264:22;18232:60;:::i;:::-;29203:2;18218:5;18214:16;18207:86;18395:60;18451:3;29005:2;18431:9;18427:22;18395:60;:::i;:::-;29005:2;18381:5;18377:16;18370:86;18550:60;18606:3;18517:2;18586:9;18582:22;18550:60;:::i;:::-;18517:2;18536:5;18532:16;18525:86;18693:3;18682:9;18678:19;18672:26;29227:18;18710:6;18707:30;18704:2;;;-1:-1;;18740:12;18704:2;18785:69;18850:3;18841:6;18830:9;18826:22;18785:69;:::i;:::-;18693:3;18771:5;18767:16;18760:95;;29269:108;;;;;;28967:426;;;;;:::o;29400:491::-;;;;29538:2;29526:9;29517:7;29513:23;29509:32;29506:2;;;-1:-1;;29544:12;29506:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;29596:63;-1:-1;29696:2;29735:22;;72:20;97:33;72:20;97:33;:::i;:::-;29704:63;-1:-1;29804:2;29843:22;;72:20;97:33;72:20;97:33;:::i;:::-;29812:63;;;;29500:391;;;;;:::o;29898:879::-;;;;;;30095:3;30083:9;30074:7;30070:23;30066:33;30063:2;;;-1:-1;;30102:12;30063:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;30154:63;-1:-1;30254:2;30293:22;;72:20;97:33;72:20;97:33;:::i;:::-;30262:63;-1:-1;30362:2;30401:22;;72:20;97:33;72:20;97:33;:::i;:::-;30370:63;-1:-1;30470:2;30509:22;;72:20;97:33;72:20;97:33;:::i;:::-;30478:63;-1:-1;30606:3;30591:19;;30578:33;-1:-1;;;;;30620:30;;30617:2;;;-1:-1;;30653:12;30617:2;30683:78;30753:7;30744:6;30733:9;30729:22;30683:78;:::i;:::-;30673:88;;;30057:720;;;;;;;;:::o;30784:753::-;;;;;30964:3;30952:9;30943:7;30939:23;30935:33;30932:2;;;-1:-1;;30971:12;30932:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31023:63;-1:-1;31123:2;31162:22;;72:20;97:33;72:20;97:33;:::i;:::-;31131:63;-1:-1;31231:2;31270:22;;72:20;97:33;72:20;97:33;:::i;:::-;31239:63;-1:-1;31367:2;31352:18;;31339:32;-1:-1;;;;;31380:30;;31377:2;;;-1:-1;;31413:12;31377:2;31443:78;31513:7;31504:6;31493:9;31489:22;31443:78;:::i;:::-;31433:88;;;30926:611;;;;;;;:::o;31544:617::-;;;;;31699:3;31687:9;31678:7;31674:23;31670:33;31667:2;;;-1:-1;;31706:12;31667:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;31758:63;-1:-1;31858:2;31897:22;;72:20;97:33;72:20;97:33;:::i;:::-;31866:63;-1:-1;31966:2;32005:22;;72:20;97:33;72:20;97:33;:::i;:::-;31661:500;;;;-1:-1;31974:63;;32074:2;32113:22;25662:20;;-1:-1;;31661:500::o;32168:502::-;;;32314:2;32302:9;32293:7;32289:23;32285:32;32282:2;;;-1:-1;;32320:12;32282:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32372:63;-1:-1;32500:2;32485:18;;32472:32;-1:-1;;;;;32513:30;;32510:2;;;-1:-1;;32546:12;32510:2;32576:78;32646:7;32637:6;32626:9;32622:22;32576:78;:::i;:::-;32566:88;;;32276:394;;;;;:::o;32677:617::-;;;;;32832:3;32820:9;32811:7;32807:23;32803:33;32800:2;;;-1:-1;;32839:12;32800:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;32891:63;-1:-1;32991:2;33030:22;;25662:20;;-1:-1;33099:2;33138:22;;72:20;97:33;72:20;97:33;:::i;:::-;33107:63;-1:-1;33207:2;33246:22;;72:20;97:33;72:20;97:33;:::i;33301:879::-;;;;;;33498:3;33486:9;33477:7;33473:23;33469:33;33466:2;;;-1:-1;;33505:12;33466:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;33557:63;-1:-1;33657:2;33696:22;;25662:20;;-1:-1;33765:2;33804:22;;72:20;97:33;72:20;97:33;:::i;34187:392::-;;34327:2;;34315:9;34306:7;34302:23;34298:32;34295:2;;;-1:-1;;34333:12;34295:2;34384:17;34378:24;-1:-1;;;;;34414:6;34411:30;34408:2;;;-1:-1;;34444:12;34408:2;34531:22;;1312:4;1300:17;;1296:27;-1:-1;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;-1:-1;34464:99;34289:290;-1:-1;;;;;;;34289:290::o;34586:833::-;;;;34805:2;34793:9;34784:7;34780:23;34776:32;34773:2;;;-1:-1;;34811:12;34773:2;34862:17;34856:24;-1:-1;;;;;34900:18;34892:6;34889:30;34886:2;;;-1:-1;;34922:12;34886:2;35024:6;35013:9;35009:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;9636:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;35084:18;;35078:25;34942:99;;-1:-1;35078:25;-1:-1;;;35112:30;;;35109:2;;;-1:-1;;35145:12;35109:2;;35175:89;35256:7;35247:6;35236:9;35232:22;35175:89;:::i;:::-;35165:99;;;35319:84;35395:7;35301:2;35375:9;35371:22;35319:84;:::i;35426:419::-;;;35576:2;35564:9;35555:7;35551:23;35547:32;35544:2;;;-1:-1;;35582:12;35544:2;35640:17;35627:31;-1:-1;;;;;35678:18;35670:6;35667:30;35664:2;;;-1:-1;;35700:12;35664:2;35812:6;35801:9;35797:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;35678:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;35576:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;35576;3739:17;;;;;35720:109;;-1:-1;35538:307;;-1:-1;;;;35538:307::o;35852:799::-;;;;36058:2;36046:9;36037:7;36033:23;36029:32;36026:2;;;-1:-1;;36064:12;36026:2;36122:17;36109:31;-1:-1;;;;;36160:18;36152:6;36149:30;36146:2;;;-1:-1;;36182:12;36146:2;36212:87;36291:7;36282:6;36271:9;36267:22;36212:87;:::i;:::-;36202:97;;36364:2;36353:9;36349:18;36336:32;36322:46;;36160:18;36380:6;36377:30;36374:2;;;-1:-1;;36410:12;36374:2;;36440:87;36519:7;36510:6;36499:9;36495:22;36440:87;:::i;:::-;36430:97;;;36564:2;36607:9;36603:22;25662:20;36572:63;;36020:631;;;;;:::o;36658:425::-;;36811:2;36799:9;36790:7;36786:23;36782:32;36779:2;;;-1:-1;;36817:12;36779:2;36875:17;36862:31;-1:-1;;;;;36905:6;36902:30;36899:2;;;-1:-1;;36935:12;36899:2;36965:102;37059:7;37050:6;37039:9;37035:22;36965:102;:::i;37090:550::-;;;37260:2;37248:9;37239:7;37235:23;37231:32;37228:2;;;-1:-1;;37266:12;37228:2;37324:17;37311:31;-1:-1;;;;;37354:6;37351:30;37348:2;;;-1:-1;;37384:12;37348:2;37414:102;37508:7;37499:6;37488:9;37484:22;37414:102;:::i;:::-;37404:112;;;37553:2;37596:9;37592:22;72:20;97:33;124:5;97:33;:::i;37647:675::-;;;;37834:2;37822:9;37813:7;37809:23;37805:32;37802:2;;;-1:-1;;37840:12;37802:2;37898:17;37885:31;-1:-1;;;;;37928:6;37925:30;37922:2;;;-1:-1;;37958:12;37922:2;37988:102;38082:7;38073:6;38062:9;38058:22;37988:102;:::i;:::-;37978:112;;;38127:2;38170:9;38166:22;72:20;97:33;124:5;97:33;:::i;38329:390::-;;38468:2;;38456:9;38447:7;38443:23;38439:32;38436:2;;;-1:-1;;38474:12;38436:2;38525:17;38519:24;-1:-1;;;;;38555:6;38552:30;38549:2;;;-1:-1;;38585:12;38549:2;38671:22;;5524:4;5512:17;;5508:27;-1:-1;5498:2;;-1:-1;;5539:12;5498:2;5579:6;5573:13;5601:79;5616:63;5672:6;5616:63;:::i;5601:79::-;5708:21;;;5765:14;;;;5740:17;;;5854;;;5845:27;;;;5842:36;-1:-1;5839:2;;;-1:-1;;5881:12;5839:2;-1:-1;5907:10;;5901:216;5926:6;5923:1;5920:13;5901:216;;;13398:13;;5994:60;;5948:1;5941:9;;;;;6068:14;;;;6096;;5901:216;;38726:909;;;;38987:2;38975:9;38966:7;38962:23;38958:32;38955:2;;;-1:-1;;38993:12;38955:2;39051:17;39038:31;-1:-1;;;;;39089:18;39081:6;39078:30;39075:2;;;-1:-1;;39111:12;39075:2;39230:6;39219:9;39215:22;;;6314:3;6307:4;6299:6;6295:17;6291:27;6281:2;;-1:-1;;6322:12;6281:2;6369:6;6356:20;6391:108;6406:92;6491:6;6406:92;:::i;6391:108::-;6505:16;6541:6;6534:5;6527:21;6571:4;;6588:3;6584:14;6577:21;;6571:4;6563:6;6559:17;6685:6;6695:3;6571:4;6685:6;6677;6673:19;6563:6;6664:29;;6661:38;6658:2;;;-1:-1;;6702:12;6658:2;-1:-1;6728:10;;6722:236;6747:6;6744:1;6741:13;6722:236;;;6827:65;6888:3;6876:10;6827:65;:::i;:::-;6815:78;;6769:1;6762:9;;;;;6907:14;;;;6935:16;;;;6722:236;;;-1:-1;39131:116;;-1:-1;39297:18;;39284:32;;-1:-1;;;;39325:30;;;39322:2;;;-1:-1;;39358:12;39322:2;;39388:105;39485:7;39476:6;39465:9;39461:22;39388:105;:::i;:::-;39378:115;;;39548:71;39611:7;39530:2;39591:9;39587:22;39548:71;:::i;39642:377::-;;39771:2;39759:9;39750:7;39746:23;39742:32;39739:2;;;-1:-1;;39777:12;39739:2;39835:17;39822:31;-1:-1;;;;;39865:6;39862:30;39859:2;;;-1:-1;;39895:12;39859:2;39925:78;39995:7;39986:6;39975:9;39971:22;39925:78;:::i;40026:392::-;;40166:2;40154:9;40145:7;40141:23;40137:32;40134:2;;;-1:-1;;40172:12;40134:2;40223:17;40217:24;-1:-1;;;;;40253:6;40250:30;40247:2;;;-1:-1;;40283:12;40247:2;40313:89;40394:7;40385:6;40374:9;40370:22;40313:89;:::i;40425:257::-;;40537:2;40525:9;40516:7;40512:23;40508:32;40505:2;;;-1:-1;;40543:12;40505:2;9367:6;9361:13;9379:30;9403:5;9379:30;:::i;40689:658::-;;;;40860:2;40848:9;40839:7;40835:23;40831:32;40828:2;;;-1:-1;;40866:12;40828:2;9367:6;9361:13;9379:30;9403:5;9379:30;:::i;:::-;41026:2;41076:22;;220:13;40918:71;;-1:-1;238:33;220:13;238:33;:::i;:::-;41166:2;41151:18;;41145:25;41034:74;;-1:-1;;;;;;41179:30;;41176:2;;;-1:-1;;41212:12;41176:2;41242:89;41323:7;41314:6;41303:9;41299:22;41242:89;:::i;:::-;41232:99;;;40822:525;;;;;:::o;41354:263::-;;41469:2;41457:9;41448:7;41444:23;41440:32;41437:2;;;-1:-1;;41475:12;41437:2;-1:-1;9636:13;;41431:186;-1:-1;41431:186::o;41624:761::-;;;;41807:2;41795:9;41786:7;41782:23;41778:32;41775:2;;;-1:-1;;41813:12;41775:2;9642:6;9636:13;41865:74;;41997:2;41986:9;41982:18;41976:25;-1:-1;;;;;42021:18;42013:6;42010:30;42007:2;;;-1:-1;;42043:12;42007:2;42073:73;42138:7;42129:6;42118:9;42114:22;42073:73;:::i;:::-;42063:83;;42204:2;42193:9;42189:18;42183:25;42169:39;;42021:18;42220:6;42217:30;42214:2;;;-1:-1;;42250:12;42214:2;;42280:89;42361:7;42352:6;42341:9;42337:22;42280:89;:::i;42392:360::-;;42516:2;42504:9;42495:7;42491:23;42487:32;42484:2;;;-1:-1;;42522:12;42484:2;42573:17;42567:24;-1:-1;;;;;42603:6;42600:30;42597:2;;;-1:-1;;42633:12;42597:2;42663:73;42728:7;42719:6;42708:9;42704:22;42663:73;:::i;43703:566::-;;;43879:2;43867:9;43858:7;43854:23;43850:32;43847:2;;;-1:-1;;43885:12;43847:2;11877:6;11871:13;11889:52;11935:5;11889:52;:::i;:::-;44088:2;44073:18;;44067:25;43937:93;;-1:-1;;;;;;44101:30;;44098:2;;;-1:-1;;44134:12;44098:2;44164:89;44245:7;44236:6;44225:9;44221:22;44164:89;:::i;44914:600::-;;;45109:2;45097:9;45088:7;45084:23;45080:32;45077:2;;;-1:-1;;45115:12;45077:2;12438:6;12425:20;12450:58;12502:5;12450:58;:::i;:::-;45167:88;-1:-1;45320:2;45305:18;;45292:32;-1:-1;;;;;45333:30;;45330:2;;;-1:-1;;45366:12;45330:2;45396:102;45490:7;45481:6;45470:9;45466:22;45396:102;:::i;45521:261::-;;45635:2;45623:9;45614:7;45610:23;45606:32;45603:2;;;-1:-1;;45641:12;45603:2;13265:6;13259:13;13277:32;13303:5;13277:32;:::i;45789:452::-;;;45947:3;45935:9;45926:7;45922:23;45918:33;45915:2;;;-1:-1;;45954:12;45915:2;13265:6;13259:13;13277:32;13303:5;13277:32;:::i;:::-;46006:73;-1:-1;46134:91;46217:7;46116:2;46193:22;;46134:91;:::i;:::-;46124:101;;45909:332;;;;;:::o;46711:562::-;;;;46872:9;46863:7;46859:23;46884:3;46859:23;46855:33;46852:2;;;-1:-1;;46891:12;46852:2;13634:4;13613:19;13609:30;13606:2;;;-1:-1;;13642:12;13606:2;;13670:20;13634:4;13670:20;:::i;:::-;9501:6;9488:20;13756:16;13749:75;13886:2;13944:9;13940:22;72:20;97:33;124:5;97:33;:::i;:::-;13886:2;13901:16;;13894:75;13905:5;-1:-1;13634:4;47117:22;;72:20;97:33;72:20;97:33;:::i;:::-;47086:63;-1:-1;47186:2;47225:22;;72:20;97:33;72:20;97:33;:::i;47280:647::-;;;;47453:2;47441:9;47432:7;47428:23;47424:32;47421:2;;;-1:-1;;47459:12;47421:2;47517:17;47504:31;-1:-1;;;;;47555:18;47547:6;47544:30;47541:2;;;-1:-1;;47577:12;47541:2;47663:22;;;;14166:4;14145:19;;;14141:30;14138:2;;;-1:-1;;14174:12;14138:2;14202:20;14166:4;14202:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;14283:99;;14472:2;14457:18;;;14444:32;14485:30;;;14482:2;;;-1:-1;;14518:12;14482:2;14649:6;14638:9;14634:22;;;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2111:34;;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2350:14;;;;2325:17;;;-1:-1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;14472:2;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;;-1:-1;;14545:16;;;14538:125;-1:-1;14549:5;;-1:-1;47771:22;;72:20;;-1:-1;97:33;;-1:-1;72:20;97:33;:::i;47934:543::-;;;;48097:3;48085:9;48076:7;48072:23;48068:33;48065:2;;;-1:-1;;48104:12;48065:2;48166:80;48238:7;48214:22;48166:80;:::i;:::-;48156:90;;48283:2;48325:9;48321:22;13113:20;13138:32;13164:5;13138:32;:::i;:::-;48291:62;-1:-1;48390:3;48429:22;;13113:20;13138:32;13113:20;13138:32;:::i;48484:805::-;;;;;48689:3;48677:9;48668:7;48664:23;48660:33;48657:2;;;-1:-1;;48696:12;48657:2;48758:80;48830:7;48806:22;48758:80;:::i;:::-;48748:90;;48875:2;48917:9;48913:22;13113:20;13138:32;13164:5;13138:32;:::i;:::-;48883:62;-1:-1;48982:3;49021:22;;13113:20;13138:32;13113:20;13138:32;:::i;:::-;48991:62;-1:-1;49118:3;49103:19;;49090:33;-1:-1;;;;;49132:30;;49129:2;;;-1:-1;;49165:12;49296:558;;;;49467:3;49455:9;49446:7;49442:23;49438:33;49435:2;;;-1:-1;;49474:12;49435:2;49536:86;49614:7;49590:22;49536:86;:::i;:::-;49526:96;;49659:2;49702:9;49698:22;72:20;97:33;124:5;97:33;:::i;49861:820::-;;;;;50074:3;50062:9;50053:7;50049:23;50045:33;50042:2;;;-1:-1;;50081:12;50042:2;50143:86;50221:7;50197:22;50143:86;:::i;:::-;50133:96;;50266:2;50309:9;50305:22;72:20;97:33;124:5;97:33;:::i;:::-;50274:63;-1:-1;50374:2;50413:22;;72:20;97:33;72:20;97:33;:::i;:::-;50382:63;-1:-1;50510:3;50495:19;;50482:33;-1:-1;;;;;50524:30;;50521:2;;;-1:-1;;50557:12;50688:645;;;;50860:2;50848:9;50839:7;50835:23;50831:32;50828:2;;;-1:-1;;50866:12;50828:2;50924:17;50911:31;-1:-1;;;;;50954:6;50951:30;50948:2;;;-1:-1;;50984:12;50948:2;51014:87;51093:7;51084:6;51073:9;51069:22;51014:87;:::i;51340:907::-;;;;;51554:3;51542:9;51533:7;51529:23;51525:33;51522:2;;;-1:-1;;51561:12;51522:2;51619:17;51606:31;-1:-1;;;;;51657:18;51649:6;51646:30;51643:2;;;-1:-1;;51679:12;51643:2;51709:87;51788:7;51779:6;51768:9;51764:22;51709:87;:::i;:::-;51699:97;;51833:2;51876:9;51872:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;51841:63;;-1:-1;51941:2;51980:22;;72:20;;97:33;72:20;97:33;:::i;:::-;51949:63;;-1:-1;52077:2;52062:18;;52049:32;;52090:30;;;52087:2;;;-1:-1;;52123:12;52087:2;;52153:78;52223:7;52214:6;52203:9;52199:22;52153:78;:::i;52254:771::-;;;;;52443:3;52431:9;52422:7;52418:23;52414:33;52411:2;;;-1:-1;;52450:12;52411:2;52508:17;52495:31;-1:-1;;;;;52538:6;52535:30;52532:2;;;-1:-1;;52568:12;52532:2;52598:87;52677:7;52668:6;52657:9;52653:22;52598:87;:::i;:::-;52588:97;;;52722:2;52765:9;52761:22;72:20;97:33;124:5;97:33;:::i;53032:771::-;;;;;53221:3;53209:9;53200:7;53196:23;53192:33;53189:2;;;-1:-1;;53228:12;53189:2;53286:17;53273:31;-1:-1;;;;;53316:6;53313:30;53310:2;;;-1:-1;;53346:12;53310:2;53376:87;53455:7;53446:6;53435:9;53431:22;53376:87;:::i;:::-;53366:97;;;53500:2;53543:9;53539:22;9488:20;53508:63;;53608:2;53651:9;53647:22;72:20;97:33;124:5;97:33;:::i;54361:640::-;;;;54572:3;54560:9;54551:7;54547:23;54543:33;54540:2;;;-1:-1;;54579:12;54540:2;54641:81;54714:7;54690:22;54641:81;:::i;:::-;54631:91;;54778:80;54850:7;54759:3;54830:9;54826:22;54778:80;:::i;:::-;54768:90;;54895:3;54957:9;54953:22;11686:20;11711:51;11756:5;11711:51;:::i;55008:553::-;;;;55164:9;55155:7;55151:23;55176:3;55151:23;55147:33;55144:2;;;-1:-1;;55183:12;55144:2;21637:4;21616:19;21612:30;21609:2;;;-1:-1;;21645:12;21609:2;;21673:20;21637:4;21673:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;21756:75;;21901:2;21955:22;;;9488:20;21916:16;;;21909:75;22056:2;22110:22;;72:20;97:33;72:20;97:33;:::i;:::-;22056:2;22071:16;;22064:75;22075:5;-1:-1;21637:4;55404:22;;72:20;97:33;72:20;97:33;:::i;:::-;55373:63;-1:-1;55473:3;55513:22;;72:20;97:33;72:20;97:33;:::i;55568:585::-;;;;55729:9;55720:7;55716:23;55741:3;55716:23;55712:33;55709:2;;;-1:-1;;55748:12;55709:2;22327:4;22306:19;22302:30;22299:2;;;-1:-1;;22335:12;22299:2;;22363:20;22327:4;22363:20;:::i;:::-;22502:22;9636:13;22452:16;22445:86;22594:2;22679:9;22675:22;12614:13;137108:1;137101:5;137098:12;137088:2;;-1:-1;;137114:12;137088:2;22594;22609:16;;22602:102;22783:2;22848:22;;25393:13;25411:33;25393:13;25411:33;:::i;:::-;22783:2;22798:16;;22791:86;22327:4;55988:22;;25393:13;22802:5;;-1:-1;25411:33;25393:13;25411:33;:::i;:::-;55946:74;-1:-1;56076:61;56129:7;56057:3;56105:22;;56076:61;:::i;57530:261::-;;57644:2;57632:9;57623:7;57619:23;57615:32;57612:2;;;-1:-1;;57650:12;57612:2;25539:6;25533:13;130746:8;137833:5;130735:20;137809:5;137806:34;137796:2;;-1:-1;;137844:12;58068:399;;;58200:2;58188:9;58179:7;58175:23;58171:32;58168:2;;;-1:-1;;58206:12;58168:2;-1:-1;;25810:13;;58369:2;58419:22;;;25810:13;;;;;-1:-1;58162:305::o;58474:672::-;;;;;58640:3;58628:9;58619:7;58615:23;58611:33;58608:2;;;-1:-1;;58647:12;58608:2;-1:-1;;25810:13;;58810:2;58860:22;;25810:13;58929:2;58979:22;;25810:13;59048:2;59098:22;;;25810:13;;;;;-1:-1;25810:13;;-1:-1;58602:544;-1:-1;58602:544::o;59153:809::-;;;;;;59336:3;59324:9;59315:7;59311:23;59307:33;59304:2;;;-1:-1;;59343:12;59304:2;-1:-1;;25810:13;;59506:2;59556:22;;25810:13;59625:2;59675:22;;25810:13;59744:2;59794:22;;25810:13;59863:3;59914:22;;;25810:13;;;;;-1:-1;25810:13;;-1:-1;25810:13;;-1:-1;59298:664;-1:-1;59298:664::o;59969:259::-;;60082:2;60070:9;60061:7;60057:23;60053:32;60050:2;;;-1:-1;;60088:12;60050:2;26223:6;26217:13;26235:31;26260:5;26235:31;:::i;61898:127::-;-1:-1;;;;;130608:54;61975:45;;61969:56::o;62293:690::-;;62486:5;123801:12;126194:6;126189:3;126182:19;126231:4;;126226:3;126222:14;62498:93;;126231:4;62662:5;122445:14;-1:-1;62701:260;62726:6;62723:1;62720:13;62701:260;;;62787:13;;-1:-1;;;;;130608:54;61975:45;;60389:14;;;;125153;;;;17592:18;62741:9;62701:260;;;-1:-1;62967:10;;62417:566;-1:-1;;;;;62417:566::o;63022:690::-;;63215:5;123801:12;126194:6;126189:3;126182:19;126231:4;;126226:3;126222:14;63227:93;;126231:4;63391:5;122445:14;-1:-1;63430:260;63455:6;63452:1;63449:13;63430:260;;;63516:13;;69598:37;;60571:14;;;;125153;;;;63477:1;63470:9;63430:260;;68608:709;;68795:5;124894:12;126194:6;126189:3;126182:19;126231:4;;126226:3;126222:14;68807:93;;123638:3;-1:-1;123628:14;126231:4;-1:-1;123657:18;-1:-1;69007:288;69032:6;69029:1;69026:13;69007:288;;;134223:11;;69598:37;;61721:14;;;;69054:1;126037:14;;;;69047:9;69007:288;;70215:323;;70347:5;123801:12;126194:6;126189:3;126182:19;70430:52;70475:6;126231:4;126226:3;126222:14;126231:4;70456:5;70452:16;70430:52;:::i;:::-;134331:7;134315:14;-1:-1;;134311:28;70494:39;;;;126231:4;70494:39;;70295:243;-1:-1;;70295:243::o;74437:1056::-;;74662:16;74656:23;69605:3;69598:37;74835:4;74828:5;74824:16;74818:23;74835:4;74899:3;74895:14;69598:37;74998:4;74991:5;74987:16;74981:23;74998:4;75062:3;75058:14;69598:37;75154:4;75147:5;75143:16;75137:23;75154:4;75218:3;75214:14;69598:37;75312:4;75305:5;75301:16;75295:23;74588:4;75312;75342:3;75338:14;75331:38;75384:71;74588:4;74583:3;74579:14;75436:12;75384:71;:::i;76225:678::-;76445:23;;-1:-1;;;;;130608:54;61975:45;;76637:4;76626:16;;;76620:23;-1:-1;;;;;;128438:78;;;76695:14;;;69826:36;;;;76809:4;76798:16;;;76792:23;128438:78;76867:14;;69826:36;76345:558::o;77581:835::-;77804:23;;-1:-1;;;;;130608:54;;;61975:45;;77990:4;77979:16;;;77973:23;128272:13;128265:21;78044:14;;;69380:34;78143:4;78132:16;;;78126:23;130608:54;;;78219:14;;;61975:45;78326:4;78315:16;;;78309:23;128272:13;128265:21;78380:14;;69380:34;77709:707::o;78490:582::-;;78720:16;78714:23;69605:3;69598:37;78891:4;78884:5;78880:16;78874:23;78641:4;78891;78921:3;78917:14;78910:38;78963:71;78641:4;78636:3;78632:14;79015:12;78963:71;:::i;79162:1073::-;;79412:16;79406:23;69605:3;69598:37;79584:4;79577:5;79573:16;79567:23;17592:18;;130619:42;;;;128082:5;130608:54;79584:4;79648:3;79644:14;61975:45;130619:42;79746:4;79739:5;79735:16;79729:23;130608:54;79746:4;79810:3;79806:14;61975:45;130619:42;79900:4;79893:5;79889:16;79883:23;130608:54;79900:4;79964:3;79960:14;61975:45;;;80054:4;80047:5;80043:16;80037:23;79331:4;80054;80084:3;80080:14;80073:38;80126:71;79331:4;79326:3;79322:14;80178:12;80126:71;:::i;80307:2141::-;80559:87;80631:14;80536:16;80530:23;80559:87;:::i;:::-;80731:4;80724:5;80720:16;80714:23;80743:87;80731:4;80819:3;80815:14;80801:12;80743:87;:::i;:::-;;80916:4;80909:5;80905:16;80899:23;80928:63;80916:4;80980:3;80976:14;80962:12;80928:63;:::i;:::-;;81077:4;81070:5;81066:16;81060:23;81089:63;81077:4;81141:3;81137:14;81123:12;81089:63;:::i;:::-;;81246:4;81239:5;81235:16;81229:23;81258:63;81246:4;81310:3;81306:14;81292:12;81258:63;:::i;:::-;;81401:4;81394:5;81390:16;81384:23;81413:63;81401:4;81465:3;81461:14;81447:12;81413:63;:::i;:::-;;81556:4;81549:5;81545:16;81539:23;81568:63;81556:4;81620:3;81616:14;81602:12;81568:63;:::i;:::-;;81712:4;81705:5;81701:16;81695:23;81724:63;81712:4;81776:3;81772:14;81758:12;81724:63;:::i;:::-;;81874:6;;81867:5;81863:18;81857:25;81888:65;81874:6;81940:3;81936:16;81922:12;81888:65;:::i;:::-;-1:-1;;82032:6;82021:18;;;82015:25;82094:16;;;69598:37;82192:6;82181:18;;;82175:25;82206:63;82252:16;;;82175:25;82206:63;:::i;:::-;-1:-1;;82348:6;82337:18;;;82331:25;82410:16;;69598:37;80429:2019::o;82518:800::-;132805:42;82746:16;82740:23;132805:42;:::i;:::-;72557:3;72550:66;131020:4;82924;82917:5;82913:16;82907:23;131009:16;82924:4;82984:3;82980:14;84712:35;83071:4;83064:5;83060:16;83054:23;83071:4;83135:3;83131:14;69598:37;83222:4;83215:5;83211:16;83205:23;83222:4;83286:3;83282:14;69598:37;82638:680;;:::o;84091:103::-;-1:-1;;;;;130488:46;84152:37;;84146:48::o;84548:100::-;-1:-1;;;;;130907:30;84607:36;;84601:47::o;84759:291::-;;133585:6;133580:3;133575;133562:30;133623:16;;133616:27;;;133623:16;84903:147;-1:-1;84903:147::o;85057:271::-;;71055:5;123801:12;71166:52;71211:6;71206:3;71199:4;71192:5;71188:16;71166:52;:::i;:::-;71230:16;;;;;85191:137;-1:-1;;85191:137::o;85335:222::-;-1:-1;;;;;130608:54;;;;61975:45;;85462:2;85447:18;;85433:124::o;85564:349::-;-1:-1;;;;;130608:54;;;;61828:58;;85899:2;85884:18;;69598:37;85727:2;85712:18;;85698:215::o;85920:333::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;86239:2;86224:18;;61975:45;86075:2;86060:18;;86046:207::o;86260:556::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;86636:2;86621:18;;61975:45;130608:54;;;86719:2;86704:18;;61975:45;130608:54;;;86802:2;86787:18;;61975:45;86471:3;86456:19;;86442:374::o;86823:704::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;87249:2;87234:18;;61975:45;130608:54;;87332:2;87317:18;;61975:45;87084:3;87369:2;87354:18;;87347:48;;;86823:704;;87409:108;;87069:19;;87503:6;87409:108;:::i;87534:698::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;87957:2;87942:18;;61975:45;130608:54;;88040:2;88025:18;;61975:45;87792:3;88077:2;88062:18;;88055:48;;;87534:698;;88117:105;;87777:19;;88208:6;88117:105;:::i;88239:556::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;88615:2;88600:18;;61975:45;130608:54;;88698:2;88683:18;;61975:45;88781:2;88766:18;;69598:37;;;;88450:3;88435:19;;88421:374::o;88802:432::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;;89143:2;89128:18;;61975:45;128272:13;;128265:21;89220:2;89205:18;;69380:34;88979:2;88964:18;;88950:284::o;89241:628::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;89629:2;89614:18;;61975:45;128272:13;;128265:21;89706:2;89691:18;;69380:34;89464:3;89743:2;89728:18;;89721:48;;;89241:628;;89783:76;;89449:19;;89845:6;89783:76;:::i;89876:444::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;;;90223:2;90208:18;;61975:45;90306:2;90291:18;;69598:37;;;;90059:2;90044:18;;90030:290::o;90327:768::-;-1:-1;;;;;130608:54;;;61975:45;;130608:54;;90757:2;90742:18;;61975:45;90840:2;90825:18;;69598:37;;;90931:2;90916:18;;73134:58;;;130619:42;90968:3;90953:19;;90946:49;;;90327:768;;91009:76;;90577:19;;91071:6;91009:76;:::i;:::-;91001:84;90563:532;-1:-1;;;;;;;90563:532::o;91102:740::-;-1:-1;;;;;130608:54;;61975:45;;91385:2;91503;91488:18;;91481:48;;;91102:740;;91543:108;;91370:18;;91637:6;91543:108;:::i;:::-;91699:9;91693:4;91689:20;91684:2;91673:9;91669:18;91662:48;91724:108;91827:4;91818:6;91724:108;:::i;91849:876::-;-1:-1;;;;;130608:54;;61975:45;;91849:876;133087:38;72919:5;133087:38;:::i;:::-;92349:2;92338:9;92334:18;72864:62;92172:3;92386:2;92375:9;92371:18;92364:48;92426:108;92172:3;92161:9;92157:19;92520:6;92426:108;:::i;:::-;92582:9;92576:4;92572:20;92567:2;92556:9;92552:18;92545:48;92607:108;92710:4;92701:6;92607:108;:::i;92732:1644::-;-1:-1;;;;;130608:54;;;61975:45;;92732:1644;;93279:3;;129576:54;129624:5;129576:54;:::i;:::-;133087:38;93456:2;93445:9;93441:18;72864:62;93279:3;93493:2;93482:9;93478:18;93471:48;93533:108;93279:3;93268:9;93264:19;93627:6;93533:108;:::i;:::-;93525:116;;93689:9;93683:4;93679:20;93674:2;93663:9;93659:18;93652:48;93714:108;93817:4;93808:6;93714:108;:::i;:::-;130608:54;;;93901:3;93886:19;;61975:45;93706:116;-1:-1;129576:54;129624:5;129576:54;:::i;:::-;133087:38;93997:3;93986:9;93982:19;72864:62;94051:9;94045:4;94041:20;94035:3;94024:9;94020:19;94013:49;94076:108;94179:4;94170:6;94076:108;:::i;:::-;94068:116;;94233:9;94227:4;94223:20;94217:3;94206:9;94202:19;94195:49;94258:108;94361:4;94352:6;94258:108;:::i;:::-;94250:116;93250:1126;-1:-1;;;;;;;;;;;93250:1126::o;94383:517::-;-1:-1;;;;;130608:54;;61975:45;;94606:2;94724;94709:18;;94702:48;;;94383:517;;94764:126;;94591:18;;94876:6;94764:126;:::i;95247:810::-;-1:-1;;;;;130608:54;;;61975:45;;95698:2;95683:18;;69598:37;;;130608:54;;;95781:2;95766:18;;61975:45;130608:54;;95864:2;95849:18;;61975:45;130619:42;95901:3;95886:19;;95879:49;;;95247:810;;95942:105;;95518:19;;96033:6;95942:105;:::i;96064:629::-;;96319:2;96340:17;96333:47;96394:108;96319:2;96308:9;96304:18;96488:6;96394:108;:::i;:::-;96550:9;96544:4;96540:20;96535:2;96524:9;96520:18;96513:48;96575:108;96678:4;96669:6;96575:108;:::i;96700:481::-;;96905:2;96926:17;96919:47;96980:108;96905:2;96894:9;96890:18;97074:6;96980:108;:::i;:::-;96972:116;;69628:5;97167:2;97156:9;97152:18;69598:37;96876:305;;;;;:::o;97188:665::-;;97461:2;97450:9;97446:18;97461:2;97482:17;97475:47;97536:126;63967:5;123801:12;126194:6;126189:3;126182:19;126222:14;97450:9;126222:14;63979:102;;126231:4;;;126222:14;126231:4;64138:6;64134:17;97450:9;64125:27;;126231:4;64232:5;122445:14;-1:-1;64271:357;64296:6;64293:1;64290:13;64271:357;;;64348:20;;97450:9;64352:4;64348:20;;64343:3;64336:33;60719:64;60779:3;64403:6;64397:13;60719:64;:::i;:::-;64607:14;;;;64417:90;-1:-1;125153:14;;;;64318:1;64311:9;64271:357;;;64275:14;;97710:9;97704:4;97700:20;126231:4;97684:9;97680:18;97673:48;97735:108;97838:4;97829:6;97735:108;:::i;97860:486::-;98095:2;98109:47;;;123801:12;;98080:18;;;126182:19;;;97860:486;;98095:2;126222:14;;;;;;67227:17;;;67218:27;;;;122445:14;;;97860:486;67384:417;67409:6;67406:1;67403:13;67384:417;;;67461:20;;;-1:-1;;67461:20;67449:33;;67510:13;;75800:23;;75836:38;;;75889:71;75725:14;;;75800:23;75889:71;:::i;:::-;76037:16;;;76031:23;128272:13;128265:21;76102:14;;;69380:34;;;;67780:14;;;;75881:79;-1:-1;125153:14;;;;67431:1;67424:9;67384:417;;;-1:-1;98162:174;;98066:280;-1:-1;;;;;;;;98066:280::o;98353:370::-;;98530:2;98551:17;98544:47;98605:108;98530:2;98519:9;98515:18;98699:6;98605:108;:::i;98730:210::-;128272:13;;128265:21;69380:34;;98851:2;98836:18;;98822:118::o;98947:580::-;128272:13;;128265:21;69380:34;;-1:-1;;;;;130608:54;;99332:2;99317:18;;61975:45;99174:2;99369;99354:18;;99347:48;;;98947:580;;99409:108;;99159:18;;99503:6;99409:108;:::i;99534:222::-;69598:37;;;99661:2;99646:18;;99632:124::o;99763:676::-;;69628:5;69605:3;69598:37;100014:2;100132;100121:9;100117:18;100110:48;100172:76;100014:2;100003:9;99999:18;100234:6;100172:76;:::i;100446:306::-;;100591:2;100612:17;100605:47;100666:76;100591:2;100580:9;100576:18;100728:6;100666:76;:::i;100759:417::-;;100932:2;100953:17;100946:47;101007:76;100932:2;100921:9;100917:18;101069:6;101007:76;:::i;101183:536::-;-1:-1;;;;;130608:54;;;71333:64;;130608:54;;;;101624:2;101609:18;;71333:64;130746:8;130735:20;;;101705:2;101690:18;;84270:36;101412:2;101397:18;;101383:336::o;102273:519::-;-1:-1;;;;;130608:54;;71333:64;;102497:2;102634;102619:18;;102612:48;;;102273:519;;102674:108;;102482:18;;102768:6;102674:108;:::i;102799:482::-;103001:2;102986:18;;129576:54;129624:5;129576:54;:::i;:::-;72191:69;;;103184:2;103169:18;;69598:37;;;;103267:2;103252:18;;;69598:37;102972:309;:::o;103288:512::-;103505:2;103490:18;;134686:1;134676:12;;134666:2;;134692:9;103807:1144;;104264:3;104253:9;104249:19;134912:1;134905:5;134902:12;134892:2;;134918:9;134892:2;132948:36;72716:3;72709:60;104393:2;104264:3;104393:2;104382:9;104378:18;104371:48;104433:168;65856:5;123801:12;126194:6;126189:3;126182:19;126222:14;;;;104253:9;126222:14;65868:123;;126222:14;104393:2;66048:6;66044:17;104253:9;66035:27;;66023:39;;104393:2;66163:5;122445:14;-1:-1;66202:420;66227:6;66224:1;66221:13;66202:420;;;66279:20;;104253:9;66283:4;66279:20;;66274:3;66267:33;61169:106;61271:3;66334:6;66328:13;61169:106;:::i;:::-;66348:132;-1:-1;66601:14;;;;125153;;;;66249:1;66242:9;66202:420;;;66206:14;;;;;104649:9;104643:4;104639:20;104634:2;104623:9;104619:18;104612:48;104674:122;104791:4;104782:6;104674:122;:::i;:::-;104666:130;;;104807:134;104937:2;104926:9;104922:18;104913:6;104807:134;:::i;104958:436::-;130326:2;130315:21;;;73007:36;;130315:21;;;;105297:2;105282:18;;73007:36;105380:2;105365:18;;69598:37;;;;105137:2;105122:18;;105108:286::o;105401:438::-;130326:2;130315:21;;;73007:36;;105608:3;105593:19;;105703:126;105825:2;105810:18;;105801:6;105703:126;:::i;106299:416::-;106499:2;106513:47;;;73429:2;106484:18;;;126182:19;73465:34;126222:14;;;73445:55;-1:-1;;;73520:12;;;73513:28;73560:12;;;106470:245::o;106722:416::-;106922:2;106936:47;;;73811:2;106907:18;;;126182:19;73847:34;126222:14;;;73827:55;-1:-1;;;73902:12;;;73895:29;73943:12;;;106893:245::o;107145:416::-;107345:2;107359:47;;;74194:2;107330:18;;;126182:19;74230:34;126222:14;;;74210:55;-1:-1;;;74285:12;;;74278:29;74326:12;;;107316:245::o;107568:806::-;;107894:125;108001:17;107992:6;107894:125;:::i;:::-;73036:5;130326:2;130315:21;108096:2;108085:9;108081:18;73007:36;73036:5;130326:2;130315:21;108177:3;108166:9;108162:19;73007:36;107879:3;108215;108204:9;108200:19;108193:49;108256:108;107879:3;107868:9;107864:19;108350:6;108256:108;:::i;108381:800::-;;108704:125;108811:17;108802:6;108704:125;:::i;:::-;73036:5;130326:2;130315:21;108906:2;108895:9;108891:18;73007:36;73036:5;130326:2;130315:21;108987:3;108976:9;108972:19;73007:36;108689:3;109025;109014:9;109010:19;109003:49;109066:105;108689:3;108678:9;108674:19;109157:6;109066:105;:::i;109188:831::-;77218:23;;-1:-1;;;;;130608:54;;;61975:45;;77391:4;77380:16;;;77374:23;130608:54;;77451:14;;;61975:45;130608:54;;;109743:2;109728:18;;61975:45;130608:54;;109826:2;109811:18;;61975:45;130619:42;109863:3;109848:19;;109841:49;;;109188:831;;109904:105;;109497:19;;109995:6;109904:105;:::i;110026:740::-;;110309:2;110330:17;110323:47;110384:108;110309:2;110298:9;110294:18;110478:6;110384:108;:::i;:::-;110540:9;110534:4;110530:20;110525:2;110514:9;110510:18;110503:48;110565:108;110668:4;110659:6;110565:108;:::i;:::-;110557:116;;;69628:5;110752:2;110741:9;110737:18;69598:37;110280:486;;;;;;:::o;110773:882::-;;111099:3;111121:17;111114:47;111175:126;111099:3;111088:9;111084:19;111287:6;111175:126;:::i;:::-;-1:-1;;;;;130608:54;;;111380:2;111365:18;;61975:45;130608:54;;111463:2;111448:18;;61975:45;111505:20;;;111500:2;111485:18;;111478:48;111540:105;111509:4;111631:6;111540:105;:::i;111662:740::-;;111941:3;111963:17;111956:47;112017:126;111941:3;111930:9;111926:19;112129:6;112017:126;:::i;:::-;-1:-1;;;;;130608:54;;;112222:2;112207:18;;61975:45;130608:54;;;;112305:2;112290:18;;61975:45;112388:2;112373:18;69598:37;112009:134;111912:490;-1:-1;;111912:490::o;112409:740::-;;112688:3;112710:17;112703:47;112764:126;112688:3;112677:9;112673:19;112876:6;112764:126;:::i;:::-;112969:2;112954:18;;69598:37;;;;-1:-1;;;;;;130608:54;;;113052:2;113037:18;;61975:45;130608:54;;113135:2;113120:18;;;61975:45;112756:134;112659:490;-1:-1;112659:490::o;113156:555::-;113421:3;113406:19;;113436:127;113410:9;113536:6;113436:127;:::i;:::-;113574;113696:3;113685:9;113681:19;113672:6;113574:127;:::i;113718:703::-;114029:3;114014:19;;114044:127;114018:9;114144:6;114044:127;:::i;:::-;114182;114304:3;114293:9;114289:19;114280:6;114182:127;:::i;:::-;-1:-1;;;;;130608:54;;;;114406:3;114391:19;;;;71333:64;114000:421;;-1:-1;;114000:421::o;116293:481::-;;69628:5;69605:3;69598:37;116498:2;116616;116605:9;116601:18;116594:48;116656:108;116498:2;116487:9;116483:18;116750:6;116656:108;:::i;116781:740::-;;69628:5;69605:3;69598:37;117064:2;117182;117171:9;117167:18;117160:48;117222:108;117064:2;117053:9;117049:18;117316:6;117222:108;:::i;:::-;117378:9;117372:4;117368:20;117363:2;117352:9;117348:18;117341:48;117403:108;117506:4;117497:6;117403:108;:::i;117528:780::-;69598:37;;;117960:2;117945:18;;69598:37;;;;118043:2;118028:18;;69598:37;;;;118126:2;118111:18;;69598:37;118209:3;118194:19;;69598:37;118293:3;118278:19;;69598:37;117795:3;117780:19;;117766:542::o;118315:506::-;;;118450:11;118437:25;118501:48;;118525:8;118509:14;118505:29;118501:48;118481:18;118477:73;118467:2;;-1:-1;;118554:12;118467:2;118581:33;;118635:18;;;-1:-1;;;;;;118662:30;;118659:2;;;-1:-1;;118695:12;118659:2;118540:4;118723:13;;-1:-1;118509:14;118755:38;;;118745:49;;118742:2;;;118807:1;;118797:12;118742:2;118405:416;;;;;:::o;118828:256::-;118890:2;118884:9;118916:17;;;-1:-1;;;;;118976:34;;119012:22;;;118973:62;118970:2;;;119048:1;;119038:12;118970:2;118890;119057:22;118868:216;;-1:-1;118868:216::o;119091:304::-;;-1:-1;;;;;119242:6;119239:30;119236:2;;;-1:-1;;119272:12;119236:2;-1:-1;119317:4;119305:17;;;119370:15;;119173:222::o;122002:321::-;;-1:-1;;;;;122137:6;122134:30;122131:2;;;-1:-1;;122167:12;122131:2;-1:-1;134331:7;122221:17;-1:-1;;122217:33;122308:4;122298:15;;122068:255::o;129487:148::-;129559:16;134552:1;134542:12;;134532:2;;134558:9;133658:268;133723:1;133730:101;133744:6;133741:1;133738:13;133730:101;;;133811:11;;;133805:18;133792:11;;;133785:39;133766:2;133759:10;133730:101;;;133846:6;133843:1;133840:13;133837:2;;;133723:1;133902:6;133897:3;133893:16;133886:27;133837:2;;133707:219;;;:::o;134462:112::-;134552:1;134545:5;134542:12;134532:2;;134558:9;134532:2;134526:48;:::o;135053:117::-;-1:-1;;;;;130608:54;;135112:35;;135102:2;;135161:1;;135151:12;135317:111;135398:5;128272:13;128265:21;135376:5;135373:32;135363:2;;135419:1;;135409:12;135559:115;-1:-1;;;;;;128438:78;;135617:34;;135607:2;;135665:1;;135655:12;137380:115;137465:5;130326:2;130315:21;137441:5;137438:34;137428:2;;137486:1;;137476:12;137624:117;-1:-1;;;;;137711:5;130488:46;137686:5;137683:35;137673:2;;137732:1;;137722:12;138116:113;131020:4;138199:5;131009:16;138176:5;138173:33;138163:2;;138220:1;;138210:12"
            }
        }
    },
    "sourceTreeHashHex": "0x7e951af3a8348be18b364fdf6575e4703f7332c7619611d3a698e2e2099f784d",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract BalancerSampler is\n    SamplerBase\n{\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerGlobal(\n        address poolAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromBalancer(\n            poolAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerGlobal(\n        address poolAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromBalancer(\n            poolAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./SamplerBase.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ncontract SamplerBase\n{\n    /// @dev Stored Sample values for each Sampler to pull\n    uint256[] internal SAMPLE_VALUES = new uint256[](0);\n\n    function setSampleValues(uint256[] memory sampleValues)\n        public\n    {\n        SAMPLE_VALUES = sampleValues;\n    }\n\n    modifier resetsSampleValues\n    {\n        uint256[] memory sampleValues = SAMPLE_VALUES;\n        _;\n        SAMPLE_VALUES = sampleValues;\n    }\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is\n    SamplerBase,\n    SamplerUtils\n{\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2Global(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromBalancerV2(\n            poolInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2Global(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromBalancerV2(\n            poolInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal \n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\nimport \"./SamplerBase.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    SamplerBase,\n    CompilerHack\n{\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancorGlobal(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        (bancorNetwork, path, makerTokenAmounts) = _sampleSellsFromBancor(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancorGlobal(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](SAMPLE_VALUES.length);\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./CompoundSampler.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./SamplerBase.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    uint256 constant private EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompoundGlobal(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromCompound(\n            cToken,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) / exchangeRate;\n            }\n\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * exchangeRate) / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompoundGlobal(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromCompound(\n            cToken,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = makerTokenAmounts[i] * exchangeRate / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals)/exchangeRate;\n            }\n        }\n    }\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract CurveSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurveGlobal(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromCurve(\n            curveInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurveGlobal(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromCurve(\n            curveInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 29,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 49,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOGlobal(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        (sellBase, pool, makerTokenAmounts) = this.sampleSellsFromDODO(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOGlobal(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        (sellBase, pool, takerTokenAmounts) = _sampleBuysFromDODO(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2Global(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        (sellBase, pool, makerTokenAmounts) = this.sampleSellsFromDODOV2(\n            registry,\n            offset,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2Global(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        (sellBase, pool, takerTokenAmounts) = _sampleBuysFromDODOV2(\n            registry,\n            offset,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 10,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract KyberSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetworkGlobal(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        (reserveId, hint, makerTokenAmounts) = this.sampleSellsFromKyberNetwork(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetworkGlobal(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        (reserveId, hint, takerTokenAmounts) = _sampleBuysFromKyberNetwork(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function _sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 30,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerBase.sol\";\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler is\n    SamplerBase\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmmGlobal(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        (pools, makerTokenAmounts) = _sampleSellsFromKyberDmm(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmmGlobal(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        (pools, takerTokenAmounts) = _sampleBuysFromKyberDmm(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "./LidoSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract LidoSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLidoGlobal(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromLido(\n            lidoInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLidoGlobal(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromLido(\n            lidoInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderGlobal(\n        address providerAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromLiquidityProvider(\n            providerAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderGlobal(\n        address providerAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromLiquidityProvider(\n            providerAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 50,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 14,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsmGlobal(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromMakerPsm(\n            psmInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function _sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsmGlobal(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromMakerPsm(\n            psmInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "./MultiBridgeSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract MStableSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStableGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromMStable(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStableGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromMStable(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswapGlobal(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        (pool, makerTokenAmounts) = this.sampleSellsFromMooniswap(\n            registry,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswapGlobal(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        (pool, takerTokenAmounts) = _sampleBuysFromMooniswap(\n            registry,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "./NativeOrderSampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 20,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract ShellSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShellGlobal(\n        address pool,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromShell(\n            pool,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShellGlobal(\n        address pool,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromShell(\n            pool,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "./SmoothySampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\nimport \"./SamplerBase.sol\";\n\ncontract SmoothySampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothyGlobal(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromSmoothy(\n            smoothyInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothyGlobal(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromSmoothy(\n            smoothyInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ISmoothy.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract TwoHopSampler is\n    SamplerBase\n{\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        resetsSampleValues()\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        uint256[] memory tmpSampleValues = new uint256[](1);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = sellAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = intermediateAssetAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    ) \n        resetsSampleValues()\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        uint256[] memory tmpSampleValues = new uint256[](1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = buyAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = intermediateAssetAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromUniswap(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromUniswap(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract UniswapV2Sampler is\n    SamplerBase\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2Global(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromUniswapV2(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2Global(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromUniswapV2(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "./UniswapV3Sampler.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    SamplerBase\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 600e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3Global(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (uniswapPaths, makerTokenAmounts) = _sampleSellsFromUniswapV3(\n            quoter,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3Global(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (uniswapPaths, takerTokenAmounts) = _sampleBuysFromUniswapV3(\n            quoter,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n"
        },
        "./UtilitySampler.sol": {
            "id": 26,
            "content": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getGasLeft()\n        public\n        returns (uint256)\n    {\n        return gasleft();\n    }\n\n    function getBlockNumber()\n        public\n        view\n        returns (uint256)\n    {\n        return block.number;\n    }\n}"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CompoundSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./NativeOrderSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\nimport \"./UniswapV3Sampler.sol\";\nimport \"./UtilitySampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CompoundSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    NativeOrderSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler,\n    UniswapV3Sampler,\n    UtilitySampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract BalancerSampler is\n    SamplerBase\n{\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerGlobal(\n        address poolAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromBalancer(\n            poolAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerGlobal(\n        address poolAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromBalancer(\n            poolAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                // Handles this revert scenario:\n                // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n                if (amount > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                    break;\n                }\n\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./SamplerBase.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ncontract SamplerBase\n{\n    /// @dev Stored Sample values for each Sampler to pull\n    uint256[] internal SAMPLE_VALUES = new uint256[](0);\n\n    function setSampleValues(uint256[] memory sampleValues)\n        public\n    {\n        SAMPLE_VALUES = sampleValues;\n    }\n\n    modifier resetsSampleValues\n    {\n        uint256[] memory sampleValues = SAMPLE_VALUES;\n        _;\n        SAMPLE_VALUES = sampleValues;\n    }\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is\n    SamplerBase,\n    SamplerUtils\n{\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2Global(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromBalancerV2(\n            poolInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2Global(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromBalancerV2(\n            poolInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal \n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the return data is invalid or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        // Revert if the call reverted.\n        if (!didSucceed) {\n            LibRichErrorsV06.rrevert(resultData);\n        }\n        // If we get back 0 returndata, this may be a non-standard ERC-20 that\n        // does not return a boolean. Check that it at least contains code.\n        if (resultData.length == 0) {\n            uint256 size;\n            assembly { size := extcodesize(target) }\n            require(size > 0, \"invalid token address, contains no code\");\n            return;\n        }\n        // If we get back at least 32 bytes, we know the target address\n        // contains code, and we assume it is a token that returned a boolean\n        // success value, which must be true.\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return;\n            } else {\n                LibRichErrorsV06.rrevert(resultData);\n            }\n        }\n        // If 0 < returndatasize < 32, the target is a contract, but not a\n        // valid token.\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\nimport \"./SamplerBase.sol\";\n\ncontract CompilerHack {}\n\ncontract BancorSampler is\n    SamplerBase,\n    CompilerHack\n{\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancorGlobal(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        (bancorNetwork, path, makerTokenAmounts) = _sampleSellsFromBancor(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancorGlobal(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](SAMPLE_VALUES.length);\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CompoundSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./SamplerBase.sol\";\n\n// Minimal CToken interface\ninterface ICToken {\n    function mint(uint mintAmount) external returns (uint);\n    function redeem(uint redeemTokens) external returns (uint);\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\n    function exchangeRateStored() external view returns (uint);\n    function decimals() external view returns (uint8);\n}\n\ncontract CompoundSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    uint256 constant private EXCHANGE_RATE_SCALE = 1e10;\n\n    function sampleSellsFromCompoundGlobal(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromCompound(\n            cToken,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleSellsFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals) / exchangeRate;\n            }\n\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                makerTokenAmounts[i] = (takerTokenAmounts[i] * exchangeRate) / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        }\n    }\n\n    function sampleBuysFromCompoundGlobal(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromCompound(\n            cToken,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleBuysFromCompound(\n        ICToken cToken,\n        IERC20TokenV06 takerToken,\n        IERC20TokenV06 makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        // Exchange rate is scaled by 1 * 10^(18 - 8 + Underlying Token Decimals\n        uint256 exchangeRate = cToken.exchangeRateStored();\n        uint256 cTokenDecimals = uint256(cToken.decimals());\n\n        if (address(makerToken) == address(cToken)) {\n            // mint\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = makerTokenAmounts[i] * exchangeRate / (EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals);\n            }\n        } else if (address(takerToken) == address(cToken)) {\n            // redeem\n            for (uint256 i = 0; i < numSamples; i++) {\n                takerTokenAmounts[i] = (makerTokenAmounts[i] * EXCHANGE_RATE_SCALE * 10 ** cTokenDecimals)/exchangeRate;\n            }\n        }\n    }\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract CurveSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurveGlobal(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromCurve(\n            curveInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurveGlobal(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromCurve(\n            curveInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            uint256 eps = 0;\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            if (eps == 0 || eps > APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                break;\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOGlobal(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        (sellBase, pool, makerTokenAmounts) = this.sampleSellsFromDODO(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOGlobal(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        (sellBase, pool, takerTokenAmounts) = _sampleBuysFromDODO(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2Global(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        (sellBase, pool, makerTokenAmounts) = this.sampleSellsFromDODOV2(\n            registry,\n            offset,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2Global(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        (sellBase, pool, takerTokenAmounts) = _sampleBuysFromDODOV2(\n            registry,\n            offset,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract KyberSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetworkGlobal(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        (reserveId, hint, makerTokenAmounts) = this.sampleSellsFromKyberNetwork(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetworkGlobal(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        (reserveId, hint, takerTokenAmounts) = _sampleBuysFromKyberNetwork(\n            opts,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function _sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerBase.sol\";\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler is\n    SamplerBase\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmmGlobal(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        (pools, makerTokenAmounts) = _sampleSellsFromKyberDmm(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmmGlobal(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        (pools, takerTokenAmounts) = _sampleBuysFromKyberDmm(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                if (allPools.length == 0) {\n                    return new address[](0);\n                }\n\n                uint256 maxSupply = 0;\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "./LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract LidoSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLidoGlobal(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromLido(\n            lidoInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLidoGlobal(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromLido(\n            lidoInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProviderGlobal(\n        address providerAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromLiquidityProvider(\n            providerAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProviderGlobal(\n        address providerAddress,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromLiquidityProvider(\n            providerAddress,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsmGlobal(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromMakerPsm(\n            psmInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Maker PSM\n    function _sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsmGlobal(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromMakerPsm(\n            psmInfo,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    function _sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract MStableSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStableGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromMStable(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStableGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        (takerTokenAmounts) = _sampleBuysFromMStable(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswapGlobal(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        (pool, makerTokenAmounts) = this.sampleSellsFromMooniswap(\n            registry,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswapGlobal(\n        address registry,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        (pool, takerTokenAmounts) = _sampleBuysFromMooniswap(\n            registry,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./NativeOrderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol\";\n\n\ninterface IExchange {\n\n    enum OrderStatus {\n        INVALID,\n        FILLABLE,\n        FILLED,\n        CANCELLED,\n        EXPIRED\n    }\n\n    /// @dev A standard OTC or OO limit order.\n    struct LimitOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        uint128 takerTokenFeeAmount;\n        address maker;\n        address taker;\n        address sender;\n        address feeRecipient;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev An RFQ limit order.\n    struct RfqOrder {\n        IERC20TokenV06 makerToken;\n        IERC20TokenV06 takerToken;\n        uint128 makerAmount;\n        uint128 takerAmount;\n        address maker;\n        address taker;\n        address txOrigin;\n        bytes32 pool;\n        uint64 expiry;\n        uint256 salt;\n    }\n\n    /// @dev Info on a limit or RFQ order.\n    struct OrderInfo {\n        bytes32 orderHash;\n        OrderStatus status;\n        uint128 takerTokenFilledAmount;\n    }\n\n    /// @dev Allowed signature types.\n    enum SignatureType {\n        ILLEGAL,\n        INVALID,\n        EIP712,\n        ETHSIGN\n    }\n\n    /// @dev Encoded EC signature.\n    struct Signature {\n        // How to validate the signature.\n        SignatureType signatureType;\n        // EC Signature data.\n        uint8 v;\n        // EC Signature data.\n        bytes32 r;\n        // EC Signature data.\n        bytes32 s;\n    }\n\n    /// @dev Get the order info for a limit order.\n    /// @param order The limit order.\n    /// @return orderInfo Info about the order.\n    function getLimitOrderInfo(LimitOrder memory order)\n        external\n        view\n        returns (OrderInfo memory orderInfo);\n\n    /// @dev Get order info, fillable amount, and signature validity for a limit order.\n    ///      Fillable amount is determined using balances and allowances of the maker.\n    /// @param order The limit order.\n    /// @param signature The order signature.\n    /// @return orderInfo Info about the order.\n    /// @return actualFillableTakerTokenAmount How much of the order is fillable\n    ///         based on maker funds, in taker tokens.\n    /// @return isSignatureValid Whether the signature is valid.\n    function getLimitOrderRelevantState(\n        LimitOrder memory order,\n        Signature calldata signature\n    )\n        external\n        view\n        returns (\n            OrderInfo memory orderInfo,\n            uint128 actualFillableTakerTokenAmount,\n            bool isSignatureValid\n        );\n}\n\ncontract NativeOrderSampler {\n    using LibSafeMathV06 for uint256;\n    using LibBytesV06 for bytes;\n\n    /// @dev Gas limit for calls to `getOrderFillableTakerAmount()`.\n    uint256 constant internal DEFAULT_CALL_GAS = 200e3; // 200k\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    ///      maker/taker asset amounts (returning 0).\n    /// @param orders Native limit orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableTakerAssetAmounts How much taker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableTakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableTakerAssetAmounts)\n    {\n        orderFillableTakerAssetAmounts = new uint256[](orders.length);\n        for (uint256 i = 0; i != orders.length; i++) {\n            try\n                this.getLimitOrderFillableTakerAmount\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                       orders[i],\n                       orderSignatures[i],\n                       exchange\n                    )\n                returns (uint256 amount)\n            {\n                orderFillableTakerAssetAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                orderFillableTakerAssetAmounts[i] = 0;\n            }\n        }\n    }\n\n    /// @dev Queries the fillable taker asset amounts of native orders.\n    ///      Effectively ignores orders that have empty signatures or\n    /// @param orders Native orders to query.\n    /// @param orderSignatures Signatures for each respective order in `orders`.\n    /// @param exchange The V4 exchange.\n    /// @return orderFillableMakerAssetAmounts How much maker asset can be filled\n    ///         by each order in `orders`.\n    function getLimitOrderFillableMakerAssetAmounts(\n        IExchange.LimitOrder[] memory orders,\n        IExchange.Signature[] memory orderSignatures,\n        IExchange exchange\n    )\n        public\n        view\n        returns (uint256[] memory orderFillableMakerAssetAmounts)\n    {\n        orderFillableMakerAssetAmounts = getLimitOrderFillableTakerAssetAmounts(\n            orders,\n            orderSignatures,\n            exchange\n        );\n        // `orderFillableMakerAssetAmounts` now holds taker asset amounts, so\n        // convert them to maker asset amounts.\n        for (uint256 i = 0; i < orders.length; ++i) {\n            if (orderFillableMakerAssetAmounts[i] != 0) {\n                orderFillableMakerAssetAmounts[i] = LibMathV06.getPartialAmountCeil(\n                    orderFillableMakerAssetAmounts[i],\n                    orders[i].takerAmount,\n                    orders[i].makerAmount\n                );\n            }\n        }\n    }\n\n    /// @dev Get the fillable taker amount of an order, taking into account\n    ///      order state, maker fees, and maker balances.\n    function getLimitOrderFillableTakerAmount(\n        IExchange.LimitOrder memory order,\n        IExchange.Signature memory signature,\n        IExchange exchange\n    )\n        virtual\n        public\n        view\n        returns (uint256 fillableTakerAmount)\n    {\n        if (signature.signatureType == IExchange.SignatureType.ILLEGAL ||\n            signature.signatureType == IExchange.SignatureType.INVALID ||\n            order.makerAmount == 0 ||\n            order.takerAmount == 0)\n        {\n            return 0;\n        }\n\n        (\n            IExchange.OrderInfo memory orderInfo,\n            uint128 remainingFillableTakerAmount,\n            bool isSignatureValid\n        ) = exchange.getLimitOrderRelevantState(order, signature);\n\n        if (\n              orderInfo.status != IExchange.OrderStatus.FILLABLE ||\n              !isSignatureValid ||\n              order.makerToken == IERC20TokenV06(0)\n            ) {\n            return 0;\n        }\n\n        fillableTakerAmount = uint256(remainingFillableTakerAmount);\n    }\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract ShellSampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShellGlobal(\n        address pool,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromShell(\n            pool,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShellGlobal(\n        address pool,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromShell(\n            pool,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\nimport \"./SamplerBase.sol\";\n\ncontract SmoothySampler is\n    SamplerBase,\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothyGlobal(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = this.sampleSellsFromSmoothy(\n            smoothyInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothyGlobal(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromSmoothy(\n            smoothyInfo,\n            fromTokenIdx,\n            toTokenIdx,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract TwoHopSampler is\n    SamplerBase\n{\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        uint256 sourceIndex;\n        bytes returnData;\n    }\n\n    function sampleTwoHopSell(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        resetsSampleValues()\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 buyAmount\n        )\n    {\n        uint256 intermediateAssetAmount = 0;\n        uint256[] memory tmpSampleValues = new uint256[](1);\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = sellAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return (firstHop, secondHop, buyAmount);\n        }\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = intermediateAssetAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > buyAmount) {\n                    buyAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        bytes[] memory firstHopCalls,\n        bytes[] memory secondHopCalls,\n        uint256 buyAmount\n    ) \n        resetsSampleValues()\n        public\n        returns (\n            HopInfo memory firstHop,\n            HopInfo memory secondHop,\n            uint256 sellAmount\n        )\n    {\n        sellAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        uint256[] memory tmpSampleValues = new uint256[](1);\n        for (uint256 j = 0; j != secondHopCalls.length; ++j) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = buyAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(secondHopCalls[j]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    secondHop.sourceIndex = j;\n                    secondHop.returnData = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return (firstHop, secondHop, sellAmount);\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            // Set the temporary global sample values\n            tmpSampleValues[0] = intermediateAssetAmount;\n            SAMPLE_VALUES = tmpSampleValues;\n            (bool didSucceed, bytes memory returnData) = address(this).call(firstHopCalls[i]);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < sellAmount\n                ) {\n                    sellAmount = amount;\n                    firstHop.sourceIndex = i;\n                    firstHop.returnData = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./SamplerBase.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerBase,\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromUniswap(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapGlobal(\n        address router,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromUniswap(\n            router,\n            takerToken,\n            makerToken,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\nimport \"./SamplerBase.sol\";\n\n\ncontract UniswapV2Sampler is\n    SamplerBase\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2Global(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        makerTokenAmounts = _sampleSellsFromUniswapV2(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal \n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2Global(\n        address router,\n        address[] memory path\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleBuysFromUniswapV2(\n            router,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n",
        "./UniswapV3Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\nimport \"./SamplerBase.sol\";\n\ninterface IUniswapV3Quoter {\n    function factory()\n        external\n        view\n        returns (IUniswapV3Factory factory);\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (uint256 amountOut);\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (uint256 amountIn);\n}\n\ninterface IUniswapV3Factory {\n    function getPool(IERC20TokenV06 a, IERC20TokenV06 b, uint24 fee)\n        external\n        view\n        returns (IUniswapV3Pool pool);\n}\n\ninterface IUniswapV3Pool {\n    function token0() external view returns (IERC20TokenV06);\n    function token1() external view returns (IERC20TokenV06);\n    function fee() external view returns (uint24);\n}\n\ncontract UniswapV3Sampler is\n    SamplerBase\n{\n    /// @dev Gas limit for UniswapV3 calls. This is 100% a guess.\n    uint256 constant private QUOTE_GAS = 600e3;\n\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV3Global(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        (uniswapPaths, makerTokenAmounts) = _sampleSellsFromUniswapV3(\n            quoter,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n    /// @dev Sample sell quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function _sampleSellsFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory makerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n        uniswapPaths = new bytes[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < takerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topBuyAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                bytes memory uniswapPath = _toUniswapPath(path, poolPaths[j]);\n                try\n                    quoter.quoteExactInput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, takerTokenAmounts[i])\n                        returns (uint256 buyAmount)\n                {\n                    if (topBuyAmount <= buyAmount) {\n                        topBuyAmount = buyAmount;\n                        topUniswapPath = uniswapPath;\n                    }\n                } catch { }\n            }\n            // Break early if we can't complete the buys.\n            if (topBuyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = topBuyAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV3Global(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path\n    )\n        public\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        (uniswapPaths, takerTokenAmounts) = _sampleBuysFromUniswapV3(\n            quoter,\n            path,\n            SAMPLE_VALUES\n        );\n    }\n\n    /// @dev Sample buy quotes from UniswapV3.\n    /// @param quoter UniswapV3 Quoter contract.\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return uniswapPaths The encoded uniswap path for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function _sampleBuysFromUniswapV3(\n        IUniswapV3Quoter quoter,\n        IERC20TokenV06[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        returns (\n            bytes[] memory uniswapPaths,\n            uint256[] memory takerTokenAmounts\n        )\n    {\n        IUniswapV3Pool[][] memory poolPaths =\n            _getValidPoolPaths(quoter.factory(), path, 0);\n        IERC20TokenV06[] memory reversedPath = _reverseTokenPath(path);\n\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        uniswapPaths = new bytes[](makerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; ++i) {\n            // Pick the best result from all the paths.\n            bytes memory topUniswapPath;\n            uint256 topSellAmount = 0;\n            for (uint256 j = 0; j < poolPaths.length; ++j) {\n                // quoter requires path to be reversed for buys.\n                bytes memory uniswapPath = _toUniswapPath(\n                    reversedPath,\n                    _reversePoolPath(poolPaths[j])\n                );\n                try\n                    quoter.quoteExactOutput\n                        { gas: QUOTE_GAS }\n                        (uniswapPath, makerTokenAmounts[i])\n                        returns (uint256 sellAmount)\n                {\n                    if (topSellAmount == 0 || topSellAmount >= sellAmount) {\n                        topSellAmount = sellAmount;\n                        // But the output path should still be encoded for sells.\n                        topUniswapPath = _toUniswapPath(path, poolPaths[j]);\n                    }\n                } catch {}\n            }\n            // Break early if we can't complete the buys.\n            if (topSellAmount == 0) {\n                break;\n            }\n            takerTokenAmounts[i] = topSellAmount;\n            uniswapPaths[i] = topUniswapPath;\n        }\n    }\n\n    function _getValidPoolPaths(\n        IUniswapV3Factory factory,\n        IERC20TokenV06[] memory tokenPath,\n        uint256 startIndex\n    )\n        private\n        view\n        returns (IUniswapV3Pool[][] memory poolPaths)\n    {\n        require(\n            tokenPath.length - startIndex >= 2,\n            \"UniswapV3Sampler/tokenPath too short\"\n        );\n        uint24[4] memory validPoolFees = [\n            // The launch pool fees. Could get hairier if they add more.\n            uint24(0.0001e6),\n            uint24(0.0005e6),\n            uint24(0.003e6),\n            uint24(0.01e6)\n        ];\n        IUniswapV3Pool[] memory validPools =\n            new IUniswapV3Pool[](validPoolFees.length);\n        uint256 numValidPools = 0;\n        {\n            IERC20TokenV06 inputToken = tokenPath[startIndex];\n            IERC20TokenV06 outputToken = tokenPath[startIndex + 1];\n            for (uint256 i = 0; i < validPoolFees.length; ++i) {\n                IUniswapV3Pool pool =\n                factory.getPool(inputToken, outputToken, validPoolFees[i]);\n                if (_isValidPool(pool)) {\n                    validPools[numValidPools++] = pool;\n                }\n            }\n        }\n        if (numValidPools == 0) {\n            // No valid pools for this hop.\n            return poolPaths;\n        }\n        if (startIndex + 2 == tokenPath.length) {\n            // End of path.\n            poolPaths = new IUniswapV3Pool[][](numValidPools);\n            for (uint256 i = 0; i < numValidPools; ++i) {\n                poolPaths[i] = new IUniswapV3Pool[](1);\n                poolPaths[i][0] = validPools[i];\n            }\n            return poolPaths;\n        }\n        // Get paths for subsequent hops.\n        IUniswapV3Pool[][] memory subsequentPoolPaths =\n            _getValidPoolPaths(factory, tokenPath, startIndex + 1);\n        if (subsequentPoolPaths.length == 0) {\n            // Could not complete the path.\n            return poolPaths;\n        }\n        // Combine our pools with the next hop paths.\n        poolPaths = new IUniswapV3Pool[][](\n            numValidPools * subsequentPoolPaths.length\n        );\n        for (uint256 i = 0; i < numValidPools; ++i) {\n            for (uint256 j = 0; j < subsequentPoolPaths.length; ++j) {\n                uint256 o = i * subsequentPoolPaths.length + j;\n                // Prepend pool to the subsequent path.\n                poolPaths[o] =\n                    new IUniswapV3Pool[](1 + subsequentPoolPaths[j].length);\n                poolPaths[o][0] = validPools[i];\n                for (uint256 k = 0; k < subsequentPoolPaths[j].length; ++k) {\n                    poolPaths[o][1 + k] = subsequentPoolPaths[j][k];\n                }\n            }\n        }\n        return poolPaths;\n    }\n\n    function _reverseTokenPath(IERC20TokenV06[] memory tokenPath)\n        private\n        returns (IERC20TokenV06[] memory reversed)\n    {\n        reversed = new IERC20TokenV06[](tokenPath.length);\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            reversed[i] = tokenPath[tokenPath.length - i - 1];\n        }\n    }\n\n    function _reversePoolPath(IUniswapV3Pool[] memory poolPath)\n        private\n        returns (IUniswapV3Pool[] memory reversed)\n    {\n        reversed = new IUniswapV3Pool[](poolPath.length);\n        for (uint256 i = 0; i < poolPath.length; ++i) {\n            reversed[i] = poolPath[poolPath.length - i - 1];\n        }\n    }\n\n    function _isValidPool(IUniswapV3Pool pool)\n        private\n        view\n        returns (bool isValid)\n    {\n        // Check if it has been deployed.\n        {\n            uint256 codeSize;\n            assembly {\n                codeSize := extcodesize(pool)\n            }\n            if (codeSize == 0) {\n                return false;\n            }\n        }\n        // Must have a balance of both tokens.\n        if (pool.token0().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        if (pool.token1().balanceOf(address(pool)) == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function _toUniswapPath(\n        IERC20TokenV06[] memory tokenPath,\n        IUniswapV3Pool[] memory poolPath\n    )\n        private\n        view\n        returns (bytes memory uniswapPath)\n    {\n        require(\n            tokenPath.length >= 2 && tokenPath.length == poolPath.length + 1,\n            \"UniswapV3Sampler/invalid path lengths\"\n        );\n        // Uniswap paths are tightly packed as:\n        // [token0, token0token1PairFee, token1, token1Token2PairFee, token2, ...]\n        uniswapPath = new bytes(tokenPath.length * 20 + poolPath.length * 3);\n        uint256 o;\n        assembly { o := add(uniswapPath, 32) }\n        for (uint256 i = 0; i < tokenPath.length; ++i) {\n            if (i > 0) {\n                uint24 poolFee = poolPath[i - 1].fee();\n                assembly {\n                    mstore(o, shl(232, poolFee))\n                    o := add(o, 3)\n                }\n            }\n            IERC20TokenV06 token = tokenPath[i];\n            assembly {\n                mstore(o, shl(96, token))\n                o := add(o, 20)\n            }\n        }\n    }\n}\n",
        "./UtilitySampler.sol": "\n// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\ncontract UtilitySampler {\n\n    using LibERC20TokenV06 for IERC20TokenV06;\n\n    IERC20TokenV06 private immutable UTILITY_ETH_ADDRESS = IERC20TokenV06(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n\n    function getTokenDecimals(IERC20TokenV06[] memory tokens)\n        public\n        view\n        returns (uint256[] memory decimals)\n    {\n        decimals = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            decimals[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 18\n                : tokens[i].compatDecimals();\n        }\n    }\n\n    function getBalanceOf(IERC20TokenV06[] memory tokens, address account)\n        public\n        view\n        returns (uint256[] memory balances)\n    {\n        balances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            balances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? account.balance\n                : tokens[i].compatBalanceOf(account);\n        }\n    }\n\n    function getAllowanceOf(IERC20TokenV06[] memory tokens, address account, address spender)\n        public\n        view\n        returns (uint256[] memory allowances)\n    {\n        allowances = new uint256[](tokens.length);\n        for (uint256 i = 0; i != tokens.length; i++) {\n            allowances[i] = tokens[i] == UTILITY_ETH_ADDRESS\n                ? 0\n                : tokens[i].compatAllowance(account, spender);\n        }\n    }\n\n    function isContract(address account)\n        public\n        view\n        returns (bool)\n    {\n        uint256 size;\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    function getGasLeft()\n        public\n        returns (uint256)\n    {\n        return gasleft();\n    }\n\n    function getBlockNumber()\n        public\n        view\n        returns (uint256)\n    {\n        return block.number;\n    }\n}"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/Users/jacob/projects/ethdev/0x/workspace-remote/workspace/protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
