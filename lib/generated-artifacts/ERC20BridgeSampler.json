{
    "schemaVersion": "2.0.0",
    "contractName": "ERC20BridgeSampler",
    "compilerOutput": {
        "abi": [
            {
                "inputs": [
                    {
                        "internalType": "bytes[]",
                        "name": "callDatas",
                        "type": "bytes[]"
                    }
                ],
                "name": "batchCall",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            },
                            {
                                "internalType": "bool",
                                "name": "success",
                                "type": "bool"
                            }
                        ],
                        "internalType": "struct ERC20BridgeSampler.CallResults[]",
                        "name": "callResults",
                        "type": "tuple[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    }
                ],
                "name": "encodeKyberHint",
                "outputs": [
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleBuysFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSellFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "makerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "poolAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancer",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "bytes32",
                                "name": "poolId",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "vault",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct BalancerV2Sampler.BalancerV2PoolInfo",
                        "name": "poolInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBalancerV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "contract IBancorRegistry",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address[][]",
                                "name": "paths",
                                "type": "address[][]"
                            }
                        ],
                        "internalType": "struct BancorSampler.BancorSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromBancor",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "bancorNetwork",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct CurveSampler.CurveInfo",
                        "name": "curveInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromCurve",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "registry",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "helper",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct DODOSampler.DODOSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODO",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "offset",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromDODOV2",
                "outputs": [
                    {
                        "internalType": "bool",
                        "name": "sellBase",
                        "type": "bool"
                    },
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromEth2Dai",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberDmm",
                "outputs": [
                    {
                        "internalType": "address[]",
                        "name": "pools",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "reserveOffset",
                                "type": "uint256"
                            },
                            {
                                "internalType": "address",
                                "name": "hintHandler",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "networkProxy",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "weth",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "hint",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct KyberSampler.KyberSamplerOpts",
                        "name": "opts",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromKyberNetwork",
                "outputs": [
                    {
                        "internalType": "bytes32",
                        "name": "reserveId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "bytes",
                        "name": "hint",
                        "type": "bytes"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "stEthToken",
                                "type": "address"
                            },
                            {
                                "internalType": "address",
                                "name": "wethToken",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct LidoSampler.LidoInfo",
                        "name": "lidoInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLido",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "pure",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "providerAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromLiquidityProvider",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMStable",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "psmAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes32",
                                "name": "ilkIdentifier",
                                "type": "bytes32"
                            },
                            {
                                "internalType": "address",
                                "name": "gemTokenAddress",
                                "type": "address"
                            }
                        ],
                        "internalType": "struct MakerPSMSampler.MakerPsmInfo",
                        "name": "psmInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMakerPsm",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMooniswap",
                "outputs": [
                    {
                        "internalType": "contract IMooniswap",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "multibridge",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "intermediateToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromMultiBridge",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "pool",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromShell",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "poolAddress",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "sellQuoteFunctionSelector",
                                "type": "bytes4"
                            },
                            {
                                "internalType": "bytes4",
                                "name": "buyQuoteFunctionSelector",
                                "type": "bytes4"
                            }
                        ],
                        "internalType": "struct SmoothySampler.SmoothyInfo",
                        "name": "smoothyInfo",
                        "type": "tuple"
                    },
                    {
                        "internalType": "int128",
                        "name": "fromTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "int128",
                        "name": "toTokenIdx",
                        "type": "int128"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromSmoothy",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "takerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "makerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswap",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "router",
                        "type": "address"
                    },
                    {
                        "internalType": "address[]",
                        "name": "path",
                        "type": "address[]"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "takerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "name": "sampleSellsFromUniswapV2",
                "outputs": [
                    {
                        "internalType": "uint256[]",
                        "name": "makerTokenAmounts",
                        "type": "uint256[]"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "registry",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapTakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "mooniswapMakerToken",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "takerTokenAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleSingleSellFromMooniswapPool",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "buyAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopBuy",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "firstHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "firstHopResult",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "secondHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "secondHopResult",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.TwoHopResult",
                        "name": "result",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "firstHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "components": [
                            {
                                "internalType": "address",
                                "name": "to",
                                "type": "address"
                            },
                            {
                                "internalType": "bytes",
                                "name": "data",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.HopInfo[]",
                        "name": "secondHopCalls",
                        "type": "tuple[]"
                    },
                    {
                        "internalType": "uint256",
                        "name": "sellAmount",
                        "type": "uint256"
                    }
                ],
                "name": "sampleTwoHopSell",
                "outputs": [
                    {
                        "components": [
                            {
                                "internalType": "uint256",
                                "name": "outputAmount",
                                "type": "uint256"
                            },
                            {
                                "internalType": "uint256",
                                "name": "firstHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "firstHopResult",
                                "type": "bytes"
                            },
                            {
                                "internalType": "uint256",
                                "name": "secondHopIndex",
                                "type": "uint256"
                            },
                            {
                                "internalType": "bytes",
                                "name": "secondHopResult",
                                "type": "bytes"
                            }
                        ],
                        "internalType": "struct TwoHopSampler.TwoHopResult",
                        "name": "result",
                        "type": "tuple"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ],
        "devdoc": {
            "kind": "dev",
            "methods": {
                "batchCall(bytes[])": {
                    "details": "Call multiple public functions on this contract in a single transaction.",
                    "params": {
                        "callDatas": "ABI-encoded call data for each function call."
                    },
                    "returns": {
                        "callResults": "ABI-encoded results data for each call."
                    }
                },
                "sampleBuysFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample buy quotes from Bancor. Unimplemented",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "path": "the selected conversion path from bancor",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample buy quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Maker token sell amount for each sample."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample buy quotes from KyberDmm.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "pools": "The pool addresses involved in the multi path trade",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample buy quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "reserveId": "The id of the reserve found at reserveOffset",
                        "takerTokenAmounts": "Taker amounts sold at each maker token amount."
                    }
                },
                "sampleBuysFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample buy quotes from Lido.",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "_0": "takerTokenAmounts Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMStable(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from MStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "pool": "The contract address for the pool",
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromShell(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample buy quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample buy quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "makerTokenAmounts": "Maker token sell amount for each sample.",
                        "takerToken": "Address of the taker token (what to sell)."
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleBuysFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample buy quotes from UniswapV2.",
                    "params": {
                        "makerTokenAmounts": "Maker token buy amount for each sample.",
                        "path": "Token route. Should be takerToken -> makerToken.",
                        "router": "Router to look up tokens and amounts"
                    },
                    "returns": {
                        "takerTokenAmounts": "Taker amounts sold at each maker token         amount."
                    }
                },
                "sampleSellsFromBalancer(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolAddress": "Address of the Balancer pool to query.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBalancerV2((bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Balancer V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "poolInfo": "Struct with pool related data",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromBancor((address,address[][]),address,address,uint256[])": {
                    "details": "Sample sell quotes from Bancor.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "BancorSamplerOpts The Bancor registry contract address and paths",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "bancorNetwork": "the Bancor Network address",
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "path": "the selected conversion path from bancor"
                    }
                },
                "sampleSellsFromCurve((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Curve.",
                    "params": {
                        "curveInfo": "Curve information specific to this token pair.",
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromDODO((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "DODOSamplerOpts DODO Registry and helper addresses",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromDODOV2(address,uint256,address,address,uint256[])": {
                    "details": "Sample sell quotes from DODO V2.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "offset": "offset index for the pool in the registry.",
                        "registry": "Address of the registry to look up.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "the DODO pool address",
                        "sellBase": "whether the bridge needs to sell the base token"
                    }
                },
                "sampleSellsFromEth2Dai(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Eth2Dai/Oasis.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Eth2Dai/Oasis contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromKyberDmm(address,address[],uint256[])": {
                    "details": "Sample sell quotes from KyberDmm.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pools": "The pool addresses involved in the multi path trade"
                    }
                },
                "sampleSellsFromKyberNetwork((uint256,address,address,address,bytes),address,address,uint256[])": {
                    "details": "Sample sell quotes from Kyber.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "opts": "KyberSamplerOpts The nth reserve",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "hint": "The hint for the selected reserve",
                        "makerTokenAmounts": "Maker amounts bought at each taker token amount.",
                        "reserveId": "The id of the reserve found at reserveOffset"
                    }
                },
                "sampleSellsFromLido((address,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Lido",
                    "params": {
                        "lidoInfo": "Info regarding a specific Lido deployment",
                        "makerToken": "Address of the maker token (what to buy).",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "_0": "makerTokenAmounts Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromLiquidityProvider(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from an arbitrary on-chain liquidity provider.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "providerAddress": "Address of the liquidity provider.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMStable(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the mStable contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the mStable contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromMakerPsm((address,bytes32,address),address,address,uint256[])": {
                    "details": "Sample sell quotes from Maker PSM"
                },
                "sampleSellsFromMooniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Mooniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "registry": "Address of the Mooniswap Registry.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount.",
                        "pool": "The contract address for the pool"
                    }
                },
                "sampleSellsFromMultiBridge(address,address,address,address,uint256[])": {
                    "details": "Sample sell quotes from MultiBridge.",
                    "params": {
                        "intermediateToken": "The address of the intermediate token to        use in an indirect route.",
                        "makerToken": "Address of the maker token (what to buy).",
                        "multibridge": "Address of the MultiBridge contract.",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromShell(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from the Shell pool contract",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "pool": "Address of the Shell pool contract",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromSmoothy((address,bytes4,bytes4),int128,int128,uint256[])": {
                    "details": "Sample sell quotes from Smoothy.",
                    "params": {
                        "fromTokenIdx": "Index of the taker token (what to sell).",
                        "smoothyInfo": "Smoothy information specific to this token pair.",
                        "takerTokenAmounts": "Taker token sell amount for each sample.",
                        "toTokenIdx": "Index of the maker token (what to buy)."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswap(address,address,address,uint256[])": {
                    "details": "Sample sell quotes from Uniswap.",
                    "params": {
                        "makerToken": "Address of the maker token (what to buy).",
                        "router": "Address of the Uniswap Router",
                        "takerToken": "Address of the taker token (what to sell).",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                },
                "sampleSellsFromUniswapV2(address,address[],uint256[])": {
                    "details": "Sample sell quotes from UniswapV2.",
                    "params": {
                        "path": "Token route. Should be takerToken -> makerToken",
                        "router": "Router to look up tokens and amounts",
                        "takerTokenAmounts": "Taker token sell amount for each sample."
                    },
                    "returns": {
                        "makerTokenAmounts": "Maker amounts bought at each taker token         amount."
                    }
                }
            },
            "version": 1
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60806040523480156200001157600080fd5b5061859a80620000226000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80639209483b11610151578063c25c4138116100c3578063d9bca37211610087578063d9bca372146105c0578063ddd5aa28146105d3578063e8e4af09146105e6578063f1ed7fa4146105f9578063f3868e9c1461038e578063f5a4994d1461060c57610269565b8063c25c413814610561578063c831908414610574578063c8c74a3714610587578063c94706d81461059a578063cc1621c9146105ad57610269565b8063a469841711610115578063a4698417146104e1578063a75e744b146104f4578063ab00027614610507578063adc636bf1461051a578063b56b83511461053b578063b90cd2fb1461054e57610269565b80639209483b1461046657806398777748146104795780639e3f05c31461048c5780639ea0ff13146104ae578063a0295b8b146104ce57610269565b80633105fec1116101ea57806357494b1d116101ae57806357494b1d146103e75780635d5b674f146103fa57806368be3cf21461040d57806374c9d2551461042d5780637f7f4f13146104405780638b6d7b441461045357610269565b80633105fec11461037b578063360523911461038e57806340bc03ae146103a1578063494569db146103b45780634edfb5b2146103c757610269565b8063281e343211610231578063281e34321461030d57806329fa4aa0146103205780632aa64319146103335780632d753aa41461035557806330d6570d1461036857610269565b80630496d5dc1461026e57806309e7c13414610298578063149dab0e146102b85780632339078f146102da578063252322b3146102fa575b600080fd5b61028161027c366004617314565b61061f565b60405161028f929190617fdd565b60405180910390f35b6102ab6102a6366004617612565b6107c5565b60405161028f919061836c565b6102cb6102c63660046177e7565b6109f0565b60405161028f93929190617ea9565b6102ed6102e8366004617768565b610b50565b60405161028f9190618099565b6102ed610308366004617252565b610d77565b6102ed61031b366004617a3d565b610f4d565b6102ed61032e3660046178a0565b6111a2565b6103466103413660046178f9565b611211565b60405161028f939291906180ac565b6102ed6103633660046171cd565b6114ee565b6102ed610376366004617252565b611677565b6102ed610389366004617314565b6117eb565b6102ed61039c3660046178f9565b611966565b6102ed6103af3660046178a0565b611a00565b6102816103c2366004617314565b611b81565b6103da6103d53660046179df565b611d0d565b60405161028f91906180fa565b6102ed6103f5366004617252565b611f8a565b6102ed610408366004617252565b6124dc565b61042061041b366004617521565b612542565b60405161028f9190618024565b6102cb61043b3660046177e7565b6126a3565b6102ed61044e366004617a3d565b6126b2565b6102ed6104613660046178a0565b6128ff565b6102ed6104743660046178a0565b612c62565b6102ed610487366004617252565b612e62565b61049f61049a366004617928565b613399565b60405161028f939291906180e1565b6104c16104bc3660046172c4565b6134bf565b60405161028f91906180d8565b6102ed6104dc366004617768565b6136d5565b6102ed6104ef366004617252565b6138d1565b610346610502366004617386565b613a26565b6102ed610515366004617252565b613b63565b61052d610528366004617252565b613cc1565b60405161028f92919061810d565b6102ab610549366004617612565b613e11565b6102ed61055c366004617252565b61403c565b6102ed61056f366004617252565b6140a2565b6102ed610582366004617252565b614108565b6102ed610595366004617314565b6142c5565b6102ed6105a8366004617252565b614431565b61049f6105bb366004617928565b61458f565b6103466105ce366004617386565b614775565b6103466105e13660046178f9565b614864565b6102ed6105f4366004617252565b614af7565b6104c1610607366004617998565b614c2a565b61052d61061a366004617252565b614dc9565b80516060908190806001600160401b038111801561063c57600080fd5b50604051908082528060200260200182016040528015610666578160200160208202803683370190505b5091506106738686614eb5565b925082516000141561068557506107bd565b60005b818110156107ba57866001600160a01b031663a8312b1d620249f08784815181106106af57fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016106d7939291906183dc565b60006040518083038187803b1580156106ef57600080fd5b5086fa9350505050801561072557506040513d6000823e601f3d908101601f19168201604052610722919081019061767b565b60015b61075f573d808015610753576040519150601f19603f3d011682016040523d82523d6000602084013e610758565b606091505b50506107ba565b8060018851038151811061076f57fe5b602002602001015184838151811061078357fe5b60200260200101818152505083828151811061079b57fe5b6020026020010151600014156107b157506107ba565b50600101610688565b50505b935093915050565b6107cd616a78565b6000805b855181146108d35760608682815181106107e757fe5b602002602001015160200151905061080e602082510386836151a49092919063ffffffff16565b6000606088848151811061081e57fe5b6020026020010151600001516001600160a01b0316836040516108419190617cfc565b6000604051808303816000865af19150503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b509150915081156108c55760006108a76020835103836151b490919063ffffffff16565b9050858111156108c35760208701859052604087018290529450845b505b5050508060010190506107d1565b50806108df57506109e9565b60005b845181146109e65760608582815181106108f857fe5b602002602001015160200151905061091f602082510384836151a49092919063ffffffff16565b6000606087848151811061092f57fe5b6020026020010151600001516001600160a01b0316836040516109529190617cfc565b6000604051808303816000865af19150503d806000811461098f576040519150601f19603f3d011682016040523d82523d6000602084013e610994565b606091505b509150915081156109d85760006109b86020835103836151b490919063ffffffff16565b87519091508111156109d65780875260608701859052608087018290525b505b5050508060010190506108e2565b50505b9392505050565b600060608086602001515160001415610a0857610b46565b610a14878787876151c0565b855191945092506001600160401b0381118015610a3057600080fd5b50604051908082528060200260200182016040528015610a5a578160200160208202803683370190505b50905060005b8151811015610b4457836001600160a01b0316637f9c0ecd620493e085888581518110610a8957fe5b60200260200101516040518463ffffffff1660e01b8152600401610aae929190618002565b60206040518083038187803b158015610ac657600080fd5b5086fa93505050508015610af7575060408051601f3d908101601f19168201909252610af4918101906176cd565b60015b610b0057610b44565b80838381518110610b0d57fe5b602002602001018181525050828281518110610b2557fe5b602002602001015160001415610b3b5750610b44565b50600101610a60565b505b9450945094915050565b6060610b5c83856153f2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610b9257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610bc057fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610bf057600080fd5b50604051908082528060200260200182016040528015610c1a578160200160208202803683370190505b509350610c25616aa7565b610c2d615428565b905060005b82811015610d6a576060610c598b898481518110610c4c57fe5b6020026020010151615457565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610c8f9060009085908a908990600401618160565b600060405180830381600087803b158015610ca957600080fd5b505af1925050508015610cde57506040513d6000823e601f3d908101601f19168201604052610cdb919081019061758f565b60015b610d19573d808015610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b606091505b505050610d6a565b600081600181518110610d2857fe5b602002602001015160001902905060008113610d4657505050610d6a565b80898581518110610d5357fe5b602002602001018181525050505050600101610c32565b5050505050949350505050565b6060610d8383856153f2565b8151806001600160401b0381118015610d9b57600080fd5b50604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50915060006001600160a01b03861615610de857610de387876154e9565b610deb565b60005b905060006001600160a01b03861615610e0d57610e0888876154e9565b610e10565b60005b905060005b83811015610f415760016001600160a01b038816610e7357610e5284632640f62c60e01b898581518110610e4557fe5b6020026020010151615568565b878481518110610e5e57fe5b60200260200101819350828152505050610f0d565b6001600160a01b038916610e9957610e52836359e9486260e01b898581518110610e4557fe5b6000610eb3846359e9486260e01b8a8681518110610e4557fe5b925090508015610ef057610ecf856309903d8b60e21b83615568565b888581518110610edb57fe5b60200260200101819450828152505050610f0b565b6000878481518110610efe57fe5b6020026020010181815250505b505b801580610f2d5750858281518110610f2157fe5b60200260200101516000145b15610f385750610f41565b50600101610e15565b50505050949350505050565b6060610f5983856153f2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd5919061700a565b8451909150806001600160401b0381118015610ff057600080fd5b5060405190808252806020026020018201604052801561101a578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561105657600080fd5b505afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e919061700a565b6001600160a01b0316866001600160a01b0316141580156111315750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b919061700a565b6001600160a01b0316876001600160a01b031614155b1561113e5750505061119a565b60005b81811015610f4157600061116c8a898b8a868151811061115d57fe5b6020026020010151898961564b565b9050806111795750610f41565b8086838151811061118657fe5b602090810291909101015250600101611141565b949350505050565b60408051606081810190925261120890806111c1868960808401618237565b604051602081830303815290604052815260200186886040516020016111e8929190618237565b604051602081830303815290604052815260200161590c81525083615a3f565b95945050505050565b600080606061122085876153f2565b8351806001600160401b038111801561123857600080fd5b50604051908082528060200260200182016040528015611262578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611295908a908a90600401617d45565b60206040518083038186803b1580156112ad57600080fd5b505afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e5919061700a565b925060006001600160a01b03841615611303575060019350866113a2565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611334908a908c90600401617d45565b60206040518083038186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611384919061700a565b93506001600160a01b03841661139b575050610b46565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906176ad565b61141e575050610b46565b60005b828110156114e157600061149b8a87858e602001516040516020016114499493929190617d5f565b6040516020818303038152906040528a88868f602001516040516020016114739493929190617d5f565b6040516020818303038152906040528a858151811061148e57fe5b6020026020010151615c3c565b9050808583815181106114aa57fe5b6020026020010181815250508482815181106114c257fe5b6020026020010151600014156114d857506114e1565b50600101611421565b5050509450945094915050565b8051606090806001600160401b038111801561150957600080fd5b50604051908082528060200260200182016040528015611533578160200160208202803683370190505b5091506001600160a01b03871661154a5750611208565b60005b8181101561166c5760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061157e57fe5b60200260200101516040516024016115999493929190617dbe565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115d79190617cfc565b6000604051808303818686fa925050503d8060008114611613576040519150601f19603f3d011682016040523d82523d6000602084013e611618565b606091505b50915091506000821561163c578180602001905181019061163991906176cd565b90505b806116495750505061166c565b8086858151811061165657fe5b602090810291909101015250505060010161154d565b505095945050505050565b606061168383856153f2565b8151806001600160401b038111801561169b57600080fd5b506040519080825280602002602001820160405280156116c5578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b03166372ea9076620c350088888886815181106116f457fe5b60200260200101516040518563ffffffff1660e01b815260040161171a93929190617e40565b60206040518083038187803b15801561173257600080fd5b5086fa93505050508015611763575060408051601f3d908101601f19168201909252611760918101906176cd565b60015b61179d573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b606091505b50506117e1565b808483815181106117aa57fe5b6020026020010181815250508382815181106117c257fe5b6020026020010151600014156117d857506117e1565b506001016116cb565b5050949350505050565b8051606090806001600160401b038111801561180657600080fd5b50604051908082528060200260200182016040528015611830578160200160208202803683370190505b50915060005b818110156109e657856001600160a01b031663d06ca61f620249f086848151811061185d57fe5b6020026020010151886040518463ffffffff1660e01b81526004016118839291906183c3565b60006040518083038187803b15801561189b57600080fd5b5086fa935050505080156118d157506040513d6000823e601f3d908101601f191682016040526118ce919081019061767b565b60015b61190b573d8080156118ff576040519150601f19603f3d011682016040523d82523d6000602084013e611904565b606091505b50506109e6565b8060018751038151811061191b57fe5b602002602001015184838151811061192f57fe5b60200260200101818152505083828151811061194757fe5b60200260200101516000141561195d57506109e6565b50600101611836565b606061197283856153f2565b84602001516001600160a01b0316846001600160a01b03161415806119a4575084516001600160a01b03848116911614155b156119f85781516060816001600160401b03811180156119c357600080fd5b506040519080825280602002602001820160405280156119ed578160200160208202803683370190505b50925061119a915050565b509392505050565b8051606090806001600160401b0381118015611a1b57600080fd5b50604051908082528060200260200182016040528015611a45578160200160208202803683370190505b50915060005b818110156117e1576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611a7c57fe5b6020026020010151604051602401611a9693929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ad49190617cfc565b6000604051808303818686fa925050503d8060008114611b10576040519150601f19603f3d011682016040523d82523d6000602084013e611b15565b606091505b509150915060008215611b395781806020019051810190611b3691906176cd565b90505b80868581518110611b4657fe5b602002602001018181525050858481518110611b5e57fe5b602002602001015160001415611b76575050506117e1565b505050600101611a4b565b80516060908190806001600160401b0381118015611b9e57600080fd5b50604051908082528060200260200182016040528015611bc8578160200160208202803683370190505b509150611bd58686614eb5565b9250825160001415611be757506107bd565b60005b818110156107ba57866001600160a01b0316639e269b68620249f0878481518110611c1157fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401611c39939291906183dc565b60006040518083038187803b158015611c5157600080fd5b5086fa93505050508015611c8757506040513d6000823e601f3d908101601f19168201604052611c84919081019061767b565b60015b611cb5573d808015610753576040519150601f19603f3d011682016040523d82523d6000602084013e610758565b80600081518110611cc257fe5b6020026020010151848381518110611cd657fe5b602002602001018181525050838281518110611cee57fe5b602002602001015160001415611d0457506107ba565b50600101611bea565b60208481015160408051600180825281830190925260609384929082810190803683370190505090508581600081518110611d4457fe5b602090810291909101015260606000604051908082528060200260200182016040528015611d7c578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611e6d576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611dd590899060019088908890600401617edf565b60006040518083038187803b158015611ded57600080fd5b5086fa93505050508015611e2357506040513d6000823e601f3d908101601f19168201604052611e2091908101906176e5565b60015b611e5d573d808015611e51576040519150601f19603f3d011682016040523d82523d6000602084013e611e56565b606091505b5050611e68565b935061119a92505050565b611f7f565b87606001516001600160a01b0316856001600160a01b03161415611ec3576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611dd5908a9060019088908890600401617edf565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611f03908a90600190889088908d90849084908490600401617f22565b60006040518083038187803b158015611f1b57600080fd5b5086fa93505050508015611f5157506040513d6000823e601f3d908101601f19168201604052611f4e91908101906176e5565b60015b611e5d573d808015610d6a576040519150601f19603f3d011682016040523d82523d6000602084013e610d6a565b505050949350505050565b80516060908590806001600160401b0381118015611fa757600080fd5b50604051908082528060200260200182016040528015611fd1578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612001908990600401617d18565b60206040518083038186803b15801561201957600080fd5b505afa15801561202d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205191906176ad565b15806120d65750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612084908890600401617d18565b60206040518083038186803b15801561209c57600080fd5b505afa1580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d491906176ad565b155b156120e257505061119a565b6120ea616ace565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612116908a90600401617d18565b60206040518083038186803b15801561212e57600080fd5b505afa158015612142573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216691906176cd565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612194908990600401617d18565b60206040518083038186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e491906176cd565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690612215908a90600401617d18565b60206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226591906176cd565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690612298908990600401617d18565b60206040518083038186803b1580156122b057600080fd5b505afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e891906176cd565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561232a57600080fd5b505afa15801561233e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236291906176cd565b608082015260005b82811015610f415761239582602001516003670de0b6b3a76400008161238c57fe5b04600101615d75565b8682815181106123a157fe5b602002602001015111156123b457610f41565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106123e757fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161241596959493929190618407565b60206040518083038187803b15801561242d57600080fd5b5086fa9350505050801561245e575060408051601f3d908101601f1916820190925261245b918101906176cd565b60015b612498573d80801561248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b606091505b5050610f41565b808683815181106124a557fe5b6020026020010181815250508582815181106124bd57fe5b6020026020010151600014156124d35750610f41565b5060010161236a565b60408051606081810190925261120890806124fb868960808401617d45565b60405160208183030381529060405281526020018688604051602001612522929190617d45565b6040516020818303038152906040528152602001615dd281525083615a3f565b6060816001600160401b038111801561255a57600080fd5b5060405190808252806020026020018201604052801561259457816020015b612581616afd565b8152602001906001900390816125795790505b50905060005b80831461269c5760018282815181106125af57fe5b6020908102919091018101519115159101528383828181106125cd57fe5b90506020028101906125df919061842f565b151590506125ec57612694565b308484838181106125f957fe5b905060200281019061260b919061842f565b604051612619929190617cec565b6000604051808303816000865af19150503d8060008114612656576040519150601f19603f3d011682016040523d82523d6000602084013e61265b565b606091505b5083838151811061266857fe5b602002602001015160200184848151811061267f57fe5b60209081029190910101519190915290151590525b60010161259a565b5092915050565b60006060809450945094915050565b60606126be83856153f2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061700a565b8451909150806001600160401b038111801561275557600080fd5b5060405190808252806020026020018201604052801561277f578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156127bb57600080fd5b505afa1580156127cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f3919061700a565b6001600160a01b0316866001600160a01b0316141580156128965750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561284857600080fd5b505afa15801561285c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612880919061700a565b6001600160a01b0316876001600160a01b031614155b156128a35750505061119a565b60005b81811015610f415760006128d18a898b8a86815181106128c257fe5b60200260200101518989615ee6565b9050806128de5750610f41565b808683815181106128eb57fe5b6020908102919091010152506001016128a6565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161293691906180d8565b60206040518083038186803b15801561294e57600080fd5b505afa158015612962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298691906176cd565b8651604051631e01043960e01b81526001600160a01b0390911690631e010439906129b990600f89900b906004016180d8565b60206040518083038186803b1580156129d157600080fd5b505afa1580156129e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0991906176cd565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612a4191906180d8565b60806040518083038186803b158015612a5957600080fd5b505afa158015612a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a919190617ad8565b935050505080601203600a0a8281612aa557fe5b85519190049250806001600160401b0381118015612ac257600080fd5b50604051908082528060200260200182016040528015612aec578160200160208202803683370190505b50935060005b81811015610f4157600060608a600001516001600160a01b0316620927c08c602001518c8c8c8881518110612b2357fe5b6020026020010151604051602401612b3d93929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b7b9190617cfc565b6000604051808303818686fa925050503d8060008114612bb7576040519150601f19603f3d011682016040523d82523d6000602084013e612bbc565b606091505b509150915060008215612be05781806020019051810190612bdd91906176cd565b90505b868110612c1a57835b85811015612c115787898281518110612bfe57fe5b6020908102919091010152600101612be9565b50505050610f41565b80888581518110612c2757fe5b602002602001018181525050878481518110612c3f57fe5b602002602001015160001415612c5757505050610f41565b505050600101612af2565b60408401516060906001600160e01b031916612ce4576040805160608101909152612cdd9080612c96868960808401618237565b60405160208183030381529060405281526020018688604051602001612cbd929190618237565b604051602081830303815290604052815260200161617e81525083615a3f565b905061119a565b8151806001600160401b0381118015612cfc57600080fd5b50604051908082528060200260200182016040528015612d26578160200160208202803683370190505b50915060005b818110156117e1576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110612d5d57fe5b6020026020010151604051602401612d7793929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612db59190617cfc565b6000604051808303818686fa925050503d8060008114612df1576040519150601f19603f3d011682016040523d82523d6000602084013e612df6565b606091505b509150915060008215612e1a5781806020019051810190612e1791906176cd565b90505b80868581518110612e2757fe5b602002602001018181525050858481518110612e3f57fe5b602002602001015160001415612e57575050506117e1565b505050600101612d2c565b80516060908590806001600160401b0381118015612e7f57600080fd5b50604051908082528060200260200182016040528015612ea9578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612ed9908990600401617d18565b60206040518083038186803b158015612ef157600080fd5b505afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906176ad565b1580612fae5750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612f5c908890600401617d18565b60206040518083038186803b158015612f7457600080fd5b505afa158015612f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fac91906176ad565b155b15612fba57505061119a565b612fc2616ace565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612fee908a90600401617d18565b60206040518083038186803b15801561300657600080fd5b505afa15801561301a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303e91906176cd565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061306c908990600401617d18565b60206040518083038186803b15801561308457600080fd5b505afa158015613098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bc91906176cd565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906130ed908a90600401617d18565b60206040518083038186803b15801561310557600080fd5b505afa158015613119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313d91906176cd565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613170908990600401617d18565b60206040518083038186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c091906176cd565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561320257600080fd5b505afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a91906176cd565b608082015260005b82811015610f4157815161325e906706f05b59d3b20000615d75565b86828151811061326a57fe5b6020026020010151111561327d57610f41565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c88815181106132b057fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016132de96959493929190618407565b60206040518083038187803b1580156132f657600080fd5b5086fa93505050508015613327575060408051601f3d908101601f19168201909252613324918101906176cd565b60015b613355573d80801561248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b8086838151811061336257fe5b60200260200101818152505085828151811061337a57fe5b6020026020010151600014156133905750610f41565b50600101613242565b60006060806133a885876153f2565b6133b38787876161d2565b9250826133bf57610b46565b60405163276fdad960e11b81523090634edfb5b2906133e8908a9087908b908b90600401618333565b60006040518083038186803b15801561340057600080fd5b505afa158015613414573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261343c91908101906176e5565b8760800181905250866080015191506134b36040518060600160405280878a60405160200161346c929190617fb9565b6040516020818303038152906040528152602001888a604051602001613493929190617fb9565b604051602081830303815290604052815260200161633981525085615a3f565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b81526004016134f0929190617d45565b60206040518083038186803b15801561350857600080fd5b505afa15801561351c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613540919061700a565b90506001600160a01b03811661355a57600091505061119a565b60006001600160a01b038616156135ec576040516370a0823160e01b81526001600160a01b038716906370a0823190613597908590600401617d18565b60206040518083038186803b1580156135af57600080fd5b505afa1580156135c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e791906176cd565b6135f8565b816001600160a01b0316315b90508381101561360d5760009250505061119a565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090613642908a908a908a90600401617e40565b60206040518083038187803b15801561365a57600080fd5b5086fa9350505050801561368b575060408051601f3d908101601f19168201909252613688918101906176cd565b60015b6136cb573d8080156136b9576040519150601f19603f3d011682016040523d82523d6000602084013e6136be565b606091505b506000935050505061119a565b925061119a915050565b60606136e183856153f2565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061371757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061374557fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561377557600080fd5b5060405190808252806020026020018201604052801561379f578160200160208202803683370190505b5093506137aa616aa7565b6137b2615428565b905060005b82811015610d6a5760606137d18b898481518110610c4c57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906138079060019085908a908990600401618160565b600060405180830381600087803b15801561382157600080fd5b505af192505050801561385657506040513d6000823e601f3d908101601f19168201604052613853919081019061758f565b60015b613884573d808015610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b60008160008151811061389357fe5b60200260200101519050600081136138ad57505050610d6a565b808985815181106138ba57fe5b6020026020010181815250505050506001016137b7565b8051606090806001600160401b03811180156138ec57600080fd5b50604051908082528060200260200182016040528015613916578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663343fbcdd62061a80888888868151811061394557fe5b60200260200101516040518563ffffffff1660e01b815260040161396b93929190617e40565b60206040518083038187803b15801561398357600080fd5b5086fa935050505080156139b4575060408051601f3d908101601f191682019092526139b1918101906176cd565b60015b6139e2573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b808483815181106139ef57fe5b602002602001018181525050838281518110613a0757fe5b602002602001015160001415613a1d57506117e1565b5060010161391c565b6000806060613a3585876153f2565b8351806001600160401b0381118015613a4d57600080fd5b50604051908082528060200260200182016040528015613a77578160200160208202803683370190505b509150613a8689898989616420565b945092506001600160a01b038316613a9e5750613b58565b60005b81811015613b55576000613b0f898688604051602001613ac393929190617de8565b604051602081830303815290604052898789604051602001613ae793929190617de8565b604051602081830303815290604052898581518110613b0257fe5b6020026020010151616575565b905080848381518110613b1e57fe5b602002602001018181525050838281518110613b3657fe5b602002602001015160001415613b4c5750613b55565b50600101613aa1565b50505b955095509592505050565b6060613b6f83856153f2565b8151806001600160401b0381118015613b8757600080fd5b50604051908082528060200260200182016040528015613bb1578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663144a2752620f42408789888681518110613be057fe5b60200260200101516040518563ffffffff1660e01b8152600401613c0693929190617e40565b60206040518083038187803b158015613c1e57600080fd5b5086fa93505050508015613c4f575060408051601f3d908101601f19168201909252613c4c918101906176cd565b60015b613c7d573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b80848381518110613c8a57fe5b602002602001018181525050838281518110613ca257fe5b602002602001015160001415613cb857506117e1565b50600101613bb7565b60006060613ccf84866153f2565b8251806001600160401b0381118015613ce757600080fd5b50604051908082528060200260200182016040528015613d11578160200160208202803683370190505b50915060005b81811015613d86576000613d40898989898681518110613d3357fe5b60200260200101516134bf565b905080848381518110613d4f57fe5b602002602001018181525050838281518110613d6757fe5b602002602001015160001415613d7d5750613d86565b50600101613d17565b5060405163901754d760e01b81526001600160a01b0388169063901754d790613db59089908990600401617d45565b60206040518083038186803b158015613dcd57600080fd5b505afa158015613de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e05919061700a565b92505094509492505050565b613e19616a78565b60001980825260005b84518114613f30576060858281518110613e3857fe5b6020026020010151602001519050613e5f602082510386836151a49092919063ffffffff16565b60006060878481518110613e6f57fe5b6020026020010151600001516001600160a01b031683604051613e929190617cfc565b6000604051808303816000865af19150503d8060008114613ecf576040519150601f19603f3d011682016040523d82523d6000602084013e613ed4565b606091505b50915091508115613f22576000613ef86020835103836151b490919063ffffffff16565b9050600081118015613f0957508581105b15613f205760608701859052608087018290529450845b505b505050806001019050613e22565b50600019811415613f4157506109e9565b60005b855181146109e6576060868281518110613f5a57fe5b6020026020010151602001519050613f81602082510384836151a49092919063ffffffff16565b60006060306001600160a01b031683604051613f9d9190617cfc565b6000604051808303816000865af19150503d8060008114613fda576040519150601f19603f3d011682016040523d82523d6000602084013e613fdf565b606091505b5091509150811561402e5760006140036020835103836151b490919063ffffffff16565b90506000811180156140155750865181105b1561402c5780875260208701859052604087018290525b505b505050806001019050613f44565b604080516060818101909252611208908061405b868960808401617d45565b60405160208183030381529060405281526020018688604051602001614082929190617d45565b604051602081830303815290604052815260200161666781525083615a3f565b60408051606081810190925261120890806140c1868960808401617d45565b604051602081830303815290604052815260200186886040516020016140e8929190617d45565b60405160208183030381529060405281526020016166ae81525083615a3f565b606061411483856153f2565b8151806001600160401b038111801561412c57600080fd5b50604051908082528060200260200182016040528015614156578160200160208202803683370190505b50915060006001600160a01b038616156141795761417487876154e9565b61417c565b60005b905060006001600160a01b0386161561419e5761419988876154e9565b6141a1565b60005b905060005b83811015610f415760016001600160a01b0388166141f7576141d6846395b68fe760e01b898581518110610e4557fe5b8784815181106141e257fe5b60200260200101819350828152505050614291565b6001600160a01b03891661421d576141d68363cd7724c360e01b898581518110610e4557fe5b6000614237856395b68fe760e01b8a8681518110610e4557fe5b925090508015614274576142538463cd7724c360e01b83615568565b88858151811061425f57fe5b6020026020010181945082815250505061428f565b600087848151811061428257fe5b6020026020010181815250505b505b8015806142b157508582815181106142a557fe5b60200260200101516000145b156142bc5750610f41565b506001016141a6565b8051606090806001600160401b03811180156142e057600080fd5b5060405190808252806020026020018201604052801561430a578160200160208202803683370190505b50915060005b818110156109e657856001600160a01b0316631f00ca74620249f086848151811061433757fe5b6020026020010151886040518463ffffffff1660e01b815260040161435d9291906183c3565b60006040518083038187803b15801561437557600080fd5b5086fa935050505080156143ab57506040513d6000823e601f3d908101601f191682016040526143a8919081019061767b565b60015b6143d9573d8080156118ff576040519150601f19603f3d011682016040523d82523d6000602084013e611904565b806000815181106143e657fe5b60200260200101518483815181106143fa57fe5b60200260200101818152505083828151811061441257fe5b60200260200101516000141561442857506109e6565b50600101614310565b606061443d83856153f2565b8151806001600160401b038111801561445557600080fd5b5060405190808252806020026020018201604052801561447f578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663ff1fd974620f424088888886815181106144ae57fe5b60200260200101516040518563ffffffff1660e01b81526004016144d493929190617e40565b60206040518083038187803b1580156144ec57600080fd5b5086fa9350505050801561451d575060408051601f3d908101601f1916820190925261451a918101906176cd565b60015b61454b573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b8084838151811061455857fe5b60200260200101818152505083828151811061457057fe5b60200260200101516000141561458657506117e1565b50600101614485565b600060608061459e85876153f2565b6145a98787876161d2565b9250826145b557610b46565b60405163276fdad960e11b81523090634edfb5b2906145de908a9087908b908b90600401618333565b60006040518083038186803b1580156145f657600080fd5b505afa15801561460a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261463291908101906176e5565b608088018190528451909250806001600160401b038111801561465457600080fd5b5060405190808252806020026020018201604052801561467e578160200160208202803683370190505b50915060005b81811015614769576000306001600160a01b031663f1ed7fa48b8b8b8b87815181106146ac57fe5b60200260200101516040518563ffffffff1660e01b81526004016146d394939291906182fd565b60206040518083038186803b1580156146eb57600080fd5b505afa1580156146ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472391906176cd565b90508084838151811061473257fe5b60200260200101818152505083828151811061474a57fe5b6020026020010151600014156147605750614769565b50600101614684565b50509450945094915050565b600080606061478485876153f2565b61479088888888616420565b935091506001600160a01b0382166147a757613b58565b8351806001600160401b03811180156147bf57600080fd5b506040519080825280602002602001820160405280156147e9578160200160208202803683370190505b506040805160608101909152909250614856908061480d8987891560808501617de8565b604051602081830303815290604052815260200189868860405160200161483693929190617de8565b604051602081830303815290604052815260200161657581525086615a3f565b915050955095509592505050565b600080606061487385876153f2565b8351806001600160401b038111801561488b57600080fd5b506040519080825280602002602001820160405280156148b5578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906148e8908a908a90600401617d45565b60206040518083038186803b15801561490057600080fd5b505afa158015614914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614938919061700a565b925060006001600160a01b03841615614956575060019350866149f5565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690614987908a908c90600401617d45565b60206040518083038186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149d7919061700a565b93506001600160a01b0384166149ee575050610b46565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a2e57600080fd5b505afa158015614a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a6691906176ad565b614a71575050610b46565b614ae960405180606001604052808987858e60200151604051602001614a9a9493929190617d5f565b60405160208183030381529060405281526020018a87858e60200151604051602001614ac99493929190617d5f565b6040516020818303038152906040528152602001615c3c81525087615a3f565b925050509450945094915050565b8051606090806001600160401b0381118015614b1257600080fd5b50604051908082528060200260200182016040528015614b3c578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663838e6a22620493e08888888681518110614b6b57fe5b60200260200101516040518563ffffffff1660e01b8152600401614b9193929190617e40565b60206040518083038187803b158015614ba957600080fd5b5086fa93505050508015614bda575060408051601f3d908101601f19168201909252614bd7918101906176cd565b60015b614c08573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b80848381518110614c1557fe5b60200260200101818152505050600101614b42565b600084608001515160001415614c425750600061119a565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b031614614c7c5786614c92565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614614cb55786614ccb565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b8152600401614cf3959493929190617e64565b60206040518083038187803b158015614d0b57600080fd5b5086fa93505050508015614d3c575060408051601f3d908101601f19168201909252614d39918101906176cd565b60015b614d7a573d808015614d6a576040519150601f19603f3d011682016040523d82523d6000602084013e614d6f565b606091505b50600091505061119a565b6000614d8585616763565b60ff1690506000614d9587616763565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281614db657fe5b0481614dbe57fe5b04935050505061119a565b60006060614dd784866153f2565b8251806001600160401b0381118015614def57600080fd5b50604051908082528060200260200182016040528015614e19578160200160208202803683370190505b509150614e8460405180606001604052808988604051602001614e3d929190617d45565b60405160208183030381529060405281526020018989604051602001614e64929190617d45565b604051602081830303815290604052815260200161677681525085615a3f565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790613db59089908990600401617d45565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015614ef257600080fd5b505afa158015614f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f2a919061700a565b905060018351036001600160401b0381118015614f4657600080fd5b50604051908082528060200260200182016040528015614f70578160200160208202803683370190505b50915060005b825181101561519b576060826001600160a01b0316635b1dc86f620249f0878581518110614fa057fe5b6020026020010151888660010181518110614fb757fe5b60200260200101516040518463ffffffff1660e01b8152600401614fdc929190617d45565b60006040518083038187803b158015614ff457600080fd5b5086fa9350505050801561502a57506040513d6000823e601f3d908101601f1916820160405261502791908101906173bf565b60015b615079573d808015615058576040519150601f19603f3d011682016040523d82523d6000602084013e61505d565b606091505b5050604080516000815260208101909152935061519e92505050565b60006001825110156150a65760405162461bcd60e51b815260040161509d90618294565b60405180910390fd5b60005b825181101561518f5760008382815181106150c057fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561510057600080fd5b505afa158015615114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061513891906176cd565b9050828111156151865780925083828151811061515157fe5b602002602001015188878151811061516557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016150a9565b50505050600101614f76565b50505b92915050565b6151af8383836167c6565b505050565b60006109e983836167f2565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561521457600080fd5b505afa158015615228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061524c91906176cd565b6040518263ffffffff1660e01b815260040161526891906180d8565b60206040518083038186803b15801561528057600080fd5b505afa158015615294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152b8919061700a565b9150856020015151600014156152cd576153e9565b6000805b8760200151518110156153e6576002886020015182815181106152f057fe5b6020026020010151511015615304576153de565b836001600160a01b0316637f9c0ecd620493e08a60200151848151811061532757fe5b60200260200101518860018a51038151811061533f57fe5b60200260200101516040518463ffffffff1660e01b8152600401615364929190618002565b60206040518083038187803b15801561537c57600080fd5b5086fa935050505080156153ad575060408051601f3d908101601f191682019092526153aa918101906176cd565b60015b6153b6576153de565b828111156153dc57809250886020015182815181106153d157fe5b602002602001015193505b505b6001016152d1565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156154245760405162461bcd60e51b815260040161509d9061824f565b5050565b615430616aa7565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b615479616b15565b8152602001906001900390816154715790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106154d757fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf6290615518908590600401617d18565b60206040518083038186803b15801561553057600080fd5b505afa158015615544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061700a565b6000806001600160a01b03851661557e576107bd565b6060856001600160a01b0316620249f086866040516024016155a091906180d8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516155de9190617cfc565b6000604051808303818686fa925050503d806000811461561a576040519150601f19603f3d011682016040523d82523d6000602084013e61561f565b606091505b5090925090508115615642578080602001905181019061563f91906176cd565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b815260040161568191906180d8565b60a06040518083038186803b15801561569957600080fd5b505afa1580156156ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156d19190617b0d565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b031614156157f95760006157108964e8d4a5100061681c565b905060006157346b033b2e3c9fd0803ce800000061572e888561684d565b9061681c565b905084811061574c5760009650505050505050615902565b60006157db670de0b6b3a76400006157d58c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561579657600080fd5b505afa1580156157aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157ce91906176cd565b869061681c565b90616869565b905060006157e98483616893565b9850615902975050505050505050565b8a604001516001600160a01b03168a6001600160a01b031614156158f957878481111561582e57600095505050505050615902565b600061584a6b033b2e3c9fd0803ce800000061572e8885616893565b90508381116158625760009650505050505050615902565b60006158e78a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156158a057600080fd5b505afa1580156158b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906158d891906176cd565b670de0b6b3a76400009061684d565b905060006157e9826157d5868861681c565b60009450505050505b9695505050505050565b600080615917616b47565b8580602001905181019061592b9190617733565b915091506000858060200190518101906159459190617717565b905060006060306322db5ed160e21b8587866159608c6168b2565b60405160240161597394939291906182cb565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516159b19190617cfc565b600060405180830381855afa9150503d80600081146159ec576040519150601f19603f3d011682016040523d82523d6000602084013e6159f1565b606091505b509150915081615a09576000955050505050506109e9565b80806020019051810190615a1d919061767b565b600081518110615a2957fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015615a5857600080fd5b50604051908082528060200260200182016040528015615a82578160200160208202803683370190505b509050815160001415615a945761519e565b6000615ac58460000151856020015185600081518110615ab057fe5b6020026020010151876040015163ffffffff16565b905080615ad2575061519e565b6000615aef8560200151866000015184886040015163ffffffff16565b905080615afd57505061519e565b60005b8451811015615c335760005b6005811015615bf557615b33868381518110615b2457fe5b602002602001015184866168f3565b935083615b3f57615bf5565b615b4e612715612710866168f3565b935083615b5a57615bf5565b6000615b7788602001518960000151878b6040015163ffffffff16565b905080615b845750615bf5565b809350868381518110615b9357fe5b60200260200101518410615bec576000878481518110615baf57fe5b6020026020010151612710898681518110615bc657fe5b602002602001015187030281615bd857fe5b04905060058111615bea575050615bf5565b505b50600101615b0c565b50615c14858281518110615c0557fe5b602002602001015183856168f3565b848281518110615c2057fe5b6020908102919091010152600101615b00565b50505092915050565b600080600080600087806020019051810190615c58919061705f565b9350935093509350816001600160a01b0316846001600160a01b03161415615d42576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090615cab908a906004016180d8565b60206040518083038187803b158015615cc357600080fd5b5086fa93505050508015615cf4575060408051601f3d908101601f19168201909252615cf1918101906176cd565b60015b615d36573d808015615d22576040519150601f19603f3d011682016040523d82523d6000602084013e615d27565b606091505b506000955050505050506109e9565b94506109e99350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090615cab9087908b90600401617d2c565b60008282028315801590615d92575082848281615d8e57fe5b0414155b15615da157600091505061519e565b6706f05b59d3b20000810181811015615dbf5760009250505061519e565b670de0b6b3a76400009004949350505050565b600080600085806020019051810190615deb9190617026565b91509150600085806020019051810190615e05919061700a565b90503063e8e4af09838584615e198a6168b2565b6040518563ffffffff1660e01b8152600401615e389493929190617d8a565b60006040518083038186803b158015615e5057600080fd5b505afa925050508015615e8557506040513d6000823e601f3d908101601f19168201604052615e82919081019061767b565b60015b615ec6573d808015615eb3576040519150601f19603f3d011682016040523d82523d6000602084013e615eb8565b606091505b5060009450505050506109e9565b80600081518110615ed357fe5b60200260200101519450505050506109e9565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401615f1c91906180d8565b60a06040518083038186803b158015615f3457600080fd5b505afa158015615f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615f6c9190617b0d565b945094505050925089604001516001600160a01b0316886001600160a01b03161415616089576000879050600061601c886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015615fd557600080fd5b505afa158015615fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061600d91906176cd565b670de0b6b3a764000090616893565b90506000616036826157d585670de0b6b3a764000061681c565b905060006160546b033b2e3c9fd0803ce800000061572e898561684d565b905085811061606d576000975050505050505050615902565b60006157e960016160838564e8d4a51000616869565b9061684d565b89604001516001600160a01b0316896001600160a01b0316141561616e5760006160b88864e8d4a5100061681c565b905060006160f8886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156158a057600080fd5b90506000616112670de0b6b3a76400006157d5858561681c565b90508581111561612b5760009650505050505050615902565b60006161476b033b2e3c9fd0803ce800000061572e8985616893565b9050848111616160576000975050505050505050615902565b509550615902945050505050565b5060009998505050505050505050565b600080616189616b47565b8580602001905181019061619d9190617733565b915091506000858060200190518101906161b79190617717565b9050600060603063205e01d760e11b8587866159608c6168b2565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b0316146162105786616226565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614616249578661625f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b1690915261629392919060019060248101617e0c565b60006040518083038186803b1580156162ab57600080fd5b505afa1580156162bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526162e79190810190617457565b5050905080518660000151106163035750600091506109e99050565b8086600001518151811061631357fe5b6020026020010151925060f883901c60001c60bb14156109e65750600091506109e99050565b600080616344616b67565b84806020019051810190616358919061710d565b91509150600086806020019051810190616372919061710d565b50604051633c7b5fe960e21b8152909150309063f1ed7fa49061639f908590859088908b906004016182fd565b60206040518083038186803b1580156163b757600080fd5b505afa9250505080156163e7575060408051601f3d908101601f191682019092526163e4918101906176cd565b60015b616415573d808015615eb3576040519150601f19603f3d011682016040523d82523d6000602084013e615eb8565b93506109e992505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401616453929190617d45565b60006040518083038186803b15801561646b57600080fd5b505afa15801561647f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526164a791908101906173bf565b905060019150805160001415616540576040516315e8a07760e21b81526001600160a01b038816906357a281dc906164e59087908990600401617d45565b60006040518083038186803b1580156164fd57600080fd5b505afa158015616511573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261653991908101906173bf565b9050600091505b805186106165555760008092509250506153e9565b80868151811061656157fe5b602002602001015192505094509492505050565b6000806000808680602001905181019061658f91906170bd565b925092509250801561663357604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906165cf906000908a90600401617d2c565b604080518083038187803b1580156165e657600080fd5b5086fa93505050508015616617575060408051601f3d908101601f1916820190925261661491810190617ab5565b60015b61662757600093505050506109e9565b5093506109e992505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906165cf906000908a90600401617d2c565b6000806000858060200190518101906166809190617026565b9150915060008580602001905181019061669a919061700a565b9050306330d6570d838584615e198a6168b2565b6000806000858060200190518101906166c79190617026565b915091506000858060200190518101906166e1919061700a565b90503063a469841762061a808486856166f98b6168b2565b6040518663ffffffff1660e01b81526004016167189493929190617d8a565b60006040518083038187803b15801561673057600080fd5b5086fa93505050508015615e8557506040513d6000823e601f3d908101601f19168201604052615e82919081019061767b565b600061676e8261694b565b90505b919050565b60008060008580602001905181019061678f9190617026565b91509150600080868060200190518101906167aa9190617026565b915091506167ba848483896134bf565b98975050505050505050565b81602001835110156167ea576167ea6167e560058551856020016169f7565b616a51565b910160200152565b60008160200183511015616813576168136167e560058551856020016169f7565b50016020015190565b60008261682b5750600061519e565b8282028284828161683857fe5b04146109e9576109e96167e560018686616a59565b6000828201838110156109e9576109e96167e560008686616a59565b60008161687f5761687f6167e560038585616a59565b600082848161688a57fe5b04949350505050565b6000828211156168ac576168ac6167e560028585616a59565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106168e257fe5b602002602001018181525050919050565b6000831580616900575081155b80616909575082155b15616916575060006109e9565b8382028285828161692357fe5b04146169335760009150506109e9565b836001850382018161694157fe5b0495945050505050565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b8152506040516169899190617cfc565b600060405180830381855afa9150503d80600081146169c4576040519150601f19603f3d011682016040523d82523d6000602084013e6169c9565b606091505b50915091508180156169dd57506020815110155b156169f0576169ed8160006151b4565b92505b5050919050565b6060632800659560e01b848484604051602401616a1693929190618152565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b606063e946c1bb60e01b848484604051602401616a1693929190618131565b6040518060a0016040528060008152602001600081526020016060815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b803561519e8161852a565b805161519e8161852a565b600082601f830112616bd7578081fd5b8135616bea616be5826184a0565b61847a565b818152915060208083019084810181840286018201871015616c0b57600080fd5b60005b84811015616c33578135616c218161852a565b84529282019290820190600101616c0e565b505050505092915050565b600082601f830112616c4e578081fd5b8135616c5c616be5826184a0565b818152915060208083019084810160005b84811015616c3357616c84888484358a0101616bc7565b84529282019290820190600101616c6d565b600082601f830112616ca6578081fd5b8135616cb4616be5826184a0565b818152915060208083019084810160005b84811015616c335781358701604080601f19838c03011215616ce657600080fd5b616cef8161847a565b616cfb8b878501616bb1565b815290820135906001600160401b03821115616d1657600080fd5b616d248b8784860101616df8565b81870152865250509282019290820190600101616cc5565b600082601f830112616d4c578081fd5b8135616d5a616be5826184a0565b818152915060208083019084810181840286018201871015616d7b57600080fd5b60005b84811015616c3357813584529282019290820190600101616d7e565b600082601f830112616daa578081fd5b8151616db8616be5826184a0565b818152915060208083019084810181840286018201871015616dd957600080fd5b60005b84811015616c3357815184529282019290820190600101616ddc565b600082601f830112616e08578081fd5b8135616e16616be5826184bf565b9150808252836020828501011115616e2d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112616e56578081fd5b8151616e64616be5826184bf565b9150808252836020828501011115616e7b57600080fd5b61269c8160208401602086016184ed565b80516002811061519e57600080fd5b600060608284031215616eac578081fd5b616eb6606061847a565b90508135616ec38161852a565b81526020820135616ed38161853f565b60208201526040820135616ee68161853f565b604082015292915050565b600060608284031215616f02578081fd5b616f0c606061847a565b90508151616f198161852a565b81526020820151616f298161853f565b60208201526040820151616ee68161853f565b600060408284031215616f4d578081fd5b616f57604061847a565b90508135616f648161852a565b81526020820135616f748161852a565b602082015292915050565b600060a08284031215616f90578081fd5b616f9a60a061847a565b9050813581526020820135616fae8161852a565b60208201526040820135616fc18161852a565b60408201526060820135616fd48161852a565b606082015260808201356001600160401b03811115616ff257600080fd5b616ffe84828501616df8565b60808301525092915050565b60006020828403121561701b578081fd5b81516109e98161852a565b60008060408385031215617038578081fd5b82516170438161852a565b60208401519092506170548161852a565b809150509250929050565b60008060008060808587031215617074578182fd5b845161707f8161852a565b60208601519094506170908161852a565b60408601519093506170a18161852a565b60608601519092506170b28161852a565b939692955090935050565b6000806000606084860312156170d1578081fd5b83516170dc8161852a565b60208501519093506170ed8161852a565b60408501519092508015158114617102578182fd5b809150509250925092565b6000806040838503121561711f578182fd5b825161712a8161852a565b60208401519092506001600160401b0380821115617146578283fd5b9084019060a08287031215617159578283fd5b61716360a061847a565b825181526171748760208501616bbc565b60208201526171868760408501616bbc565b60408201526171988760608501616bbc565b60608201526080830151828111156171ae578485fd5b6171ba88828601616e46565b6080830152508093505050509250929050565b600080600080600060a086880312156171e4578283fd5b85356171ef8161852a565b945060208601356171ff8161852a565b9350604086013561720f8161852a565b9250606086013561721f8161852a565b915060808601356001600160401b03811115617239578182fd5b61724588828901616d3c565b9150509295509295909350565b60008060008060808587031215617267578182fd5b84356172728161852a565b935060208501356172828161852a565b925060408501356172928161852a565b915060608501356001600160401b038111156172ac578182fd5b6172b887828801616d3c565b91505092959194509250565b600080600080608085870312156172d9578182fd5b84356172e48161852a565b935060208501356172f48161852a565b925060408501356173048161852a565b9396929550929360600135925050565b600080600060608486031215617328578081fd5b83356173338161852a565b925060208401356001600160401b038082111561734e578283fd5b61735a87838801616bc7565b9350604086013591508082111561736f578283fd5b5061737c86828701616d3c565b9150509250925092565b600080600080600060a0868803121561739d578283fd5b85356173a88161852a565b945060208601359350604086013561720f8161852a565b600060208083850312156173d1578182fd5b82516001600160401b038111156173e6578283fd5b8301601f810185136173f6578283fd5b8051617404616be5826184a0565b8181528381019083850185840285018601891015617420578687fd5b8694505b8385101561744b5780516174378161852a565b835260019490940193918501918501617424565b50979650505050505050565b60008060006060848603121561746b578081fd5b83516001600160401b0380821115617481578283fd5b818601915086601f830112617494578283fd5b81516174a2616be5826184a0565b80828252602080830192508086018b8283870289010111156174c2578788fd5b8796505b848710156174e45780518452600196909601959281019281016174c6565b5089015190975093505050808211156174fb578283fd5b5061750886828701616d9a565b9250506175188560408601616e8c565b90509250925092565b60008060208385031215617533578182fd5b82356001600160401b0380821115617549578384fd5b818501915085601f83011261755c578384fd5b81358181111561756a578485fd5b866020808302850101111561757d578485fd5b60209290920196919550909350505050565b600060208083850312156175a1578182fd5b82516001600160401b038111156175b6578283fd5b8301601f810185136175c6578283fd5b80516175d4616be5826184a0565b81815283810190838501858402850186018910156175f0578687fd5b8694505b8385101561744b5780518352600194909401939185019185016175f4565b600080600060608486031215617626578081fd5b83356001600160401b038082111561763c578283fd5b61764887838801616c96565b9450602086013591508082111561765d578283fd5b5061766a86828701616c96565b925050604084013590509250925092565b60006020828403121561768c578081fd5b81516001600160401b038111156176a1578182fd5b61119a84828501616d9a565b6000602082840312156176be578081fd5b815180151581146109e9578182fd5b6000602082840312156176de578081fd5b5051919050565b6000602082840312156176f6578081fd5b81516001600160401b0381111561770b578182fd5b61119a84828501616e46565b600060208284031215617728578081fd5b81516109e981618555565b60008060808385031215617745578182fd5b825161775081618555565b915061775f8460208501616ef1565b90509250929050565b60008060008084860360a081121561777e578283fd5b604081121561778b578283fd5b50617796604061847a565b8535815260208601356177a88161852a565b6020820152935060408501356177bd8161852a565b925060608501356177cd8161852a565b915060808501356001600160401b038111156172ac578182fd5b600080600080608085870312156177fc578182fd5b84356001600160401b0380821115617812578384fd5b9086019060408289031215617825578384fd5b61782f604061847a565b6178398984616bb1565b815260208301358281111561784c578586fd5b6178588a828601616c3e565b6020830152508096505061786f8860208901616bb1565b945061787e8860408901616bb1565b93506060870135915080821115617893578283fd5b506172b887828801616d3c565b60008060008060c085870312156178b5578182fd5b6178bf8686616e9b565b935060608501356178cf81618555565b925060808501356178df81618555565b915060a08501356001600160401b038111156172ac578182fd5b60008060008060a0858703121561790e578182fd5b6179188686616f3c565b935060408501356177bd8161852a565b6000806000806080858703121561793d578182fd5b84356001600160401b0380821115617953578384fd5b61795f88838901616f7f565b9550602087013591506179718261852a565b9093506040860135906179838261852a565b90925060608601359080821115617893578283fd5b600080600080608085870312156179ad578182fd5b84356001600160401b038111156179c2578283fd5b6179ce87828801616f7f565b94505060208501356172f48161852a565b600080600080608085870312156179f4578182fd5b84356001600160401b03811115617a09578283fd5b617a1587828801616f7f565b945050602085013592506040850135617a2d8161852a565b915060608501356170b28161852a565b60008060008084860360c0811215617a53578283fd5b6060811215617a60578283fd5b50617a6b606061847a565b8535617a768161852a565b8152602086810135908201526040860135617a908161852a565b604082015293506060850135617aa58161852a565b925060808501356178df8161852a565b60008060408385031215617ac7578182fd5b505080516020909101519092909150565b60008060008060808587031215617aed578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215617b24578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0316815260200190565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261119a60a0850182617c0c565b6000815180845260208085019450808401835b83811015617bd25781516001600160a01b031687529582019590820190600101617bad565b509495945050505050565b6000815180845260208085019450808401835b83811015617bd257815187529582019590820190600101617bf0565b60008151808452617c248160208601602086016184ed565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261119a60a0850182617c0c565b6000828483379101908152919050565b60008251617d0e8184602087016184ed565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03858116825284811660208301528316604082015260806060820181905260009061590290830184617bdd565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b03858116825284166020820152821515604082015260806060820181905260009061590290830184617c0c565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090617e9e90830184617c0c565b979650505050505050565b6001600160a01b0384168152606060208201819052600090617ecd90830185617b9a565b82810360408401526159028185617bdd565b6001600160a01b03851681526000617ef68561851d565b84602083015260806040830152617f106080830185617bdd565b8281036060840152617e9e8185617bdd565b6001600160a01b03898116825260009061010090617f3f8b61851d565b8a6020850152816040850152617f578285018b617bdd565b91508382036060850152617f6b828a617bdd565b90881660808501529050617f7e8661851d565b8560a084015282810360c0840152617f968186617bdd565b905082810360e0840152617faa8185617bdd565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061119a90830184617c9f565b600060408252617ff06040830185617b9a565b82810360208401526112088185617bdd565b6000604082526180156040830185617b9a565b90508260208301529392505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561808b57888303603f190185528151805187855261806c88860182617c0c565b9189015115159489019490945294870194925090860190600101618048565b509098975050505050505050565b6000602082526109e96020830184617bdd565b83151581526001600160a01b038316602082015260606040820181905260009061120890830184617bdd565b90815260200190565b600084825260606020830152617ecd6060830185617c0c565b6000602082526109e96020830184617c0c565b6001600160a01b038316815260406020820181905260009061119a90830184617bdd565b6060810161813e8561851d565b938152602081019290925260409091015290565b606081016008851061813e57fe5b600060e0820161816f876184e2565b8352602060e08185015281875161818681856180d8565b91508193508281028201838a01865b838110156181bf5786830385526181ad838351617b5d565b94860194925090850190600101618195565b50508681036040880152809450885192506181da83826180d8565b94505050818701845b82811015618204576181f6858351617b4c565b9450908301906001016181e3565b50505050809150506112086060830184617c6a565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016109e96020830184617c38565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b60006182d78287617c38565b84600f0b606083015283600f0b608083015260c060a083015261590260c0830184617bdd565b6000608082526183106080830187617c9f565b6001600160a01b0395861660208401529390941660408201526060015292915050565b6000608082526183466080830187617c9f565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6000602082528251602083015260208301516040830152604083015160a0606084015261839c60c0840182617c0c565b9050606084015160808401526080840151601f198483030160a08501526112088282617c0c565b60008382526040602083015261119a6040830184617b9a565b6000848252606060208301526183f56060830185617b9a565b82810360408401526159028185617b9a565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e19843603018112618445578283fd5b8301803591506001600160401b0382111561845e578283fd5b60200191503681900382131561847357600080fd5b9250929050565b6040518181016001600160401b038111828210171561849857600080fd5b604052919050565b60006001600160401b038211156184b5578081fd5b5060209081020190565b60006001600160401b038211156184d4578081fd5b50601f01601f191660200190565b806002811061677157fe5b60005b838110156185085781810151838201526020016184f0565b83811115618517576000848401525b50505050565b6004811061852757fe5b50565b6001600160a01b038116811461852757600080fd5b6001600160e01b03198116811461852757600080fd5b80600f0b811461852757600080fdfea26469706673582212203d9da65b50e0dd75155e83c26ff605fdb4d8c9035c9b29bc8a69019e22eae72264736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x859A DUP1 PUSH3 0x22 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x269 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9209483B GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x5D3 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x5E6 JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x5F9 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x60C JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x561 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x574 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x5AD JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0xA4698417 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xB56B8351 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x54E JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x9209483B EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x479 JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x4CE JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x1EA JUMPI DUP1 PUSH4 0x57494B1D GT PUSH2 0x1AE JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x453 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x3C7 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x231 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x368 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x9E7C134 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x2DA JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x2FA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP3 SWAP2 SWAP1 PUSH2 0x7FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x7612 JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x77E7 JUMP JUMPDEST PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EA9 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x2E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7768 JUMP JUMPDEST PUSH2 0xB50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x8099 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x7A3D JUMP JUMPDEST PUSH2 0xF4D JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80AC JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x71CD JUMP JUMPDEST PUSH2 0x14EE JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x17EB JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x1966 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x1A00 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x79DF JUMP JUMPDEST PUSH2 0x1D0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x80FA JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x1F8A JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x408 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x24DC JUMP JUMPDEST PUSH2 0x420 PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x7521 JUMP JUMPDEST PUSH2 0x2542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x8024 JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x77E7 JUMP JUMPDEST PUSH2 0x26A3 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x7A3D JUMP JUMPDEST PUSH2 0x26B2 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x461 CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x2C62 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x2E62 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x7928 JUMP JUMPDEST PUSH2 0x3399 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80E1 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x72C4 JUMP JUMPDEST PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x7768 JUMP JUMPDEST PUSH2 0x36D5 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x4EF CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x38D1 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x7386 JUMP JUMPDEST PUSH2 0x3A26 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x3B63 JUMP JUMPDEST PUSH2 0x52D PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x3CC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP3 SWAP2 SWAP1 PUSH2 0x810D JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x7612 JUMP JUMPDEST PUSH2 0x3E11 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x55C CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x403C JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x40A2 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x582 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4108 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x42C5 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x5A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4431 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x7928 JUMP JUMPDEST PUSH2 0x458F JUMP JUMPDEST PUSH2 0x346 PUSH2 0x5CE CALLDATASIZE PUSH1 0x4 PUSH2 0x7386 JUMP JUMPDEST PUSH2 0x4775 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x5E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x4864 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x5F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4AF7 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x7998 JUMP JUMPDEST PUSH2 0x4C2A JUMP JUMPDEST PUSH2 0x52D PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4DC9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x666 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x673 DUP7 DUP7 PUSH2 0x4EB5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x685 JUMPI POP PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x83DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x725 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x722 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x75F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x758 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x7BA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x76F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x783 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x79B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7B1 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x688 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7CD PUSH2 0x6A78 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x8D3 JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x80E PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x81E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x841 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x87E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x883 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x0 PUSH2 0x8A7 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x7D1 JUMP JUMPDEST POP DUP1 PUSH2 0x8DF JUMPI POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x9E6 JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x91F PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x952 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x98F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x994 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 PUSH2 0x9B8 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x9D6 JUMPI DUP1 DUP8 MSTORE PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x8E2 JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xA08 JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH2 0xA14 DUP8 DUP8 DUP8 DUP8 PUSH2 0x51C0 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA5A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xB44 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xA89 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAE SWAP3 SWAP2 SWAP1 PUSH2 0x8002 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xAF7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAF4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB00 JUMPI PUSH2 0xB44 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB3B JUMPI POP PUSH2 0xB44 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA60 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB5C DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xBC0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC1A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xC25 PUSH2 0x6AA7 JUMP JUMPDEST PUSH2 0xC2D PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x60 PUSH2 0xC59 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xC8F SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x8160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xCDE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCDB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x758F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xD19 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD11 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xD6A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xD28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xD46 JUMPI POP POP POP PUSH2 0xD6A JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xC32 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD83 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDC5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xDE8 JUMPI PUSH2 0xDE3 DUP8 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE08 DUP9 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xE73 JUMPI PUSH2 0xE52 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5568 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xF0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xE99 JUMPI PUSH2 0xE52 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xEB3 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xEF0 JUMPI PUSH2 0xECF DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x5568 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xEDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xF0B JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEFE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xF2D JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xF38 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE15 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF59 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x101A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x108E SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1131 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x111B SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x113E JUMPI POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH2 0x116C DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x115D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x564B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1179 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1186 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x11C1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11E8 SWAP3 SWAP2 SWAP1 PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x590C DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1220 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1262 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1295 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E5 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1303 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x13A2 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1334 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x134C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1360 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1384 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x139B JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1413 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST PUSH2 0x141E JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x14E1 JUMPI PUSH1 0x0 PUSH2 0x149B DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1449 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1473 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x148E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5C3C JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x14AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x14D8 JUMPI POP PUSH2 0x14E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1421 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1533 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x154A JUMPI POP PUSH2 0x1208 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x166C JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x157E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1599 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x15D7 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x163C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1639 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1649 JUMPI POP POP POP PUSH2 0x166C JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1656 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x154D JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1683 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x169B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x16F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1763 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1760 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x179D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x17E1 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x17AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17D8 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x16CB JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1830 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9E6 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1883 SWAP3 SWAP2 SWAP1 PUSH2 0x83C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x18D1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x18CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x190B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1904 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x9E6 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x191B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x192F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1947 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x195D JUMPI POP PUSH2 0x9E6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1972 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x19A4 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x19F8 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x19C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19ED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x119A SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A45 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1A7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A96 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1AD4 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1B10 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1B39 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B36 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1B5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1B76 JUMPI POP POP POP PUSH2 0x17E1 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1A4B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1B9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BC8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1BD5 DUP7 DUP7 PUSH2 0x4EB5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BE7 JUMPI POP PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x83DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1C87 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1C84 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1CB5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x758 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1CC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1CD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1CEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1D04 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D44 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D7C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1E6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1DD5 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E23 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1E20 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E5D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1E68 JUMP JUMPDEST SWAP4 POP PUSH2 0x119A SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F7F JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1DD5 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1F03 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1F51 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1F4E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E5D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD6A JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2001 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x202D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2051 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO DUP1 PUSH2 0x20D6 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2084 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x209C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20D4 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x20E2 JUMPI POP POP PUSH2 0x119A JUMP JUMPDEST PUSH2 0x20EA PUSH2 0x6ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2116 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x212E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2142 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2166 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2194 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21E4 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2215 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x222D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2241 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2265 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2298 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22E8 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x232A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x233E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2362 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH2 0x2395 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x238C JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x5D75 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x23A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x23B4 JUMPI PUSH2 0xF41 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x23E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2415 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x245E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x245B SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2498 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x24BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x24D3 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x24FB DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2522 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5DD2 DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2594 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2581 PUSH2 0x6AFD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2579 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x269C JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25AF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x25CD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x25DF SWAP2 SWAP1 PUSH2 0x842F JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x25EC JUMPI PUSH2 0x2694 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x25F9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x260B SWAP2 SWAP1 PUSH2 0x842F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2619 SWAP3 SWAP2 SWAP1 PUSH2 0x7CEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2656 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x265B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2668 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x267F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x259A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x26BE DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2716 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x273A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x277F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27F3 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2896 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x285C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2880 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x28A3 JUMPI POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH2 0x28D1 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x28C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x5EE6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x28DE JUMPI POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x28EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2936 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2962 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2986 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x29B9 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A09 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A41 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A91 SWAP2 SWAP1 PUSH2 0x7AD8 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x2AA5 JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2AEC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2B23 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B3D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B7B SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BB7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BBC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2BE0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2C1A JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2C11 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BFE JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2BE9 JUMP JUMPDEST POP POP POP POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2C57 JUMPI POP POP POP PUSH2 0xF41 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2CE4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x2CDD SWAP1 DUP1 PUSH2 0x2C96 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CBD SWAP3 SWAP2 SWAP1 PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x617E DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST SWAP1 POP PUSH2 0x119A JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D26 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2D5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D77 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2DB5 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2DF1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2DF6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2E1A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E17 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2E27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2E3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2E57 JUMPI POP POP POP PUSH2 0x17E1 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2D2C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2ED9 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F29 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2FAE JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2F5C SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FAC SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2FBA JUMPI POP POP PUSH2 0x119A JUMP JUMPDEST PUSH2 0x2FC2 PUSH2 0x6ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2FEE SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x301A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x303E SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x306C SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3098 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30BC SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x30ED SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x313D SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3170 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x319C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31C0 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3216 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x323A SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF41 JUMPI DUP2 MLOAD PUSH2 0x325E SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x5D75 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x326A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x327D JUMPI PUSH2 0xF41 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x32B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32DE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3327 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3324 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3355 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2491 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3362 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x337A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3390 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3242 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x33A8 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x33B3 DUP8 DUP8 DUP8 PUSH2 0x61D2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x33BF JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x33E8 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x8333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3414 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x343C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x34B3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x346C SWAP3 SWAP2 SWAP1 PUSH2 0x7FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3493 SWAP3 SWAP2 SWAP1 PUSH2 0x7FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6339 DUP2 MSTORE POP DUP6 PUSH2 0x5A3F JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34F0 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x351C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3540 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x355A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x35EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3597 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35E7 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH2 0x35F8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x360D JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3642 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x365A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x368B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3688 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x36CB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x36B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x119A JUMP JUMPDEST SWAP3 POP PUSH2 0x119A SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36E1 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3717 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3745 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x379F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x37AA PUSH2 0x6AA7 JUMP JUMPDEST PUSH2 0x37B2 PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x60 PUSH2 0x37D1 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC4C JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x3807 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x8160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3856 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3853 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x758F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3884 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD11 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3893 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x38AD JUMPI POP POP POP PUSH2 0xD6A JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x38BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x37B7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x38EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3916 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x396B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x39B4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x39B1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x39E2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x39EF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3A1D JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x391C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x3A35 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3A4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A77 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x3A86 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6420 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3A9E JUMPI POP PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B55 JUMPI PUSH1 0x0 PUSH2 0x3B0F DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AE7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3B02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6575 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3B1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B4C JUMPI POP PUSH2 0x3B55 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3AA1 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3B6F DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BB1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3BE0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C06 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C4F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C4C SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3C7D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3CB8 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3BB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x3CCF DUP5 DUP7 PUSH2 0x53F2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3CE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D11 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D86 JUMPI PUSH1 0x0 PUSH2 0x3D40 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3D33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x34BF JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3D4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3D7D JUMPI POP PUSH2 0x3D86 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3D17 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3DB5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E05 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3E19 PUSH2 0x6A78 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x3F30 JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x3E5F PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x3E92 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3ECF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ED4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3F22 JUMPI PUSH1 0x0 PUSH2 0x3EF8 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3F09 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3F20 JUMPI PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3E22 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3F41 JUMPI POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x9E6 JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F5A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x3F81 PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x3F9D SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x402E JUMPI PUSH1 0x0 PUSH2 0x4003 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4015 JUMPI POP DUP7 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x402C JUMPI DUP1 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3F44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x405B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4082 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6667 DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x40C1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40E8 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x66AE DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4114 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x412C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4156 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4179 JUMPI PUSH2 0x4174 DUP8 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0x417C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x419E JUMPI PUSH2 0x4199 DUP9 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x41F7 JUMPI PUSH2 0x41D6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x41E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x421D JUMPI PUSH2 0x41D6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4237 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4274 JUMPI PUSH2 0x4253 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x5568 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x425F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x428F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x42B1 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x42A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x42BC JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x41A6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x42E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x430A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9E6 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x435D SWAP3 SWAP2 SWAP1 PUSH2 0x83C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x43AB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x43A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x43D9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1904 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x43E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4412 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4428 JUMPI POP PUSH2 0x9E6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4310 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x443D DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x447F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x44AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x451D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x451A SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x454B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4558 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4570 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4586 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x459E DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x45A9 DUP8 DUP8 DUP8 PUSH2 0x61D2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x45B5 JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x45DE SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x8333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x460A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4632 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x467E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4769 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x46AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46D3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x82FD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4723 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4732 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x474A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4760 JUMPI POP PUSH2 0x4769 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4684 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4784 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x4790 DUP9 DUP9 DUP9 DUP9 PUSH2 0x6420 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x47A7 JUMPI PUSH2 0x3B58 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x47BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x4856 SWAP1 DUP1 PUSH2 0x480D DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4836 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6575 DUP2 MSTORE POP DUP7 PUSH2 0x5A3F JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4873 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x488B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x48B5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x48E8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4938 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x4956 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x49F5 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4987 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x499F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49D7 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x49EE JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A66 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST PUSH2 0x4A71 JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x4AE9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4A9A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4AC9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5C3C DUP2 MSTORE POP DUP8 PUSH2 0x5A3F JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B3C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4B6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B91 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4BDA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4BD7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4C08 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4B42 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4C42 JUMPI POP PUSH1 0x0 PUSH2 0x119A JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C7C JUMPI DUP7 PUSH2 0x4C92 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4CB5 JUMPI DUP7 PUSH2 0x4CCB JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CF3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E64 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4D3C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4D39 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D7A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4D6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4D6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D85 DUP6 PUSH2 0x6763 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x4D95 DUP8 PUSH2 0x6763 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x4DB6 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x4DBE JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4DD7 DUP5 DUP7 PUSH2 0x53F2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4DEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E19 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4E84 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E3D SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E64 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6776 DUP2 MSTORE POP DUP6 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3DB5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F2A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F70 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x519B JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4FA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4FB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FDC SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x502A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5027 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5079 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5058 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x505D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x519E SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x50A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509D SWAP1 PUSH2 0x8294 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x518F JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x50C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5138 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x5186 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5151 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5165 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x50A9 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x4F76 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x51AF DUP4 DUP4 DUP4 PUSH2 0x67C6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x67F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x524C SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5268 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52B8 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x52CD JUMPI PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x53E6 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x52F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x5304 JUMPI PUSH2 0x53DE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5327 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x533F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5364 SWAP3 SWAP2 SWAP1 PUSH2 0x8002 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x537C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x53AD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x53AA SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x53B6 JUMPI PUSH2 0x53DE JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x53DC JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x52D1 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5424 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509D SWAP1 PUSH2 0x824F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5430 PUSH2 0x6AA7 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5479 PUSH2 0x6B15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5471 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x54D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x5518 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5544 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E9 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x557E JUMPI PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x55A0 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x55DE SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x561A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x561F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x5642 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x563F SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5681 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56D1 SWAP2 SWAP1 PUSH2 0x7B0D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x57F9 JUMPI PUSH1 0x0 PUSH2 0x5710 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5734 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP9 DUP6 PUSH2 0x684D JUMP JUMPDEST SWAP1 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x574C JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57DB PUSH8 0xDE0B6B3A7640000 PUSH2 0x57D5 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57CE SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x681C JUMP JUMPDEST SWAP1 PUSH2 0x6869 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x57E9 DUP5 DUP4 PUSH2 0x6893 JUMP JUMPDEST SWAP9 POP PUSH2 0x5902 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x58F9 JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x582E JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x584A PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP9 DUP6 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x5862 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58E7 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x58D8 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x684D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x57E9 DUP3 PUSH2 0x57D5 DUP7 DUP9 PUSH2 0x681C JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5917 PUSH2 0x6B47 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x592B SWAP2 SWAP1 PUSH2 0x7733 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5945 SWAP2 SWAP1 PUSH2 0x7717 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x5960 DUP13 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5973 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x82CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x59B1 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x59EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x59F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5A09 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5A1D SWAP2 SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5A29 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A82 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A94 JUMPI PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AC5 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5AB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5AD2 JUMPI POP PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AEF DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5AFD JUMPI POP POP PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5C33 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5BF5 JUMPI PUSH2 0x5B33 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x68F3 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5B3F JUMPI PUSH2 0x5BF5 JUMP JUMPDEST PUSH2 0x5B4E PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x68F3 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5B5A JUMPI PUSH2 0x5BF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B77 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5B84 JUMPI POP PUSH2 0x5BF5 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5BEC JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5BAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5BC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5BD8 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5BEA JUMPI POP POP PUSH2 0x5BF5 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5B0C JUMP JUMPDEST POP PUSH2 0x5C14 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x68F3 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C20 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5B00 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5C58 SWAP2 SWAP1 PUSH2 0x705F JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5D42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x5CAB SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5CF4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CF1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5D36 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5D22 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D27 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E9 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x5CAB SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5D92 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x5D8E JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5DA1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x519E JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x5DBF JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x519E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5DEB SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E05 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x5E19 DUP11 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E38 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D8A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5E85 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E82 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5EC6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5EB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5ED3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F1C SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F6C SWAP2 SWAP1 PUSH2 0x7B0D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6089 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x601C DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x600D SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6036 DUP3 PUSH2 0x57D5 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6054 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP10 DUP6 PUSH2 0x684D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x606D JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E9 PUSH1 0x1 PUSH2 0x6083 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x6869 JUMP JUMPDEST SWAP1 PUSH2 0x684D JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x616E JUMPI PUSH1 0x0 PUSH2 0x60B8 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x60F8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6112 PUSH8 0xDE0B6B3A7640000 PUSH2 0x57D5 DUP6 DUP6 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x612B JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6147 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP10 DUP6 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x6160 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x5902 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6189 PUSH2 0x6B47 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x619D SWAP2 SWAP1 PUSH2 0x7733 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61B7 SWAP2 SWAP1 PUSH2 0x7717 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x5960 DUP13 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6210 JUMPI DUP7 PUSH2 0x6226 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6249 JUMPI DUP7 PUSH2 0x625F JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x6293 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x7E0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x62E7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7457 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6303 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x9E9 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x9E6 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x9E9 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6344 PUSH2 0x6B67 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6358 SWAP2 SWAP1 PUSH2 0x710D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6372 SWAP2 SWAP1 PUSH2 0x710D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x639F SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x82FD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x63E7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x63E4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5EB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB8 JUMP JUMPDEST SWAP4 POP PUSH2 0x9E9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6453 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x646B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x647F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x64A7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6540 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x64E5 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6511 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6539 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x6555 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x53E9 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6561 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x658F SWAP2 SWAP1 PUSH2 0x70BD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x6633 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x65CF SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6617 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6614 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7AB5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6627 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x9E9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x65CF SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6680 SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x669A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x5E19 DUP11 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x66C7 SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x66E1 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x66F9 DUP12 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6718 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D8A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5E85 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E82 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x676E DUP3 PUSH2 0x694B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x678F SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x67AA SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x67BA DUP5 DUP5 DUP4 DUP10 PUSH2 0x34BF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x67EA JUMPI PUSH2 0x67EA PUSH2 0x67E5 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x69F7 JUMP JUMPDEST PUSH2 0x6A51 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6813 JUMPI PUSH2 0x6813 PUSH2 0x67E5 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x69F7 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x682B JUMPI POP PUSH1 0x0 PUSH2 0x519E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6838 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x67E5 PUSH1 0x1 DUP7 DUP7 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x67E5 PUSH1 0x0 DUP7 DUP7 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x687F JUMPI PUSH2 0x687F PUSH2 0x67E5 PUSH1 0x3 DUP6 DUP6 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x688A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x68AC JUMPI PUSH2 0x68AC PUSH2 0x67E5 PUSH1 0x2 DUP6 DUP6 PUSH2 0x6A59 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x68E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x6900 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x6909 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x6916 JUMPI POP PUSH1 0x0 PUSH2 0x9E9 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x6923 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x6933 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x6941 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x6989 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x69C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x69DD JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x69F0 JUMPI PUSH2 0x69ED DUP2 PUSH1 0x0 PUSH2 0x51B4 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A16 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8152 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A16 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8131 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x519E DUP2 PUSH2 0x852A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x519E DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6BD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6BEA PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST PUSH2 0x847A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6C0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD PUSH2 0x6C21 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C0E JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C4E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C5C PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI PUSH2 0x6C84 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x6BC7 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C6D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6CA6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CB4 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH1 0x1F NOT DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x6CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CEF DUP2 PUSH2 0x847A JUMP JUMPDEST PUSH2 0x6CFB DUP12 DUP8 DUP6 ADD PUSH2 0x6BB1 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x6D16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D24 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x6DF8 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6CC5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D4C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6D5A PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6D7E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6DAA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6DB8 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6DD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6DDC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6E08 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6E16 PUSH2 0x6BE5 DUP3 PUSH2 0x84BF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6E2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6E56 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6E64 PUSH2 0x6BE5 DUP3 PUSH2 0x84BF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x269C DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x84ED JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x519E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6EAC JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6EB6 PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x6EC3 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6ED3 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x6EE6 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F02 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F0C PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x6F19 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x6F29 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x6EE6 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F4D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F57 PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x6F64 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6F74 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F90 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F9A PUSH1 0xA0 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6FAE DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x6FC1 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x6FD4 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x6FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FFE DUP5 DUP3 DUP6 ADD PUSH2 0x6DF8 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x701B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E9 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7038 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7043 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x7054 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7074 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x707F DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x7090 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x70A1 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x70B2 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x70D1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x70DC DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x70ED DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7102 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x711F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x712A DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7146 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x7159 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7163 PUSH1 0xA0 PUSH2 0x847A JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x7174 DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7186 DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7198 DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x71AE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x71BA DUP9 DUP3 DUP7 ADD PUSH2 0x6E46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x71E4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x71EF DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x71FF DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x720F DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x721F DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7239 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7245 DUP9 DUP3 DUP10 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7267 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x7272 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x7282 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7292 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x72B8 DUP8 DUP3 DUP9 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x72D9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x72E4 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x72F4 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7304 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7328 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x7333 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x734E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x735A DUP8 DUP4 DUP9 ADD PUSH2 0x6BC7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x736F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x737C DUP7 DUP3 DUP8 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x739D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x73A8 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x720F DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x73D1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x73E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x73F6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x7404 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x7420 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x744B JUMPI DUP1 MLOAD PUSH2 0x7437 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x7424 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x746B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7481 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7494 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x74A2 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x74C2 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x74E4 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x74C6 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x74FB JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7508 DUP7 DUP3 DUP8 ADD PUSH2 0x6D9A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x7518 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6E8C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7533 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7549 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x755C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x756A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x757D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x75B6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x75C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x75D4 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x75F0 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x744B JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x75F4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7626 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x763C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7648 DUP8 DUP4 DUP9 ADD PUSH2 0x6C96 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x765D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x766A DUP7 DUP3 DUP8 ADD PUSH2 0x6C96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x768C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x76A1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x119A DUP5 DUP3 DUP6 ADD PUSH2 0x6D9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76DE JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x770B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x119A DUP5 DUP3 DUP6 ADD PUSH2 0x6E46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7728 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E9 DUP2 PUSH2 0x8555 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7745 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7750 DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP2 POP PUSH2 0x775F DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x6EF1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x777E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x778B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7796 PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x77A8 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x77BD DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x77CD DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x77FC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7812 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x7825 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x782F PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST PUSH2 0x7839 DUP10 DUP5 PUSH2 0x6BB1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x784C JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x7858 DUP11 DUP3 DUP7 ADD PUSH2 0x6C3E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x786F DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x6BB1 JUMP JUMPDEST SWAP5 POP PUSH2 0x787E DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x6BB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7893 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x72B8 DUP8 DUP3 DUP9 ADD PUSH2 0x6D3C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x78B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x78BF DUP7 DUP7 PUSH2 0x6E9B JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x78CF DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x78DF DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x790E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7918 DUP7 DUP7 PUSH2 0x6F3C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x77BD DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x793D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7953 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x795F DUP9 DUP4 DUP10 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x7971 DUP3 PUSH2 0x852A JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x7983 DUP3 PUSH2 0x852A JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x7893 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x79AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x79C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x79CE DUP8 DUP3 DUP9 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x72F4 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x79F4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A09 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7A15 DUP8 DUP3 DUP9 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7A2D DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x70B2 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7A53 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x7A60 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7A6B PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x7A76 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7A90 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x7AA5 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x78DF DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AC7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7AED JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7B24 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x119A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7BD2 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BAD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7BD2 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BF0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7C24 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x84ED JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x119A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7D0E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x84ED JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5902 SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5902 SWAP1 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x7E9E SWAP1 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x7ECD SWAP1 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5902 DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x7EF6 DUP6 PUSH2 0x851D JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7F10 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7BDD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7E9E DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x7F3F DUP12 PUSH2 0x851D JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7F57 DUP3 DUP6 ADD DUP12 PUSH2 0x7BDD JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x7F6B DUP3 DUP11 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x7F7E DUP7 PUSH2 0x851D JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7F96 DUP2 DUP7 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x7FAA DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x119A SWAP1 DUP4 ADD DUP5 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7FF0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1208 DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x8015 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x808B JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x806C DUP9 DUP7 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8048 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1208 SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7ECD PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x119A SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x813E DUP6 PUSH2 0x851D JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x813E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0x816F DUP8 PUSH2 0x84E2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x8186 DUP2 DUP6 PUSH2 0x80D8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x81BF JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x81AD DUP4 DUP4 MLOAD PUSH2 0x7B5D JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8195 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x81DA DUP4 DUP3 PUSH2 0x80D8 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8204 JUMPI PUSH2 0x81F6 DUP6 DUP4 MLOAD PUSH2 0x7B4C JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x81E3 JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x1208 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7C6A JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7C38 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82D7 DUP3 DUP8 PUSH2 0x7C38 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5902 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x8310 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x8346 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x839C PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1208 DUP3 DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x119A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7B9A JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x83F5 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5902 DUP2 DUP6 PUSH2 0x7B9A JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x8445 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x845E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8473 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x84B5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x84D4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 LT PUSH2 0x6771 JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8508 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x84F0 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8517 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x8527 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE SWAP14 0xA6 JUMPDEST POP 0xE0 0xDD PUSH22 0x155E83C26FF605FDB4D8C9035C9B29BC8A69019E22EA 0xE7 0x22 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1307:1221:18:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
                "immutableReferences": {},
                "linkReferences": {},
                "object": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80639209483b11610151578063c25c4138116100c3578063d9bca37211610087578063d9bca372146105c0578063ddd5aa28146105d3578063e8e4af09146105e6578063f1ed7fa4146105f9578063f3868e9c1461038e578063f5a4994d1461060c57610269565b8063c25c413814610561578063c831908414610574578063c8c74a3714610587578063c94706d81461059a578063cc1621c9146105ad57610269565b8063a469841711610115578063a4698417146104e1578063a75e744b146104f4578063ab00027614610507578063adc636bf1461051a578063b56b83511461053b578063b90cd2fb1461054e57610269565b80639209483b1461046657806398777748146104795780639e3f05c31461048c5780639ea0ff13146104ae578063a0295b8b146104ce57610269565b80633105fec1116101ea57806357494b1d116101ae57806357494b1d146103e75780635d5b674f146103fa57806368be3cf21461040d57806374c9d2551461042d5780637f7f4f13146104405780638b6d7b441461045357610269565b80633105fec11461037b578063360523911461038e57806340bc03ae146103a1578063494569db146103b45780634edfb5b2146103c757610269565b8063281e343211610231578063281e34321461030d57806329fa4aa0146103205780632aa64319146103335780632d753aa41461035557806330d6570d1461036857610269565b80630496d5dc1461026e57806309e7c13414610298578063149dab0e146102b85780632339078f146102da578063252322b3146102fa575b600080fd5b61028161027c366004617314565b61061f565b60405161028f929190617fdd565b60405180910390f35b6102ab6102a6366004617612565b6107c5565b60405161028f919061836c565b6102cb6102c63660046177e7565b6109f0565b60405161028f93929190617ea9565b6102ed6102e8366004617768565b610b50565b60405161028f9190618099565b6102ed610308366004617252565b610d77565b6102ed61031b366004617a3d565b610f4d565b6102ed61032e3660046178a0565b6111a2565b6103466103413660046178f9565b611211565b60405161028f939291906180ac565b6102ed6103633660046171cd565b6114ee565b6102ed610376366004617252565b611677565b6102ed610389366004617314565b6117eb565b6102ed61039c3660046178f9565b611966565b6102ed6103af3660046178a0565b611a00565b6102816103c2366004617314565b611b81565b6103da6103d53660046179df565b611d0d565b60405161028f91906180fa565b6102ed6103f5366004617252565b611f8a565b6102ed610408366004617252565b6124dc565b61042061041b366004617521565b612542565b60405161028f9190618024565b6102cb61043b3660046177e7565b6126a3565b6102ed61044e366004617a3d565b6126b2565b6102ed6104613660046178a0565b6128ff565b6102ed6104743660046178a0565b612c62565b6102ed610487366004617252565b612e62565b61049f61049a366004617928565b613399565b60405161028f939291906180e1565b6104c16104bc3660046172c4565b6134bf565b60405161028f91906180d8565b6102ed6104dc366004617768565b6136d5565b6102ed6104ef366004617252565b6138d1565b610346610502366004617386565b613a26565b6102ed610515366004617252565b613b63565b61052d610528366004617252565b613cc1565b60405161028f92919061810d565b6102ab610549366004617612565b613e11565b6102ed61055c366004617252565b61403c565b6102ed61056f366004617252565b6140a2565b6102ed610582366004617252565b614108565b6102ed610595366004617314565b6142c5565b6102ed6105a8366004617252565b614431565b61049f6105bb366004617928565b61458f565b6103466105ce366004617386565b614775565b6103466105e13660046178f9565b614864565b6102ed6105f4366004617252565b614af7565b6104c1610607366004617998565b614c2a565b61052d61061a366004617252565b614dc9565b80516060908190806001600160401b038111801561063c57600080fd5b50604051908082528060200260200182016040528015610666578160200160208202803683370190505b5091506106738686614eb5565b925082516000141561068557506107bd565b60005b818110156107ba57866001600160a01b031663a8312b1d620249f08784815181106106af57fe5b6020026020010151878a6040518563ffffffff1660e01b81526004016106d7939291906183dc565b60006040518083038187803b1580156106ef57600080fd5b5086fa9350505050801561072557506040513d6000823e601f3d908101601f19168201604052610722919081019061767b565b60015b61075f573d808015610753576040519150601f19603f3d011682016040523d82523d6000602084013e610758565b606091505b50506107ba565b8060018851038151811061076f57fe5b602002602001015184838151811061078357fe5b60200260200101818152505083828151811061079b57fe5b6020026020010151600014156107b157506107ba565b50600101610688565b50505b935093915050565b6107cd616a78565b6000805b855181146108d35760608682815181106107e757fe5b602002602001015160200151905061080e602082510386836151a49092919063ffffffff16565b6000606088848151811061081e57fe5b6020026020010151600001516001600160a01b0316836040516108419190617cfc565b6000604051808303816000865af19150503d806000811461087e576040519150601f19603f3d011682016040523d82523d6000602084013e610883565b606091505b509150915081156108c55760006108a76020835103836151b490919063ffffffff16565b9050858111156108c35760208701859052604087018290529450845b505b5050508060010190506107d1565b50806108df57506109e9565b60005b845181146109e65760608582815181106108f857fe5b602002602001015160200151905061091f602082510384836151a49092919063ffffffff16565b6000606087848151811061092f57fe5b6020026020010151600001516001600160a01b0316836040516109529190617cfc565b6000604051808303816000865af19150503d806000811461098f576040519150601f19603f3d011682016040523d82523d6000602084013e610994565b606091505b509150915081156109d85760006109b86020835103836151b490919063ffffffff16565b87519091508111156109d65780875260608701859052608087018290525b505b5050508060010190506108e2565b50505b9392505050565b600060608086602001515160001415610a0857610b46565b610a14878787876151c0565b855191945092506001600160401b0381118015610a3057600080fd5b50604051908082528060200260200182016040528015610a5a578160200160208202803683370190505b50905060005b8151811015610b4457836001600160a01b0316637f9c0ecd620493e085888581518110610a8957fe5b60200260200101516040518463ffffffff1660e01b8152600401610aae929190618002565b60206040518083038187803b158015610ac657600080fd5b5086fa93505050508015610af7575060408051601f3d908101601f19168201909252610af4918101906176cd565b60015b610b0057610b44565b80838381518110610b0d57fe5b602002602001018181525050828281518110610b2557fe5b602002602001015160001415610b3b5750610b44565b50600101610a60565b505b9450945094915050565b6060610b5c83856153f2565b602085015160408051600280825260608281019093528160200160208202803683370190505090508581600081518110610b9257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110610bc057fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b0381118015610bf057600080fd5b50604051908082528060200260200182016040528015610c1a578160200160208202803683370190505b509350610c25616aa7565b610c2d615428565b905060005b82811015610d6a576060610c598b898481518110610c4c57fe5b6020026020010151615457565b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e90610c8f9060009085908a908990600401618160565b600060405180830381600087803b158015610ca957600080fd5b505af1925050508015610cde57506040513d6000823e601f3d908101601f19168201604052610cdb919081019061758f565b60015b610d19573d808015610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b606091505b505050610d6a565b600081600181518110610d2857fe5b602002602001015160001902905060008113610d4657505050610d6a565b80898581518110610d5357fe5b602002602001018181525050505050600101610c32565b5050505050949350505050565b6060610d8383856153f2565b8151806001600160401b0381118015610d9b57600080fd5b50604051908082528060200260200182016040528015610dc5578160200160208202803683370190505b50915060006001600160a01b03861615610de857610de387876154e9565b610deb565b60005b905060006001600160a01b03861615610e0d57610e0888876154e9565b610e10565b60005b905060005b83811015610f415760016001600160a01b038816610e7357610e5284632640f62c60e01b898581518110610e4557fe5b6020026020010151615568565b878481518110610e5e57fe5b60200260200101819350828152505050610f0d565b6001600160a01b038916610e9957610e52836359e9486260e01b898581518110610e4557fe5b6000610eb3846359e9486260e01b8a8681518110610e4557fe5b925090508015610ef057610ecf856309903d8b60e21b83615568565b888581518110610edb57fe5b60200260200101819450828152505050610f0b565b6000878481518110610efe57fe5b6020026020010181815250505b505b801580610f2d5750858281518110610f2157fe5b60200260200101516000145b15610f385750610f41565b50600101610e15565b50505050949350505050565b6060610f5983856153f2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd5919061700a565b8451909150806001600160401b0381118015610ff057600080fd5b5060405190808252806020026020018201604052801561101a578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561105657600080fd5b505afa15801561106a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108e919061700a565b6001600160a01b0316866001600160a01b0316141580156111315750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b919061700a565b6001600160a01b0316876001600160a01b031614155b1561113e5750505061119a565b60005b81811015610f4157600061116c8a898b8a868151811061115d57fe5b6020026020010151898961564b565b9050806111795750610f41565b8086838151811061118657fe5b602090810291909101015250600101611141565b949350505050565b60408051606081810190925261120890806111c1868960808401618237565b604051602081830303815290604052815260200186886040516020016111e8929190618237565b604051602081830303815290604052815260200161590c81525083615a3f565b95945050505050565b600080606061122085876153f2565b8351806001600160401b038111801561123857600080fd5b50604051908082528060200260200182016040528015611262578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c690611295908a908a90600401617d45565b60206040518083038186803b1580156112ad57600080fd5b505afa1580156112c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e5919061700a565b925060006001600160a01b03841615611303575060019350866113a2565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690611334908a908c90600401617d45565b60206040518083038186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611384919061700a565b93506001600160a01b03841661139b575050610b46565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141391906176ad565b61141e575050610b46565b60005b828110156114e157600061149b8a87858e602001516040516020016114499493929190617d5f565b6040516020818303038152906040528a88868f602001516040516020016114739493929190617d5f565b6040516020818303038152906040528a858151811061148e57fe5b6020026020010151615c3c565b9050808583815181106114aa57fe5b6020026020010181815250508482815181106114c257fe5b6020026020010151600014156114d857506114e1565b50600101611421565b5050509450945094915050565b8051606090806001600160401b038111801561150957600080fd5b50604051908082528060200260200182016040528015611533578160200160208202803683370190505b5091506001600160a01b03871661154a5750611208565b60005b8181101561166c5760006060896001600160a01b031662061a80636e79e13360e01b8b8b8b8b898151811061157e57fe5b60200260200101516040516024016115999493929190617dbe565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516115d79190617cfc565b6000604051808303818686fa925050503d8060008114611613576040519150601f19603f3d011682016040523d82523d6000602084013e611618565b606091505b50915091506000821561163c578180602001905181019061163991906176cd565b90505b806116495750505061166c565b8086858151811061165657fe5b602090810291909101015250505060010161154d565b505095945050505050565b606061168383856153f2565b8151806001600160401b038111801561169b57600080fd5b506040519080825280602002602001820160405280156116c5578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b03166372ea9076620c350088888886815181106116f457fe5b60200260200101516040518563ffffffff1660e01b815260040161171a93929190617e40565b60206040518083038187803b15801561173257600080fd5b5086fa93505050508015611763575060408051601f3d908101601f19168201909252611760918101906176cd565b60015b61179d573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b606091505b50506117e1565b808483815181106117aa57fe5b6020026020010181815250508382815181106117c257fe5b6020026020010151600014156117d857506117e1565b506001016116cb565b5050949350505050565b8051606090806001600160401b038111801561180657600080fd5b50604051908082528060200260200182016040528015611830578160200160208202803683370190505b50915060005b818110156109e657856001600160a01b031663d06ca61f620249f086848151811061185d57fe5b6020026020010151886040518463ffffffff1660e01b81526004016118839291906183c3565b60006040518083038187803b15801561189b57600080fd5b5086fa935050505080156118d157506040513d6000823e601f3d908101601f191682016040526118ce919081019061767b565b60015b61190b573d8080156118ff576040519150601f19603f3d011682016040523d82523d6000602084013e611904565b606091505b50506109e6565b8060018751038151811061191b57fe5b602002602001015184838151811061192f57fe5b60200260200101818152505083828151811061194757fe5b60200260200101516000141561195d57506109e6565b50600101611836565b606061197283856153f2565b84602001516001600160a01b0316846001600160a01b03161415806119a4575084516001600160a01b03848116911614155b156119f85781516060816001600160401b03811180156119c357600080fd5b506040519080825280602002602001820160405280156119ed578160200160208202803683370190505b50925061119a915050565b509392505050565b8051606090806001600160401b0381118015611a1b57600080fd5b50604051908082528060200260200182016040528015611a45578160200160208202803683370190505b50915060005b818110156117e1576000606088600001516001600160a01b0316621e84808a602001518a8a8a8881518110611a7c57fe5b6020026020010151604051602401611a9693929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611ad49190617cfc565b6000604051808303818686fa925050503d8060008114611b10576040519150601f19603f3d011682016040523d82523d6000602084013e611b15565b606091505b509150915060008215611b395781806020019051810190611b3691906176cd565b90505b80868581518110611b4657fe5b602002602001018181525050858481518110611b5e57fe5b602002602001015160001415611b76575050506117e1565b505050600101611a4b565b80516060908190806001600160401b0381118015611b9e57600080fd5b50604051908082528060200260200182016040528015611bc8578160200160208202803683370190505b509150611bd58686614eb5565b9250825160001415611be757506107bd565b60005b818110156107ba57866001600160a01b0316639e269b68620249f0878481518110611c1157fe5b6020026020010151878a6040518563ffffffff1660e01b8152600401611c39939291906183dc565b60006040518083038187803b158015611c5157600080fd5b5086fa93505050508015611c8757506040513d6000823e601f3d908101601f19168201604052611c84919081019061767b565b60015b611cb5573d808015610753576040519150601f19603f3d011682016040523d82523d6000602084013e610758565b80600081518110611cc257fe5b6020026020010151848381518110611cd657fe5b602002602001018181525050838281518110611cee57fe5b602002602001015160001415611d0457506107ba565b50600101611bea565b60208481015160408051600180825281830190925260609384929082810190803683370190505090508581600081518110611d4457fe5b602090810291909101015260606000604051908082528060200260200182016040528015611d7c578160200160208202803683370190505b50905087606001516001600160a01b0316866001600160a01b03161415611e6d576040516381efcbdd60e01b81526001600160a01b038416906381efcbdd906207a12090611dd590899060019088908890600401617edf565b60006040518083038187803b158015611ded57600080fd5b5086fa93505050508015611e2357506040513d6000823e601f3d908101601f19168201604052611e2091908101906176e5565b60015b611e5d573d808015611e51576040519150601f19603f3d011682016040523d82523d6000602084013e611e56565b606091505b5050611e68565b935061119a92505050565b611f7f565b87606001516001600160a01b0316856001600160a01b03161415611ec3576040516361e597f960e01b81526001600160a01b038416906361e597f9906207a12090611dd5908a9060019088908890600401617edf565b6040516302b9a6cd60e11b81526001600160a01b038416906305734d9a906207a12090611f03908a90600190889088908d90849084908490600401617f22565b60006040518083038187803b158015611f1b57600080fd5b5086fa93505050508015611f5157506040513d6000823e601f3d908101601f19168201604052611f4e91908101906176e5565b60015b611e5d573d808015610d6a576040519150601f19603f3d011682016040523d82523d6000602084013e610d6a565b505050949350505050565b80516060908590806001600160401b0381118015611fa757600080fd5b50604051908082528060200260200182016040528015611fd1578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612001908990600401617d18565b60206040518083038186803b15801561201957600080fd5b505afa15801561202d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205191906176ad565b15806120d65750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612084908890600401617d18565b60206040518083038186803b15801561209c57600080fd5b505afa1580156120b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d491906176ad565b155b156120e257505061119a565b6120ea616ace565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612116908a90600401617d18565b60206040518083038186803b15801561212e57600080fd5b505afa158015612142573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216691906176cd565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612194908990600401617d18565b60206040518083038186803b1580156121ac57600080fd5b505afa1580156121c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e491906176cd565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce690612215908a90600401617d18565b60206040518083038186803b15801561222d57600080fd5b505afa158015612241573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226591906176cd565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690612298908990600401617d18565b60206040518083038186803b1580156122b057600080fd5b505afa1580156122c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e891906176cd565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561232a57600080fd5b505afa15801561233e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236291906176cd565b608082015260005b82811015610f415761239582602001516003670de0b6b3a76400008161238c57fe5b04600101615d75565b8682815181106123a157fe5b602002602001015111156123b457610f41565b836001600160a01b031663f8d6aed4620493e084600001518560400151866020015187606001518c88815181106123e757fe5b602002602001015189608001516040518863ffffffff1660e01b815260040161241596959493929190618407565b60206040518083038187803b15801561242d57600080fd5b5086fa9350505050801561245e575060408051601f3d908101601f1916820190925261245b918101906176cd565b60015b612498573d80801561248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b606091505b5050610f41565b808683815181106124a557fe5b6020026020010181815250508582815181106124bd57fe5b6020026020010151600014156124d35750610f41565b5060010161236a565b60408051606081810190925261120890806124fb868960808401617d45565b60405160208183030381529060405281526020018688604051602001612522929190617d45565b6040516020818303038152906040528152602001615dd281525083615a3f565b6060816001600160401b038111801561255a57600080fd5b5060405190808252806020026020018201604052801561259457816020015b612581616afd565b8152602001906001900390816125795790505b50905060005b80831461269c5760018282815181106125af57fe5b6020908102919091018101519115159101528383828181106125cd57fe5b90506020028101906125df919061842f565b151590506125ec57612694565b308484838181106125f957fe5b905060200281019061260b919061842f565b604051612619929190617cec565b6000604051808303816000865af19150503d8060008114612656576040519150601f19603f3d011682016040523d82523d6000602084013e61265b565b606091505b5083838151811061266857fe5b602002602001015160200184848151811061267f57fe5b60209081029190910101519190915290151590525b60010161259a565b5092915050565b60006060809450945094915050565b60606126be83856153f2565b6000856000015190506000816001600160a01b03166336569e776040518163ffffffff1660e01b815260040160206040518083038186803b15801561270257600080fd5b505afa158015612716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273a919061700a565b8451909150806001600160401b038111801561275557600080fd5b5060405190808252806020026020018201604052801561277f578160200160208202803683370190505b509350826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b1580156127bb57600080fd5b505afa1580156127cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f3919061700a565b6001600160a01b0316866001600160a01b0316141580156128965750826001600160a01b031663f4b9fa756040518163ffffffff1660e01b815260040160206040518083038186803b15801561284857600080fd5b505afa15801561285c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612880919061700a565b6001600160a01b0316876001600160a01b031614155b156128a35750505061119a565b60005b81811015610f415760006128d18a898b8a86815181106128c257fe5b60200260200101518989615ee6565b9050806128de5750610f41565b808683815181106128eb57fe5b6020908102919091010152506001016128a6565b6060600085600001516001600160a01b031663bbd7f25585600f0b6040518263ffffffff1660e01b815260040161293691906180d8565b60206040518083038186803b15801561294e57600080fd5b505afa158015612962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298691906176cd565b8651604051631e01043960e01b81526001600160a01b0390911690631e010439906129b990600f89900b906004016180d8565b60206040518083038186803b1580156129d157600080fd5b505afa1580156129e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0991906176cd565b039050600086600001516001600160a01b031663c582951486600f0b6040518263ffffffff1660e01b8152600401612a4191906180d8565b60806040518083038186803b158015612a5957600080fd5b505afa158015612a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a919190617ad8565b935050505080601203600a0a8281612aa557fe5b85519190049250806001600160401b0381118015612ac257600080fd5b50604051908082528060200260200182016040528015612aec578160200160208202803683370190505b50935060005b81811015610f4157600060608a600001516001600160a01b0316620927c08c602001518c8c8c8881518110612b2357fe5b6020026020010151604051602401612b3d93929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612b7b9190617cfc565b6000604051808303818686fa925050503d8060008114612bb7576040519150601f19603f3d011682016040523d82523d6000602084013e612bbc565b606091505b509150915060008215612be05781806020019051810190612bdd91906176cd565b90505b868110612c1a57835b85811015612c115787898281518110612bfe57fe5b6020908102919091010152600101612be9565b50505050610f41565b80888581518110612c2757fe5b602002602001018181525050878481518110612c3f57fe5b602002602001015160001415612c5757505050610f41565b505050600101612af2565b60408401516060906001600160e01b031916612ce4576040805160608101909152612cdd9080612c96868960808401618237565b60405160208183030381529060405281526020018688604051602001612cbd929190618237565b604051602081830303815290604052815260200161617e81525083615a3f565b905061119a565b8151806001600160401b0381118015612cfc57600080fd5b50604051908082528060200260200182016040528015612d26578160200160208202803683370190505b50915060005b818110156117e1576000606088600001516001600160a01b0316621e84808a604001518a8a8a8881518110612d5d57fe5b6020026020010151604051602401612d7793929190618219565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612db59190617cfc565b6000604051808303818686fa925050503d8060008114612df1576040519150601f19603f3d011682016040523d82523d6000602084013e612df6565b606091505b509150915060008215612e1a5781806020019051810190612e1791906176cd565b90505b80868581518110612e2757fe5b602002602001018181525050858481518110612e3f57fe5b602002602001015160001415612e57575050506117e1565b505050600101612d2c565b80516060908590806001600160401b0381118015612e7f57600080fd5b50604051908082528060200260200182016040528015612ea9578160200160208202803683370190505b50604051630bcded8960e21b81529093506001600160a01b03831690632f37b62490612ed9908990600401617d18565b60206040518083038186803b158015612ef157600080fd5b505afa158015612f05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2991906176ad565b1580612fae5750604051630bcded8960e21b81526001600160a01b03831690632f37b62490612f5c908890600401617d18565b60206040518083038186803b158015612f7457600080fd5b505afa158015612f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fac91906176ad565b155b15612fba57505061119a565b612fc2616ace565b60405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f90612fee908a90600401617d18565b60206040518083038186803b15801561300657600080fd5b505afa15801561301a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303e91906176cd565b815260405163f8b2cb4f60e01b81526001600160a01b0384169063f8b2cb4f9061306c908990600401617d18565b60206040518083038186803b15801561308457600080fd5b505afa158015613098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130bc91906176cd565b6020820152604051634a46c67360e11b81526001600160a01b0384169063948d8ce6906130ed908a90600401617d18565b60206040518083038186803b15801561310557600080fd5b505afa158015613119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313d91906176cd565b60408083019190915251634a46c67360e11b81526001600160a01b0384169063948d8ce690613170908990600401617d18565b60206040518083038186803b15801561318857600080fd5b505afa15801561319c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c091906176cd565b816060018181525050826001600160a01b031663d4cadf686040518163ffffffff1660e01b815260040160206040518083038186803b15801561320257600080fd5b505afa158015613216573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323a91906176cd565b608082015260005b82811015610f4157815161325e906706f05b59d3b20000615d75565b86828151811061326a57fe5b6020026020010151111561327d57610f41565b836001600160a01b031663ba9530a6620493e084600001518560400151866020015187606001518c88815181106132b057fe5b602002602001015189608001516040518863ffffffff1660e01b81526004016132de96959493929190618407565b60206040518083038187803b1580156132f657600080fd5b5086fa93505050508015613327575060408051601f3d908101601f19168201909252613324918101906176cd565b60015b613355573d80801561248c576040519150601f19603f3d011682016040523d82523d6000602084013e612491565b8086838151811061336257fe5b60200260200101818152505085828151811061337a57fe5b6020026020010151600014156133905750610f41565b50600101613242565b60006060806133a885876153f2565b6133b38787876161d2565b9250826133bf57610b46565b60405163276fdad960e11b81523090634edfb5b2906133e8908a9087908b908b90600401618333565b60006040518083038186803b15801561340057600080fd5b505afa158015613414573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261343c91908101906176e5565b8760800181905250866080015191506134b36040518060600160405280878a60405160200161346c929190617fb9565b6040516020818303038152906040528152602001888a604051602001613493929190617fb9565b604051602081830303815290604052815260200161633981525085615a3f565b90509450945094915050565b600080856001600160a01b031663901754d786866040518363ffffffff1660e01b81526004016134f0929190617d45565b60206040518083038186803b15801561350857600080fd5b505afa15801561351c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613540919061700a565b90506001600160a01b03811661355a57600091505061119a565b60006001600160a01b038616156135ec576040516370a0823160e01b81526001600160a01b038716906370a0823190613597908590600401617d18565b60206040518083038186803b1580156135af57600080fd5b505afa1580156135c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e791906176cd565b6135f8565b816001600160a01b0316315b90508381101561360d5760009250505061119a565b6040516303c2803f60e31b81526001600160a01b03831690631e1401f890620249f090613642908a908a908a90600401617e40565b60206040518083038187803b15801561365a57600080fd5b5086fa9350505050801561368b575060408051601f3d908101601f19168201909252613688918101906176cd565b60015b6136cb573d8080156136b9576040519150601f19603f3d011682016040523d82523d6000602084013e6136be565b606091505b506000935050505061119a565b925061119a915050565b60606136e183856153f2565b60208501516040805160028082526060828101909352816020016020820280368337019050509050858160008151811061371757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061374557fe5b6001600160a01b03909216602092830291909101909101528351806001600160401b038111801561377557600080fd5b5060405190808252806020026020018201604052801561379f578160200160208202803683370190505b5093506137aa616aa7565b6137b2615428565b905060005b82811015610d6a5760606137d18b898481518110610c4c57fe5b604051637c26833760e11b81529091506001600160a01b0387169063f84d066e906138079060019085908a908990600401618160565b600060405180830381600087803b15801561382157600080fd5b505af192505050801561385657506040513d6000823e601f3d908101601f19168201604052613853919081019061758f565b60015b613884573d808015610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b60008160008151811061389357fe5b60200260200101519050600081136138ad57505050610d6a565b808985815181106138ba57fe5b6020026020010181815250505050506001016137b7565b8051606090806001600160401b03811180156138ec57600080fd5b50604051908082528060200260200182016040528015613916578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663343fbcdd62061a80888888868151811061394557fe5b60200260200101516040518563ffffffff1660e01b815260040161396b93929190617e40565b60206040518083038187803b15801561398357600080fd5b5086fa935050505080156139b4575060408051601f3d908101601f191682019092526139b1918101906176cd565b60015b6139e2573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b808483815181106139ef57fe5b602002602001018181525050838281518110613a0757fe5b602002602001015160001415613a1d57506117e1565b5060010161391c565b6000806060613a3585876153f2565b8351806001600160401b0381118015613a4d57600080fd5b50604051908082528060200260200182016040528015613a77578160200160208202803683370190505b509150613a8689898989616420565b945092506001600160a01b038316613a9e5750613b58565b60005b81811015613b55576000613b0f898688604051602001613ac393929190617de8565b604051602081830303815290604052898789604051602001613ae793929190617de8565b604051602081830303815290604052898581518110613b0257fe5b6020026020010151616575565b905080848381518110613b1e57fe5b602002602001018181525050838281518110613b3657fe5b602002602001015160001415613b4c5750613b55565b50600101613aa1565b50505b955095509592505050565b6060613b6f83856153f2565b8151806001600160401b0381118015613b8757600080fd5b50604051908082528060200260200182016040528015613bb1578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663144a2752620f42408789888681518110613be057fe5b60200260200101516040518563ffffffff1660e01b8152600401613c0693929190617e40565b60206040518083038187803b158015613c1e57600080fd5b5086fa93505050508015613c4f575060408051601f3d908101601f19168201909252613c4c918101906176cd565b60015b613c7d573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b80848381518110613c8a57fe5b602002602001018181525050838281518110613ca257fe5b602002602001015160001415613cb857506117e1565b50600101613bb7565b60006060613ccf84866153f2565b8251806001600160401b0381118015613ce757600080fd5b50604051908082528060200260200182016040528015613d11578160200160208202803683370190505b50915060005b81811015613d86576000613d40898989898681518110613d3357fe5b60200260200101516134bf565b905080848381518110613d4f57fe5b602002602001018181525050838281518110613d6757fe5b602002602001015160001415613d7d5750613d86565b50600101613d17565b5060405163901754d760e01b81526001600160a01b0388169063901754d790613db59089908990600401617d45565b60206040518083038186803b158015613dcd57600080fd5b505afa158015613de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e05919061700a565b92505094509492505050565b613e19616a78565b60001980825260005b84518114613f30576060858281518110613e3857fe5b6020026020010151602001519050613e5f602082510386836151a49092919063ffffffff16565b60006060878481518110613e6f57fe5b6020026020010151600001516001600160a01b031683604051613e929190617cfc565b6000604051808303816000865af19150503d8060008114613ecf576040519150601f19603f3d011682016040523d82523d6000602084013e613ed4565b606091505b50915091508115613f22576000613ef86020835103836151b490919063ffffffff16565b9050600081118015613f0957508581105b15613f205760608701859052608087018290529450845b505b505050806001019050613e22565b50600019811415613f4157506109e9565b60005b855181146109e6576060868281518110613f5a57fe5b6020026020010151602001519050613f81602082510384836151a49092919063ffffffff16565b60006060306001600160a01b031683604051613f9d9190617cfc565b6000604051808303816000865af19150503d8060008114613fda576040519150601f19603f3d011682016040523d82523d6000602084013e613fdf565b606091505b5091509150811561402e5760006140036020835103836151b490919063ffffffff16565b90506000811180156140155750865181105b1561402c5780875260208701859052604087018290525b505b505050806001019050613f44565b604080516060818101909252611208908061405b868960808401617d45565b60405160208183030381529060405281526020018688604051602001614082929190617d45565b604051602081830303815290604052815260200161666781525083615a3f565b60408051606081810190925261120890806140c1868960808401617d45565b604051602081830303815290604052815260200186886040516020016140e8929190617d45565b60405160208183030381529060405281526020016166ae81525083615a3f565b606061411483856153f2565b8151806001600160401b038111801561412c57600080fd5b50604051908082528060200260200182016040528015614156578160200160208202803683370190505b50915060006001600160a01b038616156141795761417487876154e9565b61417c565b60005b905060006001600160a01b0386161561419e5761419988876154e9565b6141a1565b60005b905060005b83811015610f415760016001600160a01b0388166141f7576141d6846395b68fe760e01b898581518110610e4557fe5b8784815181106141e257fe5b60200260200101819350828152505050614291565b6001600160a01b03891661421d576141d68363cd7724c360e01b898581518110610e4557fe5b6000614237856395b68fe760e01b8a8681518110610e4557fe5b925090508015614274576142538463cd7724c360e01b83615568565b88858151811061425f57fe5b6020026020010181945082815250505061428f565b600087848151811061428257fe5b6020026020010181815250505b505b8015806142b157508582815181106142a557fe5b60200260200101516000145b156142bc5750610f41565b506001016141a6565b8051606090806001600160401b03811180156142e057600080fd5b5060405190808252806020026020018201604052801561430a578160200160208202803683370190505b50915060005b818110156109e657856001600160a01b0316631f00ca74620249f086848151811061433757fe5b6020026020010151886040518463ffffffff1660e01b815260040161435d9291906183c3565b60006040518083038187803b15801561437557600080fd5b5086fa935050505080156143ab57506040513d6000823e601f3d908101601f191682016040526143a8919081019061767b565b60015b6143d9573d8080156118ff576040519150601f19603f3d011682016040523d82523d6000602084013e611904565b806000815181106143e657fe5b60200260200101518483815181106143fa57fe5b60200260200101818152505083828151811061441257fe5b60200260200101516000141561442857506109e6565b50600101614310565b606061443d83856153f2565b8151806001600160401b038111801561445557600080fd5b5060405190808252806020026020018201604052801561447f578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663ff1fd974620f424088888886815181106144ae57fe5b60200260200101516040518563ffffffff1660e01b81526004016144d493929190617e40565b60206040518083038187803b1580156144ec57600080fd5b5086fa9350505050801561451d575060408051601f3d908101601f1916820190925261451a918101906176cd565b60015b61454b573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b8084838151811061455857fe5b60200260200101818152505083828151811061457057fe5b60200260200101516000141561458657506117e1565b50600101614485565b600060608061459e85876153f2565b6145a98787876161d2565b9250826145b557610b46565b60405163276fdad960e11b81523090634edfb5b2906145de908a9087908b908b90600401618333565b60006040518083038186803b1580156145f657600080fd5b505afa15801561460a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261463291908101906176e5565b608088018190528451909250806001600160401b038111801561465457600080fd5b5060405190808252806020026020018201604052801561467e578160200160208202803683370190505b50915060005b81811015614769576000306001600160a01b031663f1ed7fa48b8b8b8b87815181106146ac57fe5b60200260200101516040518563ffffffff1660e01b81526004016146d394939291906182fd565b60206040518083038186803b1580156146eb57600080fd5b505afa1580156146ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061472391906176cd565b90508084838151811061473257fe5b60200260200101818152505083828151811061474a57fe5b6020026020010151600014156147605750614769565b50600101614684565b50509450945094915050565b600080606061478485876153f2565b61479088888888616420565b935091506001600160a01b0382166147a757613b58565b8351806001600160401b03811180156147bf57600080fd5b506040519080825280602002602001820160405280156147e9578160200160208202803683370190505b506040805160608101909152909250614856908061480d8987891560808501617de8565b604051602081830303815290604052815260200189868860405160200161483693929190617de8565b604051602081830303815290604052815260200161657581525086615a3f565b915050955095509592505050565b600080606061487385876153f2565b8351806001600160401b038111801561488b57600080fd5b506040519080825280602002602001820160405280156148b5578160200160208202803683370190505b508851604051630939d86360e11b81529193506001600160a01b031690631273b0c6906148e8908a908a90600401617d45565b60206040518083038186803b15801561490057600080fd5b505afa158015614914573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614938919061700a565b925060006001600160a01b03841615614956575060019350866149f5565b8851604051630939d86360e11b81526001600160a01b0390911690631273b0c690614987908a908c90600401617d45565b60206040518083038186803b15801561499f57600080fd5b505afa1580156149b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149d7919061700a565b93506001600160a01b0384166149ee575050610b46565b5060009350855b836001600160a01b031663dd58b41c6040518163ffffffff1660e01b815260040160206040518083038186803b158015614a2e57600080fd5b505afa158015614a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a6691906176ad565b614a71575050610b46565b614ae960405180606001604052808987858e60200151604051602001614a9a9493929190617d5f565b60405160208183030381529060405281526020018a87858e60200151604051602001614ac99493929190617d5f565b6040516020818303038152906040528152602001615c3c81525087615a3f565b925050509450945094915050565b8051606090806001600160401b0381118015614b1257600080fd5b50604051908082528060200260200182016040528015614b3c578160200160208202803683370190505b50915060005b818110156117e157866001600160a01b031663838e6a22620493e08888888681518110614b6b57fe5b60200260200101516040518563ffffffff1660e01b8152600401614b9193929190617e40565b60206040518083038187803b158015614ba957600080fd5b5086fa93505050508015614bda575060408051601f3d908101601f19168201909252614bd7918101906176cd565b60015b614c08573d808015611791576040519150601f19603f3d011682016040523d82523d6000602084013e611796565b80848381518110614c1557fe5b60200260200101818152505050600101614b42565b600084608001515160001415614c425750600061119a565b84604001516001600160a01b031663418436bc6207a12087606001516001600160a01b0316876001600160a01b031614614c7c5786614c92565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614614cb55786614ccb565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b8660008b608001516040518763ffffffff1660e01b8152600401614cf3959493929190617e64565b60206040518083038187803b158015614d0b57600080fd5b5086fa93505050508015614d3c575060408051601f3d908101601f19168201909252614d39918101906176cd565b60015b614d7a573d808015614d6a576040519150601f19603f3d011682016040523d82523d6000602084013e614d6f565b606091505b50600091505061119a565b6000614d8585616763565b60ff1690506000614d9587616763565b60ff169050670de0b6b3a764000081600a0a83600a0a8786020281614db657fe5b0481614dbe57fe5b04935050505061119a565b60006060614dd784866153f2565b8251806001600160401b0381118015614def57600080fd5b50604051908082528060200260200182016040528015614e19578160200160208202803683370190505b509150614e8460405180606001604052808988604051602001614e3d929190617d45565b60405160208183030381529060405281526020018989604051602001614e64929190617d45565b604051602081830303815290604052815260200161677681525085615a3f565b60405163901754d760e01b81529092506001600160a01b0388169063901754d790613db59089908990600401617d45565b60606000836001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015614ef257600080fd5b505afa158015614f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614f2a919061700a565b905060018351036001600160401b0381118015614f4657600080fd5b50604051908082528060200260200182016040528015614f70578160200160208202803683370190505b50915060005b825181101561519b576060826001600160a01b0316635b1dc86f620249f0878581518110614fa057fe5b6020026020010151888660010181518110614fb757fe5b60200260200101516040518463ffffffff1660e01b8152600401614fdc929190617d45565b60006040518083038187803b158015614ff457600080fd5b5086fa9350505050801561502a57506040513d6000823e601f3d908101601f1916820160405261502791908101906173bf565b60015b615079573d808015615058576040519150601f19603f3d011682016040523d82523d6000602084013e61505d565b606091505b5050604080516000815260208101909152935061519e92505050565b60006001825110156150a65760405162461bcd60e51b815260040161509d90618294565b60405180910390fd5b60005b825181101561518f5760008382815181106150c057fe5b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561510057600080fd5b505afa158015615114573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061513891906176cd565b9050828111156151865780925083828151811061515157fe5b602002602001015188878151811061516557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b506001016150a9565b50505050600101614f76565b50505b92915050565b6151af8383836167c6565b505050565b60006109e983836167f2565b6000606085600001516001600160a01b03166321f8a72187600001516001600160a01b0316639232494e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561521457600080fd5b505afa158015615228573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061524c91906176cd565b6040518263ffffffff1660e01b815260040161526891906180d8565b60206040518083038186803b15801561528057600080fd5b505afa158015615294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906152b8919061700a565b9150856020015151600014156152cd576153e9565b6000805b8760200151518110156153e6576002886020015182815181106152f057fe5b6020026020010151511015615304576153de565b836001600160a01b0316637f9c0ecd620493e08a60200151848151811061532757fe5b60200260200101518860018a51038151811061533f57fe5b60200260200101516040518463ffffffff1660e01b8152600401615364929190618002565b60206040518083038187803b15801561537c57600080fd5b5086fa935050505080156153ad575060408051601f3d908101601f191682019092526153aa918101906176cd565b60015b6153b6576153de565b828111156153dc57809250886020015182815181106153d157fe5b602002602001015193505b505b6001016152d1565b50505b94509492505050565b806001600160a01b0316826001600160a01b031614156154245760405162461bcd60e51b815260040161509d9061824f565b5050565b615430616aa7565b50604080516080810182523080825260006020830181905292820152606081019190915290565b604080516001808252818301909252606091829190816020015b615479616b15565b8152602001906001900390816154715790505090506040518060a0016040528085600001518152602001600081526020016001815260200184815260200160405180602001604052806000815250815250816000815181106154d757fe5b60209081029190910101529392505050565b6040516303795fb160e11b81526000906001600160a01b038416906306f2bf6290615518908590600401617d18565b60206040518083038186803b15801561553057600080fd5b505afa158015615544573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061700a565b6000806001600160a01b03851661557e576107bd565b6060856001600160a01b0316620249f086866040516024016155a091906180d8565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516155de9190617cfc565b6000604051808303818686fa925050503d806000811461561a576040519150601f19603f3d011682016040523d82523d6000602084013e61561f565b606091505b5090925090508115615642578080602001905181019061563f91906176cd565b92505b50935093915050565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b815260040161568191906180d8565b60a06040518083038186803b15801561569957600080fd5b505afa1580156156ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906156d19190617b0d565b94509450505092506000620f424090508a604001516001600160a01b0316896001600160a01b031614156157f95760006157108964e8d4a5100061681c565b905060006157346b033b2e3c9fd0803ce800000061572e888561684d565b9061681c565b905084811061574c5760009650505050505050615902565b60006157db670de0b6b3a76400006157d58c6001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561579657600080fd5b505afa1580156157aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906157ce91906176cd565b869061681c565b90616869565b905060006157e98483616893565b9850615902975050505050505050565b8a604001516001600160a01b03168a6001600160a01b031614156158f957878481111561582e57600095505050505050615902565b600061584a6b033b2e3c9fd0803ce800000061572e8885616893565b90508381116158625760009650505050505050615902565b60006158e78a6001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156158a057600080fd5b505afa1580156158b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906158d891906176cd565b670de0b6b3a76400009061684d565b905060006157e9826157d5868861681c565b60009450505050505b9695505050505050565b600080615917616b47565b8580602001905181019061592b9190617733565b915091506000858060200190518101906159459190617717565b905060006060306322db5ed160e21b8587866159608c6168b2565b60405160240161597394939291906182cb565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516159b19190617cfc565b600060405180830381855afa9150503d80600081146159ec576040519150601f19603f3d011682016040523d82523d6000602084013e6159f1565b606091505b509150915081615a09576000955050505050506109e9565b80806020019051810190615a1d919061767b565b600081518110615a2957fe5b6020026020010151955050505050509392505050565b606081516001600160401b0381118015615a5857600080fd5b50604051908082528060200260200182016040528015615a82578160200160208202803683370190505b509050815160001415615a945761519e565b6000615ac58460000151856020015185600081518110615ab057fe5b6020026020010151876040015163ffffffff16565b905080615ad2575061519e565b6000615aef8560200151866000015184886040015163ffffffff16565b905080615afd57505061519e565b60005b8451811015615c335760005b6005811015615bf557615b33868381518110615b2457fe5b602002602001015184866168f3565b935083615b3f57615bf5565b615b4e612715612710866168f3565b935083615b5a57615bf5565b6000615b7788602001518960000151878b6040015163ffffffff16565b905080615b845750615bf5565b809350868381518110615b9357fe5b60200260200101518410615bec576000878481518110615baf57fe5b6020026020010151612710898681518110615bc657fe5b602002602001015187030281615bd857fe5b04905060058111615bea575050615bf5565b505b50600101615b0c565b50615c14858281518110615c0557fe5b602002602001015183856168f3565b848281518110615c2057fe5b6020908102919091010152600101615b00565b50505092915050565b600080600080600087806020019051810190615c58919061705f565b9350935093509350816001600160a01b0316846001600160a01b03161415615d42576040516351400f0b60e11b81526001600160a01b0384169063a2801e1690620493e090615cab908a906004016180d8565b60206040518083038187803b158015615cc357600080fd5b5086fa93505050508015615cf4575060408051601f3d908101601f19168201909252615cf1918101906176cd565b60015b615d36573d808015615d22576040519150601f19603f3d011682016040523d82523d6000602084013e615d27565b606091505b506000955050505050506109e9565b94506109e99350505050565b60405163ca19ebd960e01b81526001600160a01b0382169063ca19ebd990620493e090615cab9087908b90600401617d2c565b60008282028315801590615d92575082848281615d8e57fe5b0414155b15615da157600091505061519e565b6706f05b59d3b20000810181811015615dbf5760009250505061519e565b670de0b6b3a76400009004949350505050565b600080600085806020019051810190615deb9190617026565b91509150600085806020019051810190615e05919061700a565b90503063e8e4af09838584615e198a6168b2565b6040518563ffffffff1660e01b8152600401615e389493929190617d8a565b60006040518083038186803b158015615e5057600080fd5b505afa925050508015615e8557506040513d6000823e601f3d908101601f19168201604052615e82919081019061767b565b60015b615ec6573d808015615eb3576040519150601f19603f3d011682016040523d82523d6000602084013e615eb8565b606091505b5060009450505050506109e9565b80600081518110615ed357fe5b60200260200101519450505050506109e9565b600080600080846001600160a01b031663d9638d368b602001516040518263ffffffff1660e01b8152600401615f1c91906180d8565b60a06040518083038186803b158015615f3457600080fd5b505afa158015615f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190615f6c9190617b0d565b945094505050925089604001516001600160a01b0316886001600160a01b03161415616089576000879050600061601c886001600160a01b031663568d4b6f6040518163ffffffff1660e01b815260040160206040518083038186803b158015615fd557600080fd5b505afa158015615fe9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061600d91906176cd565b670de0b6b3a764000090616893565b90506000616036826157d585670de0b6b3a764000061681c565b905060006160546b033b2e3c9fd0803ce800000061572e898561684d565b905085811061606d576000975050505050505050615902565b60006157e960016160838564e8d4a51000616869565b9061684d565b89604001516001600160a01b0316896001600160a01b0316141561616e5760006160b88864e8d4a5100061681c565b905060006160f8886001600160a01b031663fae036d56040518163ffffffff1660e01b815260040160206040518083038186803b1580156158a057600080fd5b90506000616112670de0b6b3a76400006157d5858561681c565b90508581111561612b5760009650505050505050615902565b60006161476b033b2e3c9fd0803ce800000061572e8985616893565b9050848111616160576000975050505050505050615902565b509550615902945050505050565b5060009998505050505050505050565b600080616189616b47565b8580602001905181019061619d9190617733565b915091506000858060200190518101906161b79190617717565b9050600060603063205e01d760e11b8587866159608c6168b2565b600080846020015190506060816001600160a01b031663910ffc7187606001516001600160a01b0316876001600160a01b0316146162105786616226565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b88606001516001600160a01b0316876001600160a01b031614616249578661625f565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee5b604080516000815260208101918290526001600160e01b031960e086901b1690915261629392919060019060248101617e0c565b60006040518083038186803b1580156162ab57600080fd5b505afa1580156162bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526162e79190810190617457565b5050905080518660000151106163035750600091506109e99050565b8086600001518151811061631357fe5b6020026020010151925060f883901c60001c60bb14156109e65750600091506109e99050565b600080616344616b67565b84806020019051810190616358919061710d565b91509150600086806020019051810190616372919061710d565b50604051633c7b5fe960e21b8152909150309063f1ed7fa49061639f908590859088908b906004016182fd565b60206040518083038186803b1580156163b757600080fd5b505afa9250505080156163e7575060408051601f3d908101601f191682019092526163e4918101906176cd565b60015b616415573d808015615eb3576040519150601f19603f3d011682016040523d82523d6000602084013e615eb8565b93506109e992505050565b6000806060866001600160a01b03166357a281dc86866040518363ffffffff1660e01b8152600401616453929190617d45565b60006040518083038186803b15801561646b57600080fd5b505afa15801561647f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526164a791908101906173bf565b905060019150805160001415616540576040516315e8a07760e21b81526001600160a01b038816906357a281dc906164e59087908990600401617d45565b60006040518083038186803b1580156164fd57600080fd5b505afa158015616511573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261653991908101906173bf565b9050600091505b805186106165555760008092509250506153e9565b80868151811061656157fe5b602002602001015192505094509492505050565b6000806000808680602001905181019061658f91906170bd565b925092509250801561663357604051633cd0243b60e11b81526001600160a01b038316906379a0487690620493e0906165cf906000908a90600401617d2c565b604080518083038187803b1580156165e657600080fd5b5086fa93505050508015616617575060408051601f3d908101601f1916820190925261661491810190617ab5565b60015b61662757600093505050506109e9565b5093506109e992505050565b6040516366410a2160e01b81526001600160a01b038316906366410a2190620493e0906165cf906000908a90600401617d2c565b6000806000858060200190518101906166809190617026565b9150915060008580602001905181019061669a919061700a565b9050306330d6570d838584615e198a6168b2565b6000806000858060200190518101906166c79190617026565b915091506000858060200190518101906166e1919061700a565b90503063a469841762061a808486856166f98b6168b2565b6040518663ffffffff1660e01b81526004016167189493929190617d8a565b60006040518083038187803b15801561673057600080fd5b5086fa93505050508015615e8557506040513d6000823e601f3d908101601f19168201604052615e82919081019061767b565b600061676e8261694b565b90505b919050565b60008060008580602001905181019061678f9190617026565b91509150600080868060200190518101906167aa9190617026565b915091506167ba848483896134bf565b98975050505050505050565b81602001835110156167ea576167ea6167e560058551856020016169f7565b616a51565b910160200152565b60008160200183511015616813576168136167e560058551856020016169f7565b50016020015190565b60008261682b5750600061519e565b8282028284828161683857fe5b04146109e9576109e96167e560018686616a59565b6000828201838110156109e9576109e96167e560008686616a59565b60008161687f5761687f6167e560038585616a59565b600082848161688a57fe5b04949350505050565b6000828211156168ac576168ac6167e560028585616a59565b50900390565b6040805160018082528183019092526060916020808301908036833701905050905081816000815181106168e257fe5b602002602001018181525050919050565b6000831580616900575081155b80616909575082155b15616916575060006109e9565b8382028285828161692357fe5b04146169335760009150506109e9565b836001850382018161694157fe5b0495945050505050565b60006012905060006060836001600160a01b031660405180604001604052806004815260200163313ce56760e01b8152506040516169899190617cfc565b600060405180830381855afa9150503d80600081146169c4576040519150601f19603f3d011682016040523d82523d6000602084013e6169c9565b606091505b50915091508180156169dd57506020815110155b156169f0576169ed8160006151b4565b92505b5050919050565b6060632800659560e01b848484604051602401616a1693929190618152565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290509392505050565b805160208201fd5b606063e946c1bb60e01b848484604051602401616a1693929190618131565b6040518060a0016040528060008152602001600081526020016060815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60408051808201909152606081526000602082015290565b6040518060a0016040528060008019168152602001600081526020016000815260200160008152602001606081525090565b604080516060810182526000808252602082018190529181019190915290565b6040518060a001604052806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001606081525090565b803561519e8161852a565b805161519e8161852a565b600082601f830112616bd7578081fd5b8135616bea616be5826184a0565b61847a565b818152915060208083019084810181840286018201871015616c0b57600080fd5b60005b84811015616c33578135616c218161852a565b84529282019290820190600101616c0e565b505050505092915050565b600082601f830112616c4e578081fd5b8135616c5c616be5826184a0565b818152915060208083019084810160005b84811015616c3357616c84888484358a0101616bc7565b84529282019290820190600101616c6d565b600082601f830112616ca6578081fd5b8135616cb4616be5826184a0565b818152915060208083019084810160005b84811015616c335781358701604080601f19838c03011215616ce657600080fd5b616cef8161847a565b616cfb8b878501616bb1565b815290820135906001600160401b03821115616d1657600080fd5b616d248b8784860101616df8565b81870152865250509282019290820190600101616cc5565b600082601f830112616d4c578081fd5b8135616d5a616be5826184a0565b818152915060208083019084810181840286018201871015616d7b57600080fd5b60005b84811015616c3357813584529282019290820190600101616d7e565b600082601f830112616daa578081fd5b8151616db8616be5826184a0565b818152915060208083019084810181840286018201871015616dd957600080fd5b60005b84811015616c3357815184529282019290820190600101616ddc565b600082601f830112616e08578081fd5b8135616e16616be5826184bf565b9150808252836020828501011115616e2d57600080fd5b8060208401602084013760009082016020015292915050565b600082601f830112616e56578081fd5b8151616e64616be5826184bf565b9150808252836020828501011115616e7b57600080fd5b61269c8160208401602086016184ed565b80516002811061519e57600080fd5b600060608284031215616eac578081fd5b616eb6606061847a565b90508135616ec38161852a565b81526020820135616ed38161853f565b60208201526040820135616ee68161853f565b604082015292915050565b600060608284031215616f02578081fd5b616f0c606061847a565b90508151616f198161852a565b81526020820151616f298161853f565b60208201526040820151616ee68161853f565b600060408284031215616f4d578081fd5b616f57604061847a565b90508135616f648161852a565b81526020820135616f748161852a565b602082015292915050565b600060a08284031215616f90578081fd5b616f9a60a061847a565b9050813581526020820135616fae8161852a565b60208201526040820135616fc18161852a565b60408201526060820135616fd48161852a565b606082015260808201356001600160401b03811115616ff257600080fd5b616ffe84828501616df8565b60808301525092915050565b60006020828403121561701b578081fd5b81516109e98161852a565b60008060408385031215617038578081fd5b82516170438161852a565b60208401519092506170548161852a565b809150509250929050565b60008060008060808587031215617074578182fd5b845161707f8161852a565b60208601519094506170908161852a565b60408601519093506170a18161852a565b60608601519092506170b28161852a565b939692955090935050565b6000806000606084860312156170d1578081fd5b83516170dc8161852a565b60208501519093506170ed8161852a565b60408501519092508015158114617102578182fd5b809150509250925092565b6000806040838503121561711f578182fd5b825161712a8161852a565b60208401519092506001600160401b0380821115617146578283fd5b9084019060a08287031215617159578283fd5b61716360a061847a565b825181526171748760208501616bbc565b60208201526171868760408501616bbc565b60408201526171988760608501616bbc565b60608201526080830151828111156171ae578485fd5b6171ba88828601616e46565b6080830152508093505050509250929050565b600080600080600060a086880312156171e4578283fd5b85356171ef8161852a565b945060208601356171ff8161852a565b9350604086013561720f8161852a565b9250606086013561721f8161852a565b915060808601356001600160401b03811115617239578182fd5b61724588828901616d3c565b9150509295509295909350565b60008060008060808587031215617267578182fd5b84356172728161852a565b935060208501356172828161852a565b925060408501356172928161852a565b915060608501356001600160401b038111156172ac578182fd5b6172b887828801616d3c565b91505092959194509250565b600080600080608085870312156172d9578182fd5b84356172e48161852a565b935060208501356172f48161852a565b925060408501356173048161852a565b9396929550929360600135925050565b600080600060608486031215617328578081fd5b83356173338161852a565b925060208401356001600160401b038082111561734e578283fd5b61735a87838801616bc7565b9350604086013591508082111561736f578283fd5b5061737c86828701616d3c565b9150509250925092565b600080600080600060a0868803121561739d578283fd5b85356173a88161852a565b945060208601359350604086013561720f8161852a565b600060208083850312156173d1578182fd5b82516001600160401b038111156173e6578283fd5b8301601f810185136173f6578283fd5b8051617404616be5826184a0565b8181528381019083850185840285018601891015617420578687fd5b8694505b8385101561744b5780516174378161852a565b835260019490940193918501918501617424565b50979650505050505050565b60008060006060848603121561746b578081fd5b83516001600160401b0380821115617481578283fd5b818601915086601f830112617494578283fd5b81516174a2616be5826184a0565b80828252602080830192508086018b8283870289010111156174c2578788fd5b8796505b848710156174e45780518452600196909601959281019281016174c6565b5089015190975093505050808211156174fb578283fd5b5061750886828701616d9a565b9250506175188560408601616e8c565b90509250925092565b60008060208385031215617533578182fd5b82356001600160401b0380821115617549578384fd5b818501915085601f83011261755c578384fd5b81358181111561756a578485fd5b866020808302850101111561757d578485fd5b60209290920196919550909350505050565b600060208083850312156175a1578182fd5b82516001600160401b038111156175b6578283fd5b8301601f810185136175c6578283fd5b80516175d4616be5826184a0565b81815283810190838501858402850186018910156175f0578687fd5b8694505b8385101561744b5780518352600194909401939185019185016175f4565b600080600060608486031215617626578081fd5b83356001600160401b038082111561763c578283fd5b61764887838801616c96565b9450602086013591508082111561765d578283fd5b5061766a86828701616c96565b925050604084013590509250925092565b60006020828403121561768c578081fd5b81516001600160401b038111156176a1578182fd5b61119a84828501616d9a565b6000602082840312156176be578081fd5b815180151581146109e9578182fd5b6000602082840312156176de578081fd5b5051919050565b6000602082840312156176f6578081fd5b81516001600160401b0381111561770b578182fd5b61119a84828501616e46565b600060208284031215617728578081fd5b81516109e981618555565b60008060808385031215617745578182fd5b825161775081618555565b915061775f8460208501616ef1565b90509250929050565b60008060008084860360a081121561777e578283fd5b604081121561778b578283fd5b50617796604061847a565b8535815260208601356177a88161852a565b6020820152935060408501356177bd8161852a565b925060608501356177cd8161852a565b915060808501356001600160401b038111156172ac578182fd5b600080600080608085870312156177fc578182fd5b84356001600160401b0380821115617812578384fd5b9086019060408289031215617825578384fd5b61782f604061847a565b6178398984616bb1565b815260208301358281111561784c578586fd5b6178588a828601616c3e565b6020830152508096505061786f8860208901616bb1565b945061787e8860408901616bb1565b93506060870135915080821115617893578283fd5b506172b887828801616d3c565b60008060008060c085870312156178b5578182fd5b6178bf8686616e9b565b935060608501356178cf81618555565b925060808501356178df81618555565b915060a08501356001600160401b038111156172ac578182fd5b60008060008060a0858703121561790e578182fd5b6179188686616f3c565b935060408501356177bd8161852a565b6000806000806080858703121561793d578182fd5b84356001600160401b0380821115617953578384fd5b61795f88838901616f7f565b9550602087013591506179718261852a565b9093506040860135906179838261852a565b90925060608601359080821115617893578283fd5b600080600080608085870312156179ad578182fd5b84356001600160401b038111156179c2578283fd5b6179ce87828801616f7f565b94505060208501356172f48161852a565b600080600080608085870312156179f4578182fd5b84356001600160401b03811115617a09578283fd5b617a1587828801616f7f565b945050602085013592506040850135617a2d8161852a565b915060608501356170b28161852a565b60008060008084860360c0811215617a53578283fd5b6060811215617a60578283fd5b50617a6b606061847a565b8535617a768161852a565b8152602086810135908201526040860135617a908161852a565b604082015293506060850135617aa58161852a565b925060808501356178df8161852a565b60008060408385031215617ac7578182fd5b505080516020909101519092909150565b60008060008060808587031215617aed578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600060a08688031215617b24578283fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0316815260200190565b600081518352602082015160208401526040820151604084015260608201516060840152608082015160a0608085015261119a60a0850182617c0c565b6000815180845260208085019450808401835b83811015617bd25781516001600160a01b031687529582019590820190600101617bad565b509495945050505050565b6000815180845260208085019450808401835b83811015617bd257815187529582019590820190600101617bf0565b60008151808452617c248160208601602086016184ed565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160e01b03199081169184019190915260409182015116910152565b80516001600160a01b039081168352602080830151151590840152604080830151909116908301526060908101511515910152565b600081518352602082015160018060a01b0380821660208601528060408501511660408601528060608501511660608601525050608082015160a0608085015261119a60a0850182617c0c565b6000828483379101908152919050565b60008251617d0e8184602087016184ed565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03948516815292841660208401529083166040830152909116606082015260800190565b6001600160a01b03858116825284811660208301528316604082015260806060820181905260009061590290830184617bdd565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b03858116825284166020820152821515604082015260806060820181905260009061590290830184617c0c565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090617e9e90830184617c0c565b979650505050505050565b6001600160a01b0384168152606060208201819052600090617ecd90830185617b9a565b82810360408401526159028185617bdd565b6001600160a01b03851681526000617ef68561851d565b84602083015260806040830152617f106080830185617bdd565b8281036060840152617e9e8185617bdd565b6001600160a01b03898116825260009061010090617f3f8b61851d565b8a6020850152816040850152617f578285018b617bdd565b91508382036060850152617f6b828a617bdd565b90881660808501529050617f7e8661851d565b8560a084015282810360c0840152617f968186617bdd565b905082810360e0840152617faa8185617bdd565b9b9a5050505050505050505050565b6001600160a01b038316815260406020820181905260009061119a90830184617c9f565b600060408252617ff06040830185617b9a565b82810360208401526112088185617bdd565b6000604082526180156040830185617b9a565b90508260208301529392505050565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561808b57888303603f190185528151805187855261806c88860182617c0c565b9189015115159489019490945294870194925090860190600101618048565b509098975050505050505050565b6000602082526109e96020830184617bdd565b83151581526001600160a01b038316602082015260606040820181905260009061120890830184617bdd565b90815260200190565b600084825260606020830152617ecd6060830185617c0c565b6000602082526109e96020830184617c0c565b6001600160a01b038316815260406020820181905260009061119a90830184617bdd565b6060810161813e8561851d565b938152602081019290925260409091015290565b606081016008851061813e57fe5b600060e0820161816f876184e2565b8352602060e08185015281875161818681856180d8565b91508193508281028201838a01865b838110156181bf5786830385526181ad838351617b5d565b94860194925090850190600101618195565b50508681036040880152809450885192506181da83826180d8565b94505050818701845b82811015618204576181f6858351617b4c565b9450908301906001016181e3565b50505050809150506112086060830184617c6a565b600f93840b81529190920b6020820152604081019190915260600190565b600f83900b8152608081016109e96020830184617c38565b60208082526025908201527f455243323042726964676553616d706c65722f494e56414c49445f544f4b454e6040820152642fa820a4a960d91b606082015260800190565b6020808252601e908201527f4b79626572444d4d53616d706c65722f4e4f5f504f4f4c535f464f554e440000604082015260600190565b60006182d78287617c38565b84600f0b606083015283600f0b608083015260c060a083015261590260c0830184617bdd565b6000608082526183106080830187617c9f565b6001600160a01b0395861660208401529390941660408201526060015292915050565b6000608082526183466080830187617c9f565b6020830195909552506001600160a01b0392831660408201529116606090910152919050565b6000602082528251602083015260208301516040830152604083015160a0606084015261839c60c0840182617c0c565b9050606084015160808401526080840151601f198483030160a08501526112088282617c0c565b60008382526040602083015261119a6040830184617b9a565b6000848252606060208301526183f56060830185617b9a565b82810360408401526159028185617b9a565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e19843603018112618445578283fd5b8301803591506001600160401b0382111561845e578283fd5b60200191503681900382131561847357600080fd5b9250929050565b6040518181016001600160401b038111828210171561849857600080fd5b604052919050565b60006001600160401b038211156184b5578081fd5b5060209081020190565b60006001600160401b038211156184d4578081fd5b50601f01601f191660200190565b806002811061677157fe5b60005b838110156185085781810151838201526020016184f0565b83811115618517576000848401525b50505050565b6004811061852757fe5b50565b6001600160a01b038116811461852757600080fd5b6001600160e01b03198116811461852757600080fd5b80600f0b811461852757600080fdfea26469706673582212203d9da65b50e0dd75155e83c26ff605fdb4d8c9035c9b29bc8a69019e22eae72264736f6c634300060c0033",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x269 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9209483B GT PUSH2 0x151 JUMPI DUP1 PUSH4 0xC25C4138 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xD9BCA372 GT PUSH2 0x87 JUMPI DUP1 PUSH4 0xD9BCA372 EQ PUSH2 0x5C0 JUMPI DUP1 PUSH4 0xDDD5AA28 EQ PUSH2 0x5D3 JUMPI DUP1 PUSH4 0xE8E4AF09 EQ PUSH2 0x5E6 JUMPI DUP1 PUSH4 0xF1ED7FA4 EQ PUSH2 0x5F9 JUMPI DUP1 PUSH4 0xF3868E9C EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0xF5A4994D EQ PUSH2 0x60C JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0xC25C4138 EQ PUSH2 0x561 JUMPI DUP1 PUSH4 0xC8319084 EQ PUSH2 0x574 JUMPI DUP1 PUSH4 0xC8C74A37 EQ PUSH2 0x587 JUMPI DUP1 PUSH4 0xC94706D8 EQ PUSH2 0x59A JUMPI DUP1 PUSH4 0xCC1621C9 EQ PUSH2 0x5AD JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0xA4698417 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0xA4698417 EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0xA75E744B EQ PUSH2 0x4F4 JUMPI DUP1 PUSH4 0xAB000276 EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0xADC636BF EQ PUSH2 0x51A JUMPI DUP1 PUSH4 0xB56B8351 EQ PUSH2 0x53B JUMPI DUP1 PUSH4 0xB90CD2FB EQ PUSH2 0x54E JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x9209483B EQ PUSH2 0x466 JUMPI DUP1 PUSH4 0x98777748 EQ PUSH2 0x479 JUMPI DUP1 PUSH4 0x9E3F05C3 EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0x9EA0FF13 EQ PUSH2 0x4AE JUMPI DUP1 PUSH4 0xA0295B8B EQ PUSH2 0x4CE JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 GT PUSH2 0x1EA JUMPI DUP1 PUSH4 0x57494B1D GT PUSH2 0x1AE JUMPI DUP1 PUSH4 0x57494B1D EQ PUSH2 0x3E7 JUMPI DUP1 PUSH4 0x5D5B674F EQ PUSH2 0x3FA JUMPI DUP1 PUSH4 0x68BE3CF2 EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0x74C9D255 EQ PUSH2 0x42D JUMPI DUP1 PUSH4 0x7F7F4F13 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0x8B6D7B44 EQ PUSH2 0x453 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x3105FEC1 EQ PUSH2 0x37B JUMPI DUP1 PUSH4 0x36052391 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x40BC03AE EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x494569DB EQ PUSH2 0x3B4 JUMPI DUP1 PUSH4 0x4EDFB5B2 EQ PUSH2 0x3C7 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x281E3432 GT PUSH2 0x231 JUMPI DUP1 PUSH4 0x281E3432 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x29FA4AA0 EQ PUSH2 0x320 JUMPI DUP1 PUSH4 0x2AA64319 EQ PUSH2 0x333 JUMPI DUP1 PUSH4 0x2D753AA4 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0x30D6570D EQ PUSH2 0x368 JUMPI PUSH2 0x269 JUMP JUMPDEST DUP1 PUSH4 0x496D5DC EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x9E7C134 EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x149DAB0E EQ PUSH2 0x2B8 JUMPI DUP1 PUSH4 0x2339078F EQ PUSH2 0x2DA JUMPI DUP1 PUSH4 0x252322B3 EQ PUSH2 0x2FA JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x281 PUSH2 0x27C CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x61F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP3 SWAP2 SWAP1 PUSH2 0x7FDD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2AB PUSH2 0x2A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x7612 JUMP JUMPDEST PUSH2 0x7C5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x836C JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x2C6 CALLDATASIZE PUSH1 0x4 PUSH2 0x77E7 JUMP JUMPDEST PUSH2 0x9F0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7EA9 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x2E8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7768 JUMP JUMPDEST PUSH2 0xB50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x8099 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x308 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0xD77 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x7A3D JUMP JUMPDEST PUSH2 0xF4D JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x32E CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x11A2 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x341 CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x1211 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80AC JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x363 CALLDATASIZE PUSH1 0x4 PUSH2 0x71CD JUMP JUMPDEST PUSH2 0x14EE JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x376 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x1677 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x389 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x17EB JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x1966 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3AF CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x1A00 JUMP JUMPDEST PUSH2 0x281 PUSH2 0x3C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x1B81 JUMP JUMPDEST PUSH2 0x3DA PUSH2 0x3D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x79DF JUMP JUMPDEST PUSH2 0x1D0D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x80FA JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x3F5 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x1F8A JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x408 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x24DC JUMP JUMPDEST PUSH2 0x420 PUSH2 0x41B CALLDATASIZE PUSH1 0x4 PUSH2 0x7521 JUMP JUMPDEST PUSH2 0x2542 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x8024 JUMP JUMPDEST PUSH2 0x2CB PUSH2 0x43B CALLDATASIZE PUSH1 0x4 PUSH2 0x77E7 JUMP JUMPDEST PUSH2 0x26A3 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x7A3D JUMP JUMPDEST PUSH2 0x26B2 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x461 CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x28FF JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x474 CALLDATASIZE PUSH1 0x4 PUSH2 0x78A0 JUMP JUMPDEST PUSH2 0x2C62 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x2E62 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x49A CALLDATASIZE PUSH1 0x4 PUSH2 0x7928 JUMP JUMPDEST PUSH2 0x3399 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x80E1 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x4BC CALLDATASIZE PUSH1 0x4 PUSH2 0x72C4 JUMP JUMPDEST PUSH2 0x34BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x4DC CALLDATASIZE PUSH1 0x4 PUSH2 0x7768 JUMP JUMPDEST PUSH2 0x36D5 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x4EF CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x38D1 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x502 CALLDATASIZE PUSH1 0x4 PUSH2 0x7386 JUMP JUMPDEST PUSH2 0x3A26 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x515 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x3B63 JUMP JUMPDEST PUSH2 0x52D PUSH2 0x528 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x3CC1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28F SWAP3 SWAP2 SWAP1 PUSH2 0x810D JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x7612 JUMP JUMPDEST PUSH2 0x3E11 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x55C CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x403C JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x56F CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x40A2 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x582 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4108 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x595 CALLDATASIZE PUSH1 0x4 PUSH2 0x7314 JUMP JUMPDEST PUSH2 0x42C5 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x5A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4431 JUMP JUMPDEST PUSH2 0x49F PUSH2 0x5BB CALLDATASIZE PUSH1 0x4 PUSH2 0x7928 JUMP JUMPDEST PUSH2 0x458F JUMP JUMPDEST PUSH2 0x346 PUSH2 0x5CE CALLDATASIZE PUSH1 0x4 PUSH2 0x7386 JUMP JUMPDEST PUSH2 0x4775 JUMP JUMPDEST PUSH2 0x346 PUSH2 0x5E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x78F9 JUMP JUMPDEST PUSH2 0x4864 JUMP JUMPDEST PUSH2 0x2ED PUSH2 0x5F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4AF7 JUMP JUMPDEST PUSH2 0x4C1 PUSH2 0x607 CALLDATASIZE PUSH1 0x4 PUSH2 0x7998 JUMP JUMPDEST PUSH2 0x4C2A JUMP JUMPDEST PUSH2 0x52D PUSH2 0x61A CALLDATASIZE PUSH1 0x4 PUSH2 0x7252 JUMP JUMPDEST PUSH2 0x4DC9 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x63C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x666 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x673 DUP7 DUP7 PUSH2 0x4EB5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x685 JUMPI POP PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xA8312B1D PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x6AF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x83DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x725 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x722 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x75F JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x758 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x7BA JUMP JUMPDEST DUP1 PUSH1 0x1 DUP9 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x76F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x783 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x79B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x7B1 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x688 JUMP JUMPDEST POP POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x7CD PUSH2 0x6A78 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x8D3 JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x7E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x80E PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP9 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x81E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x841 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x87E JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x883 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x8C5 JUMPI PUSH1 0x0 PUSH2 0x8A7 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x8C3 JUMPI PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x7D1 JUMP JUMPDEST POP DUP1 PUSH2 0x8DF JUMPI POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x9E6 JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x8F8 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x91F PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x92F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x952 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x98F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x994 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 PUSH2 0x9B8 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 MLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 0x9D6 JUMPI DUP1 DUP8 MSTORE PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x8E2 JUMP JUMPDEST POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP7 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xA08 JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH2 0xA14 DUP8 DUP8 DUP8 DUP8 PUSH2 0x51C0 JUMP JUMPDEST DUP6 MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xA30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xA5A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xB44 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP6 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xA89 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAAE SWAP3 SWAP2 SWAP1 PUSH2 0x8002 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xAC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0xAF7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xAF4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB00 JUMPI PUSH2 0xB44 JUMP JUMPDEST DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xB0D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xB25 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xB3B JUMPI POP PUSH2 0xB44 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xA60 JUMP JUMPDEST POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xB5C DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xB92 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xBC0 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xBF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xC1A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0xC25 PUSH2 0x6AA7 JUMP JUMPDEST PUSH2 0xC2D PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x60 PUSH2 0xC59 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC4C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5457 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0xC8F SWAP1 PUSH1 0x0 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x8160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xCA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xCDE JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0xCDB SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x758F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xD19 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD11 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP PUSH2 0xD6A JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0xD28 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 NOT MUL SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0xD46 JUMPI POP POP POP PUSH2 0xD6A JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xD53 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0xC32 JUMP JUMPDEST POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD83 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xD9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xDC5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xDE8 JUMPI PUSH2 0xDE3 DUP8 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE08 DUP9 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0xE10 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0xE73 JUMPI PUSH2 0xE52 DUP5 PUSH4 0x2640F62C PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5568 JUMP JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xE5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xF0D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0xE99 JUMPI PUSH2 0xE52 DUP4 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0xEB3 DUP5 PUSH4 0x59E94862 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0xEF0 JUMPI PUSH2 0xECF DUP6 PUSH4 0x9903D8B PUSH1 0xE2 SHL DUP4 PUSH2 0x5568 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xEDB JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0xF0B JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xEFE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0xF2D JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xF21 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0xF38 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0xE15 JUMP JUMPDEST POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF59 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFB1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFD5 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0xFF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x101A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1056 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x106A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x108E SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x1131 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x10E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x10F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x111B SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x113E JUMPI POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH2 0x116C DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x115D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x564B JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x1179 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1186 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x1141 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x11C1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x11E8 SWAP3 SWAP2 SWAP1 PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x590C DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x1220 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1238 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1262 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1295 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x12C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12E5 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1303 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x13A2 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x1334 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x134C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1360 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1384 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x139B JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x13EF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1413 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST PUSH2 0x141E JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x14E1 JUMPI PUSH1 0x0 PUSH2 0x149B DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1449 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP9 DUP7 DUP16 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1473 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP11 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x148E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x5C3C JUMP JUMPDEST SWAP1 POP DUP1 DUP6 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x14AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x14C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x14D8 JUMPI POP PUSH2 0x14E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1421 JUMP JUMPDEST POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1509 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1533 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH2 0x154A JUMPI POP PUSH2 0x1208 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x166C JUMPI PUSH1 0x0 PUSH1 0x60 DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x61A80 PUSH4 0x6E79E133 PUSH1 0xE0 SHL DUP12 DUP12 DUP12 DUP12 DUP10 DUP2 MLOAD DUP2 LT PUSH2 0x157E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1599 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DBE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x15D7 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1613 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1618 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x163C JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1639 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH2 0x1649 JUMPI POP POP POP PUSH2 0x166C JUMP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1656 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x154D JUMP JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1683 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x169B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16C5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x72EA9076 PUSH3 0xC3500 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x16F4 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x171A SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1732 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1763 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1760 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x179D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x17E1 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x17AA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x17C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x17D8 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x16CB JUMP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1806 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1830 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9E6 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD06CA61F PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x185D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1883 SWAP3 SWAP2 SWAP1 PUSH2 0x83C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x189B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x18D1 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x18CE SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x190B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1904 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x9E6 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP8 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x191B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x192F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1947 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x195D JUMPI POP PUSH2 0x9E6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1836 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1972 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP5 PUSH1 0x20 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 PUSH2 0x19A4 JUMPI POP DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x19F8 JUMPI DUP2 MLOAD PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x19C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x19ED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH2 0x119A SWAP2 POP POP JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1A1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1A45 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x20 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x1A7C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1A96 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x1AD4 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1B10 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1B15 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x1B39 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B36 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x1B46 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1B5E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1B76 JUMPI POP POP POP PUSH2 0x17E1 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x1A4B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP2 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1B9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1BC8 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x1BD5 DUP7 DUP7 PUSH2 0x4EB5 JUMP JUMPDEST SWAP3 POP DUP3 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1BE7 JUMPI POP PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x7BA JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9E269B68 PUSH3 0x249F0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x1C11 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 DUP11 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C39 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x83DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1C87 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1C84 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1CB5 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x758 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1CC2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1CD6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x1CEE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x1D04 JUMPI POP PUSH2 0x7BA JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP4 DUP5 SWAP3 SWAP1 DUP3 DUP2 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x1D44 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x60 PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D7C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1E6D JUMPI PUSH1 0x40 MLOAD PUSH4 0x81EFCBDD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x81EFCBDD SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1DD5 SWAP1 DUP10 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EDF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1E23 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1E20 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E5D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1E51 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0x1E68 JUMP JUMPDEST SWAP4 POP PUSH2 0x119A SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1F7F JUMP JUMPDEST DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x1EC3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x61E597F9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x61E597F9 SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1DD5 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7EDF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2B9A6CD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x5734D9A SWAP1 PUSH3 0x7A120 SWAP1 PUSH2 0x1F03 SWAP1 DUP11 SWAP1 PUSH1 0x1 SWAP1 DUP9 SWAP1 DUP9 SWAP1 DUP14 SWAP1 DUP5 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x7F22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x1F51 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x1F4E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1E5D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD6A JUMP JUMPDEST POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x1FA7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1FD1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2001 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2019 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x202D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2051 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO DUP1 PUSH2 0x20D6 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2084 SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x209C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20B0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20D4 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x20E2 JUMPI POP POP PUSH2 0x119A JUMP JUMPDEST PUSH2 0x20EA PUSH2 0x6ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2116 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x212E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2142 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2166 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2194 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x21C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x21E4 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2215 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x222D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2241 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2265 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x2298 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x22C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22E8 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x232A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x233E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2362 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH2 0x2395 DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x3 PUSH8 0xDE0B6B3A7640000 DUP2 PUSH2 0x238C JUMPI INVALID JUMPDEST DIV PUSH1 0x1 ADD PUSH2 0x5D75 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x23A1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x23B4 JUMPI PUSH2 0xF41 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF8D6AED4 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x23E7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2415 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x242D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x245E JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x245B SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x2498 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2491 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x24A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x24BD JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x24D3 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x236A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x24FB DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2522 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5DD2 DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x255A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2594 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x2581 PUSH2 0x6AFD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x2579 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP1 DUP4 EQ PUSH2 0x269C JUMPI PUSH1 0x1 DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x25AF JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD SWAP2 ISZERO ISZERO SWAP2 ADD MSTORE DUP4 DUP4 DUP3 DUP2 DUP2 LT PUSH2 0x25CD JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x25DF SWAP2 SWAP1 PUSH2 0x842F JUMP JUMPDEST ISZERO ISZERO SWAP1 POP PUSH2 0x25EC JUMPI PUSH2 0x2694 JUMP JUMPDEST ADDRESS DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x25F9 JUMPI INVALID JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x260B SWAP2 SWAP1 PUSH2 0x842F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2619 SWAP3 SWAP2 SWAP1 PUSH2 0x7CEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2656 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x265B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x2668 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x267F JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MLOAD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 ISZERO ISZERO SWAP1 MSTORE JUMPDEST PUSH1 0x1 ADD PUSH2 0x259A JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x26BE DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x36569E77 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2716 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x273A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST DUP5 MLOAD SWAP1 SWAP2 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x277F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x27CF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27F3 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 0x2896 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF4B9FA75 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2848 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x285C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2880 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x28A3 JUMPI POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH2 0x28D1 DUP11 DUP10 DUP12 DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x28C2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 DUP10 PUSH2 0x5EE6 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x28DE JUMPI POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x28EB JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE POP PUSH1 0x1 ADD PUSH2 0x28A6 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBBD7F255 DUP6 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2936 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x294E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2962 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2986 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP7 MLOAD PUSH1 0x40 MLOAD PUSH4 0x1E010439 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1E010439 SWAP1 PUSH2 0x29B9 SWAP1 PUSH1 0xF DUP10 SWAP1 SIGNEXTEND SWAP1 PUSH1 0x4 ADD PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A09 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SUB SWAP1 POP PUSH1 0x0 DUP7 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC5829514 DUP7 PUSH1 0xF SIGNEXTEND PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A41 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2A6D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A91 SWAP2 SWAP1 PUSH2 0x7AD8 JUMP JUMPDEST SWAP4 POP POP POP POP DUP1 PUSH1 0x12 SUB PUSH1 0xA EXP DUP3 DUP2 PUSH2 0x2AA5 JUMPI INVALID JUMPDEST DUP6 MLOAD SWAP2 SWAP1 DIV SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2AC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2AEC JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x0 PUSH1 0x60 DUP11 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x927C0 DUP13 PUSH1 0x20 ADD MLOAD DUP13 DUP13 DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2B23 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2B3D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2B7B SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2BB7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2BBC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2BE0 JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2BDD SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP7 DUP2 LT PUSH2 0x2C1A JUMPI DUP4 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x2C11 JUMPI DUP8 DUP10 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2BFE JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x2BE9 JUMP JUMPDEST POP POP POP POP PUSH2 0xF41 JUMP JUMPDEST DUP1 DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2C27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2C3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2C57 JUMPI POP POP POP PUSH2 0xF41 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2AF2 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT AND PUSH2 0x2CE4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH2 0x2CDD SWAP1 DUP1 PUSH2 0x2C96 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2CBD SWAP3 SWAP2 SWAP1 PUSH2 0x8237 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x617E DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST SWAP1 POP PUSH2 0x119A JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2CFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2D26 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI PUSH1 0x0 PUSH1 0x60 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x1E8480 DUP11 PUSH1 0x40 ADD MLOAD DUP11 DUP11 DUP11 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x2D5D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2D77 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8219 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x2DB5 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2DF1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2DF6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH1 0x0 DUP3 ISZERO PUSH2 0x2E1A JUMPI DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2E17 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP7 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x2E27 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x2E3F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x2E57 JUMPI POP POP POP PUSH2 0x17E1 JUMP JUMPDEST POP POP POP PUSH1 0x1 ADD PUSH2 0x2D2C JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP6 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x2E7F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2EA9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2ED9 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2EF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F05 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F29 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO DUP1 PUSH2 0x2FAE JUMPI POP PUSH1 0x40 MLOAD PUSH4 0xBCDED89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x2F37B624 SWAP1 PUSH2 0x2F5C SWAP1 DUP9 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F74 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2F88 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2FAC SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x2FBA JUMPI POP POP PUSH2 0x119A JUMP JUMPDEST PUSH2 0x2FC2 PUSH2 0x6ACE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x2FEE SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3006 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x301A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x303E SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0xF8B2CB4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xF8B2CB4F SWAP1 PUSH2 0x306C SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3098 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30BC SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x30ED SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3119 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x313D SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH4 0x4A46C673 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x948D8CE6 SWAP1 PUSH2 0x3170 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x319C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x31C0 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP2 PUSH1 0x60 ADD DUP2 DUP2 MSTORE POP POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD4CADF68 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3216 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x323A SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xF41 JUMPI DUP2 MLOAD PUSH2 0x325E SWAP1 PUSH8 0x6F05B59D3B20000 PUSH2 0x5D75 JUMP JUMPDEST DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x326A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD GT ISZERO PUSH2 0x327D JUMPI PUSH2 0xF41 JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBA9530A6 PUSH3 0x493E0 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP8 PUSH1 0x60 ADD MLOAD DUP13 DUP9 DUP2 MLOAD DUP2 LT PUSH2 0x32B0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP10 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP9 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x32DE SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8407 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x32F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3327 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3324 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3355 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2491 JUMP JUMPDEST DUP1 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3362 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x337A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3390 JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3242 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x33A8 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x33B3 DUP8 DUP8 DUP8 PUSH2 0x61D2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x33BF JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x33E8 SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x8333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3400 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3414 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x343C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST DUP8 PUSH1 0x80 ADD DUP2 SWAP1 MSTORE POP DUP7 PUSH1 0x80 ADD MLOAD SWAP2 POP PUSH2 0x34B3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP8 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x346C SWAP3 SWAP2 SWAP1 PUSH2 0x7FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP9 DUP11 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3493 SWAP3 SWAP2 SWAP1 PUSH2 0x7FB9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6339 DUP2 MSTORE POP DUP6 PUSH2 0x5A3F JUMP JUMPDEST SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x901754D7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x34F0 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x351C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3540 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x355A JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x35EC JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x3597 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x35C3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x35E7 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH2 0x35F8 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x360D JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3C2803F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x1E1401F8 SWAP1 PUSH3 0x249F0 SWAP1 PUSH2 0x3642 SWAP1 DUP11 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x365A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x368B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3688 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x36CB JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x36B9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x119A JUMP JUMPDEST SWAP3 POP PUSH2 0x119A SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x36E1 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 DUP2 ADD SWAP1 SWAP4 MSTORE DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP6 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3717 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP5 DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x3745 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3775 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x379F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP4 POP PUSH2 0x37AA PUSH2 0x6AA7 JUMP JUMPDEST PUSH2 0x37B2 PUSH2 0x5428 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD6A JUMPI PUSH1 0x60 PUSH2 0x37D1 DUP12 DUP10 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0xC4C JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7C268337 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP1 PUSH4 0xF84D066E SWAP1 PUSH2 0x3807 SWAP1 PUSH1 0x1 SWAP1 DUP6 SWAP1 DUP11 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x8160 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3821 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x3856 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x3853 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x758F JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3884 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xD0C JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD11 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x3893 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP1 POP PUSH1 0x0 DUP2 SGT PUSH2 0x38AD JUMPI POP POP POP PUSH2 0xD6A JUMP JUMPDEST DUP1 DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x38BA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP POP POP PUSH1 0x1 ADD PUSH2 0x37B7 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x38EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3916 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x343FBCDD PUSH3 0x61A80 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3945 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x396B SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3983 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x39B4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x39B1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x39E2 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x39EF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3A07 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3A1D JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x391C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x3A35 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3A4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3A77 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x3A86 DUP10 DUP10 DUP10 DUP10 PUSH2 0x6420 JUMP JUMPDEST SWAP5 POP SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3A9E JUMPI POP PUSH2 0x3B58 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3B55 JUMPI PUSH1 0x0 PUSH2 0x3B0F DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AC3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP8 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x3AE7 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x3B02 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x6575 JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3B1E JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3B36 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3B4C JUMPI POP PUSH2 0x3B55 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3AA1 JUMP JUMPDEST POP POP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x3B6F DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3B87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3BB1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x144A2752 PUSH3 0xF4240 DUP8 DUP10 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3BE0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3C06 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3C1E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x3C4F JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x3C4C SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x3C7D JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3C8A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3CA2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3CB8 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3BB7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x3CCF DUP5 DUP7 PUSH2 0x53F2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x3CE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x3D11 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3D86 JUMPI PUSH1 0x0 PUSH2 0x3D40 DUP10 DUP10 DUP10 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x3D33 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x34BF JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x3D4F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3D67 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x3D7D JUMPI POP PUSH2 0x3D86 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x3D17 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3DB5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3DCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DE1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E05 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x3E19 PUSH2 0x6A78 JUMP JUMPDEST PUSH1 0x0 NOT DUP1 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 EQ PUSH2 0x3F30 JUMPI PUSH1 0x60 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3E38 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x3E5F PUSH1 0x20 DUP3 MLOAD SUB DUP7 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x3E6F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x3E92 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3ECF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3ED4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x3F22 JUMPI PUSH1 0x0 PUSH2 0x3EF8 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x3F09 JUMPI POP DUP6 DUP2 LT JUMPDEST ISZERO PUSH2 0x3F20 JUMPI PUSH1 0x60 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP8 ADD DUP3 SWAP1 MSTORE SWAP5 POP DUP5 JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3E22 JUMP JUMPDEST POP PUSH1 0x0 NOT DUP2 EQ ISZERO PUSH2 0x3F41 JUMPI POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP6 MLOAD DUP2 EQ PUSH2 0x9E6 JUMPI PUSH1 0x60 DUP7 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x3F5A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH2 0x3F81 PUSH1 0x20 DUP3 MLOAD SUB DUP5 DUP4 PUSH2 0x51A4 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x3F9D SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3FDA JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3FDF JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 0x402E JUMPI PUSH1 0x0 PUSH2 0x4003 PUSH1 0x20 DUP4 MLOAD SUB DUP4 PUSH2 0x51B4 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x4015 JUMPI POP DUP7 MLOAD DUP2 LT JUMPDEST ISZERO PUSH2 0x402C JUMPI DUP1 DUP8 MSTORE PUSH1 0x20 DUP8 ADD DUP6 SWAP1 MSTORE PUSH1 0x40 DUP8 ADD DUP3 SWAP1 MSTORE JUMPDEST POP JUMPDEST POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x3F44 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x405B DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4082 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6667 DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 DUP2 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1208 SWAP1 DUP1 PUSH2 0x40C1 DUP7 DUP10 PUSH1 0x80 DUP5 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x40E8 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x66AE DUP2 MSTORE POP DUP4 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4114 DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x412C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4156 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x4179 JUMPI PUSH2 0x4174 DUP8 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0x417C JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO PUSH2 0x419E JUMPI PUSH2 0x4199 DUP9 DUP8 PUSH2 0x54E9 JUMP JUMPDEST PUSH2 0x41A1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xF41 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH2 0x41F7 JUMPI PUSH2 0x41D6 DUP5 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x41E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP4 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x4291 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x421D JUMPI PUSH2 0x41D6 DUP4 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP10 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH2 0x4237 DUP6 PUSH4 0x95B68FE7 PUSH1 0xE0 SHL DUP11 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0xE45 JUMPI INVALID JUMPDEST SWAP3 POP SWAP1 POP DUP1 ISZERO PUSH2 0x4274 JUMPI PUSH2 0x4253 DUP5 PUSH4 0xCD7724C3 PUSH1 0xE0 SHL DUP4 PUSH2 0x5568 JUMP JUMPDEST DUP9 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x425F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP5 POP DUP3 DUP2 MSTORE POP POP POP PUSH2 0x428F JUMP JUMPDEST PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4282 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP JUMPDEST POP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x42B1 JUMPI POP DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x42A5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ JUMPDEST ISZERO PUSH2 0x42BC JUMPI POP PUSH2 0xF41 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x41A6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x42E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x430A JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9E6 JUMPI DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x1F00CA74 PUSH3 0x249F0 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x4337 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x435D SWAP3 SWAP2 SWAP1 PUSH2 0x83C3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x43AB JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x43A8 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x43D9 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x18FF JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1904 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x43E6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x43FA JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4412 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4428 JUMPI POP PUSH2 0x9E6 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4310 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x443D DUP4 DUP6 PUSH2 0x53F2 JUMP JUMPDEST DUP2 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x447F JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFF1FD974 PUSH3 0xF4240 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x44AE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x44D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x44EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x451D JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x451A SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x454B JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4558 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x4570 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4586 JUMPI POP PUSH2 0x17E1 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4485 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x459E DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x45A9 DUP8 DUP8 DUP8 PUSH2 0x61D2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x45B5 JUMPI PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x276FDAD9 PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS SWAP1 PUSH4 0x4EDFB5B2 SWAP1 PUSH2 0x45DE SWAP1 DUP11 SWAP1 DUP8 SWAP1 DUP12 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x8333 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x45F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x460A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x4632 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x76E5 JUMP JUMPDEST PUSH1 0x80 DUP9 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD SWAP1 SWAP3 POP DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4654 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x467E JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4769 JUMPI PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xF1ED7FA4 DUP12 DUP12 DUP12 DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x46AC JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x46D3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x82FD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x46EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x46FF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4723 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4732 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x474A JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4760 JUMPI POP PUSH2 0x4769 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x4684 JUMP JUMPDEST POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4784 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST PUSH2 0x4790 DUP9 DUP9 DUP9 DUP9 PUSH2 0x6420 JUMP JUMPDEST SWAP4 POP SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x47A7 JUMPI PUSH2 0x3B58 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x47BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x47E9 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP1 SWAP3 POP PUSH2 0x4856 SWAP1 DUP1 PUSH2 0x480D DUP10 DUP8 DUP10 ISZERO PUSH1 0x80 DUP6 ADD PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP7 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4836 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7DE8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6575 DUP2 MSTORE POP DUP7 PUSH2 0x5A3F JUMP JUMPDEST SWAP2 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 PUSH2 0x4873 DUP6 DUP8 PUSH2 0x53F2 JUMP JUMPDEST DUP4 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x488B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x48B5 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x48E8 SWAP1 DUP11 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4900 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4914 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4938 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP3 POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x4956 JUMPI POP PUSH1 0x1 SWAP4 POP DUP7 PUSH2 0x49F5 JUMP JUMPDEST DUP9 MLOAD PUSH1 0x40 MLOAD PUSH4 0x939D863 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x1273B0C6 SWAP1 PUSH2 0x4987 SWAP1 DUP11 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x499F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x49B3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49D7 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x49EE JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST POP PUSH1 0x0 SWAP4 POP DUP6 JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xDD58B41C PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4A2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A42 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4A66 SWAP2 SWAP1 PUSH2 0x76AD JUMP JUMPDEST PUSH2 0x4A71 JUMPI POP POP PUSH2 0xB46 JUMP JUMPDEST PUSH2 0x4AE9 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4A9A SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP11 DUP8 DUP6 DUP15 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4AC9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D5F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x5C3C DUP2 MSTORE POP DUP8 PUSH2 0x5A3F JUMP JUMPDEST SWAP3 POP POP POP SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x60 SWAP1 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4B12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4B3C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x17E1 JUMPI DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x838E6A22 PUSH3 0x493E0 DUP9 DUP9 DUP9 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x4B6B JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4B91 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E40 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4BA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4BDA JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4BD7 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4C08 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x1791 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1796 JUMP JUMPDEST DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x4C15 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP POP PUSH1 0x1 ADD PUSH2 0x4B42 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x80 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x4C42 JUMPI POP PUSH1 0x0 PUSH2 0x119A JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x418436BC PUSH3 0x7A120 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4C7C JUMPI DUP7 PUSH2 0x4C92 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4CB5 JUMPI DUP7 PUSH2 0x4CCB JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP7 PUSH1 0x0 DUP12 PUSH1 0x80 ADD MLOAD PUSH1 0x40 MLOAD DUP8 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4CF3 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7E64 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4D0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x4D3C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x4D39 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x4D7A JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x4D6A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x4D6F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP2 POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4D85 DUP6 PUSH2 0x6763 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH1 0x0 PUSH2 0x4D95 DUP8 PUSH2 0x6763 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 POP PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0xA EXP DUP4 PUSH1 0xA EXP DUP8 DUP7 MUL MUL DUP2 PUSH2 0x4DB6 JUMPI INVALID JUMPDEST DIV DUP2 PUSH2 0x4DBE JUMPI INVALID JUMPDEST DIV SWAP4 POP POP POP POP PUSH2 0x119A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH2 0x4DD7 DUP5 DUP7 PUSH2 0x53F2 JUMP JUMPDEST DUP3 MLOAD DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4DEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4E19 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH2 0x4E84 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 DUP10 DUP9 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E3D SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP10 DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4E64 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x6776 DUP2 MSTORE POP DUP6 PUSH2 0x5A3F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x901754D7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x901754D7 SWAP1 PUSH2 0x3DB5 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC45A0155 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4EF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4F06 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x4F2A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP4 MLOAD SUB PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x4F46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x4F70 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP2 POP PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x519B JUMPI PUSH1 0x60 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x5B1DC86F PUSH3 0x249F0 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 0x4FA0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP7 PUSH1 0x1 ADD DUP2 MLOAD DUP2 LT PUSH2 0x4FB7 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4FDC SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x502A JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5027 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5079 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5058 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x505D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE SWAP4 POP PUSH2 0x519E SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 MLOAD LT ISZERO PUSH2 0x50A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509D SWAP1 PUSH2 0x8294 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x518F JUMPI PUSH1 0x0 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x50C0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x18160DDD PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5114 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5138 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 GT ISZERO PUSH2 0x5186 JUMPI DUP1 SWAP3 POP DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5151 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 DUP8 DUP2 MLOAD DUP2 LT PUSH2 0x5165 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x50A9 JUMP JUMPDEST POP POP POP POP PUSH1 0x1 ADD PUSH2 0x4F76 JUMP JUMPDEST POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x51AF DUP4 DUP4 DUP4 PUSH2 0x67C6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9E9 DUP4 DUP4 PUSH2 0x67F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP6 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x21F8A721 DUP8 PUSH1 0x0 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x9232494E PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5228 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x524C SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5268 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5294 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x52B8 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP2 POP DUP6 PUSH1 0x20 ADD MLOAD MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x52CD JUMPI PUSH2 0x53E9 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP8 PUSH1 0x20 ADD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x53E6 JUMPI PUSH1 0x2 DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x52F0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD MLOAD LT ISZERO PUSH2 0x5304 JUMPI PUSH2 0x53DE JUMP JUMPDEST DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x7F9C0ECD PUSH3 0x493E0 DUP11 PUSH1 0x20 ADD MLOAD DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5327 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP9 PUSH1 0x1 DUP11 MLOAD SUB DUP2 MLOAD DUP2 LT PUSH2 0x533F JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5364 SWAP3 SWAP2 SWAP1 PUSH2 0x8002 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x537C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x53AD JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x53AA SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x53B6 JUMPI PUSH2 0x53DE JUMP JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x53DC JUMPI DUP1 SWAP3 POP DUP9 PUSH1 0x20 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x53D1 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP4 POP JUMPDEST POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x52D1 JUMP JUMPDEST POP POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5424 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x509D SWAP1 PUSH2 0x824F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x5430 PUSH2 0x6AA7 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP4 ADD DUP2 SWAP1 MSTORE SWAP3 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 DUP3 SWAP2 SWAP1 DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x5479 PUSH2 0x6B15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x5471 JUMPI SWAP1 POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x54D7 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3795FB1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x6F2BF62 SWAP1 PUSH2 0x5518 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D18 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5544 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E9 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x557E JUMPI PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x60 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH3 0x249F0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x55A0 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x55DE SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP7 STATICCALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x561A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x561F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP DUP2 ISZERO PUSH2 0x5642 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x563F SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST SWAP3 POP JUMPDEST POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5681 SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5699 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x56AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x56D1 SWAP2 SWAP1 PUSH2 0x7B0D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP PUSH1 0x0 PUSH3 0xF4240 SWAP1 POP DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x57F9 JUMPI PUSH1 0x0 PUSH2 0x5710 DUP10 PUSH5 0xE8D4A51000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x5734 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP9 DUP6 PUSH2 0x684D JUMP JUMPDEST SWAP1 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x574C JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57DB PUSH8 0xDE0B6B3A7640000 PUSH2 0x57D5 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x57AA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x57CE SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST DUP7 SWAP1 PUSH2 0x681C JUMP JUMPDEST SWAP1 PUSH2 0x6869 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x57E9 DUP5 DUP4 PUSH2 0x6893 JUMP JUMPDEST SWAP9 POP PUSH2 0x5902 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP11 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x58F9 JUMPI DUP8 DUP5 DUP2 GT ISZERO PUSH2 0x582E JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x584A PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP9 DUP6 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 GT PUSH2 0x5862 JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58E7 DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x58B4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x58D8 SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x684D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x57E9 DUP3 PUSH2 0x57D5 DUP7 DUP9 PUSH2 0x681C JUMP JUMPDEST PUSH1 0x0 SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5917 PUSH2 0x6B47 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x592B SWAP2 SWAP1 PUSH2 0x7733 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5945 SWAP2 SWAP1 PUSH2 0x7717 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x22DB5ED1 PUSH1 0xE2 SHL DUP6 DUP8 DUP7 PUSH2 0x5960 DUP13 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x5973 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x82CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 MSTORE SWAP1 MLOAD PUSH2 0x59B1 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x59EC JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x59F1 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x5A09 JUMPI PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5A1D SWAP2 SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5A29 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP6 POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP1 ISZERO PUSH2 0x5A58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x5A82 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x5A94 JUMPI PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AC5 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5AB0 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5AD2 JUMPI POP PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5AEF DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP5 DUP9 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5AFD JUMPI POP POP PUSH2 0x519E JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x5C33 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5BF5 JUMPI PUSH2 0x5B33 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B24 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 DUP7 PUSH2 0x68F3 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5B3F JUMPI PUSH2 0x5BF5 JUMP JUMPDEST PUSH2 0x5B4E PUSH2 0x2715 PUSH2 0x2710 DUP7 PUSH2 0x68F3 JUMP JUMPDEST SWAP4 POP DUP4 PUSH2 0x5B5A JUMPI PUSH2 0x5BF5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B77 DUP9 PUSH1 0x20 ADD MLOAD DUP10 PUSH1 0x0 ADD MLOAD DUP8 DUP12 PUSH1 0x40 ADD MLOAD PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x5B84 JUMPI POP PUSH2 0x5BF5 JUMP JUMPDEST DUP1 SWAP4 POP DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x5B93 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP5 LT PUSH2 0x5BEC JUMPI PUSH1 0x0 DUP8 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x5BAF JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x2710 DUP10 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x5BC6 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP8 SUB MUL DUP2 PUSH2 0x5BD8 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x5 DUP2 GT PUSH2 0x5BEA JUMPI POP POP PUSH2 0x5BF5 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x5B0C JUMP JUMPDEST POP PUSH2 0x5C14 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C05 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD DUP4 DUP6 PUSH2 0x68F3 JUMP JUMPDEST DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x5C20 JUMPI INVALID JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 0x1 ADD PUSH2 0x5B00 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5C58 SWAP2 SWAP1 PUSH2 0x705F JUMP JUMPDEST SWAP4 POP SWAP4 POP SWAP4 POP SWAP4 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x5D42 JUMPI PUSH1 0x40 MLOAD PUSH4 0x51400F0B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0xA2801E16 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x5CAB SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5CC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5CF4 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x5CF1 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5D36 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5D22 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5D27 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP6 POP POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST SWAP5 POP PUSH2 0x9E9 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCA19EBD9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 PUSH4 0xCA19EBD9 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x5CAB SWAP1 DUP8 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 ISZERO SWAP1 PUSH2 0x5D92 JUMPI POP DUP3 DUP5 DUP3 DUP2 PUSH2 0x5D8E JUMPI INVALID JUMPDEST DIV EQ ISZERO JUMPDEST ISZERO PUSH2 0x5DA1 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x519E JUMP JUMPDEST PUSH8 0x6F05B59D3B20000 DUP2 ADD DUP2 DUP2 LT ISZERO PUSH2 0x5DBF JUMPI PUSH1 0x0 SWAP3 POP POP POP PUSH2 0x519E JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5DEB SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x5E05 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xE8E4AF09 DUP4 DUP6 DUP5 PUSH2 0x5E19 DUP11 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5E38 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D8A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x5E85 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E82 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x5EC6 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5EB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP1 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x5ED3 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP5 POP POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD9638D36 DUP12 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5F1C SWAP2 SWAP1 PUSH2 0x80D8 JUMP JUMPDEST PUSH1 0xA0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5F34 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F48 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x5F6C SWAP2 SWAP1 PUSH2 0x7B0D JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP SWAP3 POP DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x6089 JUMPI PUSH1 0x0 DUP8 SWAP1 POP PUSH1 0x0 PUSH2 0x601C DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x568D4B6F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5FD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5FE9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x600D SWAP2 SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6036 DUP3 PUSH2 0x57D5 DUP6 PUSH8 0xDE0B6B3A7640000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6054 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP10 DUP6 PUSH2 0x684D JUMP JUMPDEST SWAP1 POP DUP6 DUP2 LT PUSH2 0x606D JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E9 PUSH1 0x1 PUSH2 0x6083 DUP6 PUSH5 0xE8D4A51000 PUSH2 0x6869 JUMP JUMPDEST SWAP1 PUSH2 0x684D JUMP JUMPDEST DUP10 PUSH1 0x40 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x616E JUMPI PUSH1 0x0 PUSH2 0x60B8 DUP9 PUSH5 0xE8D4A51000 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x60F8 DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFAE036D5 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x58A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x6112 PUSH8 0xDE0B6B3A7640000 PUSH2 0x57D5 DUP6 DUP6 PUSH2 0x681C JUMP JUMPDEST SWAP1 POP DUP6 DUP2 GT ISZERO PUSH2 0x612B JUMPI PUSH1 0x0 SWAP7 POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6147 PUSH12 0x33B2E3C9FD0803CE8000000 PUSH2 0x572E DUP10 DUP6 PUSH2 0x6893 JUMP JUMPDEST SWAP1 POP DUP5 DUP2 GT PUSH2 0x6160 JUMPI PUSH1 0x0 SWAP8 POP POP POP POP POP POP POP POP PUSH2 0x5902 JUMP JUMPDEST POP SWAP6 POP PUSH2 0x5902 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP PUSH1 0x0 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6189 PUSH2 0x6B47 JUMP JUMPDEST DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x619D SWAP2 SWAP1 PUSH2 0x7733 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x61B7 SWAP2 SWAP1 PUSH2 0x7717 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 ADDRESS PUSH4 0x205E01D7 PUSH1 0xE1 SHL DUP6 DUP8 DUP7 PUSH2 0x5960 DUP13 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x910FFC71 DUP8 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6210 JUMPI DUP7 PUSH2 0x6226 JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST DUP9 PUSH1 0x60 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6249 JUMPI DUP7 PUSH2 0x625F JUMP JUMPDEST PUSH20 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND SWAP1 SWAP2 MSTORE PUSH2 0x6293 SWAP3 SWAP2 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x24 DUP2 ADD PUSH2 0x7E0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x62AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x62BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x62E7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x7457 JUMP JUMPDEST POP POP SWAP1 POP DUP1 MLOAD DUP7 PUSH1 0x0 ADD MLOAD LT PUSH2 0x6303 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x9E9 SWAP1 POP JUMP JUMPDEST DUP1 DUP7 PUSH1 0x0 ADD MLOAD DUP2 MLOAD DUP2 LT PUSH2 0x6313 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP PUSH1 0xF8 DUP4 SWAP1 SHR PUSH1 0x0 SHR PUSH1 0xBB EQ ISZERO PUSH2 0x9E6 JUMPI POP PUSH1 0x0 SWAP2 POP PUSH2 0x9E9 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6344 PUSH2 0x6B67 JUMP JUMPDEST DUP5 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6358 SWAP2 SWAP1 PUSH2 0x710D JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6372 SWAP2 SWAP1 PUSH2 0x710D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x3C7B5FE9 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP ADDRESS SWAP1 PUSH4 0xF1ED7FA4 SWAP1 PUSH2 0x639F SWAP1 DUP6 SWAP1 DUP6 SWAP1 DUP9 SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x82FD JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x63B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x63E7 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x63E4 SWAP2 DUP2 ADD SWAP1 PUSH2 0x76CD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6415 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0x5EB3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x5EB8 JUMP JUMPDEST SWAP4 POP PUSH2 0x9E9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x60 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x57A281DC DUP7 DUP7 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6453 SWAP3 SWAP2 SWAP1 PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x646B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x647F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x64A7 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST SWAP1 POP PUSH1 0x1 SWAP2 POP DUP1 MLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x6540 JUMPI PUSH1 0x40 MLOAD PUSH4 0x15E8A077 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 PUSH4 0x57A281DC SWAP1 PUSH2 0x64E5 SWAP1 DUP8 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D45 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x64FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6511 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x6539 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x73BF JUMP JUMPDEST SWAP1 POP PUSH1 0x0 SWAP2 POP JUMPDEST DUP1 MLOAD DUP7 LT PUSH2 0x6555 JUMPI PUSH1 0x0 DUP1 SWAP3 POP SWAP3 POP POP PUSH2 0x53E9 JUMP JUMPDEST DUP1 DUP7 DUP2 MLOAD DUP2 LT PUSH2 0x6561 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x658F SWAP2 SWAP1 PUSH2 0x70BD JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP1 ISZERO PUSH2 0x6633 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3CD0243B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x79A04876 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x65CF SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x65E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x6617 JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x6614 SWAP2 DUP2 ADD SWAP1 PUSH2 0x7AB5 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x6627 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x9E9 JUMP JUMPDEST POP SWAP4 POP PUSH2 0x9E9 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x66410A21 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH4 0x66410A21 SWAP1 PUSH3 0x493E0 SWAP1 PUSH2 0x65CF SWAP1 PUSH1 0x0 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x7D2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x6680 SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x669A SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0x30D6570D DUP4 DUP6 DUP5 PUSH2 0x5E19 DUP11 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x66C7 SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x66E1 SWAP2 SWAP1 PUSH2 0x700A JUMP JUMPDEST SWAP1 POP ADDRESS PUSH4 0xA4698417 PUSH3 0x61A80 DUP5 DUP7 DUP6 PUSH2 0x66F9 DUP12 PUSH2 0x68B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6718 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7D8A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6730 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP7 STATICCALL SWAP4 POP POP POP POP DUP1 ISZERO PUSH2 0x5E85 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x5E82 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x767B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x676E DUP3 PUSH2 0x694B JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x678F SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x0 DUP1 DUP7 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x67AA SWAP2 SWAP1 PUSH2 0x7026 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x67BA DUP5 DUP5 DUP4 DUP10 PUSH2 0x34BF JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x67EA JUMPI PUSH2 0x67EA PUSH2 0x67E5 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x69F7 JUMP JUMPDEST PUSH2 0x6A51 JUMP JUMPDEST SWAP2 ADD PUSH1 0x20 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO PUSH2 0x6813 JUMPI PUSH2 0x6813 PUSH2 0x67E5 PUSH1 0x5 DUP6 MLOAD DUP6 PUSH1 0x20 ADD PUSH2 0x69F7 JUMP JUMPDEST POP ADD PUSH1 0x20 ADD MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x682B JUMPI POP PUSH1 0x0 PUSH2 0x519E JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x6838 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x67E5 PUSH1 0x1 DUP7 DUP7 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x9E9 JUMPI PUSH2 0x9E9 PUSH2 0x67E5 PUSH1 0x0 DUP7 DUP7 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x687F JUMPI PUSH2 0x687F PUSH2 0x67E5 PUSH1 0x3 DUP6 DUP6 PUSH2 0x6A59 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP2 PUSH2 0x688A JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x68AC JUMPI PUSH2 0x68AC PUSH2 0x67E5 PUSH1 0x2 DUP6 DUP6 PUSH2 0x6A59 JUMP JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 0x60 SWAP2 PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP2 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x68E2 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP4 ISZERO DUP1 PUSH2 0x6900 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 PUSH2 0x6909 JUMPI POP DUP3 ISZERO JUMPDEST ISZERO PUSH2 0x6916 JUMPI POP PUSH1 0x0 PUSH2 0x9E9 JUMP JUMPDEST DUP4 DUP3 MUL DUP3 DUP6 DUP3 DUP2 PUSH2 0x6923 JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x6933 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x9E9 JUMP JUMPDEST DUP4 PUSH1 0x1 DUP6 SUB DUP3 ADD DUP2 PUSH2 0x6941 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH4 0x313CE567 PUSH1 0xE0 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD PUSH2 0x6989 SWAP2 SWAP1 PUSH2 0x7CFC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x69C4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x69C9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x69DD JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST ISZERO PUSH2 0x69F0 JUMPI PUSH2 0x69ED DUP2 PUSH1 0x0 PUSH2 0x51B4 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x28006595 PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A16 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8152 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP3 ADD REVERT JUMPDEST PUSH1 0x60 PUSH4 0xE946C1BB PUSH1 0xE0 SHL DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x6A16 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x8131 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x80 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0x519E DUP2 PUSH2 0x852A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x519E DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6BD7 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6BEA PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST PUSH2 0x847A JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6C0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD PUSH2 0x6C21 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C0E JUMP JUMPDEST POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6C4E JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6C5C PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI PUSH2 0x6C84 DUP9 DUP5 DUP5 CALLDATALOAD DUP11 ADD ADD PUSH2 0x6BC7 JUMP JUMPDEST DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6C6D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6CA6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6CB4 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD DUP8 ADD PUSH1 0x40 DUP1 PUSH1 0x1F NOT DUP4 DUP13 SUB ADD SLT ISZERO PUSH2 0x6CE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6CEF DUP2 PUSH2 0x847A JUMP JUMPDEST PUSH2 0x6CFB DUP12 DUP8 DUP6 ADD PUSH2 0x6BB1 JUMP JUMPDEST DUP2 MSTORE SWAP1 DUP3 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x6D16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D24 DUP12 DUP8 DUP5 DUP7 ADD ADD PUSH2 0x6DF8 JUMP JUMPDEST DUP2 DUP8 ADD MSTORE DUP7 MSTORE POP POP SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6CC5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6D4C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6D5A PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6D7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 CALLDATALOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6D7E JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6DAA JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6DB8 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE SWAP2 POP PUSH1 0x20 DUP1 DUP4 ADD SWAP1 DUP5 DUP2 ADD DUP2 DUP5 MUL DUP7 ADD DUP3 ADD DUP8 LT ISZERO PUSH2 0x6DD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x6C33 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP3 ADD SWAP3 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x6DDC JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6E08 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x6E16 PUSH2 0x6BE5 DUP3 PUSH2 0x84BF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6E2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP5 ADD CALLDATACOPY PUSH1 0x0 SWAP1 DUP3 ADD PUSH1 0x20 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x6E56 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6E64 PUSH2 0x6BE5 DUP3 PUSH2 0x84BF JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x6E7B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x269C DUP2 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x84ED JUMP JUMPDEST DUP1 MLOAD PUSH1 0x2 DUP2 LT PUSH2 0x519E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6EAC JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6EB6 PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x6EC3 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6ED3 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x6EE6 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F02 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F0C PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 MLOAD PUSH2 0x6F19 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x6F29 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x6EE6 DUP2 PUSH2 0x853F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F4D JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F57 PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD PUSH2 0x6F64 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6F74 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6F90 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x6F9A PUSH1 0xA0 PUSH2 0x847A JUMP JUMPDEST SWAP1 POP DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH2 0x6FAE DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH2 0x6FC1 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH2 0x6FD4 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x6FF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6FFE DUP5 DUP3 DUP6 ADD PUSH2 0x6DF8 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x701B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E9 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7038 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7043 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x7054 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7074 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x707F DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x7090 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x70A1 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x70B2 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x70D1 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH2 0x70DC DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x70ED DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x7102 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x711F JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x712A DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7146 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP1 DUP5 ADD SWAP1 PUSH1 0xA0 DUP3 DUP8 SUB SLT ISZERO PUSH2 0x7159 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7163 PUSH1 0xA0 PUSH2 0x847A JUMP JUMPDEST DUP3 MLOAD DUP2 MSTORE PUSH2 0x7174 DUP8 PUSH1 0x20 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x7186 DUP8 PUSH1 0x40 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7198 DUP8 PUSH1 0x60 DUP6 ADD PUSH2 0x6BBC JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP4 ADD MLOAD DUP3 DUP2 GT ISZERO PUSH2 0x71AE JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x71BA DUP9 DUP3 DUP7 ADD PUSH2 0x6E46 JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x71E4 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x71EF DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x71FF DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x720F DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x721F DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7239 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7245 DUP9 DUP3 DUP10 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7267 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x7272 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x7282 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7292 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x72B8 DUP8 DUP3 DUP9 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x72D9 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH2 0x72E4 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x72F4 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7304 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7328 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x7333 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x734E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x735A DUP8 DUP4 DUP9 ADD PUSH2 0x6BC7 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x736F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x737C DUP7 DUP3 DUP8 ADD PUSH2 0x6D3C JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x739D JUMPI DUP3 DUP4 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x73A8 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x720F DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x73D1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x73E6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x73F6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x7404 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x7420 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x744B JUMPI DUP1 MLOAD PUSH2 0x7437 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x7424 JUMP JUMPDEST POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x746B JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7481 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x7494 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x74A2 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP1 DUP3 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP3 POP DUP1 DUP7 ADD DUP12 DUP3 DUP4 DUP8 MUL DUP10 ADD ADD GT ISZERO PUSH2 0x74C2 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP7 POP JUMPDEST DUP5 DUP8 LT ISZERO PUSH2 0x74E4 JUMPI DUP1 MLOAD DUP5 MSTORE PUSH1 0x1 SWAP7 SWAP1 SWAP7 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x74C6 JUMP JUMPDEST POP DUP10 ADD MLOAD SWAP1 SWAP8 POP SWAP4 POP POP POP DUP1 DUP3 GT ISZERO PUSH2 0x74FB JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7508 DUP7 DUP3 DUP8 ADD PUSH2 0x6D9A JUMP JUMPDEST SWAP3 POP POP PUSH2 0x7518 DUP6 PUSH1 0x40 DUP7 ADD PUSH2 0x6E8C JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7533 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7549 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x755C JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x756A JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x757D JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x75A1 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x75B6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x75C6 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x75D4 PUSH2 0x6BE5 DUP3 PUSH2 0x84A0 JUMP JUMPDEST DUP2 DUP2 MSTORE DUP4 DUP2 ADD SWAP1 DUP4 DUP6 ADD DUP6 DUP5 MUL DUP6 ADD DUP7 ADD DUP10 LT ISZERO PUSH2 0x75F0 JUMPI DUP7 DUP8 REVERT JUMPDEST DUP7 SWAP5 POP JUMPDEST DUP4 DUP6 LT ISZERO PUSH2 0x744B JUMPI DUP1 MLOAD DUP4 MSTORE PUSH1 0x1 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP2 DUP6 ADD SWAP2 DUP6 ADD PUSH2 0x75F4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7626 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x763C JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7648 DUP8 DUP4 DUP9 ADD PUSH2 0x6C96 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x765D JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x766A DUP7 DUP3 DUP8 ADD PUSH2 0x6C96 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x768C JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x76A1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x119A DUP5 DUP3 DUP6 ADD PUSH2 0x6D9A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76BE JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x9E9 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76DE JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x76F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x770B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x119A DUP5 DUP3 DUP6 ADD PUSH2 0x6E46 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7728 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x9E9 DUP2 PUSH2 0x8555 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x80 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7745 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x7750 DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP2 POP PUSH2 0x775F DUP5 PUSH1 0x20 DUP6 ADD PUSH2 0x6EF1 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xA0 DUP2 SLT ISZERO PUSH2 0x777E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x40 DUP2 SLT ISZERO PUSH2 0x778B JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7796 PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST DUP6 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x77A8 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x77BD DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x77CD DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x77FC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7812 JUMPI DUP4 DUP5 REVERT JUMPDEST SWAP1 DUP7 ADD SWAP1 PUSH1 0x40 DUP3 DUP10 SUB SLT ISZERO PUSH2 0x7825 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x782F PUSH1 0x40 PUSH2 0x847A JUMP JUMPDEST PUSH2 0x7839 DUP10 DUP5 PUSH2 0x6BB1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP3 DUP2 GT ISZERO PUSH2 0x784C JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x7858 DUP11 DUP3 DUP7 ADD PUSH2 0x6C3E JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP DUP1 SWAP7 POP POP PUSH2 0x786F DUP9 PUSH1 0x20 DUP10 ADD PUSH2 0x6BB1 JUMP JUMPDEST SWAP5 POP PUSH2 0x787E DUP9 PUSH1 0x40 DUP10 ADD PUSH2 0x6BB1 JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x7893 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x72B8 DUP8 DUP3 DUP9 ADD PUSH2 0x6D3C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x78B5 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x78BF DUP7 DUP7 PUSH2 0x6E9B JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x78CF DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x78DF DUP2 PUSH2 0x8555 JUMP JUMPDEST SWAP2 POP PUSH1 0xA0 DUP6 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x72AC JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x790E JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7918 DUP7 DUP7 PUSH2 0x6F3C JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x77BD DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x793D JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x7953 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x795F DUP9 DUP4 DUP10 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x7971 DUP3 PUSH2 0x852A JUMP JUMPDEST SWAP1 SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP1 PUSH2 0x7983 DUP3 PUSH2 0x852A JUMP JUMPDEST SWAP1 SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x7893 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x79AD JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x79C2 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x79CE DUP8 DUP3 DUP9 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH2 0x72F4 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x79F4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x7A09 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x7A15 DUP8 DUP3 DUP9 ADD PUSH2 0x6F7F JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x7A2D DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x70B2 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP5 DUP7 SUB PUSH1 0xC0 DUP2 SLT ISZERO PUSH2 0x7A53 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x60 DUP2 SLT ISZERO PUSH2 0x7A60 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x7A6B PUSH1 0x60 PUSH2 0x847A JUMP JUMPDEST DUP6 CALLDATALOAD PUSH2 0x7A76 DUP2 PUSH2 0x852A JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 DUP7 DUP2 ADD CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH2 0x7A90 DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE SWAP4 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH2 0x7AA5 DUP2 PUSH2 0x852A JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP6 ADD CALLDATALOAD PUSH2 0x78DF DUP2 PUSH2 0x852A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AC7 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x7AED JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x7B24 JUMPI DUP3 DUP4 REVERT JUMPDEST POP POP DUP4 MLOAD PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 SWAP1 SWAP8 ADD MLOAD SWAP3 SWAP9 SWAP2 SWAP8 POP SWAP6 SWAP5 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP3 ADD MLOAD PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x119A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7BD2 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BAD JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x20 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD DUP4 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7BD2 JUMPI DUP2 MLOAD DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x7BF0 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x7C24 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x84ED JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 DUP2 AND SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD MLOAD ISZERO ISZERO SWAP1 DUP5 ADD MSTORE PUSH1 0x40 DUP1 DUP4 ADD MLOAD SWAP1 SWAP2 AND SWAP1 DUP4 ADD MSTORE PUSH1 0x60 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP4 MSTORE PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND PUSH1 0x20 DUP7 ADD MSTORE DUP1 PUSH1 0x40 DUP6 ADD MLOAD AND PUSH1 0x40 DUP7 ADD MSTORE DUP1 PUSH1 0x60 DUP6 ADD MLOAD AND PUSH1 0x60 DUP7 ADD MSTORE POP POP PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 PUSH1 0x80 DUP6 ADD MSTORE PUSH2 0x119A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP3 DUP5 DUP4 CALLDATACOPY SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x7D0E DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x84ED JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP4 AND PUSH1 0x40 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5902 SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND DUP2 MSTORE SWAP3 DUP5 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP3 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 ISZERO ISZERO PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x5902 SWAP1 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND DUP3 MSTORE DUP6 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x7E9E SWAP1 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x7ECD SWAP1 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5902 DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP2 MSTORE PUSH1 0x0 PUSH2 0x7EF6 DUP6 PUSH2 0x851D JUMP JUMPDEST DUP5 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x7F10 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x7BDD JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x7E9E DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND DUP3 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x100 SWAP1 PUSH2 0x7F3F DUP12 PUSH2 0x851D JUMP JUMPDEST DUP11 PUSH1 0x20 DUP6 ADD MSTORE DUP2 PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x7F57 DUP3 DUP6 ADD DUP12 PUSH2 0x7BDD JUMP JUMPDEST SWAP2 POP DUP4 DUP3 SUB PUSH1 0x60 DUP6 ADD MSTORE PUSH2 0x7F6B DUP3 DUP11 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 DUP9 AND PUSH1 0x80 DUP6 ADD MSTORE SWAP1 POP PUSH2 0x7F7E DUP7 PUSH2 0x851D JUMP JUMPDEST DUP6 PUSH1 0xA0 DUP5 ADD MSTORE DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x7F96 DUP2 DUP7 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 POP DUP3 DUP2 SUB PUSH1 0xE0 DUP5 ADD MSTORE PUSH2 0x7FAA DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x119A SWAP1 DUP4 ADD DUP5 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x7FF0 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1208 DUP2 DUP6 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE PUSH2 0x8015 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP1 DUP5 MUL DUP7 ADD DUP4 ADD DUP8 DUP6 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x808B JUMPI DUP9 DUP4 SUB PUSH1 0x3F NOT ADD DUP6 MSTORE DUP2 MLOAD DUP1 MLOAD DUP8 DUP6 MSTORE PUSH2 0x806C DUP9 DUP7 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST SWAP2 DUP10 ADD MLOAD ISZERO ISZERO SWAP5 DUP10 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP5 DUP8 ADD SWAP5 SWAP3 POP SWAP1 DUP7 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8048 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1208 SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x7ECD PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x119A SWAP1 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x813E DUP6 PUSH2 0x851D JUMP JUMPDEST SWAP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH1 0x8 DUP6 LT PUSH2 0x813E JUMPI INVALID JUMPDEST PUSH1 0x0 PUSH1 0xE0 DUP3 ADD PUSH2 0x816F DUP8 PUSH2 0x84E2 JUMP JUMPDEST DUP4 MSTORE PUSH1 0x20 PUSH1 0xE0 DUP2 DUP6 ADD MSTORE DUP2 DUP8 MLOAD PUSH2 0x8186 DUP2 DUP6 PUSH2 0x80D8 JUMP JUMPDEST SWAP2 POP DUP2 SWAP4 POP DUP3 DUP2 MUL DUP3 ADD DUP4 DUP11 ADD DUP7 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x81BF JUMPI DUP7 DUP4 SUB DUP6 MSTORE PUSH2 0x81AD DUP4 DUP4 MLOAD PUSH2 0x7B5D JUMP JUMPDEST SWAP5 DUP7 ADD SWAP5 SWAP3 POP SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x8195 JUMP JUMPDEST POP POP DUP7 DUP2 SUB PUSH1 0x40 DUP9 ADD MSTORE DUP1 SWAP5 POP DUP9 MLOAD SWAP3 POP PUSH2 0x81DA DUP4 DUP3 PUSH2 0x80D8 JUMP JUMPDEST SWAP5 POP POP POP DUP2 DUP8 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x8204 JUMPI PUSH2 0x81F6 DUP6 DUP4 MLOAD PUSH2 0x7B4C JUMP JUMPDEST SWAP5 POP SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x81E3 JUMP JUMPDEST POP POP POP POP DUP1 SWAP2 POP POP PUSH2 0x1208 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x7C6A JUMP JUMPDEST PUSH1 0xF SWAP4 DUP5 SIGNEXTEND DUP2 MSTORE SWAP2 SWAP1 SWAP3 SIGNEXTEND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP4 SWAP1 SIGNEXTEND DUP2 MSTORE PUSH1 0x80 DUP2 ADD PUSH2 0x9E9 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x7C38 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x455243323042726964676553616D706C65722F494E56414C49445F544F4B454E PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x2FA820A4A9 PUSH1 0xD9 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x4B79626572444D4D53616D706C65722F4E4F5F504F4F4C535F464F554E440000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82D7 DUP3 DUP8 PUSH2 0x7C38 JUMP JUMPDEST DUP5 PUSH1 0xF SIGNEXTEND PUSH1 0x60 DUP4 ADD MSTORE DUP4 PUSH1 0xF SIGNEXTEND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xC0 PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0x5902 PUSH1 0xC0 DUP4 ADD DUP5 PUSH2 0x7BDD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x8310 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP6 DUP7 AND PUSH1 0x20 DUP5 ADD MSTORE SWAP4 SWAP1 SWAP5 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 MSTORE PUSH2 0x8346 PUSH1 0x80 DUP4 ADD DUP8 PUSH2 0x7C9F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 SWAP1 SWAP6 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x40 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x60 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0xA0 PUSH1 0x60 DUP5 ADD MSTORE PUSH2 0x839C PUSH1 0xC0 DUP5 ADD DUP3 PUSH2 0x7C0C JUMP JUMPDEST SWAP1 POP PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP5 DUP4 SUB ADD PUSH1 0xA0 DUP6 ADD MSTORE PUSH2 0x1208 DUP3 DUP3 PUSH2 0x7C0C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x119A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x7B9A JUMP JUMPDEST PUSH1 0x0 DUP5 DUP3 MSTORE PUSH1 0x60 PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x83F5 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7B9A JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x5902 DUP2 DUP6 PUSH2 0x7B9A JUMP JUMPDEST SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0x40 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x8445 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x845E JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x8473 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x8498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x84B5 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x84D4 JUMPI DUP1 DUP2 REVERT JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP1 PUSH1 0x2 DUP2 LT PUSH2 0x6771 JUMPI INVALID JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8508 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x84F0 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x8517 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP2 LT PUSH2 0x8527 JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0xF SIGNEXTEND DUP2 EQ PUSH2 0x8527 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE SWAP14 0xA6 JUMPDEST POP 0xE0 0xDD PUSH22 0x155E83C26FF605FDB4D8C9035C9B29BC8A69019E22EA 0xE7 0x22 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
                "sourceMap": "1307:1221:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1948:1154:21;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1060:1630:34;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1591:1290:13:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2131:1734:12:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4274:2338:35:-;;;;;;:::i;:::-;;:::i;3549:919:26:-;;;;;;:::i;:::-;;:::i;4133:670:33:-;;;;;;:::i;:::-;;:::i;1936:1742:16:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;1410:1411:28:-;;;;;;:::i;:::-;;:::i;1382:1092:25:-;;;;;;:::i;:::-;;:::i;1213:988:36:-;;;;;;:::i;:::-;;:::i;2429:755:23:-;;;;;;:::i;:::-;;:::i;1731:1130:15:-;;;;;;:::i;:::-;;:::i;3526:1138:21:-;;;;;;:::i;:::-;;:::i;4509:2595:22:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4265:2076:11:-;;;;;;:::i;:::-;;:::i;2751:583:32:-;;;;;;:::i;:::-;;:::i;2052:474:18:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3456:313:13:-;;;;;;:::i;:::-;;:::i;4474:920:26:-;;;;;;:::i;:::-;;:::i;1621:2080:33:-;;;;;;:::i;:::-;;:::i;3287:1650:15:-;;;;;;:::i;:::-;;:::i;1764:2076:11:-;;;;;;:::i;:::-;;:::i;3464:1039:22:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;2424:1290:27:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;4281:1535:12:-;;;;;;:::i;:::-;;:::i;1540:1205:24:-;;;;;;:::i;:::-;;:::i;2025:1175:17:-;;;;;;:::i;:::-;;:::i;1325:1038:19:-;;;;;;:::i;:::-;;:::i;1432:986:27:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;2696:1818:34:-;;;;;;:::i;:::-;;:::i;2894:593:25:-;;;;;;:::i;:::-;;:::i;3202:653:24:-;;;;;;:::i;:::-;;:::i;1572:2343:35:-;;;;;;:::i;:::-;;:::i;2552:972:36:-;;;;;;:::i;:::-;;:::i;2788:1037:19:-;;;;;;:::i;:::-;;:::i;1770:1175:22:-;;;;;;:::i;:::-;;:::i;3797:1026:17:-;;;;;;:::i;:::-;;:::i;4221:1750:16:-;;;;;;:::i;:::-;;:::i;1440:887:32:-;;;;;;:::i;:::-;;:::i;7885:1337:22:-;;;;;;:::i;:::-;;:::i;4189:904:27:-;;;;;;:::i;:::-;;:::i;1948:1154:21:-;2226:24;;2131:22;;;;2226:24;-1:-1:-1;;;;;2280:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2280:25:21;;2260:45;;2323:31;2341:6;2349:4;2323:17;:31::i;:::-;2315:39;;2368:5;:12;2384:1;2368:17;2364:81;;;2401:33;;;2364:81;2459:9;2454:642;2478:10;2474:1;:14;2454:642;;;2545:6;-1:-1:-1;;;;;2529:37:21;;1507:5;2634:17;2652:1;2634:20;;;;;;;;;;;;;;2656:5;2663:4;2529:139;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2529:139:21;;;;;;;;;;;;:::i;:::-;;;2509:577;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3066:5;;;2509:577;2773:7;2795:1;2781:4;:11;:15;2773:24;;;;;;;;;;;;;;2750:17;2768:1;2750:20;;;;;;;;;;;;;:47;;;;;2873:17;2891:1;2873:20;;;;;;;;;;;;;;2897:1;2873:25;2869:77;;;2922:5;;;2869:77;2685:275;2490:3;;2454:642;;;;1948:1154;;;;;;;;:::o;1060:1630:34:-;1233:26;;:::i;:::-;1275:31;1325:9;1320:632;1345:13;:20;1340:1;:25;1320:632;;1386:17;1406:13;1420:1;1406:16;;;;;;;;;;;;;;:21;;;1386:41;;1441:47;1473:2;1459:4;:11;:16;1477:10;1441:4;:17;;:47;;;;;:::i;:::-;1503:15;1520:23;1555:13;1569:1;1555:16;;;;;;;;;;;;;;:19;;;-1:-1:-1;;;;;1547:33:34;1581:4;1547:39;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1502:84;;;;1604:10;1600:342;;;1634:14;1651:46;1694:2;1674:10;:17;:22;1651:10;:22;;:46;;;;:::i;:::-;1634:63;;1728:23;1719:6;:32;1715:213;;;1829:20;;;:24;;;1875:21;;;:34;;;1801:6;-1:-1:-1;1801:6:34;1715:213;1600:342;;1320:632;;;1367:3;;;;;1320:632;;;-1:-1:-1;1965:28:34;1961:72;;2009:13;;;1961:72;2047:9;2042:642;2067:14;:21;2062:1;:26;2042:642;;2109:17;2129:14;2144:1;2129:17;;;;;;;;;;;;;;:22;;;2109:42;;2165:60;2197:2;2183:4;:11;:16;2201:23;2165:4;:17;;:60;;;;;:::i;:::-;2240:15;2257:23;2292:14;2307:1;2292:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;2284:34:34;2319:4;2284:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2239:85;;;;2342:10;2338:336;;;2372:14;2389:46;2432:2;2412:10;:17;:22;2389:10;:22;;:46;;;;:::i;:::-;2466:19;;2372:63;;-1:-1:-1;2457:28:34;;2453:207;;;2509:28;;;2559:21;;;:25;;;2606:22;;;:35;;;2453:207;2338:336;;2042:642;;;2090:3;;;;;2042:642;;;;1060:1630;;;;;;;:::o;1591:1290:13:-;1812:21;1835;1858:34;1912:4;:10;;;:17;1933:1;1912:22;1908:100;;;1950:47;;1908:100;2041:62;2055:4;2061:10;2073;2085:17;2041:13;:62::i;:::-;2147:24;;2017:86;;-1:-1:-1;2017:86:13;-1:-1:-1;;;;;;2133:39:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2133:39:13;;2113:59;;2188:9;2183:635;2207:17;:24;2203:1;:28;2183:635;;;2287:13;-1:-1:-1;;;;;2272:61:13;;913:5;2406:4;2412:17;2430:1;2412:20;;;;;;;;;;;;;;2272:161;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2272:161:13;;;;;;;;-1:-1:-1;;2272:161:13;;;;;;;;;;;;:::i;:::-;;;2252:556;;2788:5;;2252:556;2528:6;2505:17;2523:1;2505:20;;;;;;;;;;;;;:29;;;;;2610:17;2628:1;2610:20;;;;;;;;;;;;;;2634:1;2610:25;2606:77;;;2659:5;;;2606:77;2450:247;2233:3;;2183:635;;;;1591:1290;;;;;;;;;:::o;2131:1734:12:-;2348:34;2398:40;2415:10;2427;2398:16;:40::i;:::-;2490:14;;;;2544:15;;;2557:1;2544:15;;;2515:26;2544:15;;;;;;;;;;;;;;;;;;-1:-1:-1;2544:15:12;2515:44;;2592:10;2569;2580:1;2569:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;2569:34:12;;;-1:-1:-1;;;;;2569:34:12;;;;;2636:10;2613;2624:1;2613:13;;;;;;;;-1:-1:-1;;;;;2613:34:12;;;:13;;;;;;;;;;;:34;2679:24;;;-1:-1:-1;;;;;2733:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2733:25:12;;2713:45;;2768:48;;:::i;:::-;2831:18;:16;:18::i;:::-;2768:81;;2865:9;2860:999;2884:10;2880:1;:14;2860:999;;;2915:49;2983:48;3000:8;3010:17;3028:1;3010:20;;;;;;;;;;;;;;2983:16;:48::i;:::-;3173:90;;-1:-1:-1;;;3173:90:12;;2915:116;;-1:-1:-1;;;;;;3173:20:12;;;;;:90;;3194:34;;2915:116;;3241:10;;3253:9;;3173:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3173:90:12;;;;;;;;;;;;:::i;:::-;;;3046:803;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3829:5;;;;3046:803;3508:24;3535:7;3543:1;3535:10;;;;;;;;;;;;;;-1:-1:-1;;3535:15:12;3508:42;;3593:1;3572:17;:22;3568:74;;3618:5;;;;;3568:74;3690:17;3659;3677:1;3659:20;;;;;;;;;;;;;:49;;;;;3380:343;;-1:-1:-1;2896:3:12;;2860:999;;;;2131:1734;;;;;;;;;;:::o;4274:2338:35:-;4480:34;4530:40;4547:10;4559;4530:16;:40::i;:::-;4601:24;;;-1:-1:-1;;;;;4655:25:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4655:25:35;-1:-1:-1;4635:45:35;-1:-1:-1;4691:41:35;-1:-1:-1;;;;;4735:24:35;;;:106;;4802:39;4822:6;4830:10;4802:19;:39::i;:::-;4735:106;;;4797:1;4735:106;4691:150;-1:-1:-1;4851:41:35;-1:-1:-1;;;;;4895:24:35;;;:106;;4962:39;4982:6;4990:10;4962:19;:39::i;:::-;4895:106;;;4957:1;4895:106;4851:150;;5016:9;5011:1595;5035:10;5031:1;:14;5011:1595;;;5084:4;-1:-1:-1;;;;;5106:24:35;;5102:1353;;5187:216;5250:18;5291:52;;;5365:17;5383:1;5365:20;;;;;;;;;;;;;;5187:33;:216::i;:::-;5151:17;5169:1;5151:20;;;;;;;;;;;;;5150:253;;;;;;;;;5102:1353;;;-1:-1:-1;;;;;5428:24:35;;5424:1031;;5509:216;5572:18;5613:52;;;5687:17;5705:1;5687:20;;;;;;;5424:1031;5764:15;5821:216;5884:18;5925:52;;;5999:17;6017:1;5999:20;;;;;;;5821:216;5797:240;-1:-1:-1;5797:240:35;-1:-1:-1;6059:12:35;;6055:386;;6132:219;6199:18;-1:-1:-1;;;6322:7:35;6132:33;:219::i;:::-;6096:17;6114:1;6096:20;;;;;;;;;;;;;6095:256;;;;;;;;;6055:386;;;6421:1;6398:17;6416:1;6398:20;;;;;;;;;;;;;:24;;;;;6055:386;5424:1031;;6517:10;6516:11;:40;;;;6531:17;6549:1;6531:20;;;;;;;;;;;;;;6555:1;6531:25;6516:40;6512:84;;;6576:5;;;6512:84;-1:-1:-1;5047:3:35;;5011:1595;;;;4274:2338;;;;;;;;;:::o;3549:919:26:-;3770:34;3820:40;3837:10;3849;3820:16;:40::i;:::-;3870:8;3886:7;:18;;;3870:35;;3915:8;3931:3;-1:-1:-1;;;;;3931:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3974:24;;3915:26;;-1:-1:-1;3974:24:26;-1:-1:-1;;;;;4028:25:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4028:25:26;;4008:45;;4082:3;-1:-1:-1;;;;;4082:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4068:23:26;:10;-1:-1:-1;;;;;4068:23:26;;;:50;;;;;4109:3;-1:-1:-1;;;;;4109:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4095:23:26;:10;-1:-1:-1;;;;;4095:23:26;;;4068:50;4064:105;;;4134:24;;;;;4064:105;4184:9;4179:283;4203:10;4199:1;:14;4179:283;;;4234:17;4254:79;4269:7;4278:10;4290;4302:17;4320:1;4302:20;;;;;;;;;;;;;;4324:3;4329;4254:14;:79::i;:::-;4234:99;-1:-1:-1;4352:14:26;4348:58;;4386:5;;;4348:58;4442:9;4419:17;4437:1;4419:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;4215:3:26;;4179:283;;3549:919;;;;;;;:::o;4133:670:33:-;4497:258;;;4355:34;4497:258;;;;;;4461:335;;4497:258;4555:35;4566:10;4578:11;4555:35;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4635:12;4649:11;4624:37;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4497:258;;;;4701:39;4497:258;;;4769:17;4461:22;:335::i;:::-;4454:342;4133:670;-1:-1:-1;;;;;4133:670:33:o;1936:1742:16:-;2153:13;2168:12;2182:34;2232:40;2249:10;2261;2232:16;:40::i;:::-;2303:24;;;-1:-1:-1;;;;;2357:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2357:25:16;-1:-1:-1;2409:13:16;;2400:55;;-1:-1:-1;;;2400:55:16;;2337:45;;-1:-1:-1;;;;;;2400:31:16;;;;:55;;2432:10;;2444;;2400:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2393:62;-1:-1:-1;2465:17:16;-1:-1:-1;;;;;2562:18:16;;;2558:420;;-1:-1:-1;2643:4:16;;-1:-1:-1;2608:10:16;2558:420;;;2694:13;;2685:55;;-1:-1:-1;;;2685:55:16;;-1:-1:-1;;;;;2685:31:16;;;;;;:55;;2717:10;;2729;;2685:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2678:62;-1:-1:-1;;;;;;2798:27:16;;2794:108;;2845:42;;;;2794:108;-1:-1:-1;2962:5:16;;-1:-1:-1;2927:10:16;2558:420;3038:4;-1:-1:-1;;;;;3032:27:16;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3027:103;;3077:42;;;;3027:103;3145:9;3140:532;3164:10;3160:1;:14;3140:532;;;3195:17;3215:268;3280:10;3292:4;3298:9;3309:4;:11;;;3269:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3370:10;3382:4;3388:9;3399:4;:11;;;3359:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3449:17;3467:1;3449:20;;;;;;;;;;;;;;3215:36;:268::i;:::-;3195:288;;3520:9;3497:17;3515:1;3497:20;;;;;;;;;;;;;:32;;;;;3597:17;3615:1;3597:20;;;;;;;;;;;;;;3621:1;3597:25;3593:69;;;3642:5;;;3593:69;-1:-1:-1;3176:3:16;;3140:532;;;;1936:1742;;;;;;;;;;:::o;1410:1411:28:-;1784:24;;1661:34;;1784:24;-1:-1:-1;;;;;1838:25:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1838:25:28;-1:-1:-1;1818:45:28;-1:-1:-1;;;;;;1931:25:28;;1927:80;;1972:24;;;1927:80;2022:9;2017:798;2041:10;2037:1;:14;2017:798;;;2073:15;2090:23;2133:11;-1:-1:-1;;;;;2133:22:28;851:5;2247:37;;;2310:10;2346:17;2389:10;2425:17;2443:1;2425:20;;;;;;;;;;;;;;2199:268;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2199:268:28;;;;;;;;;;;;;;-1:-1:-1;;;;;2199:268:28;-1:-1:-1;;;;;;2199:268:28;;;;;;;;;;2133:335;;;;2199:268;2133:335;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2072:396;;;;2482:17;2521:10;2517:94;;;2574:10;2563:33;;;;;;;;;;;;:::i;:::-;2551:45;;2517:94;2704:14;2700:58;;2738:5;;;;;2700:58;2795:9;2772:17;2790:1;2772:20;;;;;;;;;;;;;;;;;:32;-1:-1:-1;;;2053:3:28;;2017:798;;;;1410:1411;;;;;;;;:::o;1382:1092:25:-;1589:34;1639:40;1656:10;1668;1639:16;:40::i;:::-;1762:24;;;-1:-1:-1;;;;;1816:25:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1816:25:25;;1796:45;;1857:9;1852:616;1876:10;1872:1;:14;1852:616;;;1936:6;-1:-1:-1;;;;;1927:30:25;;940:5;2023:10;2035;2047:17;2065:1;2047:20;;;;;;;;;;;;;;1927:141;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1927:141:25;;;;;;;;-1:-1:-1;;1927:141:25;;;;;;;;;;;;:::i;:::-;;;1907:551;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2438:5;;;1907:551;2163:6;2140:17;2158:1;2140:20;;;;;;;;;;;;;:29;;;;;2245:17;2263:1;2245:20;;;;;;;;;;;;;;2269:1;2245:25;2241:77;;;2294:5;;;2241:77;2085:247;1888:3;;1852:616;;;;1382:1092;;;;;;;:::o;1213:988:36:-;1468:24;;1397:34;;1468:24;-1:-1:-1;;;;;1522:25:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1522:25:36;;1502:45;;1562:9;1557:638;1581:10;1577:1;:14;1557:638;;;1651:6;-1:-1:-1;;;;;1632:40:36;;845:5;1740:17;1758:1;1740:20;;;;;;;;;;;;;;1762:4;1632:135;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1632:135:36;;;;;;;;;;;;:::i;:::-;;;1612:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2165:5;;;1612:573;1872:7;1894:1;1880:4;:11;:15;1872:24;;;;;;;;;;;;;;1849:17;1867:1;1849:20;;;;;;;;;;;;;:47;;;;;1972:17;1990:1;1972:20;;;;;;;;;;;;;;1996:1;1972:25;1968:77;;;2021:5;;;1968:77;1784:275;1593:3;;1557:638;;2429:755:23;2642:16;2674:40;2691:10;2703;2674:16;:40::i;:::-;2743:8;:18;;;-1:-1:-1;;;;;2729:32:23;:10;-1:-1:-1;;;;;2729:32:23;;;:78;;;-1:-1:-1;2787:19:23;;-1:-1:-1;;;;;2765:42:23;;;;;;;2729:78;2725:328;;;2904:24;;2942:34;2904:24;-1:-1:-1;;;;;2979:25:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2979:25:23;-1:-1:-1;2942:62:23;-1:-1:-1;3018:24:23;;-1:-1:-1;;3018:24:23;2725:328;-1:-1:-1;3160:17:23;2429:755;-1:-1:-1;;;2429:755:23:o;1731:1130:15:-;2019:24;;1948:34;;2019:24;-1:-1:-1;;;;;2073:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:25:15;;2053:45;;2113:9;2108:747;2132:10;2128:1;:14;2108:747;;;2164:15;2181:23;2224:9;:21;;;-1:-1:-1;;;;;2224:32:15;1243:6;2346:9;:35;;;2407:12;2445:10;2481:17;2499:1;2481:20;;;;;;;;;;;;;;2298:225;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2298:225:15;;;;;;;;;;;;;;-1:-1:-1;;;;;2298:225:15;-1:-1:-1;;;;;;2298:225:15;;;;;;;;;;2224:300;;;;2298:225;2224:300;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2163:361;;;;2538:17;2577:10;2573:94;;;2630:10;2619:33;;;;;;;;;;;;:::i;:::-;2607:45;;2573:94;2703:9;2680:17;2698:1;2680:20;;;;;;;;;;;;;:32;;;;;2780:17;2798:1;2780:20;;;;;;;;;;;;;;2804:1;2780:25;2776:69;;;2825:5;;;;;2776:69;-1:-1:-1;;;2144:3:15;;2108:747;;3526:1138:21;3803:24;;3708:22;;;;3803:24;-1:-1:-1;;;;;3857:25:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3857:25:21;;3837:45;;3900:31;3918:6;3926:4;3900:17;:31::i;:::-;3892:39;;3945:5;:12;3961:1;3945:17;3941:81;;;3978:33;;;3941:81;4036:9;4031:627;4055:10;4051:1;:14;4031:627;;;4122:6;-1:-1:-1;;;;;4106:36:21;;1507:5;4210:17;4228:1;4210:20;;;;;;;;;;;;;;4232:5;4239:4;4106:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4106:138:21;;;;;;;;;;;;:::i;:::-;;;4086:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4349:7;4357:1;4349:10;;;;;;;;;;;;;;4326:17;4344:1;4326:20;;;;;;;;;;;;;:33;;;;;4435:17;4453:1;4435:20;;;;;;;;;;;;;;4459:1;4435:25;4431:77;;;4484:5;;;4431:77;4261:261;4067:3;;4031:627;;4509:2595:22;4840:16;;;;;4967;;;4981:1;4967:16;;;;;;;;;4706:17;;;;4981:1;4967:16;;;;4840;4967;;;;;-1:-1:-1;4967:16:22;4931:52;;5015:9;4993:16;5010:1;4993:19;;;;;;;;;;;;;;;;;:31;5034:28;5079:1;5065:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5065:16:22;;5034:47;;5110:4;:9;;;-1:-1:-1;;;;;5096:23:22;:10;-1:-1:-1;;;;;5096:23:22;;5092:2006;;;5183:289;;-1:-1:-1;;;5183:289:22;;-1:-1:-1;;;;;5183:29:22;;;;;931:5;;5183:289;;5301:10;;5337:34;;5397:16;;5439:11;;5183:289;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5183:289:22;;;;;;;;;;;;:::i;:::-;;;5163:517;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5578:102;5163:517;;;5556:6;-1:-1:-1;5549:13:22;;-1:-1:-1;;;5549:13:22;5163:517;5092:2006;;;5714:4;:9;;;-1:-1:-1;;;;;5700:23:22;:10;-1:-1:-1;;;;;5700:23:22;;5696:1402;;;5787:289;;-1:-1:-1;;;5787:289:22;;-1:-1:-1;;;;;5787:29:22;;;;;931:5;;5787:289;;5905:10;;5941:34;;6001:16;;6043:11;;5787:289;;;:::i;5696:1402::-;6414:466;;-1:-1:-1;;;6414:466:22;;-1:-1:-1;;;;;6414:31:22;;;;;931:5;;6414:466;;6534:10;;6570:34;;6630:16;;6672:11;;6709:10;;6570:34;;6630:16;;6672:11;;6414:466;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6414:466:22;;;;;;;;;;;;:::i;:::-;;;6394:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4509:2595;;;;;;;;;:::o;4265:2076:11:-;4597:24;;4477:34;;4554:11;;4597:24;-1:-1:-1;;;;;4651:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4651:25:11;-1:-1:-1;4691:24:11;;-1:-1:-1;;;4691:24:11;;4631:45;;-1:-1:-1;;;;;;4691:12:11;;;;;:24;;4704:10;;4691:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4690:25;:54;;;-1:-1:-1;4720:24:11;;-1:-1:-1;;;4720:24:11;;-1:-1:-1;;;;;4720:12:11;;;;;:24;;4733:10;;4720:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4719:25;4690:54;4686:109;;;4760:24;;;;4686:109;4805:30;;:::i;:::-;4875:27;;-1:-1:-1;;;4875:27:11;;-1:-1:-1;;;;;4875:15:11;;;;;:27;;4891:10;;4875:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4845:57;;4942:27;;-1:-1:-1;;;4942:27:11;;-1:-1:-1;;;;;4942:15:11;;;;;:27;;4958:10;;4942:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4912;;;:57;5008:38;;-1:-1:-1;;;5008:38:11;;-1:-1:-1;;;;;5008:26:11;;;;;:38;;5035:10;;5008:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4979:26;;;;:67;;;;5085:38;-1:-1:-1;;;5085:38:11;;-1:-1:-1;;;;;5085:26:11;;;;;:38;;5112:10;;5085:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5056:9;:26;;:67;;;;;5153:4;-1:-1:-1;;;;;5153:15:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5133;;;:37;5186:9;5181:1154;5205:10;5201:1;:14;5181:1154;;;5407:49;5413:9;:27;;;1127:1;1010:8;1120;;;;;;1132:5;1119:18;5407:5;:49::i;:::-;5384:17;5402:1;5384:20;;;;;;;;;;;;;;:72;5380:116;;;5476:5;;5380:116;5529:4;-1:-1:-1;;;;;5529:19:11;;840:5;5640:9;:27;;;5693:9;:26;;;5745:9;:27;;;5798:9;:26;;;5850:17;5868:1;5850:20;;;;;;;;;;;;;;5896:9;:17;;;5529:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5529:406:11;;;;;;;;-1:-1:-1;;5529:406:11;;;;;;;;;;;;:::i;:::-;;;5509:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6305:5;;;5509:816;6030:6;6007:17;6025:1;6007:20;;;;;;;;;;;;;:29;;;;;6112:17;6130:1;6112:20;;;;;;;;;;;;;;6136:1;6112:25;6108:77;;;6161:5;;;6108:77;5952:247;5217:3;;5181:1154;;2751:583:32;3046:240;;;2953:34;3046:240;;;;;;3010:317;;3046:240;3104:28;3115:10;3127:4;3104:28;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3177:10;3189:4;3166:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3046:240;;;;3234:37;3046:240;;;3300:17;3010:22;:317::i;2052:474:18:-;2133:32;2213:9;-1:-1:-1;;;;;2195:35:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;2181:49;;2245:9;2240:280;2260:21;;;2240:280;;2327:4;2302:11;2314:1;2302:14;;;;;;;;;;;;;;;;;;;:29;;;:22;;:29;2349:9;;2359:1;2349:12;;;;;;;;;;;;;;;;;;:::i;:::-;:24;2345:71;;-1:-1:-1;2345:71:18;;2393:8;;2345:71;2485:4;2496:9;;2506:1;2496:12;;;;;;;;;;;;;;;;;;:::i;:::-;2477:32;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2430:11;2442:1;2430:14;;;;;;;;;;;;;;:22;;2454:11;2466:1;2454:14;;;;;;;;;;;;;;;;;;2429:80;;;;;;;;;2240:280;2283:3;;2240:280;;;;2052:474;;;;:::o;3456:313:13:-;3676:21;3699;3722:34;3456:313;;;;;;;;:::o;4474:920:26:-;4694:34;4744:40;4761:10;4773;4744:16;:40::i;:::-;4794:8;4810:7;:18;;;4794:35;;4839:8;4855:3;-1:-1:-1;;;;;4855:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4897:24;;4839:26;;-1:-1:-1;4897:24:26;-1:-1:-1;;;;;4951:25:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4951:25:26;;4931:45;;5004:3;-1:-1:-1;;;;;5004:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;4990:23:26;:10;-1:-1:-1;;;;;4990:23:26;;;:50;;;;;5031:3;-1:-1:-1;;;;;5031:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5017:23:26;:10;-1:-1:-1;;;;;5017:23:26;;;4990:50;4986:105;;;5056:24;;;;;4986:105;5106:9;5101:286;5125:10;5121:1;:14;5101:286;;;5156:18;5177:78;5191:7;5200:10;5212;5224:17;5242:1;5224:20;;;;;;;;;;;;;;5246:3;5251;5177:13;:78::i;:::-;5156:99;-1:-1:-1;5274:15:26;5270:59;;5309:5;;;5270:59;5366:10;5343:17;5361:1;5343:20;;;;;;;;;;;;;;;;;:33;-1:-1:-1;5137:3:26;;5101:286;;1621:2080:33;1844:34;2006:30;2157:11;:23;;;-1:-1:-1;;;;;2148:44:33;;2201:10;2193:19;;2148:65;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2048:23;;2039:65;;-1:-1:-1;;;2039:65:33;;-1:-1:-1;;;;;2039:44:33;;;;;;:65;;2084:19;;;;;2039:65;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:174;2006:207;;2230:16;2259:11;:23;;;-1:-1:-1;;;;;2250:47:33;;2306:10;2298:19;;2250:68;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2223:95;;;;;2385:8;2382:2;:11;2377:2;:17;2353:22;:42;;;;;2427:24;;2353:42;;;;-1:-1:-1;2427:24:33;-1:-1:-1;;;;;2481:25:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2481:25:33;;2461:45;;2521:9;2516:1179;2540:10;2536:1;:14;2516:1179;;;2572:15;2589:23;2632:11;:23;;;-1:-1:-1;;;;;2632:34:33;1179:5;2758:11;:37;;;2821:12;2859:10;2895:17;2913:1;2895:20;;;;;;;;;;;;;;2710:227;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2710:227:33;;;;;;;;;;;;;;-1:-1:-1;;;;;2710:227:33;-1:-1:-1;;;;;;2710:227:33;;;;;;;;;;2632:306;;;;2710:227;2632:306;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2571:367;;;;2952:17;2991:10;2987:94;;;3044:10;3033:33;;;;;;;;;;;;:::i;:::-;3021:45;;2987:94;3191:22;3178:9;:35;3174:378;;3334:1;3317:127;3341:10;3337:1;:14;3317:127;;;3403:22;3380:17;3398:1;3380:20;;;;;;;;;;;;;;;;;:45;3353:3;;3317:127;;;;3461:5;;;;;3174:378;3528:9;3505:17;3523:1;3505:20;;;;;;;;;;;;;:32;;;;;3620:17;3638:1;3620:20;;;;;;;;;;;;;;3644:1;3620:25;3616:69;;;3665:5;;;;;3616:69;-1:-1:-1;;;2552:3:33;;2516:1179;;3287:1650:15;3557:34;;;;3503;;-1:-1:-1;;;;;;3557:47:15;3553:510;;3735:268;;;;;;;;;3695:357;;3735:268;3797:33;3808:10;3820:9;3797:33;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3879:12;3893:9;3868:35;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3735:268;;;;3947:37;3735:268;;;4021:17;3695:22;:357::i;:::-;3688:364;;;;3553:510;4093:24;;;-1:-1:-1;;;;;4147:25:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4147:25:15;;4127:45;;4187:9;4182:749;4206:10;4202:1;:14;4182:749;;;4238:15;4255:23;4298:9;:21;;;-1:-1:-1;;;;;4298:32:15;1243:6;4420:9;:34;;;4480:12;4518:10;4554:17;4572:1;4554:20;;;;;;;;;;;;;;4372:224;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4372:224:15;;;;;;;;;;;;;;-1:-1:-1;;;;;4372:224:15;-1:-1:-1;;;;;;4372:224:15;;;;;;;;;;4298:299;;;;4372:224;4298:299;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4237:360;;;;4611:18;4651:10;4647:95;;;4705:10;4694:33;;;;;;;;;;;;:::i;:::-;4681:46;;4647:95;4778:10;4755:17;4773:1;4755:20;;;;;;;;;;;;;:33;;;;;4856:17;4874:1;4856:20;;;;;;;;;;;;;;4880:1;4856:25;4852:69;;;4901:5;;;;;4852:69;-1:-1:-1;;;4218:3:15;;4182:749;;1764:2076:11;2097:24;;1977:34;;2054:11;;2097:24;-1:-1:-1;;;;;2151:25:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2151:25:11;-1:-1:-1;2191:24:11;;-1:-1:-1;;;2191:24:11;;2131:45;;-1:-1:-1;;;;;;2191:12:11;;;;;:24;;2204:10;;2191:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2190:25;:54;;;-1:-1:-1;2220:24:11;;-1:-1:-1;;;2220:24:11;;-1:-1:-1;;;;;2220:12:11;;;;;:24;;2233:10;;2220:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2219:25;2190:54;2186:109;;;2260:24;;;;2186:109;2305:30;;:::i;:::-;2375:27;;-1:-1:-1;;;2375:27:11;;-1:-1:-1;;;;;2375:15:11;;;;;:27;;2391:10;;2375:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2345:57;;2442:27;;-1:-1:-1;;;2442:27:11;;-1:-1:-1;;;;;2442:15:11;;;;;:27;;2458:10;;2442:27;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2412;;;:57;2508:38;;-1:-1:-1;;;2508:38:11;;-1:-1:-1;;;;;2508:26:11;;;;;:38;;2535:10;;2508:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2479:26;;;;:67;;;;2585:38;-1:-1:-1;;;2585:38:11;;-1:-1:-1;;;;;2585:26:11;;;;;:38;;2612:10;;2585:38;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2556:9;:26;;:67;;;;;2653:4;-1:-1:-1;;;;;2653:15:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2633;;;:37;2686:9;2681:1153;2705:10;2701:1;:14;2681:1153;;;2913:27;;2907:48;;1064:8;2907:5;:48::i;:::-;2884:17;2902:1;2884:20;;;;;;;;;;;;;;:71;2880:115;;;2975:5;;2880:115;3028:4;-1:-1:-1;;;;;3028:19:11;;840:5;3139:9;:27;;;3192:9;:26;;;3244:9;:27;;;3297:9;:26;;;3349:17;3367:1;3349:20;;;;;;;;;;;;;;3395:9;:17;;;3028:406;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3028:406:11;;;;;;;;-1:-1:-1;;3028:406:11;;;;;;;;;;;;:::i;:::-;;;3008:816;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3529:6;3506:17;3524:1;3506:20;;;;;;;;;;;;;:29;;;;;3611:17;3629:1;3611:20;;;;;;;;;;;;;;3635:1;3611:25;3607:77;;;3660:5;;;3607:77;3451:247;2717:3;;2681:1153;;3464:1039:22;3689:17;3708;3727:34;3777:40;3794:10;3806;3777:16;:40::i;:::-;3840:47;3858:4;3864:10;3876;3840:17;:47::i;:::-;3828:59;-1:-1:-1;3901:16:22;3897:90;;3933:43;;3897:90;4008:61;;-1:-1:-1;;;4008:61:22;;:4;;:20;;:61;;4029:4;;4035:9;;4046:10;;4058;;4008:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4008:61:22;;;;;;;;;;;;:::i;:::-;3996:4;:9;;:73;;;;4086:4;:9;;;4079:16;;4126:317;4162:240;;;;;;;;4231:10;4243:4;4220:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4293:10;4305:4;4282:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4162:240;;;;4350:37;4162:240;;;4416:17;4126:22;:317::i;:::-;4106:337;;3464:1039;;;;;;;;:::o;2424:1290:27:-;2652:7;2714:15;2775:8;-1:-1:-1;;;;;2756:34:27;;2791:19;2812;2756:76;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2714:128;-1:-1:-1;;;;;;2905:27:27;;2901:66;;2955:1;2948:8;;;;;2901:66;2976:19;-1:-1:-1;;;;;2998:33:27;;;:144;;3082:60;;-1:-1:-1;;;3082:60:27;;-1:-1:-1;;;;;3082:45:27;;;;;:60;;3136:4;;3082:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2998:144;;;3054:4;-1:-1:-1;;;;;3046:21:27;;2998:144;2976:166;;3298:16;3284:11;:30;3280:69;;;3337:1;3330:8;;;;;;3280:69;3374:133;;-1:-1:-1;;;3374:133:27;;-1:-1:-1;;;;;3374:14:27;;;;;940:5;;3374:133;;3448:19;;3469;;3490:16;;3374:133;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3374:133:27;;;;;;;;-1:-1:-1;;3374:133:27;;;;;;;;;;;;:::i;:::-;;;3358:350;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3696:1;3689:8;;;;;;;3358:350;3574:6;-1:-1:-1;3567:13:27;;-1:-1:-1;;3567:13:27;4281:1535:12;4497:34;4547:40;4564:10;4576;4547:16;:40::i;:::-;4639:14;;;;4693:15;;;4706:1;4693:15;;;4664:26;4693:15;;;;;;;;;;;;;;;;;;-1:-1:-1;4693:15:12;4664:44;;4741:10;4718;4729:1;4718:13;;;;;;;;;;;;;:34;-1:-1:-1;;;;;4718:34:12;;;-1:-1:-1;;;;;4718:34:12;;;;;4785:10;4762;4773:1;4762:13;;;;;;;;-1:-1:-1;;;;;4762:34:12;;;:13;;;;;;;;;;;:34;4828:24;;;-1:-1:-1;;;;;4882:25:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4882:25:12;;4862:45;;4917:48;;:::i;:::-;4980:18;:16;:18::i;:::-;4917:81;;5014:9;5009:801;5033:10;5029:1;:14;5009:801;;;5064:49;5132:48;5149:8;5159:17;5177:1;5159:20;;;;;;;5132:48;5317:91;;-1:-1:-1;;;5317:91:12;;5064:116;;-1:-1:-1;;;;;;5317:20:12;;;;;:91;;5338:35;;5064:116;;5386:10;;5398:9;;5317:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5317:91:12;;;;;;;;;;;;:::i;:::-;;;5195:605;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5473:21;5497:7;5505:1;5497:10;;;;;;;;;;;;;;5473:34;;5547:1;5529:14;:19;5525:71;;5572:5;;;;;5525:71;5644:14;5613:17;5631:1;5613:20;;;;;;;;;;;;;:46;;;;;5421:253;;-1:-1:-1;5045:3:12;;5009:801;;1540:1205:24;1889:24;;1766:34;;1889:24;-1:-1:-1;;;;;1943:25:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1943:25:24;;1923:45;;1984:9;1979:760;2003:10;1999:1;:14;1979:760;;;2073:15;-1:-1:-1;;;;;2054:48:24;;1065:5;2208:10;2260;2297:17;2315:1;2297:20;;;;;;;;;;;;;;2054:285;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2054:285:24;;;;;;;;-1:-1:-1;;2054:285:24;;;;;;;;;;;;:::i;:::-;;;2034:695;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2434:6;2411:17;2429:1;2411:20;;;;;;;;;;;;;:29;;;;;2516:17;2534:1;2516:20;;;;;;;;;;;;;;2540:1;2516:25;2512:77;;;2565:5;;;2512:77;2356:247;2015:3;;1979:760;;2025:1175:17;2257:13;2272:12;2286:34;2336:40;2353:10;2365;2336:16;:40::i;:::-;2408:24;;;-1:-1:-1;;;;;2462:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2462:25:17;;2442:45;;2517:60;2536:8;2546:6;2554:10;2566;2517:18;:60::i;:::-;2498:79;-1:-1:-1;2498:79:17;-1:-1:-1;;;;;;2591:18:17;;2587:91;;2625:42;;;2587:91;2693:9;2688:506;2712:10;2708:1;:14;2688:506;;;2743:17;2763:242;2830:10;2842:4;2848:8;2819:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2906:10;2918:4;2924:8;2895:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2971:17;2989:1;2971:20;;;;;;;;;;;;;;2763:38;:242::i;:::-;2743:262;;3042:9;3019:17;3037:1;3019:20;;;;;;;;;;;;;:32;;;;;3119:17;3137:1;3119:20;;;;;;;;;;;;;;3143:1;3119:25;3115:69;;;3164:5;;;3115:69;-1:-1:-1;2724:3:17;;2688:506;;;;2025:1175;;;;;;;;;;;:::o;1325:1038:19:-;1532:34;1582:40;1599:10;1611;1582:16;:40::i;:::-;1653:24;;;-1:-1:-1;;;;;1707:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1707:25:19;;1687:45;;1747:9;1742:615;1766:10;1762:1;:14;1742:615;;;1826:6;-1:-1:-1;;;;;1817:29:19;;884:6;1912:10;1924;1936:17;1954:1;1936:20;;;;;;;;;;;;;;1817:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1817:140:19;;;;;;;;-1:-1:-1;;1817:140:19;;;;;;;;;;;;:::i;:::-;;;1797:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2052:6;2029:17;2047:1;2029:20;;;;;;;;;;;;;:29;;;;;2134:17;2152:1;2134:20;;;;;;;;;;;;;;2158:1;2134:25;2130:77;;;2183:5;;;2130:77;1974:247;1778:3;;1742:615;;1432:986:27;1643:15;1660:34;1710:40;1727:10;1739;1710:16;:40::i;:::-;1781:24;;;-1:-1:-1;;;;;1835:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1835:25:27;;1815:45;;1876:9;1871:431;1895:10;1891:1;:14;1871:431;;;1926:17;1946:167;1997:8;2023:10;2051;2079:17;2097:1;2079:20;;;;;;;;;;;;;;1946:33;:167::i;:::-;1926:187;;2150:9;2127:17;2145:1;2127:20;;;;;;;;;;;;;:32;;;;;2227:17;2245:1;2227:20;;;;;;;;;;;;;;2251:1;2227:25;2223:69;;;2272:5;;;2223:69;-1:-1:-1;1907:3:27;;1871:431;;;-1:-1:-1;2343:58:27;;-1:-1:-1;;;2343:58:27;;-1:-1:-1;;;;;2343:34:27;;;;;:58;;2378:10;;2390;;2343:58;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2312:99;;1432:986;;;;;;;;:::o;2696:1818:34:-;2867:26;;:::i;:::-;-1:-1:-1;;2909:33:34;;;:19;3007:707;3032:14;:21;3027:1;:26;3007:707;;3074:17;3094:14;3109:1;3094:17;;;;;;;;;;;;;;:22;;;3074:42;;3130:46;3162:2;3148:4;:11;:16;3166:9;3130:4;:17;;:46;;;;;:::i;:::-;3191:15;3208:23;3243:14;3258:1;3243:17;;;;;;;;;;;;;;:20;;;-1:-1:-1;;;;;3235:34:34;3270:4;3235:40;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3190:85;;;;3293:10;3289:415;;;3323:14;3340:46;3383:2;3363:10;:17;:22;3340:10;:22;;:46;;;;:::i;:::-;3323:63;;3438:1;3429:6;:10;:66;;;;;3472:23;3463:6;:32;3429:66;3404:286;;;3590:21;;;:24;;;3636:22;;;:35;;;3562:6;-1:-1:-1;3562:6:34;3404:286;3289:415;;3007:707;;;3055:3;;;;;3007:707;;;;-1:-1:-1;;3727:23:34;:38;3723:82;;;3781:13;;;3723:82;3819:9;3814:694;3839:13;:20;3834:1;:25;3814:694;;3880:17;3900:13;3914:1;3900:16;;;;;;;;;;;;;;:21;;;3880:41;;3935:60;3967:2;3953:4;:11;:16;3971:23;3935:4;:17;;:60;;;;;:::i;:::-;4010:15;4027:23;4062:4;-1:-1:-1;;;;;4054:18:34;4073:4;4054:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4009:69;;;;4096:10;4092:406;;;4126:14;4143:46;4186:2;4166:10;:17;:22;4143:10;:22;;:46;;;;:::i;:::-;4126:63;;4241:1;4232:6;:10;:62;;;;-1:-1:-1;4275:19:34;;4266:28;;4232:62;4207:277;;;4335:28;;;4385:20;;;:24;;;4431:21;;;:34;;;4207:277;4092:406;;3814:694;;;3861:3;;;;;3814:694;;2894:593:25;3193:246;;;3100:34;3193:246;;;;;;3157:323;;3193:246;3251:30;3262:10;3274:6;3251:30;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3326:10;3338:6;3315:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3193:246;;;;3385:39;3193:246;;;3453:17;3157:22;:323::i;3202:653:24:-;3533:274;;;3427:34;3533:274;;;;;;3497:351;;3533:274;3591:39;3602:10;3614:15;3591:39;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3675:10;3687:15;3664:39;;;;;;;;;:::i;:::-;;;;;;;;;;;;;3533:274;;;;3743:49;3533:274;;;3821:17;3497:22;:351::i;1572:2343:35:-;1779:34;1829:40;1846:10;1858;1829:16;:40::i;:::-;1900:24;;;-1:-1:-1;;;;;1954:25:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1954:25:35;-1:-1:-1;1934:45:35;-1:-1:-1;1990:41:35;-1:-1:-1;;;;;2034:24:35;;;:106;;2101:39;2121:6;2129:10;2101:19;:39::i;:::-;2034:106;;;2096:1;2034:106;1990:150;-1:-1:-1;2150:41:35;-1:-1:-1;;;;;2194:24:35;;;:106;;2261:39;2281:6;2289:10;2261:19;:39::i;:::-;2194:106;;;2256:1;2194:106;2150:150;;2315:9;2310:1599;2334:10;2330:1;:14;2310:1599;;;2383:4;-1:-1:-1;;;;;2405:24:35;;2401:1357;;2486:215;2549:18;2590:51;;;2663:17;2681:1;2663:20;;;;;;;2486:215;2450:17;2468:1;2450:20;;;;;;;;;;;;;2449:252;;;;;;;;;2401:1357;;;-1:-1:-1;;;;;2726:24:35;;2722:1036;;2807:215;2870:18;2911:51;;;2984:17;3002:1;2984:20;;;;;;;2722:1036;3061:17;3122:215;3185:18;3226:51;;;3299:17;3317:1;3299:20;;;;;;;3122:215;3096:241;-1:-1:-1;3096:241:35;-1:-1:-1;3359:14:35;;3355:389;;3434:220;3501:18;-1:-1:-1;;;3623:9:35;3434:33;:220::i;:::-;3398:17;3416:1;3398:20;;;;;;;;;;;;;3397:257;;;;;;;;;3355:389;;;3724:1;3701:17;3719:1;3701:20;;;;;;;;;;;;;:24;;;;;3355:389;2722:1036;;3820:10;3819:11;:40;;;;3834:17;3852:1;3834:20;;;;;;;;;;;;;;3858:1;3834:25;3819:40;3815:84;;;3879:5;;;3815:84;-1:-1:-1;2346:3:35;;2310:1599;;2552:972:36;2806:24;;2735:34;;2806:24;-1:-1:-1;;;;;2860:25:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2860:25:36;;2840:45;;2900:9;2895:623;2919:10;2915:1;:14;2895:623;;;2989:6;-1:-1:-1;;;;;2970:39:36;;845:5;3077:17;3095:1;3077:20;;;;;;;;;;;;;;3099:4;2970:134;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2970:134:36;;;;;;;;;;;;:::i;:::-;;;2950:558;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3209:7;3217:1;3209:10;;;;;;;;;;;;;;3186:17;3204:1;3186:20;;;;;;;;;;;;;:33;;;;;3295:17;3313:1;3295:20;;;;;;;;;;;;;;3319:1;3295:25;3291:77;;;3344:5;;;3291:77;3121:261;2931:3;;2895:623;;2788:1037:19;2994:34;3044:40;3061:10;3073;3044:16;:40::i;:::-;3115:24;;;-1:-1:-1;;;;;3169:25:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3169:25:19;;3149:45;;3209:9;3204:615;3228:10;3224:1;:14;3204:615;;;3288:6;-1:-1:-1;;;;;3279:29:19;;884:6;3374:10;3386;3398:17;3416:1;3398:20;;;;;;;;;;;;;;3279:140;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3279:140:19;;;;;;;;-1:-1:-1;;3279:140:19;;;;;;;;;;;;:::i;:::-;;;3259:550;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3514:6;3491:17;3509:1;3491:20;;;;;;;;;;;;;:29;;;;;3596:17;3614:1;3596:20;;;;;;;;;;;;;;3620:1;3596:25;3592:77;;;3645:5;;;3592:77;3436:247;3240:3;;3204:615;;1770:1175:22;1996:17;2015;2034:34;2084:40;2101:10;2113;2084:16;:40::i;:::-;2146:47;2164:4;2170:10;2182;2146:17;:47::i;:::-;2134:59;-1:-1:-1;2207:16:22;2203:90;;2239:43;;2203:90;2314:61;;-1:-1:-1;;;2314:61:22;;:4;;:20;;:61;;2335:4;;2341:9;;2352:10;;2364;;2314:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2314:61:22;;;;;;;;;;;;:::i;:::-;2302:9;;;:73;;;2433:24;;2302:73;;-1:-1:-1;2433:24:22;-1:-1:-1;;;;;2487:25:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2487:25:22;;2467:45;;2527:9;2522:417;2546:10;2542:1;:14;2522:417;;;2577:13;2593:4;-1:-1:-1;;;;;2593:31:22;;2642:4;2664:10;2692;2720:17;2738:1;2720:20;;;;;;;;;;;;;;2593:161;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2577:177;;2791:5;2768:17;2786:1;2768:20;;;;;;;;;;;;;:28;;;;;2864:17;2882:1;2864:20;;;;;;;;;;;;;;2888:1;2864:25;2860:69;;;2909:5;;;2860:69;-1:-1:-1;2558:3:22;;2522:417;;;;1770:1175;;;;;;;;;:::o;3797:1026:17:-;4028:13;4043:12;4057:34;4107:40;4124:10;4136;4107:16;:40::i;:::-;4176:60;4195:8;4205:6;4213:10;4225;4176:18;:60::i;:::-;4157:79;-1:-1:-1;4157:79:17;-1:-1:-1;;;;;;4250:18:17;;4246:91;;4284:42;;4246:91;4367:24;;;-1:-1:-1;;;;;4421:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4421:25:17;-1:-1:-1;4513:262:17;;;;;;;;;4401:45;;-1:-1:-1;4477:339:17;;4513:262;4571:39;4582:10;4594:4;4600:9;;4571:39;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4655:10;4667:4;4673:8;4644:38;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4513:262;;;;4722:38;4513:262;;;4789:17;4477:22;:339::i;:::-;4457:359;;3797:1026;;;;;;;;;;:::o;4221:1750:16:-;4437:13;4452:12;4466:34;4516:40;4533:10;4545;4516:16;:40::i;:::-;4587:24;;;-1:-1:-1;;;;;4641:25:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4641:25:16;-1:-1:-1;4784:13:16;;4775:55;;-1:-1:-1;;;4775:55:16;;4621:45;;-1:-1:-1;;;;;;4775:31:16;;;;:55;;4807:10;;4819;;4775:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4768:62;-1:-1:-1;4840:17:16;-1:-1:-1;;;;;4937:18:16;;;4933:485;;-1:-1:-1;5018:4:16;;-1:-1:-1;4983:10:16;4933:485;;;5134:13;;5125:55;;-1:-1:-1;;;5125:55:16;;-1:-1:-1;;;;;5125:31:16;;;;;;:55;;5157:10;;5169;;5125:55;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5118:62;-1:-1:-1;;;;;;5238:27:16;;5234:108;;5285:42;;;;5234:108;-1:-1:-1;5402:5:16;;-1:-1:-1;5367:10:16;4933:485;5478:4;-1:-1:-1;;;;;5472:27:16;;:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5467:103;;5517:42;;;;5467:103;5600:364;5636:287;;;;;;;;5705:10;5717:4;5723:9;5734:4;:11;;;5694:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5791:10;5803:4;5809:9;5820:4;:11;;;5780:52;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;5636:287;;;;5872:36;5636:287;;;5937:17;5600:22;:364::i;:::-;5580:384;;4221:1750;;;;;;;;;;:::o;1440:887:32:-;1766:24;;1643:34;;1766:24;-1:-1:-1;;;;;1820:25:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1820:25:32;;1800:45;;1861:9;1856:465;1880:10;1876:1;:14;1856:465;;;1938:4;-1:-1:-1;;;;;1931:27:32;;994:5;2024:10;2036;2048:17;2066:1;2048:20;;;;;;;;;;;;;;1931:138;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1931:138:32;;;;;;;;-1:-1:-1;;1931:138:32;;;;;;;;;;;;:::i;:::-;;;1911:400;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2164:6;2141:17;2159:1;2141:20;;;;;;;;;;;;;:29;;;;;2086:99;1892:3;;1856:465;;7885:1337:22;8100:24;8191:4;:9;;;:16;8211:1;8191:21;8187:60;;;-1:-1:-1;8235:1:22;8228:8;;8187:60;8292:4;:17;;;-1:-1:-1;;;;;8273:61:22;;931:5;8425:4;:9;;;-1:-1:-1;;;;;8411:23:22;:10;-1:-1:-1;;;;;8411:23:22;;:56;;8457:10;8411:56;;;1035:42;8411:56;8503:4;:9;;;-1:-1:-1;;;;;8489:23:22;:10;-1:-1:-1;;;;;8489:23:22;;:56;;8535:10;8489:56;;;1035:42;8489:56;8567:16;8605:1;8635:4;:9;;;8273:389;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8273:389:22;;;;;;;;-1:-1:-1;;8273:389:22;;;;;;;;;;;;:::i;:::-;;;8257:959;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9204:1;9197:8;;;;;8257:959;8720:26;8749:29;8767:10;8749:17;:29::i;:::-;8720:58;;;;8792:26;8821:29;8839:10;8821:17;:29::i;:::-;8792:58;;;;9043:8;9006:18;9000:2;:24;8963:18;8957:2;:24;8922:16;8899:4;:39;:82;:125;;;;;;:152;;;;;;8864:187;;9065:23;;;;;4189:904:27;4399:15;4416:34;4466:40;4483:10;4495;4466:16;:40::i;:::-;4537:24;;;-1:-1:-1;;;;;4591:25:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4591:25:27;;4571:45;;4647:329;4683:252;;;;;;;;4752:8;4762:10;4741:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4818:8;4828:10;4807:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4683:252;;;;4879:41;4683:252;;;4949:17;4647:22;:329::i;:::-;5018:58;;-1:-1:-1;;;5018:58:27;;4627:349;;-1:-1:-1;;;;;;5018:34:27;;;;;:58;;5053:10;;5065;;5018:58;;;:::i;4670:1193:21:-;4804:22;4842:24;4902:6;-1:-1:-1;;;;;4886:31:21;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4842:78;;4966:1;4952:4;:11;:15;-1:-1:-1;;;;;4938:30:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4938:30:21;;4930:38;;4983:9;4978:879;5002:5;:12;4998:1;:16;4978:879;;;5069:25;5128:7;-1:-1:-1;;;;;5128:16:21;;1507:5;5212:4;5217:1;5212:7;;;;;;;;;;;;;;5221:4;5226:1;5230;5226:5;5221:11;;;;;;;;;;;;;;5128:105;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5128:105:21;;;;;;;;;;;;:::i;:::-;;;5108:739;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5816:16:21;;;5830:1;5816:16;;;;;;;;;-1:-1:-1;5809:23:21;;-1:-1:-1;;;5809:23:21;5108:739;5316:17;5382:1;5363:8;:15;:20;;5355:63;;;;-1:-1:-1;;;5355:63:21;;;;;;;:::i;:::-;;;;;;;;;5441:9;5436:319;5460:8;:15;5456:1;:19;5436:319;;;5504:19;5540:8;5549:1;5540:11;;;;;;;;;;;;;;-1:-1:-1;;;;;5526:38:21;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5504:62;;5606:9;5592:11;:23;5588:149;;;5655:11;5643:23;;5703:8;5712:1;5703:11;;;;;;;;;;;;;;5692:5;5698:1;5692:8;;;;;;;;;;;;;:22;-1:-1:-1;;;;;5692:22:21;;;-1:-1:-1;;;;;5692:22:21;;;;;5588:149;-1:-1:-1;5477:3:21;;5436:319;;;;5250:519;;-1:-1:-1;5016:3:21;;4978:879;;;;4670:1193;;;;;;:::o;16578:187:2:-;16720:38;16733:1;16736:5;16751;16720:12;:38::i;:::-;16578:187;;;:::o;16122:220::-;16243:14;16290:21;16302:1;16305:5;16290:11;:21::i;3775:1265:13:-;3990:21;4013;4066:4;:13;;;-1:-1:-1;;;;;4066:24:13;;4091:4;:13;;;-1:-1:-1;;;;;4091:28:13;;:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4066:56;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4050:72;;4136:4;:10;;;:17;4157:1;4136:22;4132:81;;;4174:28;;4132:81;4222:23;4330:9;4325:709;4349:4;:10;;;:17;4345:1;:21;4325:709;;;4414:1;4391:4;:10;;;4402:1;4391:13;;;;;;;;;;;;;;:20;:24;4387:71;;;4435:8;;4387:71;4507:13;-1:-1:-1;;;;;4492:61:13;;913:5;4626:4;:10;;;4637:1;4626:13;;;;;;;;;;;;;;4641:17;4684:1;4659:17;:24;:26;4641:45;;;;;;;;;;;;;;4492:195;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4492:195:13;;;;;;;;-1:-1:-1;;4492:195:13;;;;;;;;;;;;:::i;:::-;;;4472:552;;5001:8;;4472:552;4772:15;4763:6;:24;4759:137;;;4829:6;4811:24;;4864:4;:10;;;4875:1;4864:13;;;;;;;;;;;;;;4857:20;;4759:137;4704:206;4472:552;4368:3;;4325:709;;;;3775:1265;;;;;;;;;:::o;1509:191:31:-;1641:10;-1:-1:-1;;;;;1627:24:31;:10;-1:-1:-1;;;;;1627:24:31;;;1619:74;;;;-1:-1:-1;;;1619:74:31;;;;;;;:::i;:::-;1509:191;;:::o;6355:377:12:-;6429:38;;:::i;:::-;-1:-1:-1;6502:223:12;;;;;;;;6568:4;6502:223;;;-1:-1:-1;6502:223:12;;;;;;;;;;;;;;;;;6355:377;:::o;5822:527::-;6059:39;;;6096:1;6059:39;;;;;;;;;5944;;;;6059;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;5995:103;;6123:192;;;;;;;;6176:8;:15;;;6123:192;;;;6219:1;6123:192;;;;6249:1;6123:192;;;;6272:6;6123:192;;;;;;;;;;;;;;;;;;;6108:9;6118:1;6108:12;;;;;;;;;;;;;;;;;:207;6333:9;5822:527;-1:-1:-1;;;5822:527:12:o;8086:303:35:-;8301:70;;-1:-1:-1;;;8301:70:35;;8199:31;;-1:-1:-1;;;;;8301:56:35;;;;;:70;;8358:12;;8301:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;7070:721::-;7267:20;;-1:-1:-1;;;;;7324:36:35;;7320:100;;7376:33;;7320:100;7429:23;7501:22;-1:-1:-1;;;;;7501:33:35;1144:5;7618:16;7656:11;7574:111;;;;;;;;:::i;:::-;;;;-1:-1:-1;;7574:111:35;;;;;;;;;;;;;;-1:-1:-1;;;;;7574:111:35;-1:-1:-1;;;;;;7574:111:35;;;;;;;;;;7501:185;;;;7574:111;7501:185;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7462:224:35;;-1:-1:-1;7462:224:35;-1:-1:-1;7696:89:35;;;;7752:10;7741:33;;;;;;;;;;;;:::i;:::-;7726:48;;7696:89;7070:721;;;;;;;:::o;5400:2077:26:-;5585:7;5609:22;5635:24;5661:22;5687:3;-1:-1:-1;;;;;5687:8:26;;5696:7;:21;;;5687:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5608:110;;;;;;;;5728:24;5763:3;5728:39;;5796:7;:23;;;-1:-1:-1;;;;;5782:37:26;:10;-1:-1:-1;;;;;5782:37:26;;5778:1674;;;5993:29;6025:30;:16;6050:4;6025:24;:30::i;:::-;5993:62;-1:-1:-1;6070:25:26;6098:58;3269:8;6098:45;:14;5993:62;6098:22;:45::i;:::-;:53;;:58::i;:::-;6070:86;;6234:16;6213:17;:37;6209:84;;6277:1;6270:8;;;;;;;;;;6209:84;6307:16;6326:53;3138:8;6326:40;6356:3;-1:-1:-1;;;;;6356:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6326:21;;:29;:40::i;:::-;:48;;:53::i;:::-;6307:72;-1:-1:-1;6393:29:26;6425:39;:21;6307:72;6425:29;:39::i;:::-;6393:71;-1:-1:-1;6479:28:26;;-1:-1:-1;;;;;;;;6479:28:26;5778:1674;6542:7;:23;;;-1:-1:-1;;;;;6528:37:26;:10;-1:-1:-1;;;;;6528:37:26;;6524:928;;;6777:16;6811:38;;;6807:85;;;6876:1;6869:8;;;;;;;;;6807:85;6905:25;6933:58;3269:8;6933:45;:14;6956:21;6933:22;:45::i;:58::-;6905:86;;7091:14;7070:17;:35;7066:82;;7132:1;7125:8;;;;;;;;;;7066:82;7162:23;7188;7200:3;-1:-1:-1;;;;;7200:8:26;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;7188:11;:23::i;:::-;7162:49;-1:-1:-1;7265:43:26;7312:72;7162:49;7312:47;:21;7342:16;7312:29;:47::i;6524:928::-;7469:1;7462:8;;;;;;5400:2077;;;;;;;;;:::o;4809:919:33:-;5012:17;5046:20;5068:30;;:::i;:::-;5125:14;5114:49;;;;;;;;;;;;:::i;:::-;5045:118;;;;5174:20;5221:14;5210:36;;;;;;;;;;;;:::i;:::-;5173:73;-1:-1:-1;5257:12:33;5271:23;5318:4;-1:-1:-1;;;5429:11:33;5458:13;5173:73;5520:31;5540:10;5520:19;:31::i;:::-;5335:230;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;5335:230:33;;;;;;;;;;;;;;-1:-1:-1;;;;;5335:230:33;-1:-1:-1;;;;;;5335:230:33;;;;;;;;;;5310:256;;;;5335:230;5310:256;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5256:310;;;;5581:7;5576:47;;5611:1;5604:8;;;;;;;;;5576:47;5694:10;5683:35;;;;;;;;;;;;:::i;:::-;5719:1;5683:38;;;;;;;;;;;;;;5676:45;;;;;;;4809:919;;;;;:::o;1691:2958:9:-;1865:34;1949:17;:24;-1:-1:-1;;;;;1935:39:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1935:39:9;;1915:59;;1988:17;:24;2016:1;1988:29;1984:84;;;2033:24;;1984:84;2078:18;2099:135;2138:4;:19;;;2171:4;:19;;;2204:17;2222:1;2204:20;;;;;;;;;;;;;;2099:4;:25;;;:135;;:::i;:::-;2078:156;-1:-1:-1;2248:15:9;2244:70;;2279:24;;;2244:70;2324:17;2344:125;2383:4;:19;;;2416:4;:19;;;2449:10;2344:4;:25;;;:125;;:::i;:::-;2324:145;-1:-1:-1;2483:14:9;2479:69;;2513:24;;;;2479:69;2563:9;2558:2085;2582:17;:24;2578:1;:28;2558:2085;;;2632:12;2627:1604;1683:1;2650:4;:37;2627:1604;;;2823:148;2870:17;2888:1;2870:20;;;;;;;;;;;;;;2912:9;2943:10;2823:25;:148::i;:::-;2810:161;-1:-1:-1;2993:15:9;2989:67;;3032:5;;2989:67;3086:202;3134:59;1378:3;3260:10;3086:25;:202::i;:::-;3073:215;-1:-1:-1;3310:15:9;3306:67;;3349:5;;3306:67;3390:18;3411:157;3458:4;:19;;;3499:4;:19;;;3540:10;3411:4;:25;;;:157;;:::i;:::-;3390:178;-1:-1:-1;3590:15:9;3586:67;;3629:5;;;3586:67;3786:10;3774:22;;3888:17;3906:1;3888:20;;;;;;;;;;;;;;3875:9;:33;3871:346;;3932:11;4056:17;4074:1;4056:20;;;;;;;;;;;;;;1378:3;3983:17;4001:1;3983:20;;;;;;;;;;;;;;3971:9;:32;3970:59;:106;;;;;;3932:144;;1536:8;4102:3;:41;4098:101;;4171:5;;;;4098:101;3871:346;;-1:-1:-1;2689:6:9;;2627:1604;;;;4500:132;4543:17;4561:1;4543:20;;;;;;;;;;;;;;4581:9;4608:10;4500:25;:132::i;:::-;4477:17;4495:1;4477:20;;;;;;;;;;;;;;;;;:155;2608:3;;2558:2085;;;;1691:2958;;;;;;:::o;5977:1450:16:-;6183:7;6207:18;6227:12;6241:17;6260:14;6302;6278:98;;;;;;;;;;;;:::i;:::-;6206:170;;;;;;;;6497:9;-1:-1:-1;;;;;6483:23:16;:10;-1:-1:-1;;;;;6483:23:16;;6479:942;;;6611:104;;-1:-1:-1;;;6611:104:16;;-1:-1:-1;;;;;6611:30:16;;;;;1291:5;;6611:104;;6704:10;;6611:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6611:104:16;;;;;;;;-1:-1:-1;;6611:104:16;;;;;;;;;;;;:::i;:::-;;;6591:353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6928:1;6921:8;;;;;;;;;6591:353;6794:6;-1:-1:-1;6787:13:16;;-1:-1:-1;;;;6787:13:16;6479:942;7063:119;;-1:-1:-1;;;7063:119:16;;-1:-1:-1;;;;;7063:39:16;;;;;1291:5;;7063:119;;7165:4;;7171:10;;7063:119;;;:::i;6710:337:11:-;6793:9;6828:5;;;6847:6;;;;;:21;;;6867:1;6862;6857:2;:6;;;;;;:11;;6847:21;6843:60;;;6891:1;6884:8;;;;;6843:60;6928:8;6922:15;;6951:7;;;6947:46;;;6981:1;6974:8;;;;;;6947:46;1010:8;7012:9;;;;-1:-1:-1;;;;6710:337:11:o;3340:740:32:-;3541:17;3575:18;3595:12;3622:14;3611:46;;;;;;;;;;;;:::i;:::-;3574:83;;;;3668:18;3701:14;3690:37;;;;;;;;;;;;:::i;:::-;3667:60;-1:-1:-1;3754:4:32;:25;3797:4;3803:10;3667:60;3827:31;3847:10;3827:19;:31::i;:::-;3754:105;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3754:105:32;;;;;;;;;;;;:::i;:::-;;;3738:336;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4062:1;4055:8;;;;;;;;3738:336;3936:7;3944:1;3936:10;;;;;;;;;;;;;;3929:17;;;;;;;;7483:2082:26;7667:7;7691:22;7717:24;7743:22;7769:3;-1:-1:-1;;;;;7769:8:26;;7778:7;:21;;;7769:31;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7690:110;;;;;;;;7829:7;:23;;;-1:-1:-1;;;;;7815:37:26;:10;-1:-1:-1;;;;;7815:37:26;;7811:1729;;;7966:29;7998:16;7966:48;;8028:23;8054:22;8066:3;-1:-1:-1;;;;;8066:7:26;;:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3138:8;;8054:11;:22::i;:::-;8028:48;-1:-1:-1;8129:29:26;8161:59;8028:48;8161:34;:21;3138:8;8161:29;:34::i;:59::-;8129:91;-1:-1:-1;8234:25:26;8262:58;3269:8;8262:45;:14;8129:91;8262:22;:45::i;:58::-;8234:86;;8398:16;8377:17;:37;8373:84;;8441:1;8434:8;;;;;;;;;;;8373:84;8471:43;8517:48;8563:1;8518:35;:21;8548:4;8518:29;:35::i;:::-;8517:45;;:48::i;7811:1729::-;8725:7;:23;;;-1:-1:-1;;;;;8711:37:26;:10;-1:-1:-1;;;;;8711:37:26;;8707:833;;;8862:29;8894:30;:16;8919:4;8894:24;:30::i;:::-;8862:62;;8938:26;8967:23;8979:3;-1:-1:-1;;;;;8979:8:26;;:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8967:23;8938:52;-1:-1:-1;9044:29:26;9077:62;3138:8;9077:49;:21;8938:52;9077:29;:49::i;:62::-;9044:95;;9181:14;9157:21;:38;9153:85;;;9222:1;9215:8;;;;;;;;;;9153:85;9251:25;9279:58;3269:8;9279:45;:14;9302:21;9279:22;:45::i;:58::-;9251:86;;9429:14;9408:17;:35;9404:82;;9470:1;9463:8;;;;;;;;;;;9404:82;-1:-1:-1;9508:21:26;-1:-1:-1;9501:28:26;;-1:-1:-1;;;;;9501:28:26;8707:833;-1:-1:-1;9557:1:26;;7483:2082;-1:-1:-1;;;;;;;;;7483:2082:26:o;4943:907:15:-;5144:17;5178:20;5200:26;;:::i;:::-;5253:14;5242:47;;;;;;;;;;;;:::i;:::-;5177:112;;;;5300:20;5347:14;5336:36;;;;;;;;;;;;:::i;:::-;5299:73;-1:-1:-1;5383:12:15;5397:23;5444:4;-1:-1:-1;;;5553:9:15;5580:13;5299:73;5642:31;5662:10;5642:19;:31::i;9228:916:22:-;9402:17;9490:27;9538:4;:16;;;9490:65;;9566:27;9600:9;-1:-1:-1;;;;;9600:28:22;;9656:4;:9;;;-1:-1:-1;;;;;9642:23:22;:10;-1:-1:-1;;;;;9642:23:22;;:56;;9688:10;9642:56;;;1035:42;9642:56;9726:4;:9;;;-1:-1:-1;;;;;9712:23:22;:10;-1:-1:-1;;;;;9712:23:22;;:56;;9758:10;9712:56;;;1035:42;9712:56;9800:12;;;9810:1;9800:12;;;;;;;;;-1:-1:-1;;;;;;9600:236:22;;;;;;;;;;;;9782:4;;9600:236;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;9600:236:22;;;;;;;;;;;;:::i;:::-;9565:271;;;;9873:10;:17;9851:4;:18;;;:39;9847:80;;-1:-1:-1;9913:3:22;;-1:-1:-1;9906:10:22;;-1:-1:-1;9906:10:22;9847:80;9949:10;9960:4;:18;;;9949:30;;;;;;;;;;;;;;9937:42;;10062:3;10049:9;:16;;10041:25;;10070:4;10041:33;10037:74;;;-1:-1:-1;10097:3:22;;-1:-1:-1;10090:10:22;;-1:-1:-1;10090:10:22;7110:769;7311:7;7335:18;7355:28;;:::i;:::-;7410:14;7399:55;;;;;;;;;;;;:::i;:::-;7334:120;;;;7465:18;7512:14;7501:55;;;;;;;;;;;;:::i;:::-;-1:-1:-1;7582:90:22;;-1:-1:-1;;;7582:90:22;;7464:92;;-1:-1:-1;7582:4:22;;:31;;:90;;7631:4;;7464:92;;7649:10;;7661;;7582:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7582:90:22;;;;;;;;-1:-1:-1;;7582:90:22;;;;;;;;;;;;:::i;:::-;;;7566:307;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7739:6;-1:-1:-1;7732:13:22;;-1:-1:-1;;;7732:13:22;6047:836:17;6234:15;6251:13;6373:25;6417:8;-1:-1:-1;;;;;6401:37:17;;6439:10;6451;6401:61;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6401:61:17;;;;;;;;;;;;:::i;:::-;6373:89;;6483:4;6472:15;;6501:8;:15;6520:1;6501:20;6497:251;;;6646:61;;-1:-1:-1;;;6646:61:17;;-1:-1:-1;;;;;6646:37:17;;;;;:61;;6684:10;;6696;;6646:61;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6646:61:17;;;;;;;;;;;;:::i;:::-;6635:72;;6732:5;6721:16;;6497:251;6772:8;:15;6762:6;:25;6758:82;;6819:1;6823:5;6803:26;;;;;;;6758:82;6860:8;6869:6;6860:16;;;;;;;;;;;;;;6850:26;;6047:836;;;;;;;;:::o;4829:1212::-;5037:7;5061:18;5081:12;5095:13;5136:14;5112:86;;;;;;;;;;;;:::i;:::-;5060:138;;;;;;5372:8;5368:667;;;5416:122;;-1:-1:-1;;;5416:122:17;;-1:-1:-1;;;;;5416:31:17;;;;;1408:5;;5416:122;;5523:1;;5527:10;;5416:122;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5416:122:17;;;;;;;;-1:-1:-1;;5416:122:17;;;;;;;;;;;;:::i;:::-;;;5396:299;;5679:1;5672:8;;;;;;;5396:299;-1:-1:-1;5626:6:17;-1:-1:-1;5619:13:17;;-1:-1:-1;;;5619:13:17;5368:667;5745:123;;-1:-1:-1;;;5745:123:17;;-1:-1:-1;;;;;5745:32:17;;;;;1408:5;;5745:123;;5853:1;;5857:10;;5745:123;;;:::i;3493:771:25:-;3696:17;3730:18;3750:14;3791;3780:46;;;;;;;;;;;;:::i;:::-;3729:97;;;;3837:18;3882:14;3871:37;;;;;;;;;;;;:::i;:::-;3836:72;-1:-1:-1;3934:4:25;:27;3979:6;3987:10;3836:72;4011:31;4031:10;4011:19;:31::i;3861:849:24:-;4074:17;4108:18;4128:23;4178:14;4167:46;;;;;;;;;;;;:::i;:::-;4107:106;;;;4224:18;4269:14;4258:37;;;;;;;;;;;;:::i;:::-;4223:72;-1:-1:-1;4321:4:24;:37;1065:5;4416:15;4433:10;4223:72;4457:31;4477:10;4457:19;:31::i;:::-;4321:168;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4321:168:24;;;;;;;;;;;;:::i;937:217:31:-;1049:14;1086:61;1133:12;1086:31;:61::i;:::-;1079:68;;937:217;;;;:::o;5099:620:27:-;5304:17;5338:16;5356:27;5398:14;5387:46;;;;;;;;;;;;:::i;:::-;5337:96;;;;5444:17;5463:27;5505:14;5494:46;;;;;;;;;;;;:::i;:::-;5443:97;;;;5557:155;5604:8;5626:19;5659;5692:10;5557:33;:155::i;:::-;5550:162;5099:620;-1:-1:-1;;;;;;;;5099:620:27:o;15225:654:2:-;15382:5;15390:2;15382:10;15371:1;:8;:21;15367:306;;;15408:254;15433:228;15498:95;15611:1;:8;15637:5;15645:2;15637:10;15433:47;:228::i;:::-;15408:24;:254::i;:::-;15842:13;;15753:2;15842:13;15835:28;15821:52::o;14301:688::-;14422:14;14467:5;14475:2;14467:10;14456:1;:8;:21;14452:306;;;14493:254;14518:228;14583:95;14696:1;:8;14722:5;14730:2;14722:10;14518:47;:228::i;14493:254::-;-1:-1:-1;14936:13:2;14838:2;14936:13;14930:20;;14301:688::o;764:457:4:-;850:7;877:6;873:45;;-1:-1:-1;906:1:4;899:8;;873:45;939:5;;;943:1;939;:5;:1;958:5;;;;;:10;954:243;;984:202;1009:176;1069:64;1151:1;1170;1009:42;:176::i;2004:392::-;2090:7;2125:5;;;2144;;;2140:232;;;2165:196;2190:170;2250:58;2326:1;2345;2190:42;:170::i;1227:392::-;1313:7;1340:6;1336:232;;1362:195;1387:169;1447:57;1522:1;1541;1387:42;:169::i;1362:195::-;1577:9;1593:1;1589;:5;;;;;;;1227:392;-1:-1:-1;;;;1227:392:4:o;1625:373::-;1711:7;1742:1;1738;:5;1734:236;;;1759:200;1784:174;1844:62;1924:1;1943;1784:42;:174::i;1759:200::-;-1:-1:-1;1986:5:4;;;1625:373::o;1160:172:31:-;1289:16;;;1303:1;1289:16;;;;;;;;;1247:20;;1289:16;;;;;;;;;;;-1:-1:-1;1289:16:31;1283:22;;1324:1;1315:3;1319:1;1315:6;;;;;;;;;;;;;:10;;;;;1160:172;;;:::o;4655:416:9:-;4823:21;4864:14;;;:29;;-1:-1:-1;4882:11:9;;4864:29;:49;;;-1:-1:-1;4897:16:9;;4864:49;4860:63;;;-1:-1:-1;4922:1:9;4915:8;;4860:63;4945:18;;;4957:6;4945:9;:18;:9;4977:13;;;;;:23;4973:37;;5009:1;5002:8;;;;;4973:37;5053:11;5047:1;5033:11;:15;5028:1;:21;5027:37;;;;;;;4655:416;-1:-1:-1;;;;;4655:416:9:o;3886:391:1:-;3979:19;4030:2;4014:18;;4043:15;4060:23;4095:5;-1:-1:-1;;;;;4087:25:1;4113:18;;;;;;;;;;;;;-1:-1:-1;;;4113:18:1;;;4087:45;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4042:90;;;;4146:10;:37;;;;;4181:2;4160:10;:17;:23;;4146:37;4142:129;;;4221:38;4245:10;4257:1;4221:23;:38::i;:::-;4199:61;;4142:129;3886:391;;;;;:::o;1334:378:5:-;1522:12;1274:10;1593:37;;1644:9;1667:6;1687:8;1557:148;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1557:148:5;;;;;;;;;;;;;;-1:-1:-1;;;;;1557:148:5;-1:-1:-1;;;;;;1557:148:5;;;;;;;;;;;-1:-1:-1;1334:378:5;;;;;:::o;1531:170:7:-;1674:9;1668:16;1661:4;1650:9;1646:20;1639:46;1401:322:8;1554:12;818:10;1625:28;;1667:9;1690:1;1705;1589:127;;;;;;;;;;:::i;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130::-;72:20;;97:33;72:20;97:33;:::i;142:134::-;220:13;;238:33;220:13;238:33;:::i;458:707::-;;575:3;568:4;560:6;556:17;552:27;542:2;;-1:-1;;583:12;542:2;630:6;617:20;652:80;667:64;724:6;667:64;:::i;:::-;652:80;:::i;:::-;760:21;;;643:89;-1:-1;804:4;817:14;;;;792:17;;;906;;;897:27;;;;894:36;-1:-1;891:2;;;943:1;;933:12;891:2;968:1;953:206;978:6;975:1;972:13;953:206;;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;1046:50;;1110:14;;;;1138;;;;1000:1;993:9;953:206;;;957:14;;;;;535:630;;;;:::o;1941:753::-;;2083:3;2076:4;2068:6;2064:17;2060:27;2050:2;;-1:-1;;2091:12;2050:2;2138:6;2125:20;2160:105;2175:89;2257:6;2175:89;:::i;2160:105::-;2293:21;;;2151:114;-1:-1;2337:4;2350:14;;;;2325:17;;;2445:1;2430:258;2455:6;2452:1;2449:13;2430:258;;;2562:62;2620:3;2337:4;2538:3;2525:17;2329:6;2513:30;;2562:62;:::i;:::-;2550:75;;2639:14;;;;2667;;;;2477:1;2470:9;2430:258;;4620:753;;4762:3;4755:4;4747:6;4743:17;4739:27;4729:2;;-1:-1;;4770:12;4729:2;4817:6;4804:20;4839:105;4854:89;4936:6;4854:89;:::i;4839:105::-;4972:21;;;4830:114;-1:-1;5016:4;5029:14;;;;5004:17;;;5124:1;5109:258;5134:6;5131:1;5128:13;5109:258;;;5217:3;5204:17;5008:6;5192:30;12586:4;;12565:19;;5192:30;12569:3;12565:19;;12561:30;12558:2;;;5124:1;;12594:12;12558:2;12622:20;12586:4;12622:20;:::i;:::-;12722:49;12767:3;5016:4;5192:30;;12722:49;:::i;:::-;12697:75;;12846:18;;;12833:32;;-1:-1;;;;;12874:30;;12871:2;;;5124:1;;12907:12;12871:2;12952:58;13006:3;5016:4;12997:6;5192:30;12982:22;;12952:58;:::i;:::-;12934:16;;;12927:84;5229:75;;-1:-1;;5318:14;;;;5346;;;;5156:1;5149:9;5109:258;;5399:707;;5516:3;5509:4;5501:6;5497:17;5493:27;5483:2;;-1:-1;;5524:12;5483:2;5571:6;5558:20;5593:80;5608:64;5665:6;5608:64;:::i;5593:80::-;5701:21;;;5584:89;-1:-1;5745:4;5758:14;;;;5733:17;;;5847;;;5838:27;;;;5835:36;-1:-1;5832:2;;;5884:1;;5874:12;5832:2;5909:1;5894:206;5919:6;5916:1;5913:13;5894:206;;;17992:20;;5987:50;;6051:14;;;;6079;;;;5941:1;5934:9;5894:206;;6132:722;;6260:3;6253:4;6245:6;6241:17;6237:27;6227:2;;-1:-1;;6268:12;6227:2;6308:6;6302:13;6330:80;6345:64;6402:6;6345:64;:::i;6330:80::-;6438:21;;;6321:89;-1:-1;6482:4;6495:14;;;;6470:17;;;6584;;;6575:27;;;;6572:36;-1:-1;6569:2;;;6621:1;;6611:12;6569:2;6646:1;6631:217;6656:6;6653:1;6650:13;6631:217;;;18140:13;;6724:61;;6799:14;;;;6827;;;;6678:1;6671:9;6631:217;;7550:440;;7651:3;7644:4;7636:6;7632:17;7628:27;7618:2;;-1:-1;;7659:12;7618:2;7706:6;7693:20;7728:64;7743:48;7784:6;7743:48;:::i;7728:64::-;7719:73;;7812:6;7805:5;7798:21;7916:3;7848:4;7907:6;7840;7898:16;;7895:25;7892:2;;;7933:1;;7923:12;7892:2;95160:6;7848:4;7840:6;7836:17;7848:4;7874:5;7870:16;95137:30;95216:1;95198:16;;;7848:4;95198:16;95191:27;7874:5;7611:379;-1:-1;;7611:379::o;7999:442::-;;8111:3;8104:4;8096:6;8092:17;8088:27;8078:2;;-1:-1;;8119:12;8078:2;8159:6;8153:13;8181:64;8196:48;8237:6;8196:48;:::i;8181:64::-;8172:73;;8265:6;8258:5;8251:21;8369:3;8301:4;8360:6;8293;8351:16;;8348:25;8345:2;;;8386:1;;8376:12;8345:2;8396:39;8428:6;8301:4;8327:5;8323:16;8301:4;8293:6;8289:17;8396:39;:::i;8634:174::-;8732:13;;96977:1;96967:12;;96957:2;;96993:1;;96983:12;10496:659;;10612:4;10600:9;10595:3;10591:19;10587:30;10584:2;;;-1:-1;;10620:12;10584:2;10648:20;10612:4;10648:20;:::i;:::-;10639:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;10732:75;;10889:2;10942:22;;7341:20;7366:32;7341:20;7366:32;:::i;:::-;10889:2;10904:16;;10897:74;11052:2;11105:22;;7341:20;7366:32;7341:20;7366:32;:::i;:::-;11052:2;11067:16;;11060:74;11071:5;10578:577;-1:-1;;10578:577::o;11198:703::-;;11325:4;11313:9;11308:3;11304:19;11300:30;11297:2;;;-1:-1;;11333:12;11297:2;11361:20;11325:4;11361:20;:::i;:::-;11352:29;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;11445:86;;11613:2;11677:22;;7487:13;7505:32;7487:13;7505:32;:::i;:::-;11613:2;11628:16;;11621:85;11787:2;11851:22;;7487:13;7505:32;7487:13;7505:32;:::i;11949:481::-;;12071:4;12059:9;12054:3;12050:19;12046:30;12043:2;;;-1:-1;;12079:12;12043:2;12107:20;12071:4;12107:20;:::i;:::-;12098:29;;85:6;72:20;97:33;124:5;97:33;:::i;:::-;12188:75;;12326:2;12380:22;;72:20;97:33;72:20;97:33;:::i;:::-;12326:2;12341:16;;12334:75;12345:5;12037:393;-1:-1;;12037:393::o;13082:1028::-;;13205:4;13193:9;13188:3;13184:19;13180:30;13177:2;;;-1:-1;;13213:12;13177:2;13241:20;13205:4;13241:20;:::i;:::-;13232:29;;18005:6;17992:20;13334:16;13327:75;13470:2;13528:9;13524:22;72:20;97:33;124:5;97:33;:::i;:::-;13470:2;13485:16;;13478:75;13622:2;13676:22;;72:20;97:33;72:20;97:33;:::i;:::-;13622:2;13637:16;;13630:75;13766:2;13820:22;;72:20;97:33;72:20;97:33;:::i;:::-;13766:2;13781:16;;13774:75;13938:3;13923:19;;13910:33;-1:-1;;;;;13952:30;;13949:2;;;-1:-1;;13985:12;13949:2;14030:58;14084:3;14075:6;14064:9;14060:22;14030:58;:::i;:::-;13938:3;14016:5;14012:16;14005:84;;13171:939;;;;:::o;18203:263::-;;18318:2;18306:9;18297:7;18293:23;18289:32;18286:2;;;-1:-1;;18324:12;18286:2;226:6;220:13;238:33;265:5;238:33;:::i;18759:431::-;;;18907:2;18895:9;18886:7;18882:23;18878:32;18875:2;;;-1:-1;;18913:12;18875:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;19084:2;19142:22;;369:13;18965:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;19092:82;;;;18869:321;;;;;:::o;19197:736::-;;;;;19395:3;19383:9;19374:7;19370:23;19366:33;19363:2;;;-1:-1;;19402:12;19363:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;19573:2;19631:22;;369:13;19454:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;19700:2;19758:22;;369:13;19581:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;19827:2;19885:22;;369:13;19708:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;19357:576;;;;-1:-1;19357:576;;-1:-1;;19357:576::o;19940:561::-;;;;20102:2;20090:9;20081:7;20077:23;20073:32;20070:2;;;-1:-1;;20108:12;20070:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;20279:2;20337:22;;369:13;20160:82;;-1:-1;387:41;369:13;387:41;:::i;:::-;20406:2;20453:22;;6937:13;20287:82;;-1:-1;91690:13;;91683:21;96408:32;;96398:2;;-1:-1;;96444:12;96398:2;20414:71;;;;20064:437;;;;;:::o;20508:562::-;;;20682:2;20670:9;20661:7;20657:23;20653:32;20650:2;;;-1:-1;;20688:12;20650:2;375:6;369:13;387:41;422:5;387:41;:::i;:::-;20880:2;20865:18;;20859:25;20740:82;;-1:-1;;;;;;20893:30;;;20890:2;;;-1:-1;;20926:12;20890:2;21022:22;;;;14294:4;14273:19;;;14269:30;14266:2;;;-1:-1;;14302:12;14266:2;14330:20;14294:4;14330:20;:::i;:::-;14473:22;18140:13;14423:16;14416:86;14603:60;14659:3;20880:2;14639:9;14635:22;14603:60;:::i;:::-;20880:2;14589:5;14585:16;14578:86;14766:60;14822:3;20682:2;14802:9;14798:22;14766:60;:::i;:::-;20682:2;14752:5;14748:16;14741:86;14921:60;14977:3;14888:2;14957:9;14953:22;14921:60;:::i;:::-;14888:2;14907:5;14903:16;14896:86;15064:3;15053:9;15049:19;15043:26;20904:18;15081:6;15078:30;15075:2;;;-1:-1;;15111:12;15075:2;15156:69;15221:3;15212:6;15201:9;15197:22;15156:69;:::i;:::-;15064:3;15142:5;15138:16;15131:95;;20946:108;;;;;;20644:426;;;;;:::o;21077:879::-;;;;;;21274:3;21262:9;21253:7;21249:23;21245:33;21242:2;;;-1:-1;;21281:12;21242:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;21333:63;-1:-1;21433:2;21472:22;;72:20;97:33;72:20;97:33;:::i;:::-;21441:63;-1:-1;21541:2;21580:22;;72:20;97:33;72:20;97:33;:::i;:::-;21549:63;-1:-1;21649:2;21688:22;;72:20;97:33;72:20;97:33;:::i;:::-;21657:63;-1:-1;21785:3;21770:19;;21757:33;-1:-1;;;;;21799:30;;21796:2;;;-1:-1;;21832:12;21796:2;21862:78;21932:7;21923:6;21912:9;21908:22;21862:78;:::i;:::-;21852:88;;;21236:720;;;;;;;;:::o;21963:753::-;;;;;22143:3;22131:9;22122:7;22118:23;22114:33;22111:2;;;-1:-1;;22150:12;22111:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;22202:63;-1:-1;22302:2;22341:22;;72:20;97:33;72:20;97:33;:::i;:::-;22310:63;-1:-1;22410:2;22449:22;;72:20;97:33;72:20;97:33;:::i;:::-;22418:63;-1:-1;22546:2;22531:18;;22518:32;-1:-1;;;;;22559:30;;22556:2;;;-1:-1;;22592:12;22556:2;22622:78;22692:7;22683:6;22672:9;22668:22;22622:78;:::i;:::-;22612:88;;;22105:611;;;;;;;:::o;22723:617::-;;;;;22878:3;22866:9;22857:7;22853:23;22849:33;22846:2;;;-1:-1;;22885:12;22846:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;22937:63;-1:-1;23037:2;23076:22;;72:20;97:33;72:20;97:33;:::i;:::-;23045:63;-1:-1;23145:2;23184:22;;72:20;97:33;72:20;97:33;:::i;:::-;22840:500;;;;-1:-1;23153:63;;23253:2;23292:22;17992:20;;-1:-1;;22840:500::o;23347:763::-;;;;23535:2;23523:9;23514:7;23510:23;23506:32;23503:2;;;-1:-1;;23541:12;23503:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;23593:63;-1:-1;23721:2;23706:18;;23693:32;-1:-1;;;;;23734:30;;;23731:2;;;-1:-1;;23767:12;23731:2;23797:78;23867:7;23858:6;23847:9;23843:22;23797:78;:::i;:::-;23787:88;;23940:2;23929:9;23925:18;23912:32;23898:46;;23745:18;23956:6;23953:30;23950:2;;;-1:-1;;23986:12;23950:2;;24016:78;24086:7;24077:6;24066:9;24062:22;24016:78;:::i;:::-;24006:88;;;23497:613;;;;;:::o;24117:879::-;;;;;;24314:3;24302:9;24293:7;24289:23;24285:33;24282:2;;;-1:-1;;24321:12;24282:2;85:6;72:20;97:33;124:5;97:33;:::i;:::-;24373:63;-1:-1;24473:2;24512:22;;17992:20;;-1:-1;24581:2;24620:22;;72:20;97:33;72:20;97:33;:::i;25003:392::-;;25143:2;;25131:9;25122:7;25118:23;25114:32;25111:2;;;-1:-1;;25149:12;25111:2;25200:17;25194:24;-1:-1;;;;;25230:6;25227:30;25224:2;;;-1:-1;;25260:12;25224:2;25347:22;;1312:4;1300:17;;1296:27;-1:-1;1286:2;;-1:-1;;1327:12;1286:2;1367:6;1361:13;1389:80;1404:64;1461:6;1404:64;:::i;1389:80::-;1497:21;;;1554:14;;;;1529:17;;;1643;;;1634:27;;;;1631:36;-1:-1;1628:2;;;-1:-1;;1670:12;1628:2;-1:-1;1696:10;;1690:217;1715:6;1712:1;1709:13;1690:217;;;226:6;220:13;238:33;265:5;238:33;:::i;:::-;1783:61;;1737:1;1730:9;;;;;1858:14;;;;1886;;1690:217;;;-1:-1;25280:99;25105:290;-1:-1;;;;;;;25105:290::o;25402:833::-;;;;25621:2;25609:9;25600:7;25596:23;25592:32;25589:2;;;-1:-1;;25627:12;25589:2;25678:17;25672:24;-1:-1;;;;;25716:18;25708:6;25705:30;25702:2;;;-1:-1;;25738:12;25702:2;25840:6;25829:9;25825:22;;;2848:3;2841:4;2833:6;2829:17;2825:27;2815:2;;-1:-1;;2856:12;2815:2;2896:6;2890:13;2918:80;2933:64;2990:6;2933:64;:::i;2918:80::-;3004:16;3040:6;3033:5;3026:21;3070:4;;3087:3;3083:14;3076:21;;3070:4;3062:6;3058:17;3192:3;3070:4;;3176:6;3172:17;3062:6;3163:27;;3160:36;3157:2;;;-1:-1;;3199:12;3157:2;-1:-1;3225:10;;3219:217;3244:6;3241:1;3238:13;3219:217;;;7212:13;;3312:61;;3266:1;3259:9;;;;;3387:14;;;;3415;;3219:217;;;-1:-1;25900:18;;25894:25;25758:99;;-1:-1;25894:25;-1:-1;;;25928:30;;;25925:2;;;-1:-1;;25961:12;25925:2;;25991:89;26072:7;26063:6;26052:9;26048:22;25991:89;:::i;:::-;25981:99;;;26135:84;26211:7;26117:2;26191:9;26187:22;26135:84;:::i;:::-;26125:94;;25583:652;;;;;:::o;26242:419::-;;;26392:2;26380:9;26371:7;26367:23;26363:32;26360:2;;;-1:-1;;26398:12;26360:2;26456:17;26443:31;-1:-1;;;;;26494:18;26486:6;26483:30;26480:2;;;-1:-1;;26516:12;26480:2;26628:6;26617:9;26613:22;;;3607:3;3600:4;3592:6;3588:17;3584:27;3574:2;;-1:-1;;3615:12;3574:2;3658:6;3645:20;26494:18;3677:6;3674:30;3671:2;;;-1:-1;;3707:12;3671:2;3802:3;26392:2;;3786:6;3782:17;3743:6;3768:32;;3765:41;3762:2;;;-1:-1;;3809:12;3762:2;26392;3739:17;;;;;26536:109;;-1:-1;26354:307;;-1:-1;;;;26354:307::o;26668:390::-;;26807:2;;26795:9;26786:7;26782:23;26778:32;26775:2;;;-1:-1;;26813:12;26775:2;26864:17;26858:24;-1:-1;;;;;26894:6;26891:30;26888:2;;;-1:-1;;26924:12;26888:2;27010:22;;3974:4;3962:17;;3958:27;-1:-1;3948:2;;-1:-1;;3989:12;3948:2;4029:6;4023:13;4051:79;4066:63;4122:6;4066:63;:::i;4051:79::-;4158:21;;;4215:14;;;;4190:17;;;4304;;;4295:27;;;;4292:36;-1:-1;4289:2;;;-1:-1;;4331:12;4289:2;-1:-1;4357:10;;4351:216;4376:6;4373:1;4370:13;4351:216;;;9166:13;;4444:60;;4398:1;4391:9;;;;;4518:14;;;;4546;;4351:216;;27065:863;;;;27303:2;27291:9;27282:7;27278:23;27274:32;27271:2;;;-1:-1;;27309:12;27271:2;27367:17;27354:31;-1:-1;;;;;27405:18;27397:6;27394:30;27391:2;;;-1:-1;;27427:12;27391:2;27457:103;27552:7;27543:6;27532:9;27528:22;27457:103;:::i;:::-;27447:113;;27625:2;27614:9;27610:18;27597:32;27583:46;;27405:18;27641:6;27638:30;27635:2;;;-1:-1;;27671:12;27635:2;;27701:103;27796:7;27787:6;27776:9;27772:22;27701:103;:::i;:::-;27691:113;;;27841:2;27884:9;27880:22;17992:20;27849:63;;27265:663;;;;;:::o;27935:392::-;;28075:2;28063:9;28054:7;28050:23;28046:32;28043:2;;;-1:-1;;28081:12;28043:2;28132:17;28126:24;-1:-1;;;;;28162:6;28159:30;28156:2;;;-1:-1;;28192:12;28156:2;28222:89;28303:7;28294:6;28283:9;28279:22;28222:89;:::i;28334:257::-;;28446:2;28434:9;28425:7;28421:23;28417:32;28414:2;;;-1:-1;;28452:12;28414:2;6943:6;6937:13;96433:5;91690:13;91683:21;96411:5;96408:32;96398:2;;-1:-1;;96444:12;28598:263;;28713:2;28701:9;28692:7;28688:23;28684:32;28681:2;;;-1:-1;;28719:12;28681:2;-1:-1;7212:13;;28675:186;-1:-1;28675:186::o;28868:360::-;;28992:2;28980:9;28971:7;28967:23;28963:32;28960:2;;;-1:-1;;28998:12;28960:2;29049:17;29043:24;-1:-1;;;;;29079:6;29076:30;29073:2;;;-1:-1;;29109:12;29073:2;29139:73;29204:7;29195:6;29184:9;29180:22;29139:73;:::i;29235:261::-;;29349:2;29337:9;29328:7;29324:23;29320:32;29317:2;;;-1:-1;;29355:12;29317:2;9033:6;9027:13;9045:32;9071:5;9045:32;:::i;29503:452::-;;;29661:3;29649:9;29640:7;29636:23;29632:33;29629:2;;;-1:-1;;29668:12;29629:2;9033:6;9027:13;9045:32;9071:5;9045:32;:::i;:::-;29720:73;-1:-1;29848:91;29931:7;29830:2;29907:22;;29848:91;:::i;:::-;29838:101;;29623:332;;;;;:::o;30425:826::-;;;;;30629:9;30620:7;30616:23;30641:3;30616:23;30612:33;30609:2;;;-1:-1;;30648:12;30609:2;9403:4;9382:19;9378:30;9375:2;;;-1:-1;;9411:12;9375:2;;9439:20;9403:4;9439:20;:::i;:::-;7077:6;7064:20;9525:16;9518:75;9655:2;9713:9;9709:22;72:20;97:33;124:5;97:33;:::i;:::-;9655:2;9670:16;;9663:75;9674:5;-1:-1;9403:4;30875:22;;72:20;97:33;72:20;97:33;:::i;:::-;30844:63;-1:-1;30944:2;30983:22;;72:20;97:33;72:20;97:33;:::i;:::-;30952:63;-1:-1;31080:3;31065:19;;31052:33;-1:-1;;;;;31094:30;;31091:2;;;-1:-1;;31127:12;31258:909;;;;;31473:3;31461:9;31452:7;31448:23;31444:33;31441:2;;;-1:-1;;31480:12;31441:2;31538:17;31525:31;-1:-1;;;;;31576:18;31568:6;31565:30;31562:2;;;-1:-1;;31598:12;31562:2;31684:22;;;;9935:4;9914:19;;;9910:30;9907:2;;;-1:-1;;9943:12;9907:2;9971:20;9935:4;9971:20;:::i;:::-;10077:73;10146:3;10122:22;10077:73;:::i;:::-;10059:16;10052:99;10241:2;10230:9;10226:18;10213:32;31576:18;10257:6;10254:30;10251:2;;;-1:-1;;10287:12;10251:2;10332:99;10427:3;10418:6;10407:9;10403:22;10332:99;:::i;:::-;10241:2;10318:5;10314:16;10307:125;;31618:98;;;;31771:53;31816:7;10241:2;31796:9;31792:22;31771:53;:::i;:::-;31761:63;;31879:53;31924:7;9935:4;31904:9;31900:22;31879:53;:::i;:::-;31869:63;;31997:2;31986:9;31982:18;31969:32;31955:46;;31576:18;32013:6;32010:30;32007:2;;;-1:-1;;32043:12;32007:2;;32073:78;32143:7;32134:6;32123:9;32119:22;32073:78;:::i;32174:805::-;;;;;32379:3;32367:9;32358:7;32354:23;32350:33;32347:2;;;-1:-1;;32386:12;32347:2;32448:80;32520:7;32496:22;32448:80;:::i;:::-;32438:90;;32565:2;32607:9;32603:22;8881:20;8906:32;8932:5;8906:32;:::i;:::-;32573:62;-1:-1;32672:3;32711:22;;8881:20;8906:32;8881:20;8906:32;:::i;:::-;32681:62;-1:-1;32808:3;32793:19;;32780:33;-1:-1;;;;;32822:30;;32819:2;;;-1:-1;;32855:12;32986:820;;;;;33199:3;33187:9;33178:7;33174:23;33170:33;33167:2;;;-1:-1;;33206:12;33167:2;33268:86;33346:7;33322:22;33268:86;:::i;:::-;33258:96;;33391:2;33434:9;33430:22;72:20;97:33;124:5;97:33;:::i;33813:907::-;;;;;34027:3;34015:9;34006:7;34002:23;33998:33;33995:2;;;-1:-1;;34034:12;33995:2;34092:17;34079:31;-1:-1;;;;;34130:18;34122:6;34119:30;34116:2;;;-1:-1;;34152:12;34116:2;34182:87;34261:7;34252:6;34241:9;34237:22;34182:87;:::i;:::-;34172:97;;34306:2;34349:9;34345:22;72:20;63:29;;97:33;124:5;97:33;:::i;:::-;34314:63;;-1:-1;34414:2;34453:22;;72:20;;97:33;72:20;97:33;:::i;:::-;34422:63;;-1:-1;34550:2;34535:18;;34522:32;;34563:30;;;34560:2;;;-1:-1;;34596:12;34727:771;;;;;34916:3;34904:9;34895:7;34891:23;34887:33;34884:2;;;-1:-1;;34923:12;34884:2;34981:17;34968:31;-1:-1;;;;;35011:6;35008:30;35005:2;;;-1:-1;;35041:12;35005:2;35071:87;35150:7;35141:6;35130:9;35126:22;35071:87;:::i;:::-;35061:97;;;35195:2;35238:9;35234:22;72:20;97:33;124:5;97:33;:::i;35505:771::-;;;;;35694:3;35682:9;35673:7;35669:23;35665:33;35662:2;;;-1:-1;;35701:12;35662:2;35759:17;35746:31;-1:-1;;;;;35789:6;35786:30;35783:2;;;-1:-1;;35819:12;35783:2;35849:87;35928:7;35919:6;35908:9;35904:22;35849:87;:::i;:::-;35839:97;;;35973:2;36016:9;36012:22;7064:20;35981:63;;36081:2;36124:9;36120:22;72:20;97:33;124:5;97:33;:::i;:::-;36089:63;-1:-1;36189:2;36228:22;;72:20;97:33;72:20;97:33;:::i;37096:815::-;;;;;37294:9;37285:7;37281:23;37306:3;37281:23;37277:33;37274:2;;;-1:-1;;37313:12;37274:2;15935:4;15914:19;15910:30;15907:2;;;-1:-1;;15943:12;15907:2;;15971:20;15935:4;15971:20;:::i;:::-;85:6;72:20;97:33;124:5;97:33;:::i;:::-;16054:75;;16199:2;16253:22;;;7064:20;16214:16;;;16207:75;16354:2;16408:22;;72:20;97:33;72:20;97:33;:::i;:::-;16354:2;16369:16;;16362:75;16373:5;-1:-1;15935:4;37534:22;;72:20;97:33;72:20;97:33;:::i;:::-;37503:63;-1:-1;37603:3;37643:22;;72:20;97:33;72:20;97:33;:::i;39004:399::-;;;39136:2;39124:9;39115:7;39111:23;39107:32;39104:2;;;-1:-1;;39142:12;39104:2;-1:-1;;18140:13;;39305:2;39355:22;;;18140:13;;;;;-1:-1;39098:305::o;39410:672::-;;;;;39576:3;39564:9;39555:7;39551:23;39547:33;39544:2;;;-1:-1;;39583:12;39544:2;-1:-1;;18140:13;;39746:2;39796:22;;18140:13;39865:2;39915:22;;18140:13;39984:2;40034:22;;;18140:13;;;;;-1:-1;18140:13;;-1:-1;39538:544;-1:-1;39538:544::o;40089:809::-;;;;;;40272:3;40260:9;40251:7;40247:23;40243:33;40240:2;;;-1:-1;;40279:12;40240:2;-1:-1;;18140:13;;40442:2;40492:22;;18140:13;40561:2;40611:22;;18140:13;40680:2;40730:22;;18140:13;40799:3;40850:22;;;18140:13;;;;;-1:-1;18140:13;;-1:-1;18140:13;;-1:-1;40234:664;-1:-1;40234:664::o;41270:203::-;-1:-1;;;;;92918:54;50122:65;;41462:4;41453:14;;41365:108::o;41482:277::-;;52527:16;52521:23;48393:3;48386:37;52700:4;52693:5;52689:16;52683:23;52700:4;52764:3;52760:14;48386:37;52863:4;52856:5;52852:16;52846:23;52863:4;52927:3;52923:14;48386:37;53019:4;53012:5;53008:16;53002:23;53019:4;53083:3;53079:14;48386:37;53177:4;53170:5;53166:16;53160:23;52453:4;53177;53207:3;53203:14;53196:38;53249:71;52453:4;52448:3;52444:14;53301:12;53249:71;:::i;42771:690::-;;42964:5;88039:12;89899:6;89894:3;89887:19;89936:4;;89931:3;89927:14;42976:93;;89936:4;43140:5;87028:14;-1:-1;43179:260;43204:6;43201:1;43198:13;43179:260;;;43265:13;;-1:-1;;;;;92918:54;42453:45;;41059:14;;;;89092;;;;12885:18;43219:9;43179:260;;;-1:-1;43445:10;;42895:566;-1:-1;;;;;42895:566::o;43500:690::-;;43693:5;88039:12;89899:6;89894:3;89887:19;89936:4;;89931:3;89927:14;43705:93;;89936:4;43869:5;87028:14;-1:-1;43908:260;43933:6;43930:1;43927:13;43908:260;;;43994:13;;48386:37;;41241:14;;;;89092;;;;43955:1;43948:9;43908:260;;49003:323;;49135:5;88039:12;89899:6;89894:3;89887:19;49218:52;49263:6;89936:4;89931:3;89927:14;89936:4;49244:5;49240:16;49218:52;:::i;:::-;12565:19;95577:14;-1:-1;;95573:28;49282:39;;;;89936:4;49282:39;;49083:243;-1:-1;;49083:243::o;54090:678::-;54310:23;;-1:-1;;;;;92918:54;42453:45;;54502:4;54491:16;;;54485:23;-1:-1;;;;;;91856:78;;;54560:14;;;48614:36;;;;54674:4;54663:16;;;54657:23;91856:78;54732:14;;48614:36;54210:558::o;54862:837::-;55087:23;;-1:-1;;;;;92918:54;;;42453:45;;55273:4;55262:16;;;55256:23;91690:13;91683:21;55327:14;;;48168:34;55426:4;55415:16;;;55409:23;92918:54;;;55502:14;;;42453:45;55609:4;55598:16;;;55592:23;91690:13;91683:21;55663:14;;48168:34;54992:707::o;55789:1073::-;;56039:16;56033:23;48393:3;48386:37;56211:4;56204:5;56200:16;56194:23;12885:18;;92929:42;;;;91500:5;92918:54;56211:4;56275:3;56271:14;42453:45;92929:42;56373:4;56366:5;56362:16;56356:23;92918:54;56373:4;56437:3;56433:14;42453:45;92929:42;56527:4;56520:5;56516:16;56510:23;92918:54;56527:4;56591:3;56587:14;42453:45;;;56681:4;56674:5;56670:16;56664:23;55958:4;56681;56711:3;56707:14;56700:38;56753:71;55958:4;55953:3;55949:14;56805:12;56753:71;:::i;59112:291::-;;95160:6;95155:3;95150;95137:30;95198:16;;95191:27;;;95198:16;59256:147;-1:-1;59256:147::o;59410:271::-;;49843:5;88039:12;49954:52;49999:6;49994:3;49987:4;49980:5;49976:16;49954:52;:::i;:::-;50018:16;;;;;59544:137;-1:-1;;59544:137::o;59688:222::-;-1:-1;;;;;92918:54;;;;42453:45;;59815:2;59800:18;;59786:124::o;59917:349::-;-1:-1;;;;;92918:54;;;;42306:58;;60252:2;60237:18;;48386:37;60080:2;60065:18;;60051:215::o;60273:333::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;60592:2;60577:18;;42453:45;60428:2;60413:18;;60399:207::o;60613:556::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;;60989:2;60974:18;;42453:45;92918:54;;;61072:2;61057:18;;42453:45;92918:54;;;61155:2;61140:18;;42453:45;60824:3;60809:19;;60795:374::o;61176:704::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;;61602:2;61587:18;;42453:45;92918:54;;61685:2;61670:18;;42453:45;61437:3;61722:2;61707:18;;61700:48;;;61176:704;;61762:108;;61422:19;;61856:6;61762:108;:::i;61887:556::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;;62263:2;62248:18;;42453:45;92918:54;;62346:2;62331:18;;42453:45;62429:2;62414:18;;48386:37;;;;62098:3;62083:19;;62069:374::o;62450:432::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;;;62791:2;62776:18;;42453:45;91690:13;;91683:21;62868:2;62853:18;;48168:34;62627:2;62612:18;;62598:284::o;62889:628::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;63277:2;63262:18;;42453:45;91690:13;;91683:21;63354:2;63339:18;;48168:34;63112:3;63391:2;63376:18;;63369:48;;;62889:628;;63431:76;;63097:19;;63493:6;63431:76;:::i;63524:444::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;;;63871:2;63856:18;;42453:45;63954:2;63939:18;;48386:37;;;;63707:2;63692:18;;63678:290::o;63975:768::-;-1:-1;;;;;92918:54;;;42453:45;;92918:54;;64405:2;64390:18;;42453:45;64488:2;64473:18;;48386:37;;;64579:2;64564:18;;51423:58;;;92929:42;64616:3;64601:19;;64594:49;;;63975:768;;64657:76;;64225:19;;64719:6;64657:76;:::i;:::-;64649:84;64211:532;-1:-1;;;;;;;64211:532::o;64750:740::-;-1:-1;;;;;92918:54;;42453:45;;65033:2;65151;65136:18;;65129:48;;;64750:740;;65191:108;;65018:18;;65285:6;65191:108;:::i;:::-;65347:9;65341:4;65337:20;65332:2;65321:9;65317:18;65310:48;65372:108;65475:4;65466:6;65372:108;:::i;65497:876::-;-1:-1;;;;;92918:54;;42453:45;;65497:876;92156:53;92203:5;92156:53;:::i;:::-;94662:38;65997:2;65986:9;65982:18;51153:62;65820:3;66034:2;66023:9;66019:18;66012:48;66074:108;65820:3;65809:9;65805:19;66168:6;66074:108;:::i;:::-;66230:9;66224:4;66220:20;66215:2;66204:9;66200:18;66193:48;66255:108;66358:4;66349:6;66255:108;:::i;66380:1644::-;-1:-1;;;;;92918:54;;;42453:45;;66380:1644;;66927:3;;92156:53;92203:5;92156:53;:::i;:::-;94662:38;67104:2;67093:9;67089:18;51153:62;66927:3;67141:2;67130:9;67126:18;67119:48;67181:108;66927:3;66916:9;66912:19;67275:6;67181:108;:::i;:::-;67173:116;;67337:9;67331:4;67327:20;67322:2;67311:9;67307:18;67300:48;67362:108;67465:4;67456:6;67362:108;:::i;:::-;92918:54;;;67549:3;67534:19;;42453:45;67354:116;-1:-1;92156:53;92203:5;92156:53;:::i;:::-;94662:38;67645:3;67634:9;67630:19;51153:62;67699:9;67693:4;67689:20;67683:3;67672:9;67668:19;67661:49;67724:108;67827:4;67818:6;67724:108;:::i;:::-;67716:116;;67881:9;67875:4;67871:20;67865:3;67854:9;67850:19;67843:49;67906:108;68009:4;68000:6;67906:108;:::i;:::-;67898:116;66898:1126;-1:-1;;;;;;;;;;;66898:1126::o;68031:517::-;-1:-1;;;;;92918:54;;42453:45;;68254:2;68372;68357:18;;68350:48;;;68031:517;;68412:126;;68239:18;;68524:6;68412:126;:::i;68895:629::-;;69150:2;69171:17;69164:47;69225:108;69150:2;69139:9;69135:18;69319:6;69225:108;:::i;:::-;69381:9;69375:4;69371:20;69366:2;69355:9;69351:18;69344:48;69406:108;69509:4;69500:6;69406:108;:::i;69531:481::-;;69736:2;69757:17;69750:47;69811:108;69736:2;69725:9;69721:18;69905:6;69811:108;:::i;:::-;69803:116;;48416:5;69998:2;69987:9;69983:18;48386:37;69707:305;;;;;:::o;70019:486::-;70254:2;70268:47;;;88039:12;;70239:18;;;89887:19;;;70019:486;;70254:2;89927:14;;;;;;46763:17;;;46754:27;;;;87028:14;;;70019:486;46920:417;46945:6;46942:1;46939:13;46920:417;;;46997:20;;;-1:-1;;46997:20;46985:33;;47046:13;;53665:23;;53701:38;;;53754:71;53590:14;;;53665:23;53754:71;:::i;:::-;53902:16;;;53896:23;91690:13;91683:21;53967:14;;;48168:34;;;;47316:14;;;;53746:79;-1:-1;89092:14;;;;46967:1;46960:9;46920:417;;;-1:-1;70321:174;;70225:280;-1:-1;;;;;;;;70225:280::o;70512:370::-;;70689:2;70710:17;70703:47;70764:108;70689:2;70678:9;70674:18;70858:6;70764:108;:::i;70889:580::-;91690:13;;91683:21;48168:34;;-1:-1;;;;;92918:54;;71274:2;71259:18;;42453:45;71116:2;71311;71296:18;;71289:48;;;70889:580;;71351:108;;71101:18;;71445:6;71351:108;:::i;71476:222::-;48386:37;;;71603:2;71588:18;;71574:124::o;71705:676::-;;48416:5;48393:3;48386:37;71956:2;72074;72063:9;72059:18;72052:48;72114:76;71956:2;71945:9;71941:18;72176:6;72114:76;:::i;72388:306::-;;72533:2;72554:17;72547:47;72608:76;72533:2;72522:9;72518:18;72670:6;72608:76;:::i;73236:521::-;-1:-1;;;;;92918:54;;50122:65;;73461:2;73599;73584:18;;73577:48;;;73236:521;;73639:108;;73446:18;;73733:6;73639:108;:::i;73764:480::-;73965:2;73950:18;;92156:53;92203:5;92156:53;:::i;:::-;50636:68;;;74147:2;74132:18;;48386:37;;;;74230:2;74215:18;;;48386:37;73936:308;:::o;74251:510::-;74467:2;74452:18;;95836:1;95826:12;;95816:2;;95842:9;74768:1156;;75231:3;75220:9;75216:19;94522:37;51051:5;94522:37;:::i;:::-;51004:3;50997:61;75361:2;75231:3;75361:2;75350:9;75346:18;75339:48;75401:170;45387:5;88039:12;45406:117;45516:6;45511:3;45406:117;:::i;:::-;45399:124;;;;;75361:2;45580:6;45576:17;45571:3;45567:27;75361:2;45696:5;87028:14;-1:-1;45735:423;45760:6;45757:1;45754:13;45735:423;;;45822:9;45816:4;45812:20;45807:3;45800:33;45889:126;46010:4;45867:6;45861:13;45889:126;:::i;:::-;46137:14;;;;45881:134;-1:-1;89092:14;;;;45782:1;45775:9;45735:423;;;45739:14;;75619:9;75613:4;75609:20;75604:2;75593:9;75589:18;75582:48;75644:123;;;44460:5;88039:12;44383:83;;44479:86;44558:6;44553:3;44479:86;:::i;:::-;44472:93;;;;75361:2;44651:5;87028:14;-1:-1;44690:290;44715:6;44712:1;44709:13;44690:290;;;44803:78;44877:3;44782:6;44776:13;44803:78;:::i;:::-;44796:85;-1:-1;89092:14;;;;45782:1;44730:9;44690:290;;;44694:14;;;;75636:131;;;;75778:136;75910:2;75899:9;75895:18;75886:6;75778:136;:::i;75931:436::-;92756:2;92745:21;;;51296:36;;92745:21;;;;76270:2;76255:18;;51296:36;76353:2;76338:18;;48386:37;;;;76110:2;76095:18;;76081:286::o;76374:438::-;92756:2;92745:21;;;51296:36;;76581:3;76566:19;;76676:126;76798:2;76783:18;;76774:6;76676:126;:::i;77272:416::-;77472:2;77486:47;;;51718:2;77457:18;;;89887:19;51754:34;89927:14;;;51734:55;-1:-1;;;51809:12;;;51802:29;51850:12;;;77443:245::o;77695:416::-;77895:2;77909:47;;;52101:2;77880:18;;;89887:19;52137:32;89927:14;;;52117:53;52189:12;;;77866:245::o;78118:806::-;;78444:125;78551:17;78542:6;78444:125;:::i;:::-;51325:5;92756:2;92745:21;78646:2;78635:9;78631:18;51296:36;51325:5;92756:2;92745:21;78727:3;78716:9;78712:19;51296:36;78429:3;78765;78754:9;78750:19;78743:49;78806:108;78429:3;78418:9;78414:19;78900:6;78806:108;:::i;78931:740::-;;79210:3;79232:17;79225:47;79286:126;79210:3;79199:9;79195:19;79398:6;79286:126;:::i;:::-;-1:-1;;;;;92918:54;;;79491:2;79476:18;;42453:45;92918:54;;;;79574:2;79559:18;;42453:45;79657:2;79642:18;48386:37;79278:134;79181:490;-1:-1;;79181:490::o;79678:740::-;;79957:3;79979:17;79972:47;80033:126;79957:3;79946:9;79942:19;80145:6;80033:126;:::i;:::-;80238:2;80223:18;;48386:37;;;;-1:-1;;;;;;92918:54;;;80321:2;80306:18;;42453:45;92918:54;;80404:2;80389:18;;;42453:45;80025:134;79928:490;-1:-1;79928:490::o;81246:390::-;;81433:2;81454:17;81447:47;57953:16;57947:23;81433:2;81422:9;81418:18;48386:37;81433:2;58120:5;58116:16;58110:23;58187:14;81422:9;58187:14;48386:37;58187:14;58284:5;58280:16;58274:23;57873:4;58317:14;81422:9;58317:14;58310:38;58363:71;57864:14;81422:9;57864:14;58415:12;58363:71;:::i;:::-;58355:79;;58317:14;58522:5;58518:16;58512:23;58589:14;81422:9;58589:14;48386:37;58589:14;58687:5;58683:16;58677:23;12565:19;;81422:9;58740:4;58736:14;;57873:4;81422:9;58720:14;58713:38;58766:71;58832:4;58818:12;58766:71;:::i;81872:481::-;;48416:5;48393:3;48386:37;82077:2;82195;82184:9;82180:18;82173:48;82235:108;82077:2;82066:9;82062:18;82329:6;82235:108;:::i;82360:740::-;;48416:5;48393:3;48386:37;82643:2;82761;82750:9;82746:18;82739:48;82801:108;82643:2;82632:9;82628:18;82895:6;82801:108;:::i;:::-;82957:9;82951:4;82947:20;82942:2;82931:9;82927:18;82920:48;82982:108;83085:4;83076:6;82982:108;:::i;83107:780::-;48386:37;;;83539:2;83524:18;;48386:37;;;;83622:2;83607:18;;48386:37;;;;83705:2;83690:18;;48386:37;83788:3;83773:19;;48386:37;83872:3;83857:19;;48386:37;83374:3;83359:19;;83345:542::o;83894:506::-;;;84029:11;84016:25;84080:48;;84104:8;84088:14;84084:29;84080:48;84060:18;84056:73;84046:2;;-1:-1;;84133:12;84046:2;84160:33;;84214:18;;;-1:-1;;;;;;84241:30;;84238:2;;;-1:-1;;84274:12;84238:2;84119:4;84302:13;;-1:-1;84088:14;84334:38;;;84324:49;;84321:2;;;84386:1;;84376:12;84321:2;83984:416;;;;;:::o;84407:256::-;84469:2;84463:9;84495:17;;;-1:-1;;;;;84555:34;;84591:22;;;84552:62;84549:2;;;84627:1;;84617:12;84549:2;84469;84636:22;84447:216;;-1:-1;84447:216::o;84670:304::-;;-1:-1;;;;;84821:6;84818:30;84815:2;;;-1:-1;;84851:12;84815:2;-1:-1;84896:4;84884:17;;;84949:15;;84752:222::o;86585:321::-;;-1:-1;;;;;86720:6;86717:30;86714:2;;;-1:-1;;86750:12;86714:2;-1:-1;12565:19;86804:17;-1:-1;;86800:33;86891:4;86881:15;;86651:255::o;92404:132::-;92468:16;95947:1;95937:12;;95927:2;;95953:9;95233:268;95298:1;95305:101;95319:6;95316:1;95313:13;95305:101;;;95386:11;;;95380:18;95367:11;;;95360:39;95341:2;95334:10;95305:101;;;95421:6;95418:1;95415:13;95412:2;;;95298:1;95477:6;95472:3;95468:16;95461:27;95412:2;;95282:219;;;:::o;95614:111::-;95703:1;95696:5;95693:12;95683:2;;95709:9;95683:2;95677:48;:::o;96088:117::-;-1:-1;;;;;92918:54;;96147:35;;96137:2;;96196:1;;96186:12;96594:115;-1:-1;;;;;;91856:78;;96652:34;;96642:2;;96700:1;;96690:12;97009:115;97094:5;92756:2;92745:21;97070:5;97067:34;97057:2;;97115:1;;97105:12"
            }
        }
    },
    "sourceTreeHashHex": "0xc8a844b8252cf18e14db0ca5c3d9ac7420819f88dae57fb594030f782df5ef1d",
    "sources": {
        "./ERC20BridgeSampler.sol": {
            "id": 18,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n"
        },
        "./BalancerSampler.sol": {
            "id": 11,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n"
        },
        "./interfaces/IBalancer.sol": {
            "id": 37,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n"
        },
        "./BalancerV2Sampler.sol": {
            "id": 12,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n"
        },
        "./SamplerUtils.sol": {
            "id": 31,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": {
            "id": 1,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": {
            "id": 7,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": {
            "id": 2,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": {
            "id": 5,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n"
        },
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": {
            "id": 0,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n"
        },
        "./BancorSampler.sol": {
            "id": 13,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {\n    uint256 private constant HACK = 0;\n}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IBancor.sol": {
            "id": 38,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n"
        },
        "./CurveSampler.sol": {
            "id": 15,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ICurve.sol": {
            "id": 39,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n"
        },
        "./ApproximateBuys.sol": {
            "id": 9,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": {
            "id": 3,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": {
            "id": 4,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": {
            "id": 8,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n"
        },
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": {
            "id": 6,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n"
        },
        "./DODOSampler.sol": {
            "id": 16,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n"
        },
        "./DODOV2Sampler.sol": {
            "id": 17,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n"
        },
        "./Eth2DaiSampler.sol": {
            "id": 19,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IEth2Dai.sol": {
            "id": 40,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n"
        },
        "./KyberSampler.sol": {
            "id": 22,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n"
        },
        "./interfaces/IKyberNetwork.sol": {
            "id": 41,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n"
        },
        "./KyberDmmSampler.sol": {
            "id": 21,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n"
        },
        "./LidoSampler.sol": {
            "id": 23,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n"
        },
        "./LiquidityProviderSampler.sol": {
            "id": 24,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": {
            "id": 54,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n"
        },
        "./MakerPSMSampler.sol": {
            "id": 26,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n"
        },
        "./MultiBridgeSampler.sol": {
            "id": 28,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n"
        },
        "./interfaces/IMultiBridge.sol": {
            "id": 44,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n"
        },
        "./MStableSampler.sol": {
            "id": 25,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IMStable.sol": {
            "id": 42,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n"
        },
        "./MooniswapSampler.sol": {
            "id": 27,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n"
        },
        "./interfaces/IMooniswap.sol": {
            "id": 43,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n"
        },
        "./ShellSampler.sol": {
            "id": 32,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n"
        },
        "./interfaces/IShell.sol": {
            "id": 45,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n"
        },
        "./SmoothySampler.sol": {
            "id": 33,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n"
        },
        "./interfaces/ISmoothy.sol": {
            "id": 46,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n"
        },
        "./TwoHopSampler.sol": {
            "id": 34,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n    }\n\n    struct TwoHopResult {\n        uint256 outputAmount;\n        uint256 firstHopIndex;\n        bytes firstHopResult;\n        uint256 secondHopIndex;\n        bytes secondHopResult;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(firstHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return result;\n        }\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(secondHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > result.outputAmount) {\n                    result.outputAmount = amount;\n                    result.secondHopIndex = i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        result.outputAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(secondHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    result.secondHopIndex= i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return result;\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < result.outputAmount\n                ) {\n                    result.outputAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n    }\n}\n"
        },
        "./UniswapSampler.sol": {
            "id": 35,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n"
        },
        "./interfaces/IUniswapExchangeQuotes.sol": {
            "id": 47,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n"
        },
        "./UniswapV2Sampler.sol": {
            "id": 36,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n"
        },
        "./interfaces/IUniswapV2Router01.sol": {
            "id": 48,
            "content": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        }
    },
    "sourceCodes": {
        "./ERC20BridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./BalancerSampler.sol\";\nimport \"./BalancerV2Sampler.sol\";\nimport \"./BancorSampler.sol\";\nimport \"./CurveSampler.sol\";\nimport \"./DODOSampler.sol\";\nimport \"./DODOV2Sampler.sol\";\nimport \"./Eth2DaiSampler.sol\";\nimport \"./KyberSampler.sol\";\nimport \"./KyberDmmSampler.sol\";\nimport \"./LidoSampler.sol\";\nimport \"./LiquidityProviderSampler.sol\";\nimport \"./MakerPSMSampler.sol\";\nimport \"./MultiBridgeSampler.sol\";\nimport \"./MStableSampler.sol\";\nimport \"./MooniswapSampler.sol\";\nimport \"./ShellSampler.sol\";\nimport \"./SmoothySampler.sol\";\nimport \"./TwoHopSampler.sol\";\nimport \"./UniswapSampler.sol\";\nimport \"./UniswapV2Sampler.sol\";\n\n\ncontract ERC20BridgeSampler is\n    BalancerSampler,\n    BalancerV2Sampler,\n    BancorSampler,\n    CurveSampler,\n    DODOSampler,\n    DODOV2Sampler,\n    Eth2DaiSampler,\n    KyberSampler,\n    KyberDmmSampler,\n    LidoSampler,\n    LiquidityProviderSampler,\n    MakerPSMSampler,\n    MStableSampler,\n    MooniswapSampler,\n    MultiBridgeSampler,\n    ShellSampler,\n    SmoothySampler,\n    TwoHopSampler,\n    UniswapSampler,\n    UniswapV2Sampler\n{\n\n    struct CallResults {\n        bytes data;\n        bool success;\n    }\n\n    /// @dev Call multiple public functions on this contract in a single transaction.\n    /// @param callDatas ABI-encoded call data for each function call.\n    /// @return callResults ABI-encoded results data for each call.\n    function batchCall(bytes[] calldata callDatas)\n        external\n        returns (CallResults[] memory callResults)\n    {\n        callResults = new CallResults[](callDatas.length);\n        for (uint256 i = 0; i != callDatas.length; ++i) {\n            callResults[i].success = true;\n            if (callDatas[i].length == 0) {\n                continue;\n            }\n            (callResults[i].success, callResults[i].data) = address(this).call(callDatas[i]);\n        }\n    }\n}\n",
        "./BalancerSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBalancer.sol\";\n\n\ncontract BalancerSampler {\n\n    /// @dev Base gas limit for Balancer calls.\n    uint256 constant private BALANCER_CALL_GAS = 300e3; // 300k\n\n    // Balancer math constants\n    // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BConst.sol\n    uint256 constant private BONE = 10 ** 18;\n    uint256 constant private MAX_IN_RATIO = BONE / 2;\n    uint256 constant private MAX_OUT_RATIO = (BONE / 3) + 1 wei;\n\n    struct BalancerState {\n        uint256 takerTokenBalance;\n        uint256 makerTokenBalance;\n        uint256 takerTokenWeight;\n        uint256 makerTokenWeight;\n        uint256 swapFee;\n    }\n\n    /// @dev Sample sell quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return makerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L443\n            if (takerTokenAmounts[i] > _bmul(poolState.takerTokenBalance, MAX_IN_RATIO)) {\n                break;\n            }\n            try\n                pool.calcOutGivenIn\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        takerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer.\n    /// @param poolAddress Address of the Balancer pool to query.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancer(\n        address poolAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        IBalancer pool = IBalancer(poolAddress);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (!pool.isBound(takerToken) || !pool.isBound(makerToken)) {\n            return takerTokenAmounts;\n        }\n\n        BalancerState memory poolState;\n        poolState.takerTokenBalance = pool.getBalance(takerToken);\n        poolState.makerTokenBalance = pool.getBalance(makerToken);\n        poolState.takerTokenWeight = pool.getDenormalizedWeight(takerToken);\n        poolState.makerTokenWeight = pool.getDenormalizedWeight(makerToken);\n        poolState.swapFee = pool.getSwapFee();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            // Handles this revert scenario:\n            // https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol#L505\n            if (makerTokenAmounts[i] > _bmul(poolState.makerTokenBalance, MAX_OUT_RATIO)) {\n                break;\n            }\n            try\n                pool.calcInGivenOut\n                    {gas: BALANCER_CALL_GAS}\n                    (\n                        poolState.takerTokenBalance,\n                        poolState.takerTokenWeight,\n                        poolState.makerTokenBalance,\n                        poolState.makerTokenWeight,\n                        makerTokenAmounts[i],\n                        poolState.swapFee\n                    )\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Hacked version of Balancer's `bmul` function, returning 0 instead\n    ///      of reverting.\n    ///      https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L63-L73\n    /// @param a The first operand.\n    /// @param b The second operand.\n    /// @param c The result of the multiplication, or 0 if `bmul` would've reverted.\n    function _bmul(uint256 a, uint256 b)\n        private\n        pure\n        returns (uint256 c)\n    {\n        uint c0 = a * b;\n        if (a != 0 && c0 / a != b) {\n            return 0;\n        }\n        uint c1 = c0 + (BONE / 2);\n        if (c1 < c0) {\n            return 0;\n        }\n        uint c2 = c1 / BONE;\n        return c2;\n    }\n}\n",
        "./interfaces/IBalancer.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBalancer {\n    function isBound(address t) external view returns (bool);\n    function getDenormalizedWeight(address token) external view returns (uint256);\n    function getBalance(address token) external view returns (uint256);\n    function getSwapFee() external view returns (uint256);\n    function calcOutGivenIn(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountIn,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountOut);\n    function calcInGivenOut(\n        uint256 tokenBalanceIn,\n        uint256 tokenWeightIn,\n        uint256 tokenBalanceOut,\n        uint256 tokenWeightOut,\n        uint256 tokenAmountOut,\n        uint256 swapFee\n    ) external pure returns (uint256 tokenAmountIn);\n}\n",
        "./BalancerV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\n/// @dev Minimal Balancer V2 Vault interface\n///      for documentation refer to https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/vault/interfaces/IVault.sol\ninterface IBalancerV2Vault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] calldata swaps,\n        IAsset[] calldata assets,\n        FundManagement calldata funds\n    ) external returns (int256[] memory assetDeltas);\n}\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ncontract BalancerV2Sampler is SamplerUtils {\n\n    struct BalancerV2PoolInfo {\n        bytes32 poolId;\n        address vault;\n    }\n\n    /// @dev Sample sell quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, takerTokenAmounts[i]);\n\n            try\n                // For sells we specify the takerToken which is what the vault will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_IN, swapSteps, swapAssets, swapFunds)\n            // amounts represent pool balance deltas from the swap (incoming balance, outgoing balance)\n            returns (int256[] memory amounts) {\n                // Outgoing balance is negative so we need to flip the sign\n                int256 amountOutFromPool = amounts[1] * -1;\n                if (amountOutFromPool <= 0) {\n                    break;\n                }\n                makerTokenAmounts[i] = uint256(amountOutFromPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Balancer V2.\n    /// @param poolInfo Struct with pool related data\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBalancerV2(\n        BalancerV2PoolInfo memory poolInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IBalancerV2Vault vault = IBalancerV2Vault(poolInfo.vault);\n        IAsset[] memory swapAssets = new IAsset[](2);\n        swapAssets[0] = IAsset(takerToken);\n        swapAssets[1] = IAsset(makerToken);\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        IBalancerV2Vault.FundManagement memory swapFunds =\n            _createSwapFunds();\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n                _createSwapSteps(poolInfo, makerTokenAmounts[i]);\n\n            try\n                // For buys we specify the makerToken which is what taker will receive from the trade\n                vault.queryBatchSwap(IBalancerV2Vault.SwapKind.GIVEN_OUT, swapSteps, swapAssets, swapFunds)\n            returns (int256[] memory amounts) {\n                int256 amountIntoPool = amounts[0];\n                if (amountIntoPool <= 0) {\n                    break;\n                }\n                takerTokenAmounts[i] = uint256(amountIntoPool);\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _createSwapSteps(\n        BalancerV2PoolInfo memory poolInfo,\n        uint256 amount\n    ) private pure returns (IBalancerV2Vault.BatchSwapStep[] memory) {\n        IBalancerV2Vault.BatchSwapStep[] memory swapSteps =\n            new IBalancerV2Vault.BatchSwapStep[](1);\n        swapSteps[0] = IBalancerV2Vault.BatchSwapStep({\n            poolId: poolInfo.poolId,\n            assetInIndex: 0,\n            assetOutIndex: 1,\n            amount: amount,\n            userData: \"\"\n        });\n\n        return swapSteps;\n    }\n\n    function _createSwapFunds()\n        private\n        view\n        returns (IBalancerV2Vault.FundManagement memory)\n    {\n        return\n            IBalancerV2Vault.FundManagement({\n                sender: address(this),\n                fromInternalBalance: false,\n                recipient: payable(address(this)),\n                toInternalBalance: false\n            });\n    }\n}\n",
        "./SamplerUtils.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol\";\n\n\ncontract SamplerUtils {\n\n    /// @dev Overridable way to get token decimals.\n    /// @param tokenAddress Address of the token.\n    /// @return decimals The decimal places for the token.\n    function _getTokenDecimals(address tokenAddress)\n        virtual\n        internal\n        view\n        returns (uint8 decimals)\n    {\n        return LibERC20TokenV06.compatDecimals(IERC20TokenV06(tokenAddress));\n    }\n\n    function _toSingleValueArray(uint256 v)\n        internal\n        pure\n        returns (uint256[] memory arr)\n    {\n        arr = new uint256[](1);\n        arr[0] = v;\n    }\n\n    /// @dev Assert that the tokens in a trade pair are valid.\n    /// @param makerToken Address of the maker token.\n    /// @param takerToken Address of the taker token.\n    function _assertValidPair(address makerToken, address takerToken)\n        internal\n        pure\n    {\n        require(makerToken != takerToken, \"ERC20BridgeSampler/INVALID_TOKEN_PAIR\");\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/LibERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"./IERC20TokenV06.sol\";\n\n\nlibrary LibERC20TokenV06 {\n    bytes constant private DECIMALS_CALL_DATA = hex\"313ce567\";\n\n    /// @dev Calls `IERC20TokenV06(token).approve()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param allowance The allowance to set.\n    function compatApprove(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 allowance\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            allowance\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).approve()` and sets the allowance to the\n    ///      maximum if the current approval is not already >= an amount.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param spender The address that receives an allowance.\n    /// @param amount The minimum allowance needed.\n    function approveIfBelow(\n        IERC20TokenV06 token,\n        address spender,\n        uint256 amount\n    )\n        internal\n    {\n        if (token.allowance(address(this), spender) < amount) {\n            compatApprove(token, spender, uint256(-1));\n        }\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transfer()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransfer(\n        IERC20TokenV06 token,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transfer.selector,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Calls `IERC20TokenV06(token).transferFrom()`.\n    ///      Reverts if the result fails `isSuccessfulResult()` or the call reverts.\n    /// @param token The address of the token contract.\n    /// @param from The owner of the tokens.\n    /// @param to The address that receives the tokens\n    /// @param amount Number of tokens to transfer.\n    function compatTransferFrom(\n        IERC20TokenV06 token,\n        address from,\n        address to,\n        uint256 amount\n    )\n        internal\n    {\n        bytes memory callData = abi.encodeWithSelector(\n            token.transferFrom.selector,\n            from,\n            to,\n            amount\n        );\n        _callWithOptionalBooleanResult(address(token), callData);\n    }\n\n    /// @dev Retrieves the number of decimals for a token.\n    ///      Returns `18` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @return tokenDecimals The number of decimals places for the token.\n    function compatDecimals(IERC20TokenV06 token)\n        internal\n        view\n        returns (uint8 tokenDecimals)\n    {\n        tokenDecimals = 18;\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(DECIMALS_CALL_DATA);\n        if (didSucceed && resultData.length >= 32) {\n            tokenDecimals = uint8(LibBytesV06.readUint256(resultData, 0));\n        }\n    }\n\n    /// @dev Retrieves the allowance for a token, owner, and spender.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @param spender The address the spender.\n    /// @return allowance_ The allowance for a token, owner, and spender.\n    function compatAllowance(IERC20TokenV06 token, address owner, address spender)\n        internal\n        view\n        returns (uint256 allowance_)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.allowance.selector,\n                owner,\n                spender\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            allowance_ = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Retrieves the balance for a token owner.\n    ///      Returns `0` if the call reverts.\n    /// @param token The address of the token contract.\n    /// @param owner The owner of the tokens.\n    /// @return balance The token balance of an owner.\n    function compatBalanceOf(IERC20TokenV06 token, address owner)\n        internal\n        view\n        returns (uint256 balance)\n    {\n        (bool didSucceed, bytes memory resultData) = address(token).staticcall(\n            abi.encodeWithSelector(\n                token.balanceOf.selector,\n                owner\n            )\n        );\n        if (didSucceed && resultData.length >= 32) {\n            balance = LibBytesV06.readUint256(resultData, 0);\n        }\n    }\n\n    /// @dev Check if the data returned by a non-static call to an ERC20 token\n    ///      is a successful result. Supported functions are `transfer()`,\n    ///      `transferFrom()`, and `approve()`.\n    /// @param resultData The raw data returned by a non-static call to the ERC20 token.\n    /// @return isSuccessful Whether the result data indicates success.\n    function isSuccessfulResult(bytes memory resultData)\n        internal\n        pure\n        returns (bool isSuccessful)\n    {\n        if (resultData.length == 0) {\n            return true;\n        }\n        if (resultData.length >= 32) {\n            uint256 result = LibBytesV06.readUint256(resultData, 0);\n            if (result == 1) {\n                return true;\n            }\n        }\n    }\n\n    /// @dev Executes a call on address `target` with calldata `callData`\n    ///      and asserts that either nothing was returned or a single boolean\n    ///      was returned equal to `true`.\n    /// @param target The call target.\n    /// @param callData The abi-encoded call data.\n    function _callWithOptionalBooleanResult(\n        address target,\n        bytes memory callData\n    )\n        private\n    {\n        (bool didSucceed, bytes memory resultData) = target.call(callData);\n        if (didSucceed && isSuccessfulResult(resultData)) {\n            return;\n        }\n        LibRichErrorsV06.rrevert(resultData);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibRichErrorsV06 {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR = 0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(string memory message)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibBytesRichErrorsV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\n\n\nlibrary LibBytesV06 {\n\n    using LibBytesV06 for bytes;\n\n    /// @dev Gets the memory address for a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of byte array. This\n    ///         points to the header of the byte array which contains\n    ///         the length.\n    function rawAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := input\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Gets the memory address for the contents of a byte array.\n    /// @param input Byte array to lookup.\n    /// @return memoryAddress Memory address of the contents of the byte array.\n    function contentAddress(bytes memory input)\n        internal\n        pure\n        returns (uint256 memoryAddress)\n    {\n        assembly {\n            memoryAddress := add(input, 32)\n        }\n        return memoryAddress;\n    }\n\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\n    /// @param dest memory address to copy bytes to.\n    /// @param source memory address to copy bytes from.\n    /// @param length number of bytes to copy.\n    function memCopy(\n        uint256 dest,\n        uint256 source,\n        uint256 length\n    )\n        internal\n        pure\n    {\n        if (length < 32) {\n            // Handle a partial word by reading destination and masking\n            // off the bits we are interested in.\n            // This correctly handles overlap, zero lengths and source == dest\n            assembly {\n                let mask := sub(exp(256, sub(32, length)), 1)\n                let s := and(mload(source), not(mask))\n                let d := and(mload(dest), mask)\n                mstore(dest, or(s, d))\n            }\n        } else {\n            // Skip the O(length) loop when source == dest.\n            if (source == dest) {\n                return;\n            }\n\n            // For large copies we copy whole words at a time. The final\n            // word is aligned to the end of the range (instead of after the\n            // previous) to handle partial words. So a copy will look like this:\n            //\n            //  ####\n            //      ####\n            //          ####\n            //            ####\n            //\n            // We handle overlap in the source and destination range by\n            // changing the copying direction. This prevents us from\n            // overwriting parts of source that we still need to copy.\n            //\n            // This correctly handles source == dest\n            //\n            if (source > dest) {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because it\n                    // is easier to compare with in the loop, and these\n                    // are also the addresses we need for copying the\n                    // last bytes.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the last 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the last bytes in\n                    // source already due to overlap.\n                    let last := mload(sEnd)\n\n                    // Copy whole words front to back\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} lt(source, sEnd) {} {\n                        mstore(dest, mload(source))\n                        source := add(source, 32)\n                        dest := add(dest, 32)\n                    }\n\n                    // Write the last 32 bytes\n                    mstore(dEnd, last)\n                }\n            } else {\n                assembly {\n                    // We subtract 32 from `sEnd` and `dEnd` because those\n                    // are the starting points when copying a word at the end.\n                    length := sub(length, 32)\n                    let sEnd := add(source, length)\n                    let dEnd := add(dest, length)\n\n                    // Remember the first 32 bytes of source\n                    // This needs to be done here and not after the loop\n                    // because we may have overwritten the first bytes in\n                    // source already due to overlap.\n                    let first := mload(source)\n\n                    // Copy whole words back to front\n                    // We use a signed comparisson here to allow dEnd to become\n                    // negative (happens when source and dest < 32). Valid\n                    // addresses in local memory will never be larger than\n                    // 2**255, so they can be safely re-interpreted as signed.\n                    // Note: the first check is always true,\n                    // this could have been a do-while loop.\n                    // solhint-disable-next-line no-empty-blocks\n                    for {} slt(dest, dEnd) {} {\n                        mstore(dEnd, mload(sEnd))\n                        sEnd := sub(sEnd, 32)\n                        dEnd := sub(dEnd, 32)\n                    }\n\n                    // Write the first 32 bytes\n                    mstore(dest, first)\n                }\n            }\n        }\n    }\n\n    /// @dev Returns a slices from a byte array.\n    /// @param b The byte array to take a slice from.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function slice(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure and copy contents\n        result = new bytes(to - from);\n        memCopy(\n            result.contentAddress(),\n            b.contentAddress() + from,\n            result.length\n        );\n        return result;\n    }\n\n    /// @dev Returns a slice from a byte array without preserving the input.\n    ///      When `from == 0`, the original array will match the slice.\n    ///      In other cases its state will be corrupted.\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\n    /// @param from The starting index for the slice (inclusive).\n    /// @param to The final index for the slice (exclusive).\n    /// @return result The slice containing bytes at indices [from, to)\n    function sliceDestructive(\n        bytes memory b,\n        uint256 from,\n        uint256 to\n    )\n        internal\n        pure\n        returns (bytes memory result)\n    {\n        // Ensure that the from and to positions are valid positions for a slice within\n        // the byte array that is being used.\n        if (from > to) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\n                from,\n                to\n            ));\n        }\n        if (to > b.length) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\n                to,\n                b.length\n            ));\n        }\n\n        // Create a new bytes structure around [from, to) in-place.\n        assembly {\n            result := add(b, from)\n            mstore(result, sub(to, from))\n        }\n        return result;\n    }\n\n    /// @dev Pops the last byte off of a byte array by modifying its length.\n    /// @param b Byte array that will be modified.\n    /// @return result The byte that was popped off.\n    function popLastByte(bytes memory b)\n        internal\n        pure\n        returns (bytes1 result)\n    {\n        if (b.length == 0) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\n                b.length,\n                0\n            ));\n        }\n\n        // Store last byte.\n        result = b[b.length - 1];\n\n        assembly {\n            // Decrement length of byte array.\n            let newLen := sub(mload(b), 1)\n            mstore(b, newLen)\n        }\n        return result;\n    }\n\n    /// @dev Tests equality of two byte arrays.\n    /// @param lhs First byte array to compare.\n    /// @param rhs Second byte array to compare.\n    /// @return equal True if arrays are the same. False otherwise.\n    function equals(\n        bytes memory lhs,\n        bytes memory rhs\n    )\n        internal\n        pure\n        returns (bool equal)\n    {\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\n        // We early exit on unequal lengths, but keccak would also correctly\n        // handle this.\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\n    }\n\n    /// @dev Reads an address from a position in a byte array.\n    /// @param b Byte array containing an address.\n    /// @param index Index in byte array of address.\n    /// @return result address from byte array.\n    function readAddress(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (address result)\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Read address from array memory\n        assembly {\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 20-byte mask to obtain address\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n        }\n        return result;\n    }\n\n    /// @dev Writes an address into a specific position in a byte array.\n    /// @param b Byte array to insert address into.\n    /// @param index Index in byte array of address.\n    /// @param input Address to put into byte array.\n    function writeAddress(\n        bytes memory b,\n        uint256 index,\n        address input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 20) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\n                b.length,\n                index + 20 // 20 is length of address\n            ));\n        }\n\n        // Add offset to index:\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\n        index += 20;\n\n        // Store address into array memory\n        assembly {\n            // The address occupies 20 bytes and mstore stores 32 bytes.\n            // First fetch the 32-byte word where we'll be storing the address, then\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\n\n            // 1. Add index to address of bytes array\n            // 2. Load 32-byte word from memory\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\n            let neighbors := and(\n                mload(add(b, index)),\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n            )\n\n            // Make sure input address is clean.\n            // (Solidity does not guarantee this)\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n\n            // Store the neighbors and address into memory\n            mstore(add(b, index), xor(input, neighbors))\n        }\n    }\n\n    /// @dev Reads a bytes32 value from a position in a byte array.\n    /// @param b Byte array containing a bytes32 value.\n    /// @param index Index in byte array of bytes32 value.\n    /// @return result bytes32 value from byte array.\n    function readBytes32(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes32 result)\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            result := mload(add(b, index))\n        }\n        return result;\n    }\n\n    /// @dev Writes a bytes32 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input bytes32 to put into byte array.\n    function writeBytes32(\n        bytes memory b,\n        uint256 index,\n        bytes32 input\n    )\n        internal\n        pure\n    {\n        if (b.length < index + 32) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\n                b.length,\n                index + 32\n            ));\n        }\n\n        // Arrays are prefixed by a 256 bit length parameter\n        index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(b, index), input)\n        }\n    }\n\n    /// @dev Reads a uint256 value from a position in a byte array.\n    /// @param b Byte array containing a uint256 value.\n    /// @param index Index in byte array of uint256 value.\n    /// @return result uint256 value from byte array.\n    function readUint256(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (uint256 result)\n    {\n        result = uint256(readBytes32(b, index));\n        return result;\n    }\n\n    /// @dev Writes a uint256 into a specific position in a byte array.\n    /// @param b Byte array to insert <input> into.\n    /// @param index Index in byte array of <input>.\n    /// @param input uint256 to put into byte array.\n    function writeUint256(\n        bytes memory b,\n        uint256 index,\n        uint256 input\n    )\n        internal\n        pure\n    {\n        writeBytes32(b, index, bytes32(input));\n    }\n\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\n    /// @param b Byte array containing a bytes4 value.\n    /// @param index Index in byte array of bytes4 value.\n    /// @return result bytes4 value from byte array.\n    function readBytes4(\n        bytes memory b,\n        uint256 index\n    )\n        internal\n        pure\n        returns (bytes4 result)\n    {\n        if (b.length < index + 4) {\n            LibRichErrorsV06.rrevert(LibBytesRichErrorsV06.InvalidByteOperationError(\n                LibBytesRichErrorsV06.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\n                b.length,\n                index + 4\n            ));\n        }\n\n        // Arrays are prefixed by a 32 byte length field\n        index += 32;\n\n        // Read the bytes4 from array memory\n        assembly {\n            result := mload(add(b, index))\n            // Solidity does not require us to clean the trailing bytes.\n            // We do it anyway\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n        }\n        return result;\n    }\n\n    /// @dev Writes a new length to a byte array.\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\n    /// @param b Bytes array to write new length to.\n    /// @param length New length of byte array.\n    function writeLength(bytes memory b, uint256 length)\n        internal\n        pure\n    {\n        assembly {\n            mstore(b, length)\n        }\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibBytesRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibBytesRichErrorsV06 {\n\n    enum InvalidByteOperationErrorCodes {\n        FromLessThanOrEqualsToRequired,\n        ToLessThanOrEqualsLengthRequired,\n        LengthGreaterThanZeroRequired,\n        LengthGreaterThanOrEqualsFourRequired,\n        LengthGreaterThanOrEqualsTwentyRequired,\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\n    }\n\n    // bytes4(keccak256(\"InvalidByteOperationError(uint8,uint256,uint256)\"))\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\n        0x28006595;\n\n    // solhint-disable func-name-mixedcase\n    function InvalidByteOperationError(\n        InvalidByteOperationErrorCodes errorCode,\n        uint256 offset,\n        uint256 required\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\n            errorCode,\n            offset,\n            required\n        );\n    }\n}\n",
        "@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\ninterface IERC20TokenV06 {\n\n    // solhint-disable no-simple-event-func-name\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 value\n    );\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    /// @dev send `value` token to `to` from `msg.sender`\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transfer(address to, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev send `value` token to `to` from `from` on the condition it is approved by `from`\n    /// @param from The address of the sender\n    /// @param to The address of the recipient\n    /// @param value The amount of token to be transferred\n    /// @return True if transfer was successful\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    )\n        external\n        returns (bool);\n\n    /// @dev `msg.sender` approves `spender` to spend `value` tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @param value The amount of wei to be approved for transfer\n    /// @return Always true if the call has enough gas to complete execution\n    function approve(address spender, uint256 value)\n        external\n        returns (bool);\n\n    /// @dev Query total supply of token\n    /// @return Total supply of token\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the balance of `owner`.\n    /// @param owner The address from which the balance will be retrieved\n    /// @return Balance of owner\n    function balanceOf(address owner)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the allowance for `spender` to spend from `owner`.\n    /// @param owner The address of the account owning tokens\n    /// @param spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /// @dev Get the number of decimals this token has.\n    function decimals()\n        external\n        view\n        returns (uint8);\n}\n",
        "./BancorSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IBancor.sol\";\n\ncontract CompilerHack {\n    uint256 private constant HACK = 0;\n}\n\ncontract BancorSampler is CompilerHack {\n\n    /// @dev Base gas limit for Bancor calls.\n    uint256 constant private BANCOR_CALL_GAS = 300e3; // 300k\n\n    struct BancorSamplerOpts {\n        IBancorRegistry registry;\n        address[][] paths;\n    }\n\n    /// @dev Sample sell quotes from Bancor.\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory makerTokenAmounts)\n    {\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path, makerTokenAmounts);\n        }\n        (bancorNetwork, path) = _findBestPath(opts, takerToken, makerToken, takerTokenAmounts);\n        makerTokenAmounts = new uint256[](takerTokenAmounts.length);\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (path, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n        return (bancorNetwork, path, makerTokenAmounts);\n    }\n\n    /// @dev Sample buy quotes from Bancor. Unimplemented\n    /// @param opts BancorSamplerOpts The Bancor registry contract address and paths\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return bancorNetwork the Bancor Network address\n    /// @return path the selected conversion path from bancor\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromBancor(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address bancorNetwork, address[] memory path, uint256[] memory takerTokenAmounts)\n    {\n    }\n\n    function _findBestPath(\n        BancorSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        internal\n        view\n        returns (address bancorNetwork, address[] memory path)\n    {\n        bancorNetwork = opts.registry.getAddress(opts.registry.BANCOR_NETWORK());\n        if (opts.paths.length == 0) {\n            return (bancorNetwork, path);\n        }\n        uint256 maxBoughtAmount = 0;\n        // Find the best path by selling the largest taker amount\n        for (uint256 i = 0; i < opts.paths.length; i++) {\n            if (opts.paths[i].length < 2) {\n                continue;\n            }\n\n            try\n                IBancorNetwork(bancorNetwork)\n                    .rateByPath\n                        {gas: BANCOR_CALL_GAS}\n                        (opts.paths[i], takerTokenAmounts[takerTokenAmounts.length-1])\n                returns (uint256 amount)\n            {\n                if (amount > maxBoughtAmount) {\n                    maxBoughtAmount = amount;\n                    path = opts.paths[i];\n                }\n            } catch {\n                // Swallow failures, leaving all results as zero.\n                continue;\n            }\n        }\n    }\n}\n",
        "./interfaces/IBancor.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IBancor {}\n\ninterface IBancorNetwork {\n  function conversionPath(address _sourceToken, address _targetToken) external view returns (address[] memory);\n  function rateByPath(address[] memory _path, uint256 _amount) external view returns (uint256);\n}\n\ninterface IBancorRegistry {\n    function getAddress(bytes32 _contractName) external view returns (address);\n    function BANCOR_NETWORK() external view returns (bytes32);\n}\n",
        "./CurveSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/ICurve.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract CurveSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from curve sources.\n    struct CurveInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Curve calls. Some Curves have multiple tokens\n    ///      So a reasonable ceil is 150k per token. Biggest Curve has 4 tokens.\n    uint256 constant private CURVE_CALL_GAS = 2000e3; // Was 600k for Curve but SnowSwap is using 1500k+\n\n    /// @dev Sample sell quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Curve.\n    /// @param curveInfo Curve information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromCurve(\n        CurveInfo memory curveInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        if (curveInfo.buyQuoteFunctionSelector == bytes4(0)) {\n            // Buys not supported on this curve, so approximate it.\n            return _sampleApproximateBuys(\n                ApproximateBuyQuoteOpts({\n                    makerTokenData: abi.encode(toTokenIdx, curveInfo),\n                    takerTokenData: abi.encode(fromTokenIdx, curveInfo),\n                    getSellQuoteCallback: _sampleSellForApproximateBuyFromCurve\n                }),\n                makerTokenAmounts\n            );\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                curveInfo.poolAddress.staticcall.gas(CURVE_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        curveInfo.buyQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        makerTokenAmounts[i]\n                    ));\n            uint256 sellAmount = 0;\n            if (didSucceed) {\n                sellAmount = abi.decode(resultData, (uint256));\n            }\n            takerTokenAmounts[i] = sellAmount;\n            // Break early if there are 0 amounts\n            if (takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromCurve(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, CurveInfo memory curveInfo) =\n            abi.decode(takerTokenData, (int128, CurveInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromCurve.selector,\n                curveInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ICurve.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\n// solhint-disable func-name-mixedcase\ninterface ICurve {\n\n    /// @dev Sell `sellAmount` of `fromToken` token and receive `toToken` token.\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    /// @param minBuyAmount The minimum buy amount of the token being bought.\n    function exchange_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount,\n        uint256 minBuyAmount\n    )\n        external;\n\n    /// @dev Get the amount of `toToken` by selling `sellAmount` of `fromToken`\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param sellAmount The amount of token being bought.\n    function get_dy_underlying(\n        int128 i,\n        int128 j,\n        uint256 sellAmount\n    )\n        external\n        returns (uint256 dy);\n\n    /// @dev Get the amount of `fromToken` by buying `buyAmount` of `toToken`\n    ///      This function exists on later versions of Curve (USDC/DAI/USDT)\n    /// @param i The token index being sold.\n    /// @param j The token index being bought.\n    /// @param buyAmount The amount of token being bought.\n    function get_dx_underlying(\n        int128 i,\n        int128 j,\n        uint256 buyAmount\n    )\n        external\n        returns (uint256 dx);\n\n    /// @dev Get the underlying token address from the token index\n    /// @param i The token index.\n    function underlying_coins(\n        int128 i\n    )\n        external\n        returns (address tokenAddress);\n}\n",
        "./ApproximateBuys.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\n\ncontract ApproximateBuys {\n\n    /// @dev Information computing buy quotes for sources that do not have native\n    ///      buy quote support.\n    struct ApproximateBuyQuoteOpts {\n        // Arbitrary maker token data to pass to `getSellQuoteCallback`.\n        bytes makerTokenData;\n        // Arbitrary taker token data to pass to `getSellQuoteCallback`.\n        bytes takerTokenData;\n        // Callback to retrieve a sell quote.\n        function (bytes memory, bytes memory, uint256)\n            internal\n            view\n            returns (uint256) getSellQuoteCallback;\n    }\n\n    uint256 private constant ONE_HUNDED_PERCENT_BPS = 1e4;\n    /// @dev Maximum approximate (positive) error rate when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_TARGET_EPSILON_BPS = 0.0005e4;\n    /// @dev Maximum iterations to perform when approximating a buy quote.\n    uint256 private constant APPROXIMATE_BUY_MAX_ITERATIONS = 5;\n\n    function _sampleApproximateBuys(\n        ApproximateBuyQuoteOpts memory opts,\n        uint256[] memory makerTokenAmounts\n    )\n        internal\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = new uint256[](makerTokenAmounts.length);\n        if (makerTokenAmounts.length == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 sellAmount = opts.getSellQuoteCallback(\n            opts.makerTokenData,\n            opts.takerTokenData,\n            makerTokenAmounts[0]\n        );\n        if (sellAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        uint256 buyAmount = opts.getSellQuoteCallback(\n            opts.takerTokenData,\n            opts.makerTokenData,\n            sellAmount\n        );\n        if (buyAmount == 0) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < makerTokenAmounts.length; i++) {\n            for (uint256 iter = 0; iter < APPROXIMATE_BUY_MAX_ITERATIONS; iter++) {\n                // adjustedSellAmount = previousSellAmount * (target/actual) * JUMP_MULTIPLIER\n                sellAmount = _safeGetPartialAmountCeil(\n                    makerTokenAmounts[i],\n                    buyAmount,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                sellAmount = _safeGetPartialAmountCeil(\n                    (ONE_HUNDED_PERCENT_BPS + APPROXIMATE_BUY_TARGET_EPSILON_BPS),\n                    ONE_HUNDED_PERCENT_BPS,\n                    sellAmount\n                );\n                if (sellAmount == 0) {\n                    break;\n                }\n                uint256 _buyAmount = opts.getSellQuoteCallback(\n                    opts.takerTokenData,\n                    opts.makerTokenData,\n                    sellAmount\n                );\n                if (_buyAmount == 0) {\n                    break;\n                }\n                // We re-use buyAmount next iteration, only assign if it is\n                // non zero\n                buyAmount = _buyAmount;\n                // If we've reached our goal, exit early\n                if (buyAmount >= makerTokenAmounts[i]) {\n                    uint256 eps =\n                        (buyAmount - makerTokenAmounts[i]) * ONE_HUNDED_PERCENT_BPS /\n                        makerTokenAmounts[i];\n                    if (eps <= APPROXIMATE_BUY_TARGET_EPSILON_BPS) {\n                        break;\n                    }\n                }\n            }\n            // We do our best to close in on the requested amount, but we can either over buy or under buy and exit\n            // if we hit a max iteration limit\n            // We scale the sell amount to get the approximate target\n            takerTokenAmounts[i] = _safeGetPartialAmountCeil(\n                makerTokenAmounts[i],\n                buyAmount,\n                sellAmount\n            );\n        }\n    }\n\n    function _safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        view\n        returns (uint256 partialAmount)\n    {\n        if (numerator == 0 || target == 0 || denominator == 0) return 0;\n        uint256 c = numerator * target;\n        if (c / numerator != target) return 0;\n        return (c + (denominator - 1)) / denominator;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./LibSafeMathV06.sol\";\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibMathRichErrorsV06.sol\";\n\n\nlibrary LibMathV06 {\n\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function safeGetPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorFloor(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    ///      Reverts if rounding error is >= 0.1%\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function safeGetPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        if (isRoundingErrorCeil(\n                numerator,\n                denominator,\n                target\n        )) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.RoundingError(\n                numerator,\n                denominator,\n                target\n            ));\n        }\n\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded down.\n    function getPartialAmountFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        partialAmount = numerator.safeMul(target).safeDiv(denominator);\n        return partialAmount;\n    }\n\n    /// @dev Calculates partial value given a numerator and denominator rounded down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to calculate partial of.\n    /// @return partialAmount Partial value of target rounded up.\n    function getPartialAmountCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (uint256 partialAmount)\n    {\n        // safeDiv computes `floor(a / b)`. We use the identity (a, b integer):\n        //       ceil(a / b) = floor((a + b - 1) / b)\n        // To implement `ceil(a / b)` using safeDiv.\n        partialAmount = numerator.safeMul(target)\n            .safeAdd(denominator.safeSub(1))\n            .safeDiv(denominator);\n\n        return partialAmount;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding down.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorFloor(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // The absolute rounding error is the difference between the rounded\n        // value and the ideal value. The relative rounding error is the\n        // absolute rounding error divided by the absolute value of the\n        // ideal value. This is undefined when the ideal value is zero.\n        //\n        // The ideal value is `numerator * target / denominator`.\n        // Let's call `numerator * target % denominator` the remainder.\n        // The absolute error is `remainder / denominator`.\n        //\n        // When the ideal value is zero, we require the absolute error to\n        // be zero. Fortunately, this is always the case. The ideal value is\n        // zero iff `numerator == 0` and/or `target == 0`. In this case the\n        // remainder and absolute error are also zero.\n        if (target == 0 || numerator == 0) {\n            return false;\n        }\n\n        // Otherwise, we want the relative rounding error to be strictly\n        // less than 0.1%.\n        // The relative error is `remainder / (numerator * target)`.\n        // We want the relative error less than 1 / 1000:\n        //        remainder / (numerator * denominator)  <  1 / 1000\n        // or equivalently:\n        //        1000 * remainder  <  numerator * target\n        // so we have a rounding error iff:\n        //        1000 * remainder  >=  numerator * target\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n\n    /// @dev Checks if rounding error >= 0.1% when rounding up.\n    /// @param numerator Numerator.\n    /// @param denominator Denominator.\n    /// @param target Value to multiply with numerator/denominator.\n    /// @return isError Rounding error is present.\n    function isRoundingErrorCeil(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bool isError)\n    {\n        if (denominator == 0) {\n            LibRichErrorsV06.rrevert(LibMathRichErrorsV06.DivisionByZeroError());\n        }\n\n        // See the comments in `isRoundingError`.\n        if (target == 0 || numerator == 0) {\n            // When either is zero, the ideal value and rounded value are zero\n            // and there is no rounding error. (Although the relative error\n            // is undefined.)\n            return false;\n        }\n        // Compute remainder as before\n        uint256 remainder = mulmod(\n            target,\n            numerator,\n            denominator\n        );\n        remainder = denominator.safeSub(remainder) % denominator;\n        isError = remainder.safeMul(1000) >= numerator.safeMul(target);\n        return isError;\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/LibSafeMathV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"./errors/LibRichErrorsV06.sol\";\nimport \"./errors/LibSafeMathRichErrorsV06.sol\";\n\n\nlibrary LibSafeMathV06 {\n\n    function safeMul(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b)\n        internal\n        pure\n        returns (uint256)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeMul128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a == 0) {\n            return 0;\n        }\n        uint128 c = a * b;\n        if (c / a != b) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.MULTIPLICATION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function safeDiv128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b == 0) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.DIVISION_BY_ZERO,\n                a,\n                b\n            ));\n        }\n        uint128 c = a / b;\n        return c;\n    }\n\n    function safeSub128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (b > a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.SUBTRACTION_UNDERFLOW,\n                a,\n                b\n            ));\n        }\n        return a - b;\n    }\n\n    function safeAdd128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        uint128 c = a + b;\n        if (c < a) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256BinOpError(\n                LibSafeMathRichErrorsV06.BinOpErrorCodes.ADDITION_OVERFLOW,\n                a,\n                b\n            ));\n        }\n        return c;\n    }\n\n    function max128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a >= b ? a : b;\n    }\n\n    function min128(uint128 a, uint128 b)\n        internal\n        pure\n        returns (uint128)\n    {\n        return a < b ? a : b;\n    }\n\n    function safeDowncastToUint128(uint256 a)\n        internal\n        pure\n        returns (uint128)\n    {\n        if (a > type(uint128).max) {\n            LibRichErrorsV06.rrevert(LibSafeMathRichErrorsV06.Uint256DowncastError(\n                LibSafeMathRichErrorsV06.DowncastErrorCodes.VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128,\n                a\n            ));\n        }\n        return uint128(a);\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibSafeMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibSafeMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"Uint256BinOpError(uint8,uint256,uint256)\"))\n    bytes4 internal constant UINT256_BINOP_ERROR_SELECTOR =\n        0xe946c1bb;\n\n    // bytes4(keccak256(\"Uint256DowncastError(uint8,uint256)\"))\n    bytes4 internal constant UINT256_DOWNCAST_ERROR_SELECTOR =\n        0xc996af7b;\n\n    enum BinOpErrorCodes {\n        ADDITION_OVERFLOW,\n        MULTIPLICATION_OVERFLOW,\n        SUBTRACTION_UNDERFLOW,\n        DIVISION_BY_ZERO\n    }\n\n    enum DowncastErrorCodes {\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT32,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT64,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT96,\n        VALUE_TOO_LARGE_TO_DOWNCAST_TO_UINT128\n    }\n\n    // solhint-disable func-name-mixedcase\n    function Uint256BinOpError(\n        BinOpErrorCodes errorCode,\n        uint256 a,\n        uint256 b\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_BINOP_ERROR_SELECTOR,\n            errorCode,\n            a,\n            b\n        );\n    }\n\n    function Uint256DowncastError(\n        DowncastErrorCodes errorCode,\n        uint256 a\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            UINT256_DOWNCAST_ERROR_SELECTOR,\n            errorCode,\n            a\n        );\n    }\n}\n",
        "@0x/contracts-utils/contracts/src/v06/errors/LibMathRichErrorsV06.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\n\nlibrary LibMathRichErrorsV06 {\n\n    // bytes4(keccak256(\"DivisionByZeroError()\"))\n    bytes internal constant DIVISION_BY_ZERO_ERROR =\n        hex\"a791837c\";\n\n    // bytes4(keccak256(\"RoundingError(uint256,uint256,uint256)\"))\n    bytes4 internal constant ROUNDING_ERROR_SELECTOR =\n        0x339f3de2;\n\n    // solhint-disable func-name-mixedcase\n    function DivisionByZeroError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return DIVISION_BY_ZERO_ERROR;\n    }\n\n    function RoundingError(\n        uint256 numerator,\n        uint256 denominator,\n        uint256 target\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            ROUNDING_ERROR_SELECTOR,\n            numerator,\n            denominator,\n            target\n        );\n    }\n}\n",
        "./DODOSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IDODOZoo {\n    function getDODO(address baseToken, address quoteToken) external view returns (address);\n}\n\ninterface IDODOHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDODO {\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n    function _TRADE_ALLOWED_() external view returns (bool);\n}\n\ncontract DODOSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO calls.\n    uint256 constant private DODO_CALL_GAS = 300e3; // 300k\n    struct DODOSamplerOpts {\n        address registry;\n        address helper;\n    }\n\n    /// @dev Sample sell quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, makerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODO(\n                abi.encode(takerToken, pool, baseToken, opts.helper), // taker token data\n                abi.encode(makerToken, pool, baseToken, opts.helper), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param opts DODOSamplerOpts DODO Registry and helper addresses\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODO(\n        DODOSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        // Pool is BASE/QUOTE\n        // Look up the pool from the taker/maker combination\n        pool = IDODOZoo(opts.registry).getDODO(takerToken, makerToken);\n        address baseToken;\n        // If pool exists we have the correct order of Base/Quote\n        if (pool != address(0)) {\n            baseToken = takerToken;\n            sellBase = true;\n        } else {\n            // Look up the pool from the maker/taker combination\n            pool = IDODOZoo(opts.registry).getDODO(makerToken, takerToken);\n            // No pool either direction\n            if (address(pool) == address(0)) {\n                return (sellBase, pool, takerTokenAmounts);\n            }\n            baseToken = makerToken;\n            sellBase = false;\n        }\n\n        // DODO Pool has been disabled\n        if (!IDODO(pool)._TRADE_ALLOWED_()) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, baseToken, opts.helper),\n                takerTokenData: abi.encode(takerToken, pool, baseToken, opts.helper),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODO\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODO(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, address baseToken, address helper) = abi.decode(\n            takerTokenData,\n            (address, address, address, address)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        if (takerToken == baseToken) {\n            // If base token then use the original query on the pool\n            try\n                IDODO(pool).querySellBaseToken\n                    {gas: DODO_CALL_GAS}\n                    (sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        } else {\n            // If quote token then use helper, this is less accurate\n            try\n                IDODOHelper(helper).querySellQuoteToken\n                    {gas: DODO_CALL_GAS}\n                    (pool, sellAmount)\n                returns (uint256 amount)\n            {\n                return amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                return 0;\n            }\n        }\n    }\n\n}\n",
        "./DODOV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\ninterface IDODOV2Registry {\n    function getDODOPool(address baseToken, address quoteToken)\n        external\n        view\n        returns (address[] memory machines);\n}\n\ninterface IDODOV2Pool {\n    function querySellBase(address trader, uint256 payBaseAmount)\n        external\n        view\n        returns (uint256 receiveQuoteAmount, uint256 mtFee);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount)\n        external\n        view\n        returns (uint256 receiveBaseAmount, uint256 mtFee);\n}\n\ncontract DODOV2Sampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    /// @dev Gas limit for DODO V2 calls.\n    uint256 constant private DODO_V2_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from DODO V2.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, makerTokenAmounts);\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _sampleSellForApproximateBuyFromDODOV2(\n                abi.encode(takerToken, pool, sellBase), // taker token data\n                abi.encode(makerToken, pool, sellBase), // maker token data\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from DODO.\n    /// @param registry Address of the registry to look up.\n    /// @param offset offset index for the pool in the registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return sellBase whether the bridge needs to sell the base token\n    /// @return pool the DODO pool address\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromDODOV2(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bool sellBase, address pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        (pool, sellBase) = _getNextDODOV2Pool(registry, offset, takerToken, makerToken);\n        if (pool == address(0)) {\n            return (sellBase, pool, takerTokenAmounts);\n        }\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool, !sellBase),\n                takerTokenData: abi.encode(takerToken, pool, sellBase),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromDODOV2\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromDODOV2(\n        bytes memory takerTokenData,\n        bytes memory /* makerTokenData */,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address takerToken, address pool, bool sellBase) = abi.decode(\n            takerTokenData,\n            (address, address, bool)\n        );\n\n        // We will get called to sell both the taker token and also to sell the maker token\n        // since we use approximate buy for sell and buy functions\n        if (sellBase) {\n            try\n                IDODOV2Pool(pool).querySellBase\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        } else {\n            try\n                IDODOV2Pool(pool).querySellQuote\n                    { gas: DODO_V2_CALL_GAS }\n                    (address(0), sellAmount)\n                returns (uint256 amount, uint256)\n            {\n                return amount;\n            } catch {\n                return 0;\n            }\n        }\n    }\n\n    function _getNextDODOV2Pool(\n        address registry,\n        uint256 offset,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (address machine, bool sellBase)\n    {\n        // Query in base -> quote direction, if a pool is found then we are selling the base\n        address[] memory machines = IDODOV2Registry(registry).getDODOPool(takerToken, makerToken);\n        sellBase = true;\n        if (machines.length == 0) {\n            // Query in quote -> base direction, if a pool is found then we are selling the quote\n            machines = IDODOV2Registry(registry).getDODOPool(makerToken, takerToken);\n            sellBase = false;\n        }\n\n        if (offset >= machines.length) {\n            return (address(0), false);\n        }\n\n        machine = machines[offset];\n    }\n\n}\n",
        "./Eth2DaiSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IEth2Dai.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract Eth2DaiSampler is\n    SamplerUtils\n{\n    /// @dev Base gas limit for Eth2Dai calls.\n    uint256 constant private ETH2DAI_CALL_GAS = 1000e3; // 1m\n\n    /// @dev Sample sell quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getBuyAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (makerToken, takerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Eth2Dai/Oasis.\n    /// @param router Address of the Eth2Dai/Oasis contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromEth2Dai(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IEth2Dai(router).getPayAmount\n                    {gas: ETH2DAI_CALL_GAS}\n                    (takerToken, makerToken, makerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                takerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IEth2Dai.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IEth2Dai {\n\n    function getBuyAmount(\n        address buyToken,\n        address payToken,\n        uint256 payAmount\n    )\n        external\n        view\n        returns (uint256 buyAmount);\n\n    function getPayAmount(\n        address payToken,\n        address buyToken,\n        uint256 buyAmount\n    )\n        external\n        view\n        returns (uint256 payAmount);\n}\n",
        "./KyberSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IKyberNetwork.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract KyberSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Kyber calls.\n    uint256 constant private KYBER_CALL_GAS = 500e3; // 500k\n    /// @dev Kyber ETH pseudo-address.\n    address constant internal KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    struct KyberSamplerOpts {\n        uint256 reserveOffset;\n        address hintHandler;\n        address networkProxy;\n        address weth;\n        bytes hint;\n    }\n\n    /// @dev Sample sell quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return makerTokenAmounts Maker amounts bought at each taker token amount.\n    function sampleSellsFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, makerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 value = this.sampleSellFromKyberNetwork(\n                opts,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = value;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Kyber.\n    /// @param opts KyberSamplerOpts The nth reserve\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return reserveId The id of the reserve found at reserveOffset\n    /// @return hint The hint for the selected reserve\n    /// @return takerTokenAmounts Taker amounts sold at each maker token amount.\n    function sampleBuysFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (bytes32 reserveId, bytes memory hint, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        reserveId = _getNextReserveId(opts, takerToken, makerToken);\n        if (reserveId == 0x0) {\n            return (reserveId, hint, takerTokenAmounts);\n        }\n        opts.hint = this.encodeKyberHint(opts, reserveId, takerToken, makerToken);\n        hint = opts.hint;\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, opts),\n                takerTokenData: abi.encode(takerToken, opts),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromKyber\n            }),\n            makerTokenAmounts\n        );\n        return (reserveId, hint, takerTokenAmounts);\n    }\n\n    function encodeKyberHint(\n        KyberSamplerOpts memory opts,\n        bytes32 reserveId,\n        address takerToken,\n        address makerToken\n    )\n        public\n        view\n        returns (bytes memory hint)\n    {\n        // Build a hint selecting the single reserve\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n\n        // All other reserves should be ignored with this hint\n        bytes32[] memory selectedReserves = new bytes32[](1);\n        selectedReserves[0] = reserveId;\n        uint256[] memory emptySplits = new uint256[](0);\n\n        if (takerToken == opts.weth) {\n            // ETH to Token\n            try\n                kyberHint.buildEthToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        } else if (makerToken == opts.weth) {\n            // Token to ETH\n            try\n                kyberHint.buildTokenToEthHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n\n        } else {\n            // Token to Token\n            // We use the same reserve both ways\n            try\n                kyberHint.buildTokenToTokenHint\n                    {gas: KYBER_CALL_GAS}\n                    (\n                        takerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits,\n                        makerToken,\n                        IKyberHintHandler.TradeType.MaskIn,\n                        selectedReserves,\n                        emptySplits\n                    )\n                returns (bytes memory result)\n            {\n                return result;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n            }\n        }\n    }\n\n    function _sampleSellForApproximateBuyFromKyber(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256)\n    {\n        (address makerToken, KyberSamplerOpts memory opts) =\n            abi.decode(makerTokenData, (address, KyberSamplerOpts));\n        (address takerToken, ) =\n            abi.decode(takerTokenData, (address, KyberSamplerOpts));\n        try\n            this.sampleSellFromKyberNetwork\n                (opts, takerToken, makerToken, sellAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function sampleSellFromKyberNetwork(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256 makerTokenAmount)\n    {\n        // If there is no hint do not continue\n        if (opts.hint.length == 0) {\n            return 0;\n        }\n\n        try\n            IKyberNetworkProxy(opts.networkProxy).getExpectedRateAfterFee\n                {gas: KYBER_CALL_GAS}\n                (\n                    takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n                    makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n                    takerTokenAmount,\n                    0, // fee\n                    opts.hint\n                )\n            returns (uint256 rate)\n        {\n            uint256 makerTokenDecimals = _getTokenDecimals(makerToken);\n            uint256 takerTokenDecimals = _getTokenDecimals(takerToken);\n            makerTokenAmount =\n                rate *\n                takerTokenAmount *\n                10 ** makerTokenDecimals /\n                10 ** takerTokenDecimals /\n                10 ** 18;\n            return makerTokenAmount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    function _getNextReserveId(\n        KyberSamplerOpts memory opts,\n        address takerToken,\n        address makerToken\n    )\n        internal\n        view\n        returns (bytes32 reserveId)\n    {\n        // Fetch the registered reserves for this pair\n        IKyberHintHandler kyberHint = IKyberHintHandler(opts.hintHandler);\n        (bytes32[] memory reserveIds, ,) = kyberHint.getTradingReserves(\n            takerToken == opts.weth ? KYBER_ETH_ADDRESS : takerToken,\n            makerToken == opts.weth ? KYBER_ETH_ADDRESS : makerToken,\n            true,\n            new bytes(0) // empty hint\n        );\n\n        if (opts.reserveOffset >= reserveIds.length) {\n            return 0x0;\n        }\n\n        reserveId = reserveIds[opts.reserveOffset];\n        // Ignore Kyber Bridged Reserves (0xbb)\n        if (uint256(reserveId >> 248) == 0xbb) {\n            return 0x0;\n        }\n\n        return reserveId;\n    }\n}\n",
        "./interfaces/IKyberNetwork.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n// Keepin everything together\ninterface IKyberNetwork {\n\n\n}\n\n\ninterface IKyberNetworkProxy {\n\n    function getExpectedRateAfterFee(\n        address src,\n        address dest,\n        uint256 srcQty,\n        uint256 platformFeeBps,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (uint256 expectedRate);\n}\n\ninterface IKyberHintHandler {\n\n    enum TradeType {BestOfAll, MaskIn, MaskOut, Split}\n\n    enum ProcessWithRate {NotRequired, Required}\n\n    function getTradingReserves(\n        address tokenSrc,\n        address tokenDest,\n        bool isTokenToToken,\n        bytes calldata hint\n    )\n        external\n        view\n        returns (\n            bytes32[] memory reserveIds,\n            uint256[] memory splitValuesBps,\n            ProcessWithRate processWithRate\n        );\n\n    function buildTokenToEthHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildEthToTokenHint(\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n\n    function buildTokenToTokenHint(\n        address tokenSrc,\n        TradeType tokenToEthType,\n        bytes32[] calldata tokenToEthReserveIds,\n        uint256[] calldata tokenToEthSplits,\n        address tokenDest,\n        TradeType ethToTokenType,\n        bytes32[] calldata ethToTokenReserveIds,\n        uint256[] calldata ethToTokenSplits\n    )\n        external\n        view\n        returns (bytes memory hint);\n}\n",
        "./KyberDmmSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\ninterface IKyberDmmPool {\n\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n}\n\ninterface IKyberDmmFactory {\n\n    function getPools(address token0, address token1)\n        external\n        view\n        returns (address[] memory _tokenPools);\n}\n\ninterface IKyberDmmRouter {\n\n    function factory() external view returns (address);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata pools, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n\n\ncontract KyberDmmSampler\n{\n    /// @dev Gas limit for KyberDmm calls.\n    uint256 constant private KYBER_DMM_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, makerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsOut\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (takerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from KyberDmm.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return pools The pool addresses involved in the multi path trade\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromKyberDmm(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (address[] memory pools, uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        pools = _getKyberDmmPools(router, path);\n        if (pools.length == 0) {\n            return (pools, takerTokenAmounts);\n        }\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IKyberDmmRouter(router).getAmountsIn\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (makerTokenAmounts[i], pools, path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    function _getKyberDmmPools(\n        address router,\n        address[] memory path\n    )\n        private\n        view\n        returns (address[] memory pools)\n    {\n        IKyberDmmFactory factory = IKyberDmmFactory(IKyberDmmRouter(router).factory());\n        pools = new address[](path.length - 1);\n        for (uint256 i = 0; i < pools.length; i++) {\n            // find the best pool\n            address[] memory allPools;\n            try\n                factory.getPools\n                    {gas: KYBER_DMM_CALL_GAS}\n                    (path[i], path[i + 1])\n                returns (address[] memory allPools)\n            {\n                uint256 maxSupply = 0;\n                require(allPools.length >= 1, \"KyberDMMSampler/NO_POOLS_FOUND\");\n                for (uint256 j = 0; j < allPools.length; j++) {\n                    uint256 totalSupply = IKyberDmmPool(allPools[j]).totalSupply();\n                    if (totalSupply > maxSupply) {\n                        maxSupply = totalSupply;\n                        pools[i] = allPools[j];\n                    }\n                }\n            } catch (bytes memory) {\n                return new address[](0);\n            }\n        }\n    }\n}\n",
        "./LidoSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\n\ncontract LidoSampler is SamplerUtils {\n    struct LidoInfo {\n        address stEthToken;\n        address wethToken;\n    }\n\n    /// @dev Sample sell quotes from Lido\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not selling WETH for stETH\n            uint256 numSamples = takerTokenAmounts.length;\n            uint256[] memory makerTokenAmounts = new uint256[](numSamples);\n            return makerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return takerTokenAmounts;\n    }\n\n    /// @dev Sample buy quotes from Lido.\n    /// @param lidoInfo Info regarding a specific Lido deployment\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLido(\n        LidoInfo memory lidoInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        pure\n        returns (uint256[] memory)\n    {\n        _assertValidPair(makerToken, takerToken);\n\n        if (takerToken != lidoInfo.wethToken || makerToken != address(lidoInfo.stEthToken)) {\n            // Return 0 values if not buying stETH for WETH\n            uint256 numSamples = makerTokenAmounts.length;\n            uint256[] memory takerTokenAmounts = new uint256[](numSamples);\n            return takerTokenAmounts;\n        }\n\n        // Minting stETH is always 1:1 therefore we can just return the same amounts back\n        return makerTokenAmounts;\n    }\n\n}\n",
        "./LiquidityProviderSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\nimport \"@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract LiquidityProviderSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for liquidity provider calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                ILiquidityProvider(providerAddress).getSellQuote\n                    {gas: DEFAULT_CALL_GAS}\n                    (\n                        IERC20TokenV06(takerToken),\n                        IERC20TokenV06(makerToken),\n                        takerTokenAmounts[i]\n                    )\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from an arbitrary on-chain liquidity provider.\n    /// @param providerAddress Address of the liquidity provider.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromLiquidityProvider(\n        address providerAddress,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, providerAddress),\n                takerTokenData: abi.encode(takerToken, providerAddress),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromLiquidityProvider\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromLiquidityProvider(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address providerAddress) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromLiquidityProvider\n                {gas: DEFAULT_CALL_GAS}\n                (providerAddress, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "@0x/contracts-zero-ex/contracts/src/vendor/ILiquidityProvider.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6.5;\n\nimport \"@0x/contracts-erc20/contracts/src/v06/IERC20TokenV06.sol\";\n\n\ninterface ILiquidityProvider {\n\n    /// @dev An optional event an LP can emit for each fill against a source.\n    /// @param inputToken The input token.\n    /// @param outputToken The output token.\n    /// @param inputTokenAmount How much input token was sold.\n    /// @param outputTokenAmount How much output token was bought.\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sourceId A bytes32 encoded ascii source ID. E.g., `bytes32('Curve')`/\n    /// @param sourceAddress An optional address associated with the source (e.g, a curve pool).\n    /// @param sender The caller of the LP.\n    /// @param recipient The recipient of the output tokens.\n    event LiquidityProviderFill(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 inputTokenAmount,\n        uint256 outputTokenAmount,\n        bytes32 sourceId,\n        address sourceAddress,\n        address sender,\n        address recipient\n    );\n\n    /// @dev Trades `inputToken` for `outputToken`. The amount of `inputToken`\n    ///      to sell must be transferred to the contract prior to calling this\n    ///      function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellTokenForToken(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades ETH for token. ETH must either be attached to this function\n    ///      call or sent to the contract prior to calling this function to\n    ///      trigger the trade.\n    /// @param outputToken The token being bought.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of `outputToken` to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of `outputToken` bought.\n    function sellEthForToken(\n        IERC20TokenV06 outputToken,\n        address recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        payable\n        returns (uint256 boughtAmount);\n\n    /// @dev Trades token for ETH. The token must be sent to the contract prior\n    ///      to calling this function to trigger the trade.\n    /// @param inputToken The token being sold.\n    /// @param recipient The recipient of the bought tokens.\n    /// @param minBuyAmount The minimum acceptable amount of ETH to buy.\n    /// @param auxiliaryData Arbitrary auxiliary data supplied to the contract.\n    /// @return boughtAmount The amount of ETH bought.\n    function sellTokenForEth(\n        IERC20TokenV06 inputToken,\n        address payable recipient,\n        uint256 minBuyAmount,\n        bytes calldata auxiliaryData\n    )\n        external\n        returns (uint256 boughtAmount);\n\n    /// @dev Quotes the amount of `outputToken` that would be obtained by\n    ///      selling `sellAmount` of `inputToken`.\n    /// @param inputToken Address of the taker token (what to sell). Use\n    ///        the wETH address if selling ETH.\n    /// @param outputToken Address of the maker token (what to buy). Use\n    ///        the wETH address if buying ETH.\n    /// @param sellAmount Amount of `inputToken` to sell.\n    /// @return outputTokenAmount Amount of `outputToken` that would be obtained.\n    function getSellQuote(\n        IERC20TokenV06 inputToken,\n        IERC20TokenV06 outputToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 outputTokenAmount);\n}\n",
        "./MakerPSMSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./SamplerUtils.sol\";\nimport \"@0x/contracts-utils/contracts/src/v06/LibMathV06.sol\";\n\ninterface IPSM {\n    // @dev Get the fee for selling USDC to DAI in PSM\n    // @return tin toll in [wad]\n    function tin() external view returns (uint256);\n    // @dev Get the fee for selling DAI to USDC in PSM\n    // @return tout toll out [wad]\n    function tout() external view returns (uint256);\n\n    // @dev Get the address of the PSM state Vat\n    // @return address of the Vat\n    function vat() external view returns (address);\n\n    // @dev Get the address of the underlying vault powering PSM\n    // @return address of gemJoin contract\n    function gemJoin() external view returns (address);\n\n    // @dev Get the address of DAI\n    // @return address of DAI contract\n    function dai() external view returns (address);\n\n    // @dev Sell USDC for DAI\n    // @param usr The address of the account trading USDC for DAI.\n    // @param gemAmt The amount of USDC to sell in USDC base units\n    function sellGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n    // @dev Buy USDC for DAI\n    // @param usr The address of the account trading DAI for USDC\n    // @param gemAmt The amount of USDC to buy in USDC base units\n    function buyGem(\n        address usr,\n        uint256 gemAmt\n    ) external;\n}\n\ninterface IVAT {\n    // @dev Get a collateral type by identifier\n    // @param ilkIdentifier bytes32 identifier. Example: ethers.utils.formatBytes32String(\"PSM-USDC-A\")\n    // @return ilk\n    // @return ilk.Art Total Normalised Debt in wad\n    // @return ilk.rate Accumulated Rates in ray\n    // @return ilk.spot Price with Safety Margin in ray\n    // @return ilk.line Debt Ceiling in rad\n    // @return ilk.dust Urn Debt Floor in rad\n    function ilks(\n        bytes32 ilkIdentifier\n    ) external view returns (\n        uint256 Art,\n        uint256 rate,\n        uint256 spot,\n        uint256 line,\n        uint256 dust\n    );\n}\n\ncontract MakerPSMSampler is\n    SamplerUtils\n{\n    using LibSafeMathV06 for uint256;\n\n    /// @dev Information about which PSM module to use\n    struct MakerPsmInfo {\n        address psmAddress;\n        bytes32 ilkIdentifier;\n        address gemTokenAddress;\n    }\n\n    /// @dev Gas limit for MakerPsm calls.\n    uint256 constant private MAKER_PSM_CALL_GAS = 300e3; // 300k\n\n\n    // Maker units\n    // wad: fixed point decimal with 18 decimals (for basic quantities, e.g. balances)\n    uint256 constant private WAD = 10 ** 18;\n    // ray: fixed point decimal with 27 decimals (for precise quantites, e.g. ratios)\n    uint256 constant private RAY = 10 ** 27;\n    // rad: fixed point decimal with 45 decimals (result of integer multiplication with a wad and a ray)\n    uint256 constant private RAD = 10 ** 45;\n    // See https://github.com/makerdao/dss/blob/master/DEVELOPING.m\n\n    /// @dev Sample sell quotes from Maker PSM\n    function sampleSellsFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = _samplePSMSell(psmInfo, makerToken, takerToken, takerTokenAmounts[i], psm, vat);\n\n            if (buyAmount == 0) {\n                break;\n            }\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n\n    function sampleBuysFromMakerPsm(\n        MakerPsmInfo memory psmInfo,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        IPSM psm = IPSM(psmInfo.psmAddress);\n        IVAT vat = IVAT(psm.vat());\n\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        if (makerToken != psm.dai() && takerToken != psm.dai()) {\n            return takerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 sellAmount = _samplePSMBuy(psmInfo, makerToken, takerToken, makerTokenAmounts[i], psm, vat);\n\n            if (sellAmount == 0) {\n                break;\n            }\n\n            takerTokenAmounts[i] = sellAmount;\n        }\n\n    }\n\n    function _samplePSMSell(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 takerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n        uint256 gemTokenBaseUnit = uint256(1e6);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            // Convert USDC 6 decimals to 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount.safeMul(1e12);\n\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 feeInWad = takerTokenAmountInWad.safeMul(psm.tin()).safeDiv(WAD);\n            uint256 makerTokenAmountInWad = takerTokenAmountInWad.safeSub(feeInWad);\n\n            return makerTokenAmountInWad;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            // Selling DAI for USDC, already in 18 decimals [wad]\n            uint256 takerTokenAmountInWad = takerTokenAmount;\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy from it\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n            uint256 feeDivisorInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 makerTokenAmountInGemTokenBaseUnits =  takerTokenAmountInWad.safeMul(gemTokenBaseUnit).safeDiv(feeDivisorInWad);\n\n            return makerTokenAmountInGemTokenBaseUnits;\n        }\n\n        return 0;\n    }\n\n    function _samplePSMBuy(MakerPsmInfo memory psmInfo, address makerToken, address takerToken, uint256 makerTokenAmount, IPSM psm, IVAT vat)\n        private\n        view\n        returns (uint256)\n    {\n        (uint256 totalDebtInWad,,, uint256 debtCeilingInRad, uint256 debtFloorInRad) = vat.ilks(psmInfo.ilkIdentifier);\n\n        if (takerToken == psmInfo.gemTokenAddress) {\n            // Simulate sellGem\n            // Selling USDC to the PSM, increasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount;\n            uint256 feeDivisorInWad = WAD.safeSub(psm.tin()); // eg. 0.999 * 10 ** 18 with 0.1% tin;\n            uint256 takerTokenAmountInWad = makerTokenAmountInWad.safeMul(WAD).safeDiv(feeDivisorInWad);\n            uint256 newTotalDebtInRad = totalDebtInWad.safeAdd(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is too full to fit\n            if (newTotalDebtInRad >= debtCeilingInRad) {\n                return 0;\n            }\n\n            uint256 takerTokenAmountInGemInGemBaseUnits = (takerTokenAmountInWad.safeDiv(1e12)).safeAdd(1); // Add 1 to deal with cut off decimals converting to lower decimals\n\n            return takerTokenAmountInGemInGemBaseUnits;\n        } else if (makerToken == psmInfo.gemTokenAddress) {\n            // Simulate buyGem\n            // Buying USDC from the PSM, decreasing the total debt\n            uint256 makerTokenAmountInWad = makerTokenAmount.safeMul(1e12);\n            uint256 feeMultiplierInWad = WAD.safeAdd(psm.tout()); // eg. 1.001 * 10 ** 18 with 0.1% tout;\n            uint256 takerTokenAmountInWad =  makerTokenAmountInWad.safeMul(feeMultiplierInWad).safeDiv(WAD);\n            if (takerTokenAmountInWad > totalDebtInWad) {\n                return 0;\n            }\n            uint256 newTotalDebtInRad = totalDebtInWad.safeSub(takerTokenAmountInWad).safeMul(RAY);\n\n            // PSM is empty, not enough USDC to buy\n            if (newTotalDebtInRad <= debtFloorInRad) {\n                return 0;\n            }\n\n\n            return takerTokenAmountInWad;\n        }\n\n        return 0;\n    }\n\n}\n",
        "./MultiBridgeSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMultiBridge.sol\";\n\n\ncontract MultiBridgeSampler {\n\n    /// @dev Default gas limit for multibridge calls.\n    uint256 constant private DEFAULT_CALL_GAS = 400e3; // 400k\n\n    /// @dev Sample sell quotes from MultiBridge.\n    /// @param multibridge Address of the MultiBridge contract.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMultiBridge(\n        address multibridge,\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        // If no address provided, return all zeros.\n        if (multibridge == address(0)) {\n            return makerTokenAmounts;\n        }\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                multibridge.staticcall.gas(DEFAULT_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        IMultiBridge(0).getSellQuote.selector,\n                        takerToken,\n                        intermediateToken,\n                        makerToken,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n            // Exit early if the amount is too high for the source to serve\n            if (buyAmount == 0) {\n                break;\n            }\n\n            makerTokenAmounts[i] = buyAmount;\n        }\n    }\n}\n",
        "./interfaces/IMultiBridge.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMultiBridge {\n\n    /// @dev Transfers `amount` of the ERC20 `tokenAddress` from `from` to `to`.\n    /// @param tokenAddress The address of the ERC20 token to transfer.\n    /// @param from Address to transfer asset from.\n    /// @param to Address to transfer asset to.\n    /// @param amount Amount of asset to transfer.\n    /// @param bridgeData Arbitrary asset data needed by the bridge contract.\n    /// @return success The magic bytes `0xdc1600f3` if successful.\n    function bridgeTransferFrom(\n        address tokenAddress,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata bridgeData\n    )\n        external\n        returns (bytes4 success);\n\n    /// @dev Quotes the amount of `makerToken` that would be obtained by\n    ///      selling `sellAmount` of `takerToken`.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param intermediateToken The address of the intermediate token to\n    ///        use in an indirect route.\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param sellAmount Amount of `takerToken` to sell.\n    /// @return makerTokenAmount Amount of `makerToken` that would be obtained.\n    function getSellQuote(\n        address takerToken,\n        address intermediateToken,\n        address makerToken,\n        uint256 sellAmount\n    )\n        external\n        view\n        returns (uint256 makerTokenAmount);\n}\n",
        "./MStableSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMStable.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MStableSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Default gas limit for mStable calls.\n    uint256 constant private DEFAULT_CALL_GAS = 800e3; // 800k\n\n    /// @dev Sample sell quotes from the mStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IMStable(router).getSwapOutput\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from MStable contract\n    /// @param router Address of the mStable contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMStable(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, router),\n                takerTokenData: abi.encode(takerToken, router),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMStable\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMStable(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address router) =\n            abi.decode(takerTokenData, (address, address));\n        (address makerToken) =\n            abi.decode(makerTokenData, (address));\n        try\n            this.sampleSellsFromMStable\n                (router, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IMStable.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMStable {\n\n    function getSwapOutput(\n        address _input,\n        address _output,\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256 swapOutput);\n}\n",
        "./MooniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IMooniswap.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract MooniswapSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Gas limit for Mooniswap calls.\n    uint256 constant private MOONISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            uint256 buyAmount = sampleSingleSellFromMooniswapPool(\n                registry,\n                takerToken,\n                makerToken,\n                takerTokenAmounts[i]\n            );\n            makerTokenAmounts[i] = buyAmount;\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function sampleSingleSellFromMooniswapPool(\n        address registry,\n        address mooniswapTakerToken,\n        address mooniswapMakerToken,\n        uint256 takerTokenAmount\n    )\n        public\n        view\n        returns (uint256)\n    {\n        // Find the pool for the pair.\n        IMooniswap pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(mooniswapTakerToken, mooniswapMakerToken)\n        );\n        // If there is no pool then return early\n        if (address(pool) == address(0)) {\n            return 0;\n        }\n        uint256 poolBalance = mooniswapTakerToken == address(0)\n            ? address(pool).balance\n            : IERC20TokenV06(mooniswapTakerToken).balanceOf(address(pool));\n        // If the pool balance is smaller than the sell amount\n        // don't sample to avoid multiplication overflow in buys\n        if (poolBalance < takerTokenAmount) {\n            return 0;\n        }\n        try\n            pool.getReturn\n                {gas: MOONISWAP_CALL_GAS}\n                (mooniswapTakerToken, mooniswapMakerToken, takerTokenAmount)\n            returns (uint256 amount)\n        {\n            return amount;\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n\n    /// @dev Sample buy quotes from Mooniswap.\n    /// @param registry Address of the Mooniswap Registry.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return pool The contract address for the pool\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromMooniswap(\n        address registry,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (IMooniswap pool, uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        takerTokenAmounts = _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(registry, makerToken),\n                takerTokenData: abi.encode(registry, takerToken),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromMooniswap\n            }),\n            makerTokenAmounts\n        );\n\n        pool = IMooniswap(\n            IMooniswapRegistry(registry).pools(takerToken, makerToken)\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromMooniswap(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address registry, address mooniswapTakerToken) = abi.decode(takerTokenData, (address, address));\n        (address _registry, address mooniswapMakerToken) = abi.decode(makerTokenData, (address, address));\n        return sampleSingleSellFromMooniswapPool(\n            registry,\n            mooniswapTakerToken,\n            mooniswapMakerToken,\n            sellAmount\n        );\n    }\n}\n",
        "./interfaces/IMooniswap.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IMooniswapRegistry {\n\n    function pools(address token1, address token2) external view returns(address);\n}\n\ninterface IMooniswap {\n\n    function getReturn(\n        address fromToken,\n        address destToken,\n        uint256 amount\n    )\n        external\n        view\n        returns(uint256 returnAmount);\n}\n",
        "./ShellSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./ApproximateBuys.sol\";\nimport \"./interfaces/IShell.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ncontract ShellSampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n\n    struct ShellInfo {\n        address poolAddress;\n    }\n\n    /// @dev Default gas limit for Shell calls.\n    uint256 constant private DEFAULT_CALL_GAS = 300e3; // 300k\n\n    /// @dev Sample sell quotes from the Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Initialize array of maker token amounts.\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IShell(pool).viewOriginSwap\n                    {gas: DEFAULT_CALL_GAS}\n                    (takerToken, makerToken, takerTokenAmounts[i])\n                returns (uint256 amount)\n            {\n                makerTokenAmounts[i] = amount;\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Shell pool contract\n    /// @param pool Address of the Shell pool contract\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromShell(\n        address pool,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(makerToken, pool),\n                takerTokenData: abi.encode(takerToken, pool),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromShell\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromShell(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (address takerToken, address pool) = abi.decode(takerTokenData, (address, address));\n        (address makerToken) = abi.decode(makerTokenData, (address));\n\n        try\n            this.sampleSellsFromShell\n                (pool, takerToken, makerToken, _toSingleValueArray(sellAmount))\n            returns (uint256[] memory amounts)\n        {\n            return amounts[0];\n        } catch (bytes memory) {\n            // Swallow failures, leaving all results as zero.\n            return 0;\n        }\n    }\n}\n",
        "./interfaces/IShell.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IShell {\n\n    function viewOriginSwap (\n        address from,\n        address to,\n        uint256 fromAmount\n    )\n        external\n        view\n        returns (uint256 toAmount);\n\n    function viewTargetSwap (\n        address from,\n        address to,\n        uint256 toAmount\n    )\n        external\n        view\n        returns (uint256 fromAmount);\n}\n\n",
        "./SmoothySampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\n// import \"./interfaces/ISmoothy.sol\";\nimport \"./ApproximateBuys.sol\";\nimport \"./SamplerUtils.sol\";\nimport \"./interfaces/ISmoothy.sol\";\n\ncontract SmoothySampler is\n    SamplerUtils,\n    ApproximateBuys\n{\n    /// @dev Information for sampling from smoothy sources.\n    struct SmoothyInfo {\n        address poolAddress;\n        bytes4 sellQuoteFunctionSelector;\n        bytes4 buyQuoteFunctionSelector;\n    }\n\n    /// @dev Base gas limit for Smoothy calls.\n    uint256 constant private SMOOTHY_CALL_GAS = 600e3;\n\n    /// @dev Sample sell quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        // Basically a Curve fork\n\n        // Smoothy only keep a percentage of its tokens available in reserve\n        uint256 poolReserveMakerAmount = ISmoothy(smoothyInfo.poolAddress).getBalance(uint256(toTokenIdx)) -\n                                         ISmoothy(smoothyInfo.poolAddress)._yBalances(uint256(toTokenIdx));\n        (, , , uint256 decimals) = ISmoothy(smoothyInfo.poolAddress).getTokenStats(uint256(toTokenIdx));\n        poolReserveMakerAmount = poolReserveMakerAmount/(10**(18-decimals));\n\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            (bool didSucceed, bytes memory resultData) =\n                smoothyInfo.poolAddress.staticcall.gas(SMOOTHY_CALL_GAS)(\n                    abi.encodeWithSelector(\n                        smoothyInfo.sellQuoteFunctionSelector,\n                        fromTokenIdx,\n                        toTokenIdx,\n                        takerTokenAmounts[i]\n                    ));\n            uint256 buyAmount = 0;\n            if (didSucceed) {\n                buyAmount = abi.decode(resultData, (uint256));\n            }\n\n            // Make sure the quoted buyAmount is available in the pool reserve\n            if (buyAmount >= poolReserveMakerAmount) {\n                // Assign pool reserve amount for all higher samples to break early\n                for (uint256 j = i; j < numSamples; j++) {\n                    makerTokenAmounts[j] = poolReserveMakerAmount;\n                }\n                break;\n            } else {\n                makerTokenAmounts[i] = buyAmount;\n            }\n\n            // Break early if there are 0 amounts\n            if (makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Smoothy.\n    /// @param smoothyInfo Smoothy information specific to this token pair.\n    /// @param fromTokenIdx Index of the taker token (what to sell).\n    /// @param toTokenIdx Index of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromSmoothy(\n        SmoothyInfo memory smoothyInfo,\n        int128 fromTokenIdx,\n        int128 toTokenIdx,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        // Buys not supported so approximate it.\n        return _sampleApproximateBuys(\n            ApproximateBuyQuoteOpts({\n                makerTokenData: abi.encode(toTokenIdx, smoothyInfo),\n                takerTokenData: abi.encode(fromTokenIdx, smoothyInfo),\n                getSellQuoteCallback: _sampleSellForApproximateBuyFromSmoothy\n            }),\n            makerTokenAmounts\n        );\n    }\n\n    function _sampleSellForApproximateBuyFromSmoothy(\n        bytes memory takerTokenData,\n        bytes memory makerTokenData,\n        uint256 sellAmount\n    )\n        private\n        view\n        returns (uint256 buyAmount)\n    {\n        (int128 takerTokenIdx, SmoothyInfo memory smoothyInfo) =\n            abi.decode(takerTokenData, (int128, SmoothyInfo));\n        (int128 makerTokenIdx) =\n            abi.decode(makerTokenData, (int128));\n        (bool success, bytes memory resultData) =\n            address(this).staticcall(abi.encodeWithSelector(\n                this.sampleSellsFromSmoothy.selector,\n                smoothyInfo,\n                takerTokenIdx,\n                makerTokenIdx,\n                _toSingleValueArray(sellAmount)\n            ));\n        if (!success) {\n            return 0;\n        }\n        // solhint-disable-next-line indent\n        return abi.decode(resultData, (uint256[]))[0];\n    }\n}\n",
        "./interfaces/ISmoothy.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2021 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface ISmoothy {\n\n    function getBalance (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function _yBalances (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 balance);\n\n    function getTokenStats (\n        uint256 tid\n    )\n        external\n        view\n        returns (uint256 softWeight, uint256 hardWeight, uint256 balance, uint256 decimals);\n}\n",
        "./TwoHopSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"@0x/contracts-utils/contracts/src/v06/LibBytesV06.sol\";\n\n\ncontract TwoHopSampler {\n    using LibBytesV06 for bytes;\n\n    struct HopInfo {\n        address to;\n        bytes data;\n    }\n\n    struct TwoHopResult {\n        uint256 outputAmount;\n        uint256 firstHopIndex;\n        bytes firstHopResult;\n        uint256 secondHopIndex;\n        bytes secondHopResult;\n    }\n\n    function sampleTwoHopSell(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 sellAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        uint256 intermediateAssetAmount = 0;\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, sellAmount);\n            (bool didSucceed, bytes memory returnData) = address(firstHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > intermediateAssetAmount) {\n                    intermediateAssetAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == 0) {\n            return result;\n        }\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(secondHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (amount > result.outputAmount) {\n                    result.outputAmount = amount;\n                    result.secondHopIndex = i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n    }\n\n    function sampleTwoHopBuy(\n        HopInfo[] memory firstHopCalls,\n        HopInfo[] memory secondHopCalls,\n        uint256 buyAmount\n    )\n        public\n        returns (TwoHopResult memory result)\n    {\n        result.outputAmount = uint256(-1);\n        uint256 intermediateAssetAmount = uint256(-1);\n        for (uint256 i = 0; i != secondHopCalls.length; ++i) {\n            bytes memory data = secondHopCalls[i].data;\n            data.writeUint256(data.length - 32, buyAmount);\n            (bool didSucceed, bytes memory returnData) = address(secondHopCalls[i].to).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < intermediateAssetAmount\n                ) {\n                    intermediateAssetAmount = amount;\n                    result.secondHopIndex= i;\n                    result.secondHopResult = returnData;\n                }\n            }\n        }\n        if (intermediateAssetAmount == uint256(-1)) {\n            return result;\n        }\n        for (uint256 i = 0; i != firstHopCalls.length; ++i) {\n            bytes memory data = firstHopCalls[i].data;\n            data.writeUint256(data.length - 32, intermediateAssetAmount);\n            (bool didSucceed, bytes memory returnData) = address(this).call(data);\n            if (didSucceed) {\n                uint256 amount = returnData.readUint256(returnData.length - 32);\n                if (\n                    amount > 0 &&\n                    amount < result.outputAmount\n                ) {\n                    result.outputAmount = amount;\n                    result.firstHopIndex = i;\n                    result.firstHopResult = returnData;\n                }\n            }\n        }\n    }\n}\n",
        "./UniswapSampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapExchangeQuotes.sol\";\nimport \"./SamplerUtils.sol\";\n\n\ninterface IUniswapExchangeFactory {\n\n    /// @dev Get the exchange for a token.\n    /// @param tokenAddress The address of the token contract.\n    function getExchange(address tokenAddress)\n        external\n        view\n        returns (address);\n}\n\n\ncontract UniswapSampler is\n    SamplerUtils\n{\n    /// @dev Gas limit for Uniswap calls.\n    uint256 constant private UNISWAP_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from Uniswap.\n    /// @param router Address of the Uniswap Router\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethBought;\n                (ethBought, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthInputPrice.selector,\n                    takerTokenAmounts[i]\n                );\n                if (ethBought != 0) {\n                    (makerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(makerTokenExchange),\n                        makerTokenExchange.getEthToTokenInputPrice.selector,\n                        ethBought\n                    );\n                } else {\n                    makerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || makerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from Uniswap.\n    /// @param takerToken Address of the taker token (what to sell).\n    /// @param makerToken Address of the maker token (what to buy).\n    /// @param makerTokenAmounts Maker token sell amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswap(\n        address router,\n        address takerToken,\n        address makerToken,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        _assertValidPair(makerToken, takerToken);\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n\n        IUniswapExchangeQuotes takerTokenExchange = takerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, takerToken);\n        IUniswapExchangeQuotes makerTokenExchange = makerToken == address(0) ?\n            IUniswapExchangeQuotes(0) : _getUniswapExchange(router, makerToken);\n        for (uint256 i = 0; i < numSamples; i++) {\n            bool didSucceed = true;\n            if (makerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(takerTokenExchange),\n                    takerTokenExchange.getTokenToEthOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else if (takerToken == address(0)) {\n                (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n            } else {\n                uint256 ethSold;\n                (ethSold, didSucceed) = _callUniswapExchangePriceFunction(\n                    address(makerTokenExchange),\n                    makerTokenExchange.getEthToTokenOutputPrice.selector,\n                    makerTokenAmounts[i]\n                );\n                if (ethSold != 0) {\n                    (takerTokenAmounts[i], didSucceed) = _callUniswapExchangePriceFunction(\n                        address(takerTokenExchange),\n                        takerTokenExchange.getTokenToEthOutputPrice.selector,\n                        ethSold\n                    );\n                } else {\n                    takerTokenAmounts[i] = 0;\n                }\n            }\n            // Break early if amounts are 0\n            if (!didSucceed || takerTokenAmounts[i] == 0) {\n                break;\n            }\n        }\n    }\n\n    /// @dev Gracefully calls a Uniswap pricing function.\n    /// @param uniswapExchangeAddress Address of an `IUniswapExchangeQuotes` exchange.\n    /// @param functionSelector Selector of the target function.\n    /// @param inputAmount Quantity parameter particular to the pricing function.\n    /// @return outputAmount The returned amount from the function call. Will be\n    ///         zero if the call fails or if `uniswapExchangeAddress` is zero.\n    function _callUniswapExchangePriceFunction(\n        address uniswapExchangeAddress,\n        bytes4 functionSelector,\n        uint256 inputAmount\n    )\n        private\n        view\n        returns (uint256 outputAmount, bool didSucceed)\n    {\n        if (uniswapExchangeAddress == address(0)) {\n            return (outputAmount, didSucceed);\n        }\n        bytes memory resultData;\n        (didSucceed, resultData) =\n            uniswapExchangeAddress.staticcall.gas(UNISWAP_CALL_GAS)(\n                abi.encodeWithSelector(\n                    functionSelector,\n                    inputAmount\n                ));\n        if (didSucceed) {\n            outputAmount = abi.decode(resultData, (uint256));\n        }\n    }\n\n    /// @dev Retrive an existing Uniswap exchange contract.\n    ///      Throws if the exchange does not exist.\n    /// @param router Address of the Uniswap router.\n    /// @param tokenAddress Address of the token contract.\n    /// @return exchange `IUniswapExchangeQuotes` for the token.\n    function _getUniswapExchange(address router, address tokenAddress)\n        private\n        view\n        returns (IUniswapExchangeQuotes exchange)\n    {\n        exchange = IUniswapExchangeQuotes(\n            address(IUniswapExchangeFactory(router)\n            .getExchange(tokenAddress))\n        );\n    }\n}\n",
        "./interfaces/IUniswapExchangeQuotes.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapExchangeQuotes {\n\n    function getEthToTokenInputPrice(\n        uint256 ethSold\n    )\n        external\n        view\n        returns (uint256 tokensBought);\n\n    function getEthToTokenOutputPrice(\n        uint256 tokensBought\n    )\n        external\n        view\n        returns (uint256 ethSold);\n\n    function getTokenToEthInputPrice(\n        uint256 tokensSold\n    )\n        external\n        view\n        returns (uint256 ethBought);\n\n    function getTokenToEthOutputPrice(\n        uint256 ethBought\n    )\n        external\n        view\n        returns (uint256 tokensSold);\n}\n",
        "./UniswapV2Sampler.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\npragma experimental ABIEncoderV2;\n\nimport \"./interfaces/IUniswapV2Router01.sol\";\n\ncontract UniswapV2Sampler\n{\n    /// @dev Gas limit for UniswapV2 calls.\n    uint256 constant private UNISWAPV2_CALL_GAS = 150e3; // 150k\n\n    /// @dev Sample sell quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken\n    /// @param takerTokenAmounts Taker token sell amount for each sample.\n    /// @return makerTokenAmounts Maker amounts bought at each taker token\n    ///         amount.\n    function sampleSellsFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory takerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory makerTokenAmounts)\n    {\n        uint256 numSamples = takerTokenAmounts.length;\n        makerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsOut\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (takerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                makerTokenAmounts[i] = amounts[path.length - 1];\n                // Break early if there are 0 amounts\n                if (makerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n\n    /// @dev Sample buy quotes from UniswapV2.\n    /// @param router Router to look up tokens and amounts\n    /// @param path Token route. Should be takerToken -> makerToken.\n    /// @param makerTokenAmounts Maker token buy amount for each sample.\n    /// @return takerTokenAmounts Taker amounts sold at each maker token\n    ///         amount.\n    function sampleBuysFromUniswapV2(\n        address router,\n        address[] memory path,\n        uint256[] memory makerTokenAmounts\n    )\n        public\n        view\n        returns (uint256[] memory takerTokenAmounts)\n    {\n        uint256 numSamples = makerTokenAmounts.length;\n        takerTokenAmounts = new uint256[](numSamples);\n        for (uint256 i = 0; i < numSamples; i++) {\n            try\n                IUniswapV2Router01(router).getAmountsIn\n                    {gas: UNISWAPV2_CALL_GAS}\n                    (makerTokenAmounts[i], path)\n                returns (uint256[] memory amounts)\n            {\n                takerTokenAmounts[i] = amounts[0];\n                // Break early if there are 0 amounts\n                if (takerTokenAmounts[i] == 0) {\n                    break;\n                }\n            } catch (bytes memory) {\n                // Swallow failures, leaving all results as zero.\n                break;\n            }\n        }\n    }\n}\n",
        "./interfaces/IUniswapV2Router01.sol": "// SPDX-License-Identifier: Apache-2.0\n/*\n\n  Copyright 2020 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.6;\n\n\ninterface IUniswapV2Router01 {\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "compiler": {
        "name": "solc",
        "version": "0.6.12+commit.27d51765",
        "settings": {
            "remappings": [
                "@0x/contracts-utils=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-utils",
                "@0x/contracts-erc20=/home/merklejerk/code/0x-protocol/node_modules/@0x/contracts-erc20",
                "@0x/contracts-zero-ex=/home/merklejerk/code/0x-protocol/packages/asset-swapper/node_modules/@0x/contracts-zero-ex"
            ],
            "optimizer": {
                "enabled": true,
                "runs": 200,
                "details": {
                    "yul": true,
                    "deduplicate": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul"
        }
    },
    "chains": {}
}
